{"entries":[{"timestamp":1728761585847,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"x=\"4"],[-1,"751"],[1,"643"],[0,"\" y=\"-1"],[-1,"215"],[1,"112"],[0,"\"><m"]],"start1":1229,"start2":1229,"length1":21,"length2":21},{"diffs":[[0,"x=\"5"],[-1,"448"],[1,"343"],[0,"\" y=\"-1"],[-1,"213"],[1,"106"],[0,"\"><m"]],"start1":2155,"start2":2155,"length1":21,"length2":21},{"diffs":[[0," x=\""],[-1,"646"],[1,"548"],[0,"\" y=\""],[-1,"269"],[1,"160"],[0,"\"><f"]],"start1":14479,"start2":14479,"length1":19,"length2":19},{"diffs":[[0,"x=\"2"],[-1,"536"],[1,"411"],[0,"\" y=\""],[-1,"566"],[1,"360"],[0,"\"><m"]],"start1":29790,"start2":29790,"length1":19,"length2":19},{"diffs":[[0,"ock "],[-1,"type=\"every_interval\" x=\"1006\" y=\"713\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block "],[0,"type"]],"start1":48306,"start2":48306,"length1":160,"length2":8},{"diffs":[[0,"x=\"3"],[-1,"549"],[1,"422"],[0,"\" y=\""],[-1,"584"],[1,"386"],[0,"\"><v"]],"start1":48337,"start2":48337,"length1":19,"length2":19},{"diffs":[[0,"></block><block "],[1,"type=\"every_interval\" x=\"1006\" y=\"713\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block "],[0,"type=\"nl_digits_"]],"start1":66797,"start2":66797,"length1":32,"length2":184}]},{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"\n       "],[-1," //"],[0," show() "]],"start1":3297,"start2":3297,"length1":19,"length2":16},{"diffs":[[0,"p.\n\n"],[-1,"        show() { \n            sendBuffer(this.buf, DigitalPin.P0); \n            sendBuffer(this.buf, this.pin);\n        }  //Send all the changes to the strip.\n\n"],[0,"    "]],"start1":3384,"start2":3384,"length1":169,"length2":8},{"diffs":[[0,"ePin, 8)\n       "],[-1," //"],[0," NeoSock = creat"]],"start1":4547,"start2":4547,"length1":35,"length2":32},{"diffs":[[0,"kPin, 8)\n       "],[-1," //"],[0," NeoWheel = crea"]],"start1":4584,"start2":4584,"length1":35,"length2":32},{"diffs":[[0,"ount = 8"],[1," + 8 + 18"],[0,"\n       "]],"start1":4652,"start2":4652,"length1":16,"length2":25},{"diffs":[[0,"fxInit()\n       "],[-1," //"],[0," vfx_indicate_hu"]],"start1":4679,"start2":4679,"length1":35,"length2":32},{"diffs":[[0,"es.green\n       "],[-1," //"],[0," vfx_indicate_hu"]],"start1":4719,"start2":4719,"length1":35,"length2":32},{"diffs":[[0,"s.yellow\n       "],[-1," //"],[0," vfx_indicate_hu"]],"start1":4762,"start2":4762,"length1":35,"length2":32},{"diffs":[[0,"s.orange\n       "],[-1," //"],[0," vfx_indicate_hu"]],"start1":4805,"start2":4805,"length1":35,"length2":32},{"diffs":[[0,"hues.red\n       "],[-1," //"],[0," vfx_indicate_hu"]],"start1":4845,"start2":4845,"length1":35,"length2":32},{"diffs":[[0,"hues.red\n       "],[-1," //"],[0," vfx_indicate_hu"]],"start1":4885,"start2":4885,"length1":35,"length2":32},{"diffs":[[0,"hues.red\n       "],[-1," //"],[0," vfx_indicate_hu"]],"start1":4925,"start2":4925,"length1":35,"length2":32},{"diffs":[[0,".red\n       "],[-1," //"],[0," vfx_indicat"]],"start1":4969,"start2":4969,"length1":27,"length2":24},{"diffs":[[0,"ndex = 0\n       "],[-1," //"],[0," for (let index "]],"start1":18894,"start2":18894,"length1":35,"length2":32},{"diffs":[[0,"ndex++){\n       "],[-1," //"],[0,"     NeoSock.set"]],"start1":18958,"start2":18958,"length1":35,"length2":32},{"diffs":[[0,"rIndex])\n       "],[-1," //"],[0,"     masterIndex"]],"start1":19091,"start2":19091,"length1":35,"length2":32},{"diffs":[[0,"rIndex++\n       "],[-1," //"],[0," }\n        // fo"]],"start1":19117,"start2":19117,"length1":35,"length2":32},{"diffs":[[0,"\n       "],[-1," //"],[0," for (le"]],"start1":19135,"start2":19135,"length1":19,"length2":16},{"diffs":[[0,"+) {\n       "],[-1," //"],[0,"     NeoWhee"]],"start1":19197,"start2":19197,"length1":27,"length2":24},{"diffs":[[0,"\n       "],[-1," //"],[0,"     mas"]],"start1":19335,"start2":19335,"length1":19,"length2":16},{"diffs":[[0,"\n       "],[-1," //"],[0," }\n     "]],"start1":19361,"start2":19361,"length1":19,"length2":16},{"diffs":[[0,"   }\n       "],[-1," //"],[0," NeoSock.sho"]],"start1":19603,"start2":19603,"length1":27,"length2":24},{"diffs":[[0,"\n       "],[-1," //"],[0," NeoWhee"]],"start1":19630,"start2":19630,"length1":19,"length2":16}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"t"],[1,"block"],[0,"sprj\"\n}\n"]],"start1":495,"start2":495,"length1":17,"length2":21}]}]},{"timestamp":1728762079723,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"talPin.P"],[-1,"16"],[1,"0"],[0,"); \n    "]],"start1":3446,"start2":3446,"length1":18,"length2":17},{"diffs":[[0,"uf, "],[-1,"DigitalPin.P15);\n            sendBuffer(this.buf, DigitalPin.P14);\n            sendBuffer(this.buf, DigitalPin.P13"],[1,"this.pin"],[0,");\n "]],"start1":3488,"start2":3488,"length1":122,"length2":16},{"diffs":[[0,": void {\n       "],[-1," //"],[0," NeoScore = crea"]],"start1":4672,"start2":4672,"length1":35,"length2":32},{"diffs":[[0,"kPin, 8)\n       "],[1," //"],[0," NeoWheel = crea"]],"start1":4751,"start2":4751,"length1":32,"length2":35},{"diffs":[[0,"count = "],[-1,"1"],[0,"8\n      "]],"start1":4821,"start2":4821,"length1":17,"length2":16},{"diffs":[[0,"    // }\n       "],[1," //"],[0," for (let index "]],"start1":19324,"start2":19324,"length1":32,"length2":35},{"diffs":[[0,"dex++) {\n       "],[1," //"],[0,"     NeoWheel.se"]],"start1":19393,"start2":19393,"length1":32,"length2":35},{"diffs":[[0,"rIndex])\n       "],[1," //"],[0,"     masterIndex"]],"start1":19530,"start2":19530,"length1":32,"length2":35},{"diffs":[[0,"rIndex++\n       "],[1," //"],[0," }\n        // fo"]],"start1":19559,"start2":19559,"length1":32,"length2":35},{"diffs":[[0,"    // }\n       "],[-1," //"],[0," for (let index "]],"start1":19572,"start2":19572,"length1":35,"length2":32},{"diffs":[[0,"dex++) {\n       "],[-1," //"],[0,"     NeoScore.se"]],"start1":19638,"start2":19638,"length1":35,"length2":32},{"diffs":[[0,"rIndex])\n       "],[-1," //"],[0,"     masterIndex"]],"start1":19772,"start2":19772,"length1":35,"length2":32},{"diffs":[[0,"rIndex++\n       "],[-1," //"],[0," }\n        // Ne"]],"start1":19798,"start2":19798,"length1":35,"length2":32},{"diffs":[[0,"ow()\n       "],[1," //"],[0," NeoWheel.sh"]],"start1":19838,"start2":19838,"length1":24,"length2":27},{"diffs":[[0,"ow()\n       "],[-1," //"],[0," NeoScore.sh"]],"start1":19865,"start2":19865,"length1":27,"length2":24}]}]},{"timestamp":1728762606023,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"3);\n"],[-1,"            sendBuffer(this.buf, DigitalPin.P12);\n            sendBuffer(this.buf, DigitalPin.P8);\n"],[0,"    "]],"start1":3606,"start2":3606,"length1":107,"length2":8},{"diffs":[[0,"e(wheelPin, "],[-1,"20"],[1,"18"],[0,")\n        vf"]],"start1":4894,"start2":4894,"length1":26,"length2":26},{"diffs":[[0,"count = "],[-1,"20"],[1,"18"],[0,"\n       "]],"start1":4928,"start2":4928,"length1":18,"length2":18}]}]},{"timestamp":1728763160093,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"eelPin, "],[-1,"1"],[1,"2"],[0,"0)\n     "]],"start1":4997,"start2":4997,"length1":17,"length2":17},{"diffs":[[0,"count = "],[-1,"17"],[1,"20"],[0,"\n       "]],"start1":5027,"start2":5027,"length1":18,"length2":18}]}]},{"timestamp":1728763290431,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"8);\n"],[-1,"            sendBuffer(this.buf, DigitalPin.P8);\n"],[0,"    "]],"start1":3705,"start2":3705,"length1":57,"length2":8}]}]},{"timestamp":1728764098936,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"talPin.P"],[1,"8"],[0,");\n     "]],"start1":3746,"start2":3746,"length1":16,"length2":17}]}]},{"timestamp":1728764101611,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"talPin.P"],[-1,"2"],[0,");\n     "]],"start1":3746,"start2":3746,"length1":17,"length2":16}]}]},{"timestamp":1728764102145,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0," }\n\n"],[-1,"        setPixelHSLPrecise(pixeloffset: number, h: number, s: number, l: number): void {\n            if (pixeloffset < 0 || pixeloffset >= this._length)\n                return;\n            pixeloffset = (pixeloffset + this.start) * 3\n            h = Math.clamp(0, 1, h / 360)\n            s = Math.clamp(0, 1, s / 100)\n            l = Math.clamp(0, 1, l / 100)\n            let r, g, b;\n            if (s === 0) {\n                r = g = b = l; // achromatic\n            } else {\n                const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n                const p = 2 * l - q;\n                r = this.hueToRgb(p, q, h + 1 / 3);\n                g = this.hueToRgb(p, q, h);\n                b = this.hueToRgb(p, q, h - 1 / 3);\n            }\n            this.buf[pixeloffset + 0] = Math.round(g * 255);\n            this.buf[pixeloffset + 1] = Math.round(r * 255);\n            this.buf[pixeloffset + 2] = Math.round(b * 255);\n        }\n\n"],[0,"    "]],"start1":2993,"start2":2993,"length1":944,"length2":8}]}]},{"timestamp":1728781641086,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"  }\n\n       "],[-1," //"],[0," setPixelHSL"]],"start1":2992,"start2":2992,"length1":27,"length2":24},{"diffs":[[0,": void {\n       "],[-1," //"],[0,"     if (pixelof"]],"start1":3077,"start2":3077,"length1":35,"length2":32},{"diffs":[[0,"        "],[-1,"//"],[0,"        "],[-1," "],[0,"return;\n"]],"start1":3150,"start2":3150,"length1":27,"length2":24},{"diffs":[[0,"urn;\n       "],[-1," //"],[0,"     pixelof"]],"start1":3169,"start2":3169,"length1":27,"length2":24},{"diffs":[[0," * 3\n       "],[-1," //"],[0,"     h = Mat"]],"start1":3226,"start2":3226,"length1":27,"length2":24},{"diffs":[[0,"360)\n       "],[-1," //"],[0,"     s = Mat"]],"start1":3268,"start2":3268,"length1":27,"length2":24},{"diffs":[[0,"        "],[-1,"//"],[0,"    "],[-1," "],[0,"l = Math"]],"start1":3315,"start2":3315,"length1":23,"length2":20},{"diffs":[[0,"100)\n       "],[-1," //"],[0,"     let r, "]],"start1":3352,"start2":3352,"length1":27,"length2":24},{"diffs":[[0,", b;\n       "],[-1," //"],[0,"     if (s ="]],"start1":3377,"start2":3377,"length1":27,"length2":24},{"diffs":[[0,"=== 0) {\n       "],[-1," //"],[0,"         r = g ="]],"start1":3400,"start2":3400,"length1":35,"length2":32},{"diffs":[[0,"        "],[-1,"//"],[0,"    "],[-1," "],[0,"} else {"]],"start1":3454,"start2":3454,"length1":23,"length2":20},{"diffs":[[0,"} else {\n       "],[-1," //"],[0,"         const q"]],"start1":3466,"start2":3466,"length1":35,"length2":32},{"diffs":[[0,"- l * s;\n       "],[-1," //"],[0,"         const p"]],"start1":3531,"start2":3531,"length1":35,"length2":32},{"diffs":[[0,"* l - q;\n       "],[-1," //"],[0,"         r = thi"]],"start1":3568,"start2":3568,"length1":35,"length2":32},{"diffs":[[0," 1 / 3);\n       "],[-1," //"],[0,"         g = thi"]],"start1":3620,"start2":3620,"length1":35,"length2":32},{"diffs":[[0," h);\n       "],[-1," //"],[0,"         b ="]],"start1":3668,"start2":3668,"length1":27,"length2":24},{"diffs":[[0," 3);\n       "],[-1," //"],[0,"     }\n     "]],"start1":3720,"start2":3720,"length1":27,"length2":24},{"diffs":[[0,"       }\n       "],[-1," //"],[0,"     this.buf[pi"]],"start1":3730,"start2":3730,"length1":35,"length2":32},{"diffs":[[0,"* 255);\n        "],[-1,"//"],[0,"    "],[-1," "],[0,"this.buf[pixelof"]],"start1":3792,"start2":3792,"length1":39,"length2":36},{"diffs":[[0,"55);\n       "],[-1," //"],[0,"     this.bu"]],"start1":3856,"start2":3856,"length1":27,"length2":24},{"diffs":[[0,"\n       "],[-1," //"],[0," }\n\n    "]],"start1":3921,"start2":3921,"length1":19,"length2":16}]}]},{"timestamp":1728781644030,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"    "],[-1,"\n                \n                \n                r = this.hueToRgb(p, q, h + 1 / 3);\n\n                t = h + 1 / 3\n                if (t < 0) t += 1;\n                if (t > 1) t -= 1;\n                if (t < 1 / 6) return p + (q - p) * 6 * t;\n                if (t < 1 / 2) return q;\n                if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n                return p;\n\n\n\n\n"],[1,"r = this.hueToRgb(p, q, h + 1 / 3);"],[0,"\n   "]],"start1":2653,"start2":2653,"length1":395,"length2":43}]}]},{"timestamp":1728782187153,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"        "],[-1," //"],[0," r = thi"]],"start1":2699,"start2":2699,"length1":19,"length2":16},{"diffs":[[0,"        "],[-1,"let "],[0,"t = h + "]],"start1":2753,"start2":2753,"length1":20,"length2":16},{"diffs":[[0," = h + 1"],[-1,"/"],[1," / "],[0,"3\n      "]],"start1":2762,"start2":2762,"length1":17,"length2":19},{"diffs":[[0,"< 0)"],[-1," {"],[0," t += 1;"],[-1," }"],[0,"\n   "]],"start1":2797,"start2":2797,"length1":20,"length2":16},{"diffs":[[0,"            "],[-1,"else "],[0,"if (t > 1) {"]],"start1":2814,"start2":2814,"length1":29,"length2":24},{"diffs":[[0," 1) "],[-1,"{"],[0,"t -= 1;"],[-1," }"],[0,"\n   "]],"start1":2833,"start2":2833,"length1":18,"length2":15},{"diffs":[[0," < 1"],[-1,"/6) {r ="],[1," / 6) return"],[0," p +"]],"start1":2866,"start2":2866,"length1":16,"length2":20},{"diffs":[[0,"* 6 * t;"],[-1,"}"],[0,"\n       "]],"start1":2895,"start2":2895,"length1":17,"length2":16},{"diffs":[[0,"                "],[-1,"else "],[0,"if (t < 1/2) {r "]],"start1":2904,"start2":2904,"length1":37,"length2":32},{"diffs":[[0," < 1"],[-1,"/2) {r ="],[1," / 2) return"],[0," q;"],[-1,"}"],[0,"\n   "]],"start1":2925,"start2":2925,"length1":20,"length2":23},{"diffs":[[0,"            "],[-1,"else "],[0,"if (t < 2/3)"]],"start1":2949,"start2":2949,"length1":29,"length2":24},{"diffs":[[0," < 2"],[-1,"/3) { r ="],[1," / 3) return"],[0," p +"]],"start1":2966,"start2":2966,"length1":17,"length2":20},{"diffs":[[0," p) * (2"],[-1,"/"],[1," / "],[0,"3 - t) *"]],"start1":2991,"start2":2991,"length1":17,"length2":19},{"diffs":[[0," t) * 6;"],[-1," }"],[0,"\n       "]],"start1":3005,"start2":3005,"length1":18,"length2":16},{"diffs":[[0,"    "],[-1,"else { r = p; }"],[1,"return p;\n\n"],[0,"\n\n\n\n"]],"start1":3026,"start2":3026,"length1":23,"length2":19}]}]},{"timestamp":1728782825192,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0," h);"],[-1,"\n\n                let t = h + 1 / 3\n                if (t < 0) { t += 1; }\n                else if (t > 1) { t -= 1; }\n                if (t < 1 / 6) { r = p + (q - p) * 6 * t; }\n                else if (t < 1 / 2) { r = q; }\n                else if (t < 2 / 3) { r = p + (q - p) * (2 / 3 - t) * 6; }\n                else { r = p; }"],[0,"\n   "]],"start1":3106,"start2":3106,"length1":340,"length2":8}]}]},{"timestamp":1728782827802,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0," l - q;\n"],[1,"                \n                \n                \n                // r = this.hueToRgb(p, q, h + 1 / 3);\n\n"],[0,"        "]],"start1":2633,"start2":2633,"length1":16,"length2":123},{"diffs":[[0,"else { r = p; }\n"],[1,"\n\n\n"],[0,"                "]],"start1":3048,"start2":3048,"length1":32,"length2":35},{"diffs":[[0,"        "],[-1,"t = h"],[1,"g = this.hueToRgb(p, q, h);\n\n                let t = h + 1 / 3"],[0,"\n       "]],"start1":3075,"start2":3075,"length1":21,"length2":78},{"diffs":[[0," < 1 / 6) { "],[-1,"g"],[1,"r"],[0," = p + (q - "]],"start1":3250,"start2":3250,"length1":25,"length2":25},{"diffs":[[0," / 2) { "],[-1,"g"],[1,"r"],[0," = q; }\n"]],"start1":3319,"start2":3319,"length1":17,"length2":17},{"diffs":[[0," / 3) { "],[-1,"g"],[1,"r"],[0," = p + ("]],"start1":3366,"start2":3366,"length1":17,"length2":17},{"diffs":[[0,"p + (q - p) * (2"],[-1,"/"],[1," / "],[0,"3 - t) * 6; }\n  "]],"start1":3378,"start2":3378,"length1":33,"length2":35},{"diffs":[[0," else { "],[-1,"g"],[1,"r"],[0," = p; }\n"]],"start1":3426,"start2":3426,"length1":17,"length2":17},{"diffs":[[0,"    "],[-1,"t = h - 1/3"],[1,"b = this.hueToRgb(p, q, h - 1 / 3);"],[0,"\n   "]],"start1":3455,"start2":3455,"length1":19,"length2":43},{"diffs":[[0,"    "],[1,"}\n"],[0,"    "],[-1,"if (t < 0) { t += 1; }"],[1,"        this.buf[pixeloffset + 0] = Math.round(g * 255);\n            this.buf[pixeloffset + 1] = Math.round(r * 255);\n            this.buf[pixeloffset + 2] = Math.round(b * 255);"],[0,"\n   "]],"start1":3503,"start2":3503,"length1":34,"length2":192},{"diffs":[[0,"    "],[1,"}\n\n"],[0,"        "],[-1,"else if (t > 1) { t -= 1; }\n                if (t < 1 / 6) { b = p + (q - p) * 6 * t; }\n   "],[1,"// setPixelHSLPrecise(pixeloffset: number, h: number, s: number, l: number): void {\n        //     if (pixeloffset < 0 || pixeloffset >= this._length)\n        //         return;\n        //     pixeloffset = (pixeloffset + this.start) * 3\n        //     h = Math.clamp(0, 1, h / 360)\n        //     s = Math.clamp(0, 1, s / 100)\n        //     l = Math.clamp(0, 1, l / 100)\n"],[0,"        "],[1,"//"],[0,"     "],[-1,"else if (t < 1/2) {"],[1,"let r, g, b;\n        //     if (s === 0) {\n        //         r = g ="],[0," b = "],[-1,"q; }"],[1,"l; // achromatic"],[0,"\n   "]],"start1":3696,"start2":3696,"length1":148,"length2":497},{"diffs":[[0,"    "],[1,"//"],[0,"     "],[-1,"  "],[1,"}"],[0," else "],[-1,"if (t < 2/3) { b = p + (q - p) * (2/3 - t) * 6; }"],[1,"{\n        //         const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        //         const p = 2 * l - q;\n        //         r = this.hueToRgb(p, q, h + 1 / 3);"],[0,"\n   "]],"start1":4194,"start2":4194,"length1":70,"length2":186},{"diffs":[[0,"    "],[1,"//"],[0,"        "],[-1,"else { b = p; }"],[1," g = this.hueToRgb(p, q, h);\n        //         b = this.hueToRgb(p, q, h - 1 / 3);"],[0,"\n   "]],"start1":4381,"start2":4381,"length1":31,"length2":101},{"diffs":[[0,"1 / 3);\n        "],[1,"//"],[0,"    "],[1," "],[0,"}\n            th"]],"start1":4471,"start2":4471,"length1":36,"length2":39},{"diffs":[[0,"//     }\n       "],[1," //"],[0,"     this.buf[pi"]],"start1":4487,"start2":4487,"length1":32,"length2":35},{"diffs":[[0," * 255);\n       "],[1," //"],[0,"     this.buf[pi"]],"start1":4551,"start2":4551,"length1":32,"length2":35},{"diffs":[[0," * 255);\n       "],[1," //"],[0,"     this.buf[pi"]],"start1":4615,"start2":4615,"length1":32,"length2":35},{"diffs":[[0,"round(b * 255);\n"],[1,"        // }\n\n        hueToRgb(p:number, q:number, t:number) {\n            if (t < 0) t += 1;\n            if (t > 1) t -= 1;\n            if (t < 1 / 6) return p + (q - p) * 6 * t;\n            if (t < 1 / 2) return q;\n            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n            return p;\n"],[0,"        }\n\n     "]],"start1":4672,"start2":4672,"length1":32,"length2":336}]}]},{"timestamp":1728783398234,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"id=\""],[-1,"NFHB?|vd].P(}_Y-C82U\">btToken</variable><variable id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</variable><variable id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</variable><variable id=\"Y|e4lM)*:N0Ca^S5-64i\">lastLaserR</variable><variable id=\"Uk9;F|_3qS]2aZyBH#]%\">lastLaserC</variable><variable id=\"}GOl3M4q[Bn4R~R!?]at\">lastLaserL</variable><variable id=\"JQUQT|8QeX)zSvZ?K@,i\">lastSonarRead</variable><variable id=\"=X]tI5AG]3|WfpT`9Jsr\">lastHue</variable><variable id=\"Bc7kXprAfc3]W%ILxbVV\">lastGesture</variable><variable id=\"#oq[[iBLthN][|]:S!n}\">lastHunt</variable><variable id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</variable><variable id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</variable><variable id=\"8GDUfe;)i@P.Do~T6|{[\">theName</variable><variable id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</variable><variable id=\"=9JavC*{GElF}/FS78a@\">iBegan</variable><variable id=\"e.[{0v-j0Tp(kJ9$~N@:\">isReady</variable></variables><block type=\"function_definition\" x=\"4751\" y=\"-1215\"><mutation name=\"buttonPress\" functionid=\"+$9AXp*X:[tcODdtL9m)\"><arg name=\"button\" id=\"mfdvbnfdsij7xy9ejk0nd\" type=\"string\"></arg></mutation><field name=\"function_name\">buttonPress</field><value name=\"mfdvbnfdsij7xy9ejk0nd\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">button</field></block></value><statement name=\"STACK\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">button: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">button</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></statement></block><block type=\"function_definition\" x=\"5448\" y=\"-1213\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><field name=\"function_name\">radioSay</field><value name=\"vt0gv77qprcayj8xalbs\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">text5</field></block></value><value name=\"ok3p1i8gyn97mv69yabw\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">val</field></block></value><statement name=\"STACK\"><block type=\"radio_datagram_send_value\"><value name=\"name\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value></block></value><value name=\"value\"><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">said: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">7</field></shadow></value></block></next></block></statement></block><block type=\"every_interval\" x=\"100\" y=\"-376\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">2000</field></shadow></value><statement name=\"HANDLER\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value></block></statement></block><block type=\"every_interval\" x=\"773\" y=\"-372\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"input_logo_event\" x=\"2390\" y=\"-353\"><field name=\"action\">TouchButtonEvent.Touched</field><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_MP3_PlayerSay\"><field name=\"saying\">notLegos.playerSaying.ready</field><next><block type=\"NL_MP3_SfxPlay\"><field name=\"sfx\">notLegos.sfxType.fire</field><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.intro</field></block></next></block></next></block></statement></block></statement></block><block type=\"every_interval\" x=\"1817\" y=\"-101\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">40</field></shadow></value><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"=9JavC*{GElF}/FS78a@\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time\"></block></value><next><block type=\"NL_PIXEL_CastleSayTick\"><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"e.[{0v-j0Tp(kJ9$~N@:\">isReady</field></block></value><next><block type=\"function_call\"><mutation name=\"ready_oled\" functionid=\"LSuKu]l*}Y2[|u.h3PJ%\"></mutation><next><block type=\"NL_OLED_Update3\"><next><block type=\"variables_set\"><field name=\"VAR\" id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"=9JavC*{GElF}/FS78a@\">iBegan</field></block></value></block></value></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"pxt-on-start\" x=\"10\" y=\"10\"><statement name=\"HANDLER\"><block type=\"NL_OLED_Init\"><next><block type=\"NL_PIXEL_CastleSay\"><field name=\"sockPin\">DigitalPin.P3</field><field name=\"wheelPin\">DigitalPin.P0</field><field name=\"scorePin\">DigitalPin.P16</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"=9JavC*{GElF}/FS78a@\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time_micros\"></block></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field></block></next></block></next></block></next></block></statement></block><block type=\"every_interval\" x=\"1006\" y=\"713\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"radio_on_value_drag\" x=\"3549\" y=\"584\"><value name=\"HANDLER_DRAG_PARAM_name\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">name</field></block></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">value</field></block></value><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_substr\"><value name=\"this\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value><value name=\"start\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"length\"><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_substr\"><value name=\"this\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value><value name=\"start\"><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value><value name=\"length\"><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text_length\"><value name=\"VALUE\"><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value></block></value></block></value><next><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"controls_if\"><mutation elseif=\"3\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wstar</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_start</field></block></value></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value><statement name=\"DO1\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.welcome</field></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.WheelAll</field><field name=\"effect\">notLegos.vfxEffect.fire</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.intro</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_reg</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">check</field></block></value></block></value><statement name=\"DO2\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">ready</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value></block></statement><statement name=\"ELSE\"><block type=\"controls_if\"><mutation elseif=\"3\" else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">ready</field></block></value></block></value><statement name=\"DO0\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">wstar</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.KongFront</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">boot</field></block></value></block></value><statement name=\"DO1\"><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1000</field></shadow></value></block></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">200</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.idle</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotH</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotI</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">0</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.BrickDragon</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotE</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">tutor</field></block></value></block></value><statement name=\"DO2\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotA</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotB</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value></block></statement><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">heard: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">6</field></shadow></value></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"-562\" y=\"3309\"><mutation name=\"fogFlood\" functionid=\"VFMl!%hPr#$dm7#L!/;e\"></mutation><field name=\"function_name\">fogFlood</field><statement name=\"STACK\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</field></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">10000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">para</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.mid</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.off</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.dancing</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.still</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">8000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.min</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"-120\" y=\"3309\"><mutation name=\"runTutorial\" functionid=\"S6D~vG%3KsCIO0/OH*vo\"></mutation><field name=\"function_name\">runTutorial</field><statement name=\"STACK\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">tutor</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">80</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">20</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.tutorial</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto1</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5950</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto2</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto3</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7600</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto4</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6100</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto5</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">13000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto6</field><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"function_definition\" x=\"236\" y=\"3309\"><mutation name=\"ready_oled\" functionid=\"LSuKu]l*}Y2[|u.h3PJ%\"></mutation><field name=\"function_name\">ready_oled</field><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Say //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"6\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Y|e4lM)*:N0Ca^S5-64i\">lastLaserR</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> C</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Uk9;F|_3qS]2aZyBH#]%\">lastLaserC</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"}GOl3M4q[Bn4R~R!?]at\">lastLaserL</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"8\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">S</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"JQUQT|8QeX)zSvZ?K@,i\">lastSonarRead</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> H</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_js_round\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"=X]tI5AG]3|WfpT`9Jsr\">lastHue</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> G</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Bc7kXprAfc3]W%ILxbVV\">lastGesture</field></block></value><value name=\"ADD6\"><shadow type=\"text\"><field name=\"TEXT\"> N</field></shadow></value><value name=\"ADD7\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"#oq[[iBLthN][|]:S!n}\">lastHunt</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">Mode: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M:</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"NL_MP3_PlaytimeMusic\"></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">4</field></shadow></value></block></next></block></next></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Do //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> T </field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"j|Ef@7)TPMWnE|!`y$SM"],[1,"e(zt=aWo[lY`jeVUoVJF\">btToken</variable><variable id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</variable><variable id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</variable><variable id=\"SRvF%Vl7CRHE66Kr9~Q[\">lastLaserR</variable><variable id=\"%FT#@+cF!r3!,1uelm~,\">lastLaserC</variable><variable id=\"hs_o5`X:I}y9{R2!_miN\">lastLaserL</variable><variable id=\"}%7r;bz7Byg#SEH9P{dG\">lastSonarRead</variable><variable id=\"u#;Y3,}t+?Ue.~vd$_;0\">lastHue</variable><variable id=\"5rh0sr-gnWZKflz~gbRk\">lastGesture</variable><variable id=\"at2[c#F7*{?za?uyOm!i\">lastHunt</variable><variable id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</variable><variable id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</variable><variable id=\"vlNJo2)`QokXI:|N|`c|\">theName</variable><variable id=\"uj8c~)bC/;JXc[2;l@N!\">iTook</variable><variable id=\"m`bxu=!~_Nj|:o?}Kk!^\">iBegan</variable><variable id=\"E3,(6Z)tM(C:#!xxP.d,\">isReady</variable><variable id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</variable><variable id=\"y@Q6YNBYQMe6tF/068bo\">lastVolumeRead</variable><variable id=\"W@//5%rK$%/F|oN!f$h$\">digits</variable><variable id=\"-O:q;^~u%Gff-w{^C`Ou\">lastWater</variable></variables><block type=\"function_definition\" x=\"4751\" y=\"-1215\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><field name=\"function_name\">buttonPress</field><value name=\"ba9wfs6wbjdlsow065y8\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">button</field></block></value><statement name=\"STACK\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">button: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">button</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></statement></block><block type=\"function_definition\" x=\"5448\" y=\"-1213\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><field name=\"function_name\">radioSay</field><value name=\"fxkpgrx3u5x98l61f5dik\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">text5</field></block></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">val</field></block></value><statement name=\"STACK\"><block type=\"radio_datagram_send_value\"><value name=\"name\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value></block></value><value name=\"value\"><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">said: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">7</field></shadow></value></block></next></block></statement></block><block type=\"every_interval\" x=\"100\" y=\"-376\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">2000</field></shadow></value><statement name=\"HANDLER\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"uj8c~)bC/;JXc[2;l@N!\">iTook</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value></block></statement></block><block type=\"every_interval\" x=\"773\" y=\"-372\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"controls_if\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"1111\" y=\"-344\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_MP3_UpdateVolume\" disabled-reasons=\"MANUALLY_DISABLED\"></block></statement><statement name=\"ELSE\"><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_operation\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">OR</field><value name=\"A\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_negate\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"BOOL\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</field></block></value></block></value><value name=\"B\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value></block></value></block></value><statement name=\"DO0\"><block type=\"NL_RELAY_FogSet\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"level\">notLegos.fogLevels.none</field></block></statement><statement name=\"ELSE\"><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation elseif=\"2\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_RELAY_FogSet\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"level\">notLegos.fogLevels.light</field></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">2</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"NL_RELAY_FogSet\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"level\">notLegos.fogLevels.medium</field></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">3</field></shadow></value></block></value><statement name=\"DO2\"><block type=\"NL_RELAY_FogSet\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"level\">notLegos.fogLevels.heavy</field></block></statement></block></statement></block></statement></block><block type=\"input_logo_event\" x=\"2390\" y=\"-353\"><field name=\"action\">TouchButtonEvent.Touched</field><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_MP3_PlayerSay\"><field name=\"saying\">notLegos.playerSaying.ready</field><next><block type=\"NL_MP3_SfxPlay\"><field name=\"sfx\">notLegos.sfxType.fire</field><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.intro</field></block></next></block></next></block></statement></block></statement></block><block type=\"NL_OLED_PrintLine\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"572\" y=\"-190\"><value name=\"text\"><block type=\"text_join\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">K0: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogPin.P0</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"NL_OLED_PrintLine\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"text\"><block type=\"text_join\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">K1: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_OLED_PrintLine\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"text\"><block type=\"text_join\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">K2: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P2</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">4</field></shadow></value></block></next></block></next></block><block type=\"every_interval\" x=\"1817\" y=\"-101\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">40</field></shadow></value><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"m`bxu=!~_Nj|:o?}Kk!^\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time\"></block></value><next><block type=\"NL_PIXEL_CastleSayTick\"><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"E3,(6Z)tM(C:#!xxP.d,\">isReady</field></block></value><next><block type=\"function_call\"><mutation name=\"ready_oled\" functionid=\",fv3PGT/J~k#ZH}9er,/\"></mutation><next><block type=\"NL_OLED_Update3\"><next><block type=\"variables_set\"><field name=\"VAR\" id=\"uj8c~)bC/;JXc[2;l@N!\">iTook</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"m`bxu=!~_Nj|:o?}Kk!^\">iBegan</field></block></value></block></value></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"NL_OLED_Init\"><next><block type=\"NL_PIXEL_CastleSay\"><field name=\"sockPin\">DigitalPin.P3</field><field name=\"wheelPin\">DigitalPin.P0</field><field name=\"scorePin\">DigitalPin.P16</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"m`bxu=!~_Nj|:o?}Kk!^\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time_micros\"></block></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field></block></next></block></next></block></next></block></statement></block><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"646\" y=\"269\"><field name=\"VAR\" id=\"y@Q6YNBYQMe6tF/068bo\">lastVolumeRead</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"}%7r;bz7Byg#SEH9P{dG\">lastSonarRead</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"5rh0sr-gnWZKflz~gbRk\">lastGesture</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"u#;Y3,}t+?Ue.~vd$_;0\">lastHue</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"SRvF%Vl7CRHE66Kr9~Q[\">lastLaserR</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"hs_o5`X:I}y9{R2!_miN\">lastLaserL</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"%FT#@+cF!r3!,1uelm~,\">lastLaserC</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"at2[c#F7*{?za?uyOm!i\">lastHunt</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">FALSE</field></block></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">KC$</field></block></value><next><block type=\"pin_set_audio_pin_enabled\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"enabled\"><shadow type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">FALSE</field></shadow></value><next><block type=\"device_led_enable\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"on\"><shadow type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">FALSE</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"NL_SENSOR_SonarFirstRead\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin1\">DigitalPin.P8</field><field name=\"pin2\">DigitalPin.P9</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value></block></value><next><block type=\"radio_set_group\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"ID\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">171</field></shadow></value><next><block type=\"NL_OLED_Init\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><next><block type=\"controls_if\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_SENSOR_TrimpotSet\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"aPin\">AnalogPin.P10</field><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"W@//5%rK$%/F|oN!f$h$\">digits</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"nl_digits_create\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"cPin\">DigitalPin.P7</field><field name=\"dPin\">DigitalPin.P6</field></block></value><next><block type=\"nl_digits_number\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"display\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"W@//5%rK$%/F|oN!f$h$\">digits</field></block></value><value name=\"num\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">-1000</field></shadow></value><next><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P13</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"NL_MP3_InitiateAs\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"type\">notLegos.mp3type.music</field><field name=\"sPin\">SerialPin.P14</field><next><block type=\"NL_MP3_InitiateAs\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"type\">notLegos.mp3type.sfxvoice</field><field name=\"sPin\">SerialPin.P15</field><next><block type=\"NL_MP3_InitiateAs\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"type\">notLegos.mp3type.player</field><field name=\"sPin\">SerialPin.P16</field><next><block type=\"NL_PIXEL_CastleSay\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"sockPin\">DigitalPin.P11</field><field name=\"wheelPin\">DigitalPin.P5</field><field name=\"scorePin\">DigitalPin.P12</field><next><block type=\"device_pause\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">20</field></shadow></value><next><block type=\"NL_MP3_SetVolume\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"mp3bit\">notLegos.mp3type.sfxvoice</field><value name=\"vol\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"NL_MP3_SetVolume\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"mp3bit\">notLegos.mp3type.player</field><value name=\"vol\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"NL_MP3_SetVolume\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P0</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">0</field></shadow></value><next><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P2</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P8</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P12</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P13</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_PIXEL_CastleDo\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"spotPin\">DigitalPin.P14</field><field name=\"brickPin\">DigitalPin.P15</field><field name=\"kongPin\">DigitalPin.P16</field><next><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">check</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"m`bxu=!~_Nj|:o?}Kk!^\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time_micros\" disabled-reasons=\"MANUALLY_DISABLED\"></block></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"E3,(6Z)tM(C:#!xxP.d,\">isReady</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">TRUE</field></block></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">init</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"2536\" y=\"310\"><field name=\"VAR\" id=\"-O:q;^~u%Gff-w{^C`Ou\">lastWater</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_js_round\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P0</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value></block></value></block></value></block><block type=\"controls_if\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"2536\" y=\"566\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_CastleSayTick\" disabled-reasons=\"MANUALLY_DISABLED\"><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"at2[c#F7*{?za?uyOm!i\">lastHunt</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P4</field></shadow></value></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"5rh0sr-gnWZKflz~gbRk\">lastGesture</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"Connected_getGesture\" disabled-reasons=\"MANUALLY_DISABLED\"></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"u#;Y3,}t+?Ue.~vd$_;0\">lastHue</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"apds9960_readcolor\" disabled-reasons=\"MANUALLY_DISABLED\"></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"}%7r;bz7Byg#SEH9P{dG\">lastSonarRead</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"NL_SENSOR_SonarNextRead\" disabled-reasons=\"MANUALLY_DISABLED\"></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"SRvF%Vl7CRHE66Kr9~Q[\">lastLaserR</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_js_round\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">80</field></shadow></value></block></value></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"%FT#@+cF!r3!,1uelm~,\">lastLaserC</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_js_round\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P2</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">80</field></shadow></value></block></value></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"hs_o5`X:I}y9{R2!_miN\">lastLaserL</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_js_round\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P3</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">80</field></shadow></value></block></value></block></value><next><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation elseif=\"4\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">wait_start</field></block></value></block></value><statement name=\"DO0\"><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"at2[c#F7*{?za?uyOm!i\">lastHunt</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">idle</field></block></value><next><block type=\"NL_MP3_MusicPlay\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"genre\">notLegos.musicGenre.intro</field><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">boot</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow><block type=\"NL_MP3_PlaytimeMusic\" disabled-reasons=\"MANUALLY_DISABLED\"></block></value></block></next></block></next></block></next></block></statement></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">wait_play</field></block></value></block></value><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">wait_laser</field></block></value></block></value><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">init</field></block></value></block></value><statement name=\"DO3\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">ready</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value></block></statement><value name=\"IF4\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">wait_reg</field></block></value></block></value><statement name=\"DO4\"><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">NEQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"5rh0sr-gnWZKflz~gbRk\">lastGesture</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">tutorial</field></block></value><next><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"runTutorial\" functionid=\"Y{7P,}tzRL|sul3I;].}\"></mutation></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">FALSE</field></shadow></value></block></statement></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"NL_PIXEL_CastleDoTick\" disabled-reasons=\"MANUALLY_DISABLED\"><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">TRUE</field></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><next><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation elseif=\"4\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">10</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><value name=\"ba9wfs6wbjdlsow065y8\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">A</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">60</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><value name=\"ba9wfs6wbjdlsow065y8\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">B</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.fire</field></block></next></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">110</field></shadow></value></block></value><statement name=\"DO2\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><value name=\"ba9wfs6wbjdlsow065y8\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">C</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.mine</field></block></next></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">200</field></shadow></value></block></value><statement name=\"DO3\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><value name=\"ba9wfs6wbjdlsow065y8\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">D</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field></block></next></block></statement><value name=\"IF4\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">700</field></shadow></value></block></value><statement name=\"DO4\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><value name=\"ba9wfs6wbjdlsow065y8\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">E</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field></block></next></block></statement></block></next></block></next></block></next></block></statement></block><block type=\"every_interval\" x=\"1006\" y=\"713\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"radio_on_value_drag\" x=\"3549\" y=\"584\"><value name=\"HANDLER_DRAG_PARAM_name\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">name</field></block></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">value</field></block></value><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_substr\"><value name=\"this\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value><value name=\"start\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"length\"><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field></block></value></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_substr\"><value name=\"this\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value><value name=\"start\"><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field></block></value></block></value><value name=\"length\"><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text_length\"><value name=\"VALUE\"><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field></block></value></block></value></block></value></block></value><next><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"controls_if\"><mutation elseif=\"3\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wstar</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_start</field></block></value></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value><statement name=\"DO1\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.welcome</field></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.WheelAll</field><field name=\"effect\">notLegos.vfxEffect.fire</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.intro</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_reg</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">check</field></block></value></block></value><statement name=\"DO2\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">ready</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value></block></statement><statement name=\"ELSE\"><block type=\"controls_if\"><mutation elseif=\"3\" else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">ready</field></block></value></block></value><statement name=\"DO0\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">wstar</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.KongFront</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">boot</field></block></value></block></value><statement name=\"DO1\"><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1000</field></shadow></value></block></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">200</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.idle</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotH</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotI</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">0</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.BrickDragon</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotE</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">tutor</field></block></value></block></value><statement name=\"DO2\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotA</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotB</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value></block></statement><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">heard: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">6</field></shadow></value></block></next></block></next></block></statement></block></statement></block><block type=\"nl_digits_number\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"1050\" y=\"881\"><value name=\"display\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"W@//5%rK$%/F|oN!f$h$\">digits</field></block></value><value name=\"num\"><shadow type=\"math_number\"><field name=\"NUM\">-1000</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"-O:q;^~u%Gff-w{^C`Ou\">lastWater</field></block></value></block><block type=\"device_get_analog_pin\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"1197\" y=\"952\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P0</field></shadow></value></block><block type=\"logic_compare\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"2373\" y=\"1291\"><field name=\"OP\">LTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P0</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">90</field></shadow></value></block><block type=\"function_definition\" x=\"-562\" y=\"3309\"><mutation name=\"fogFlood\" functionid=\"k_s2+XI@*gx2@)wty=I0\"></mutation><field name=\"function_name\">fogFlood</field><statement name=\"STACK\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</field></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">10000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">para</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.mid</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.off</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.dancing</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.still</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">8000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.min</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"-120\" y=\"3309\"><mutation name=\"runTutorial\" functionid=\"Y{7P,}tzRL|sul3I;].}\"></mutation><field name=\"function_name\">runTutorial</field><statement name=\"STACK\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">tutor</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">80</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">20</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.tutorial</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto1</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5950</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto2</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto3</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7600</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto4</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6100</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto5</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">13000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto6</field><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"function_definition\" x=\"236\" y=\"3309\"><mutation name=\"ready_oled\" functionid=\",fv3PGT/J~k#ZH}9er,/\"></mutation><field name=\"function_name\">ready_oled</field><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Say //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"6\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"SRvF%Vl7CRHE66Kr9~Q[\">lastLaserR</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> C</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"%FT#@+cF!r3!,1uelm~,\">lastLaserC</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"hs_o5`X:I}y9{R2!_miN\">lastLaserL</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"8\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">S</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"}%7r;bz7Byg#SEH9P{dG\">lastSonarRead</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> H</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_js_round\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"u#;Y3,}t+?Ue.~vd$_;0\">lastHue</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> G</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"5rh0sr-gnWZKflz~gbRk\">lastGesture</field></block></value><value name=\"ADD6\"><shadow type=\"text\"><field name=\"TEXT\"> N</field></shadow></value><value name=\"ADD7\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"at2[c#F7*{?za?uyOm!i\">lastHunt</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">Mode: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M:</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"NL_MP3_PlaytimeMusic\"></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">4</field></shadow></value></block></next></block></next></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Do //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> T </field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Wdm0N8:YM*4Q+_(l9!-/"],[0,"\">fo"]],"start1":76,"start2":76,"length1":43372,"length2":85445}]}]},{"timestamp":1728784812313,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"block"],[1,"t"],[0,"sprj\"\n}\n"]],"start1":495,"start2":495,"length1":21,"length2":17}]}]},{"timestamp":1728784813489,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"pe=\""],[-1,"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"NL_OLED_Init\"><n"],[1,"function_definition\" x=\"4751\" y=\"-1215\"><mutation name=\"buttonPress\" functionid=\"+$9AXp*X:[tcODdtL9m)\"><arg name=\"button\" id=\"mfdvbnfdsij7xy9ejk0nd\" type=\"string\"></arg></mutation><field name=\"function_name\">buttonPress</field><value name=\"mfdvbnfdsij7xy9ejk0nd\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">button</field></block></value><statement name=\"STACK\"><block type=\"NL_OLED_PrintLine\"><value name=\"t"],[0,"ext"],[1,"\""],[0,"><bl"]],"start1":978,"start2":978,"length1":94,"length2":478},{"diffs":[[0,"pe=\""],[-1,"NL_PIXEL_CastleSay\"><field name=\"sockPin\">DigitalPin.P3</field><field name=\"wheelPin\">DigitalPin.P0</field><field name=\"scoreP"],[1,"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">button: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">button</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></statement></block><block type=\"function_definition\" x=\"5448\" y=\"-1213\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><field name=\"function_name\">radioSay</field><value name=\"vt0gv77qprcayj8xalbs\"><block type=\"argument_reporter_str"],[0,"in"],[1,"g"],[0,"\">"],[-1,"DigitalPin.P16</field><next"],[1,"<mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">text5</field></block></value><value name=\"ok3p1i8gyn97mv69yabw\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">val</field></block></value><statement name=\"STACK\"><block type=\"radio_datagram_send_value\"><value name=\"name\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow"],[0,"><bl"]],"start1":1462,"start2":1462,"length1":165,"length2":1277},{"diffs":[[0,"type=\"variables_"],[-1,"s"],[1,"g"],[0,"et\"><field name="]],"start1":2743,"start2":2743,"length1":33,"length2":33},{"diffs":[[0,"id=\""],[-1,"=9JavC*{GElF}/FS78a@\">iBegan</field"],[1,"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value"],[0,"><va"]],"start1":2782,"start2":2782,"length1":43,"length2":60},{"diffs":[[0,"ue><value name=\""],[-1,"VALUE"],[1,"ADD1"],[0,"\"><shadow type=\""]],"start1":2836,"start2":2836,"length1":37,"length2":36},{"diffs":[[0,"hadow type=\""],[-1,"math_number"],[1,"text"],[0,"\"><field nam"]],"start1":2860,"start2":2860,"length1":35,"length2":28},{"diffs":[[0,"t\"><field name=\""],[-1,"NUM"],[1,"TEXT"],[0,"\">"],[-1,"0"],[0,"</field></shadow"]],"start1":2875,"start2":2875,"length1":38,"length2":38},{"diffs":[[0,"pe=\""],[-1,"device_get_running_time_micros\"></block></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.Score1</field><field name=\"effect\">notLegos.vfxEffect.parade"],[1,"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value></block></value><value name=\"value\"><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">said: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">val"],[0,"</fi"]],"start1":2923,"start2":2923,"length1":195,"length2":790},{"diffs":[[0,"field></block></"],[-1,"next"],[1,"value"],[0,"></block></next>"]],"start1":3711,"start2":3711,"length1":36,"length2":37},{"diffs":[[0,"value></block></"],[-1,"next"],[1,"value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">7</field></shadow></value"],[0,"></block></next>"]],"start1":3727,"start2":3727,"length1":36,"length2":127},{"diffs":[[0," x=\""],[-1,"754"],[1,"100"],[0,"\" y=\""],[-1,"20"],[1,"-376"],[0,"\"><v"]],"start1":3910,"start2":3910,"length1":18,"length2":20},{"diffs":[[0," x=\""],[-1,"1400"],[1,"773"],[0,"\" y=\""],[1,"-37"],[0,"2"],[-1,"0"],[0,"\"><v"]],"start1":4580,"start2":4580,"length1":19,"length2":20},{"diffs":[[0,"></block><block "],[1,"type=\"input_logo_event\" x=\"2390\" y=\"-353\"><field name=\"action\">TouchButtonEvent.Touched</field><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_MP3_PlayerSay\"><field name=\"saying\">notLegos.playerSaying.ready</field><next><block type=\"NL_MP3_SfxPlay\"><field name=\"sfx\">notLegos.sfxType.fire</field><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.intro</field></block></next></block></next></block></statement></block></statement></block><block "],[0,"type=\"every_inte"]],"start1":4695,"start2":4695,"length1":32,"length2":739},{"diffs":[[0,"x=\"1"],[-1,"615"],[1,"817"],[0,"\" y=\""],[-1,"20"],[1,"-101"],[0,"\"><v"]],"start1":5440,"start2":5440,"length1":18,"length2":20},{"diffs":[[0,"pe=\""],[-1,"every_interval"],[1,"pxt-on-start"],[0,"\" x=\""],[-1,"2209"],[1,"10"],[0,"\" y=\""],[-1,"2"],[1,"1"],[0,"0\"><"],[-1,"value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"input_logo_event\" x=\"2424\" y=\"20\"><field name=\"action\">TouchButtonEvent.Touched</field><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE"],[1,"statement name=\"HANDLER\"><block type=\"NL_OLED_Init\"><next><block type=\"NL_PIXEL_CastleSay\"><field name=\"sockPin\">DigitalPin.P3</field><field name=\"wheelPin\">DigitalPin.P0</field><field name=\"scorePin\">DigitalPin.P16"],[0,"</fi"]],"start1":6888,"start2":6888,"length1":368,"length2":252},{"diffs":[[0,"Pin.P16</field><"],[-1,"/shadow"],[1,"next"],[0,"><block type=\"va"]],"start1":7129,"start2":7129,"length1":39,"length2":36},{"diffs":[[0,"type=\"variables_"],[-1,"g"],[1,"s"],[0,"et\"><field name="]],"start1":7157,"start2":7157,"length1":33,"length2":33},{"diffs":[[0,"id=\""],[-1,"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_MP3_PlayerSay\"><field name=\"saying\">notLegos.playerSaying.ready</field"],[1,"=9JavC*{GElF}/FS78a@\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time_micros\"></block></value"],[0,"><ne"]],"start1":7196,"start2":7196,"length1":173,"length2":187},{"diffs":[[0,"ck type=\"NL_"],[-1,"MP3_SfxPlay"],[1,"PIXEL_SetEffect"],[0,"\"><field nam"]],"start1":7390,"start2":7390,"length1":35,"length2":39},{"diffs":[[0,"t\"><field name=\""],[-1,"sfx"],[1,"region"],[0,"\">notLegos.sfxTy"]],"start1":7416,"start2":7416,"length1":35,"length2":38},{"diffs":[[0,"gos."],[-1,"sfxType.fire</field><next><block type=\"NL_MP3_MusicPlay\""],[1,"vfxRegion.CastleSayAll</field"],[0,"><fi"]],"start1":7445,"start2":7445,"length1":64,"length2":37},{"diffs":[[0,"ld><field name=\""],[-1,"genre"],[1,"effect"],[0,"\">notLegos.music"]],"start1":7476,"start2":7476,"length1":37,"length2":38},{"diffs":[[0,"otLegos."],[-1,"musicGenre.intro"],[1,"vfxEffect.parade"],[0,"</field>"]],"start1":7501,"start2":7501,"length1":32,"length2":32},{"diffs":[[0,"/next></block></"],[1,"next></block></"],[0,"statement></bloc"]],"start1":7557,"start2":7557,"length1":32,"length2":47},{"diffs":[[0,"nt></block><"],[-1,"/statement"],[1,"block type=\"every_interval\" x=\"1006\" y=\"713\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value"],[0,"></block><bl"]],"start1":7595,"start2":7595,"length1":34,"length2":166},{"diffs":[[0," x=\""],[-1,"2761"],[1,"3549"],[0,"\" y=\""],[-1,"20"],[1,"584"],[0,"\"><v"]],"start1":7791,"start2":7791,"length1":19,"length2":20},{"diffs":[[0," x=\""],[-1,"4077\" y=\"20\"><mutation name=\"buttonPress\" functionid=\"+$9AXp*X:[tcODdtL9m)\"><arg name=\"button\" id=\"mfdvbnfdsij7xy9ejk0nd\" type=\"string\"></arg></mutation><field name=\"function_name\">buttonPress</field><value name=\"mfdvbnfdsij7xy9ejk0nd\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">button</field></block></value><statement name=\"STACK\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">button: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">button</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></statement></block><block type=\"function_definition\" x=\"20\" y=\"3917\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><field name=\"function_name\">radioSay</field><value name=\"vt0gv77qprcayj8xalbs\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">text5</field></block></value><value name=\"ok3p1i8gyn97mv69yabw\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">val</field></block></value><statement name=\"STACK\"><block type=\"radio_datagram_send_value\"><value name=\"name\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value></block></value><value name=\"value\"><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">said: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">7</field></shadow></value></block></next></block></statement></block><block type=\"function_definition\" x=\"818\" y=\"3917"],[1,"-562\" y=\"3309"],[0,"\"><m"]],"start1":26286,"start2":26286,"length1":2927,"length2":21},{"diffs":[[0," x=\""],[1,"-"],[0,"12"],[-1,"6"],[0,"0\" y=\"3"],[-1,"917"],[1,"309"],[0,"\"><m"]],"start1":34382,"start2":34382,"length1":21,"length2":21},{"diffs":[[0," x=\""],[-1,"161"],[1,"23"],[0,"6\" y=\"3"],[-1,"917"],[1,"309"],[0,"\"><m"]],"start1":37466,"start2":37466,"length1":21,"length2":20}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"ion."],[-1,"Score1"],[1,"CastleSayAll"],[0,", no"]],"start1":9008,"start2":9008,"length1":14,"length2":20}]},{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0," { \n"],[-1,"            // this.buf.fill(0);\n            // this.buf[0]=100\n            // this.buf[1]=100\n            // this.buf[2]=255\n"],[0,"    "]],"start1":3908,"start2":3908,"length1":134,"length2":8}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"t"],[1,"block"],[0,"sprj\"\n}\n"]],"start1":495,"start2":495,"length1":17,"length2":21}]}]},{"timestamp":1728785372621,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"art\" x=\""],[1,"2"],[0,"0\" y=\""],[1,"2"],[0,"0\"><stat"]],"start1":991,"start2":991,"length1":22,"length2":24},{"diffs":[[0,"s.vfxRegion."],[-1,"CastleSayAll"],[1,"Score1"],[0,"</field><fie"]],"start1":1537,"start2":1537,"length1":36,"length2":30},{"diffs":[[0,"x=\"7"],[-1,"1"],[1,"5"],[0,"4\" y=\""],[-1,"-37"],[1,"20"],[0,"\"><v"]],"start1":1719,"start2":1719,"length1":18,"length2":17},{"diffs":[[0,"x=\"1"],[-1,"36"],[1,"40"],[0,"0\" y=\""],[-1,"-37"],[1,"20"],[0,"\"><v"]],"start1":2387,"start2":2387,"length1":19,"length2":18},{"diffs":[[0,"x=\"1"],[-1,"57"],[1,"61"],[0,"5\" y=\""],[-1,"-37"],[1,"20"],[0,"\"><v"]],"start1":2538,"start2":2538,"length1":19,"length2":18},{"diffs":[[0,"x=\"2"],[-1,"16"],[1,"20"],[0,"9\" y=\""],[-1,"-37"],[1,"20"],[0,"\"><v"]],"start1":4004,"start2":4004,"length1":19,"length2":18},{"diffs":[[0,"x=\"2"],[-1,"38"],[1,"42"],[0,"4\" y=\""],[-1,"-37"],[1,"20"],[0,"\"><f"]],"start1":4157,"start2":4157,"length1":19,"length2":18},{"diffs":[[0,"ock "],[-1,"type=\"function_definition\" x=\"4091\" y=\"-86\"><mutation name=\"buttonPress\" functionid=\"+$9AXp*X:[tcODdtL9m)\"><arg name=\"button\" id=\"mfdvbnfdsij7xy9ejk0nd\" type=\"string\"></arg></mutation><field name=\"function_name\">buttonPress</field><value name=\"mfdvbnfdsij7xy9ejk0nd\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">button</field></block></value><statement name=\"STACK\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">button: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">button</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></statement></block><block "],[0,"type"]],"start1":4834,"start2":4834,"length1":934,"length2":8},{"diffs":[[0,"=\"27"],[-1,"9"],[1,"6"],[0,"1\" y=\""],[-1,"55"],[1,"20"],[0,"\"><v"]],"start1":4866,"start2":4866,"length1":17,"length2":17},{"diffs":[[0," x=\""],[-1,"33\" y=\"380"],[1,"4077\" y=\"20\"><mutation name=\"buttonPress\" functionid=\"+$9AXp*X:[tcODdtL9m)\"><arg name=\"button\" id=\"mfdvbnfdsij7xy9ejk0nd\" type=\"string\"></arg></mutation><field name=\"function_name\">buttonPress</field><value name=\"mfdvbnfdsij7xy9ejk0nd\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">button</field></block></value><statement name=\"STACK\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">button: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">button</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></statement></block><block type=\"function_definition\" x=\"20\" y=\"391"],[0,"7\"><"]],"start1":23358,"start2":23358,"length1":18,"length2":943},{"diffs":[[0," x=\""],[-1,"77"],[1,"81"],[0,"8\" y=\"3"],[-1,"860"],[1,"917"],[0,"\"><m"]],"start1":26265,"start2":26265,"length1":20,"length2":20},{"diffs":[[0,"=\"12"],[-1,"2"],[1,"6"],[0,"0\" y=\"3"],[-1,"860"],[1,"917"],[0,"\"><m"]],"start1":34362,"start2":34362,"length1":19,"length2":19},{"diffs":[[0,"x=\"1"],[-1,"57"],[1,"61"],[0,"6\" y=\"3"],[-1,"860"],[1,"917"],[0,"\"><m"]],"start1":37445,"start2":37445,"length1":20,"length2":20}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"s.vfxRegion."],[-1,"CastleSayAll"],[1,"Score1"],[0,", notLegos.v"]],"start1":9000,"start2":9000,"length1":36,"length2":30}]},{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"ow() { \n"],[1,"            // this.buf.fill(0);\n            // this.buf[0]=100\n            // this.buf[1]=100\n            // this.buf[2]=255\n"],[0,"        "]],"start1":3904,"start2":3904,"length1":16,"length2":142}]}]},{"timestamp":1728785575191,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"ow]\n"],[-1,"        \n        for (let index = 0; index < 6; index++) {\n            vfx_parade_tog.push(randint(0, 1))\n            vfx_parade_hue.push(vfx_parade_colors[randint(0, vfx_parade_colors.length - 1)])\n            vfx_parade_sat.push(100)\n            vfx_parade_lum.push(randint(10, 65))\n        }\n        for (let index = 0; index < 1; index++) {\n            vfx_mine_tog.push(0)\n            vfx_mine_hue.push(hues.red)\n            vfx_mine_sat.push(100)\n            vfx_mine_lum.push(50)\n            vfx_glow_tog.push(0)\n            vfx_glow_hue.push(50)\n            vfx_glow_sat.push(0)\n            vfx_glow_lum.push(0)\n\n            vfx_parade_tog.push(randint(0, 1))\n            vfx_parade_hue.push(vfx_parade_colors[randint(0, vfx_parade_colors.length - 1)])\n            vfx_parade_sat.push(100)\n            vfx_parade_lum.push(randint(10, 65))\n\n            vfx_last_tog.push(0)\n            vfx_last_hue.push(50)\n            vfx_last_sat.push(100)\n            vfx_last_lum.push(50)\n\n            vfx_master_tog.push(0)\n            vfx_master_hue.push(0)\n            vfx_master_sat.push(100)\n            vfx_master_lum.push(50)\n            vfx_master_effect.push(vfxEffect.off)    //leave this be!\n        }\n        \n"],[0,"    "]],"start1":8866,"start2":8866,"length1":1225,"length2":8}]}]},{"timestamp":1728786166440,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0," []\n"],[-1,"    let vfx_off_hue: number[] = []; let vfx_off_sat: number[] = []; let vfx_off_lum: number[] = []\n"],[0,"    "]],"start1":1288,"start2":1288,"length1":107,"length2":8},{"diffs":[[0,"low_lum.push(0)\n"],[1,"\n"],[0,"            vfx_"]],"start1":9474,"start2":9474,"length1":32,"length2":33},{"diffs":[[0,"vfx_"],[-1,"off_hue.push(0"],[1,"parade_tog.push(randint(0, 1))\n            vfx_parade_hue.push(vfx_parade_colors[randint(0, vfx_parade_colors.length - 1)]"],[0,")\n  "]],"start1":9503,"start2":9503,"length1":22,"length2":130},{"diffs":[[0,"    vfx_"],[-1,"off"],[1,"parade"],[0,"_sat.pus"]],"start1":9639,"start2":9639,"length1":19,"length2":22},{"diffs":[[0,"parade_sat.push("],[1,"10"],[0,"0)\n            v"]],"start1":9647,"start2":9647,"length1":32,"length2":34},{"diffs":[[0,"    vfx_"],[-1,"off"],[1,"parade"],[0,"_lum.pus"]],"start1":9676,"start2":9676,"length1":19,"length2":22},{"diffs":[[0,"de_lum.push("],[-1,"0)"],[1,"randint(10, 65))\n"],[0,"\n        }\n\n"]],"start1":9688,"start2":9688,"length1":26,"length2":41},{"diffs":[[0,"    "],[-1,"}\n\n"],[0,"    "],[-1,"    for (let index = 0; index < 3; index++) {\n            vfx_fire_tog.push(randint(0, 1))\n            vfx_fire_hue.push(vfx_fire_colors[randint(0, vfx_fire_colors.length - 1)]"],[1,"vfx_last_tog.push(0)\n            vfx_last_hue.push(50)\n            vfx_last_sat.push(100)\n            vfx_last_lum.push(50)\n\n            vfx_master_tog.push(0)\n            vfx_master_hue.push(0"],[0,")\n  "]],"start1":9722,"start2":9722,"length1":191,"length2":205},{"diffs":[[0,"        vfx_"],[-1,"fire"],[1,"master"],[0,"_sat.push(10"]],"start1":9929,"start2":9929,"length1":28,"length2":30},{"diffs":[[0,"        vfx_"],[-1,"fire"],[1,"master"],[0,"_lum.push(ra"]],"start1":9966,"start2":9966,"length1":28,"length2":30},{"diffs":[[0,"ush("],[-1,"randint(30, 80))"],[1,"50)\n            vfx_master_effect.push(vfxEffect.off)    //leave this be!"],[0,"\n   "]],"start1":9990,"start2":9990,"length1":24,"length2":81},{"diffs":[[0,"x < "],[-1,"2; index++) {"],[1,"vfx_light_count; index++) {\n             "],[0,"\n   "]],"start1":10119,"start2":10119,"length1":21,"length2":49},{"diffs":[[0,"e_sat.push(100)\n"],[1,"\n            vfx_mine_tog.push(0)\n            vfx_mine_hue.push(hues.red)\n            vfx_mine_sat.push(100)\n            vfx_mine_lum.push(50)\n\n            vfx_fire_tog.push(randint(0, 1))\n            vfx_fire_hue.push(vfx_fire_colors[randint(0, vfx_fire_colors.length - 1)])\n            vfx_fire_sat.push(100)\n            vfx_fire_lum.push(randint(30, 80))\n\n"],[0,"            vfx_"]],"start1":10301,"start2":10301,"length1":32,"length2":391},{"diffs":[[0,"50)\n"],[1,"\n    "],[0,"        "],[-1,"}\n\n        for (let index = 0; index < vfx_light_count; index++) {"],[1,"vfx_glow_tog.push(0)\n            vfx_glow_hue.push(50)\n            vfx_glow_sat.push(0)\n            vfx_glow_lum.push(0)\n\n            vfx_parade_tog.push(randint(0, 1))\n            vfx_parade_hue.push(vfx_parade_colors[randint(0, vfx_parade_colors.length-1)])\n            vfx_parade_sat.push(100)\n            vfx_parade_lum.push(randint(10, 65))\n\n            vfx_last_tog.push(0)\n            vfx_last_hue.push(50)\n            vfx_last_sat.push(100)\n            vfx_last_lum.push(50)\n"],[0,"\n   "]],"start1":10931,"start2":10931,"length1":82,"length2":504},{"diffs":[[0,"ndex=0; index < "],[-1,"6"],[1,"vfx_light_count"],[0,"; index++){\n    "]],"start1":13872,"start2":13872,"length1":33,"length2":47}]}]},{"timestamp":1728786698694,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"Legos.vfxEffect."],[-1,"idl"],[1,"parad"],[0,"e</field></block"]],"start1":1591,"start2":1591,"length1":35,"length2":37},{"diffs":[[0,"x=\"7"],[-1,"20"],[1,"14"],[0,"\" y=\"-3"],[-1,"1"],[1,"7"],[0,"\"><v"]],"start1":1723,"start2":1723,"length1":18,"length2":18},{"diffs":[[0,"\"136"],[-1,"6"],[1,"0"],[0,"\" y=\"-3"],[-1,"1"],[1,"7"],[0,"\"><v"]],"start1":2394,"start2":2394,"length1":17,"length2":17},{"diffs":[[0,"=\"15"],[-1,"81"],[1,"75"],[0,"\" y=\"-3"],[-1,"1"],[1,"7"],[0,"\"><v"]],"start1":2545,"start2":2545,"length1":18,"length2":18},{"diffs":[[0,"=\"21"],[-1,"75"],[1,"69"],[0,"\" y=\"-3"],[-1,"1"],[1,"7"],[0,"\"><v"]],"start1":4012,"start2":4012,"length1":18,"length2":18},{"diffs":[[0,"=\"23"],[-1,"90"],[1,"84"],[0,"\" y=\"-3"],[-1,"1"],[1,"7"],[0,"\"><f"]],"start1":4166,"start2":4166,"length1":18,"length2":18},{"diffs":[[0,"\"409"],[-1,"7"],[1,"1"],[0,"\" y=\"-8"],[-1,"3"],[1,"6"],[0,"\"><m"]],"start1":4876,"start2":4876,"length1":17,"length2":17},{"diffs":[[0,"=\"27"],[-1,"82"],[1,"91"],[0,"\" y=\""],[-1,"74"],[1,"55"],[0,"\"><v"]],"start1":5801,"start2":5801,"length1":17,"length2":17},{"diffs":[[0," x=\""],[-1,"41"],[1,"33"],[0,"\" y=\"38"],[-1,"11"],[1,"07"],[0,"\"><m"]],"start1":24293,"start2":24293,"length1":19,"length2":19},{"diffs":[[0,"x=\"7"],[1,"7"],[0,"8"],[-1,"4"],[0,"\" y=\"386"],[-1,"6"],[1,"0"],[0,"\"><m"]],"start1":26276,"start2":26276,"length1":19,"length2":19},{"diffs":[[0,"\"122"],[-1,"6"],[1,"0"],[0,"\" y=\"386"],[-1,"6"],[1,"0"],[0,"\"><m"]],"start1":34373,"start2":34373,"length1":18,"length2":18},{"diffs":[[0,"=\"15"],[-1,"82"],[1,"76"],[0,"\" y=\"386"],[-1,"6"],[1,"0"],[0,"\"><m"]],"start1":37456,"start2":37456,"length1":19,"length2":19}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"xEffect."],[-1,"idl"],[1,"parad"],[0,"e)\nloops"]],"start1":9037,"start2":9037,"length1":19,"length2":21}]},{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"red\n"],[-1,"        vfx_indicate_tog[1] = 1"],[0,"\n"],[1,""],[0,"    "]],"start1":6053,"start2":6053,"length1":40,"length2":9},{"diffs":[[0,"//spot h\n       "],[-1," //"],[0," vfx_indicate_to"]],"start1":8045,"start2":8045,"length1":35,"length2":32},{"diffs":[[0,"//spot f\n       "],[-1," //"],[0," vfx_indicate_to"]],"start1":8111,"start2":8111,"length1":35,"length2":32},{"diffs":[[0,"//spot d\n       "],[-1," //"],[0," vfx_indicate_to"]],"start1":8177,"start2":8177,"length1":35,"length2":32},{"diffs":[[0,"//spot b\n       "],[-1," //"],[0," vfx_indicate_to"]],"start1":8243,"start2":8243,"length1":35,"length2":32},{"diffs":[[0,"//spot a\n       "],[-1," //"],[0," vfx_indicate_to"]],"start1":8309,"start2":8309,"length1":35,"length2":32},{"diffs":[[0,"l bricks\n       "],[-1," //"],[0," vfx_indicate_to"]],"start1":8386,"start2":8386,"length1":35,"length2":32},{"diffs":[[0,"on brick\n       "],[-1," //"],[0," vfx_indicate_to"]],"start1":8437,"start2":8437,"length1":35,"length2":32},{"diffs":[[0,"mb brick\n       "],[-1," //"],[0," vfx_indicate_to"]],"start1":8486,"start2":8486,"length1":35,"length2":32},{"diffs":[[0,"ll brick\n       "],[-1," //"],[0," vfx_indicate_to"]],"start1":8536,"start2":8536,"length1":35,"length2":32},{"diffs":[[0,"ex = 0; index < "],[-1,"4"],[1,"2"],[0,"; index++) {\n   "]],"start1":9999,"start2":9999,"length1":33,"length2":33},{"diffs":[[0,"ex = 0; index < "],[-1,"1"],[1,"vfx_light_count"],[0,"; index++) {\n   "]],"start1":13993,"start2":13993,"length1":33,"length2":47},{"diffs":[[0,"index < "],[-1,"4"],[1,"vfx_light_count"],[0,"; index+"]],"start1":14765,"start2":14765,"length1":17,"length2":31},{"diffs":[[0,"ex = 0; index < "],[-1,"2"],[1,"vfx_light_count"],[0,"; index++) {\n   "]],"start1":15523,"start2":15523,"length1":33,"length2":47},{"diffs":[[0,"ex = 0; index < "],[-1,"3"],[1,"vfx_light_count"],[0,"; index++) {\n   "]],"start1":16314,"start2":16314,"length1":33,"length2":47},{"diffs":[[0,"ex = 0; index < "],[-1,"1"],[1,"vfx_light_count"],[0,"; index++) {\n   "]],"start1":17355,"start2":17355,"length1":33,"length2":47}]}]},{"timestamp":1728787281503,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"pe=\""],[-1,"every_interval\" x=\"681"],[1,"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"NL_OLED_Init\"><next><block type=\"NL_PIXEL_CastleSay\"><field name=\"sockPin\">DigitalPin.P3</field><field name=\"wheelPin\">DigitalPin.P0</field><field name=\"scorePin\">DigitalPin.P16</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"=9JavC*{GElF}/FS78a@\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time_micros\"></block></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.idle</field></block></next></block></next></block></next></block></statement></block><block type=\"every_interval\" x=\"720"],[0,"\" y=\"-"],[-1,"8"],[0,"3"],[1,"1"],[0,"\"><v"]],"start1":978,"start2":978,"length1":38,"length2":761},{"diffs":[[0,"=\"13"],[-1,"27"],[1,"66"],[0,"\" y=\"-"],[-1,"8"],[0,"3"],[1,"1"],[0,"\"><v"]],"start1":2391,"start2":2391,"length1":18,"length2":18},{"diffs":[[0,"=\"15"],[-1,"42"],[1,"81"],[0,"\" y=\"-"],[-1,"8"],[0,"3"],[1,"1"],[0,"\"><v"]],"start1":2543,"start2":2543,"length1":18,"length2":18},{"diffs":[[0,"pe=\""],[-1,"pxt-on-start"],[1,"every_interval"],[0,"\" x=\""],[-1,"0"],[1,"2175"],[0,"\" y=\""],[-1,"0\"><statement name=\"HANDLER\"><block type=\"NL_OLED_Init\"><next><block type=\"NL_PIXEL_CastleSay\"><field name=\"sockPin\">DigitalPin.P3</field><field name=\"wheelPin\">DigitalPin.P0</field><field name=\"scorePin\">DigitalPin.P16"],[1,"-31\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"input_logo_event\" x=\"2390\" y=\"-31\"><field name=\"action\">TouchButtonEvent.Touched</field><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE"],[0,"</fi"]],"start1":3989,"start2":3989,"length1":250,"length2":370},{"diffs":[[0,"L\">TRUE</field><"],[-1,"next"],[1,"/shadow"],[0,"><block type=\"va"]],"start1":4348,"start2":4348,"length1":36,"length2":39},{"diffs":[[0,"type=\"variables_"],[-1,"s"],[1,"g"],[0,"et\"><field name="]],"start1":4379,"start2":4379,"length1":33,"length2":33},{"diffs":[[0,"id=\""],[-1,"=9JavC*{GElF}/FS78a@\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time_micros\"></block></value"],[1,"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_MP3_PlayerSay\"><field name=\"saying\">notLegos.playerSaying.ready</field"],[0,"><ne"]],"start1":4418,"start2":4418,"length1":187,"length2":173},{"diffs":[[0,"ck type=\"NL_"],[-1,"PIXEL_SetEffect"],[1,"MP3_SfxPlay"],[0,"\"><field nam"]],"start1":4598,"start2":4598,"length1":39,"length2":35},{"diffs":[[0,"y\"><field name=\""],[-1,"region"],[1,"sfx"],[0,"\">notLegos.vfxRe"]],"start1":4620,"start2":4620,"length1":38,"length2":35},{"diffs":[[0,"gos."],[-1,"vfxRegion.CastleSayAll</field"],[1,"sfxType.fire</field><next><block type=\"NL_MP3_MusicPlay\""],[0,"><fi"]],"start1":4646,"start2":4646,"length1":37,"length2":64},{"diffs":[[0,"y\"><field name=\""],[-1,"effect"],[1,"genre"],[0,"\">notLegos.vfxEf"]],"start1":4704,"start2":4704,"length1":38,"length2":37},{"diffs":[[0,"e\">notLegos."],[-1,"vfxEffect.mine"],[1,"musicGenre.intro"],[0,"</field></bl"]],"start1":4724,"start2":4724,"length1":38,"length2":40},{"diffs":[[0,"/next></block></"],[-1,"nex"],[1,"statemen"],[0,"t></block></stat"]],"start1":4784,"start2":4784,"length1":35,"length2":40},{"diffs":[[0,"x=\"4"],[-1,"113"],[1,"097"],[0,"\" y=\"-"],[-1,"189"],[1,"83"],[0,"\"><m"]],"start1":4872,"start2":4872,"length1":20,"length2":19},{"diffs":[[0,"ock "],[-1,"type=\"every_interval\" x=\"2136\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"input_logo_event\" x=\"2351\" y=\"-83\"><field name=\"action\">TouchButtonEvent.Touched</field><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_MP3_PlayerSay\"><field name=\"saying\">notLegos.playerSaying.ready</field><next><block type=\"NL_MP3_SfxPlay\"><field name=\"sfx\">notLegos.sfxType.fire</field><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.intro</field></block></next></block></next></block></statement></block></statement></block><block "],[0,"type"]],"start1":5767,"start2":5767,"length1":866,"length2":8},{"diffs":[[0,"x=\"2"],[-1,"811"],[1,"782"],[0,"\" y=\""],[-1,"122"],[1,"74"],[0,"\"><v"]],"start1":5798,"start2":5798,"length1":19,"length2":18},{"diffs":[[0," x=\""],[-1,"55"],[1,"41"],[0,"\" y=\"3"],[-1,"705"],[1,"811"],[0,"\"><m"]],"start1":24291,"start2":24291,"length1":19,"length2":19},{"diffs":[[0,"x=\"7"],[1,"8"],[0,"4"],[-1,"5"],[0,"\" y=\"38"],[-1,"14"],[1,"66"],[0,"\"><m"]],"start1":26274,"start2":26274,"length1":19,"length2":19},{"diffs":[[0,"x=\"1"],[-1,"187"],[1,"226"],[0,"\" y=\"38"],[-1,"14"],[1,"66"],[0,"\"><m"]],"start1":34369,"start2":34369,"length1":20,"length2":20},{"diffs":[[0,"=\"15"],[-1,"43"],[1,"82"],[0,"\" y=\"38"],[-1,"14"],[1,"66"],[0,"\"><m"]],"start1":37454,"start2":37454,"length1":19,"length2":19}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"xEffect."],[-1,"min"],[1,"idl"],[0,"e)\nloops"]],"start1":9037,"start2":9037,"length1":19,"length2":19}]},{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"ex = 0; index < "],[-1,"2"],[1,"4"],[0,"; index++) {\n   "]],"start1":10057,"start2":10057,"length1":33,"length2":33},{"diffs":[[0,"ex = 0; index < "],[-1,"2"],[1,"4"],[0,"; index++) {\n   "]],"start1":14801,"start2":14801,"length1":33,"length2":33},{"diffs":[[0,"id{\n"],[-1,"        vfx_master_hue[0] = vfx_glow_hue[0]\n        vfx_master_sat[0] = vfx_glow_sat[0]\n        vfx_master_lum[0] = Math.min(100, vfx_glow_lum[0])\n\n\n\n\n\n\n"],[0,"    "]],"start1":18087,"start2":18087,"length1":161,"length2":8},{"diffs":[[0,"ect.glow) {\n"],[1,"                vfx_master_hue[index] = vfx_glow_hue[index]\n                vfx_master_sat[index] = vfx_glow_sat[index]\n                vfx_master_lum[index] = Math.min(100,vfx_glow_lum[index])"],[0,"\n           "]],"start1":19315,"start2":19315,"length1":24,"length2":217}]}]},{"timestamp":1728787865870,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"])\n\n"],[1,"\n\n\n\n\n"],[0,"        "],[-1,"vfx_master_hue[1] = vfx_mine_hue[0]\n        vfx_master_sat[1] = vfx_mine_sat[0]\n        vfx_master_lum[1] = Math.max(0, Math.min(50, vfx_mine_lum[0]))\n\n        vfx_master_hue[2] = vfx_idle_hue[0]\n        vfx_master_sat[2] = vfx_idle_sat[0]\n        vfx_master_lum[2] = Math.max(0, Math.min(50, vfx_idle_lum[0]))\n"],[1,"for (let index = 0; index < vfx_light_count; index++) {\n            let thisEffect = vfx_master_effect[index]\n            if (thisEffect == vfxEffect.parade) {\n        "],[0,"    "]],"start1":18235,"start2":18235,"length1":327,"length2":189},{"diffs":[[0,"hue["],[-1,"3"],[1,"index"],[0,"] = vfx_"],[-1,"idl"],[1,"parad"],[0,"e_hue["],[-1,"1]\n"],[1,"index]\n    "],[0,"        "],[1,"    "],[0,"vfx_"]],"start1":18439,"start2":18439,"length1":37,"length2":55},{"diffs":[[0,"sat["],[-1,"3"],[1,"index"],[0,"] = vfx_"],[-1,"idl"],[1,"parad"],[0,"e_sat["],[-1,"1]\n"],[1,"index]\n        "],[0,"    "]],"start1":18501,"start2":18501,"length1":29,"length2":47},{"diffs":[[0,"ter_lum["],[-1,"3"],[1,"index"],[0,"] = Math"]],"start1":18559,"start2":18559,"length1":17,"length2":21},{"diffs":[[0,"x] = Math.max(0,"],[-1," "],[0,"Math.min(50, vfx"]],"start1":18571,"start2":18571,"length1":33,"length2":32},{"diffs":[[0,"(50,"],[-1," "],[0,"vfx_"],[-1,"idl"],[1,"parad"],[0,"e_lum["],[-1,"1"],[1,"index"],[0,"]))\n"],[-1,"\n"],[0,"        "],[-1,"vfx_master_hue[4] = vfx_indicate_hue[0]\n        vfx_master_sat[4] = vfx_indicate_sat[0]\n        vfx_master_lum[4] = Math.max(0, Math.min(50, vfx_indicate_lum[0]))\n"],[1,"    } else if (thisEffect == vfxEffect.fire) {\n        "],[0,"    "]],"start1":18595,"start2":18595,"length1":199,"length2":95},{"diffs":[[0,"hue["],[-1,"5"],[1,"index"],[0,"] = vfx_"],[-1,"indicate_hue[1]\n"],[1,"fire_hue[index]\n       "],[0,"        "],[1," "],[0,"vfx_"]],"start1":18705,"start2":18705,"length1":41,"length2":53},{"diffs":[[0,"sat["],[-1,"5"],[1,"index"],[0,"] = vfx_"],[-1,"indicate_sat[1]\n"],[1,"fire_sat[index]\n  "],[0,"        "],[1,"      "],[0,"vfx_"]],"start1":18765,"start2":18765,"length1":41,"length2":53},{"diffs":[[0,"ter_lum["],[-1,"5"],[1,"index"],[0,"] = Math"]],"start1":18821,"start2":18821,"length1":17,"length2":21},{"diffs":[[0,"vfx_"],[-1,"indicate_lum[1]))\n\n\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisEffect = vfx_master_effect[index]\n           "],[1,"fire_lum[index]))\n            } else"],[0," if "]],"start1":18863,"start2":18863,"length1":157,"length2":44},{"diffs":[[0,"ct == vfxEffect."],[-1,"parad"],[1,"indicat"],[0,"e) {\n           "]],"start1":18916,"start2":18916,"length1":37,"length2":39},{"diffs":[[0,"ue[index] = vfx_"],[-1,"parad"],[1,"indicat"],[0,"e_hue[index]\n   "]],"start1":18972,"start2":18972,"length1":37,"length2":39},{"diffs":[[0,"at[index] = vfx_"],[-1,"parad"],[1,"indicat"],[0,"e_sat[index]\n   "]],"start1":19036,"start2":19036,"length1":37,"length2":39},{"diffs":[[0,"x] = Math.max(0,"],[1," "],[0,"Math.min(50,vfx_"]],"start1":19107,"start2":19107,"length1":32,"length2":33},{"diffs":[[0,"Math.min(50,"],[1," "],[0,"vfx_"],[-1,"parad"],[1,"indicat"],[0,"e_lum[index]"]],"start1":19124,"start2":19124,"length1":33,"length2":36},{"diffs":[[0,"ct == vfxEffect."],[-1,"fir"],[1,"idl"],[0,"e) {\n           "]],"start1":19194,"start2":19194,"length1":35,"length2":35},{"diffs":[[0,"ue[index] = vfx_"],[-1,"fir"],[1,"idl"],[0,"e_hue[index]\n   "]],"start1":19246,"start2":19246,"length1":35,"length2":35},{"diffs":[[0,"at[index] = vfx_"],[-1,"fir"],[1,"idl"],[0,"e_sat[index]\n   "]],"start1":19306,"start2":19306,"length1":35,"length2":35},{"diffs":[[0,"ath.min(50, vfx_"],[-1,"fir"],[1,"idl"],[0,"e_lum[index]))\n "]],"start1":19391,"start2":19391,"length1":35,"length2":35},{"diffs":[[0,"= vfxEffect."],[-1,"indicate"],[1,"glow"],[0,") {\n\n       "]],"start1":19460,"start2":19460,"length1":32,"length2":28},{"diffs":[[0,"ect."],[-1,"idl"],[1,"min"],[0,"e) {\n"],[-1,"\n"],[0,"    "]],"start1":19524,"start2":19524,"length1":17,"length2":16},{"diffs":[[0,"    "],[-1,"} else if (thisEffect == vfxEffect.glow) {\n\n            } else if (thisEffect == vfxEffect.mine) {\n"],[1,"    vfx_master_hue[index] = vfx_mine_hue[index]\n                vfx_master_sat[index] = vfx_mine_sat[index]\n                vfx_master_lum[index] = Math.max(0, Math.min(50, vfx_mine_lum[index]))"],[0,"\n   "]],"start1":19544,"start2":19544,"length1":107,"length2":202}]}]},{"timestamp":1728788152290,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,")\n\n\n"],[-1,"        vfx_master_hue[6] = vfx_parade_hue[index]\n        vfx_master_sat[6] = vfx_parade_sat[index]\n        vfx_master_lum[6] = Math.max(0, Math.min(50, vfx_parade_lum[index]))\n        vfx_master_hue[7] = vfx_parade_hue[index]\n        vfx_master_sat[7] = vfx_parade_sat[index]\n        vfx_master_lum[7] = Math.max(0, Math.min(50, vfx_parade_lum[index]))\n        vfx_master_hue[8] = vfx_parade_hue[index]\n        vfx_master_sat[8] = vfx_parade_sat[index]\n        vfx_master_lum[8] = Math.max(0, Math.min(50, vfx_parade_lum[index]))\n        vfx_master_hue[9] = vfx_parade_hue[index]\n        vfx_master_sat[index] = vfx_parade_sat[index]\n        vfx_master_lum[index] = Math.max(0, Math.min(50, vfx_parade_lum[index]))\n        vfx_master_hue[index] = vfx_parade_hue[index]\n        vfx_master_sat[index] = vfx_parade_sat[index]\n        vfx_master_lum[index] = Math.max(0, Math.min(50, vfx_parade_lum[index]))\n        vfx_master_hue[index] = vfx_parade_hue[index]\n        vfx_master_sat[index] = vfx_parade_sat[index]\n        vfx_master_lum[index] = Math.max(0, Math.min(50, vfx_parade_lum[index]))\n\n\n\n"],[0,"    "]],"start1":19058,"start2":19058,"length1":1105,"length2":8}]}]},{"timestamp":1728788752024,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0," []\n"],[-1,"    let vfx_active_tog: number[] = []; let vfx_active_hue: number[] = []; let vfx_active_sat: number[] = []; let vfx_glow_lum: number[] = []\n"],[0,"    "]],"start1":1288,"start2":1288,"length1":149,"length2":8},{"diffs":[[0,"elPin, 1"],[-1,"6"],[1,"0"],[0,")\n      "]],"start1":5649,"start2":5649,"length1":17,"length2":17},{"diffs":[[0,"(0)\n"],[-1,"            vfx_active_tog.push(0)\n            vfx_active_hue.push(50)\n            vfx_active_sat.push(0)\n            vfx_glow_lum.push(0)\n"],[0,"    "]],"start1":9643,"start2":9643,"length1":147,"length2":8},{"diffs":[[0,"_parade_hue["],[-1,"0"],[1,"index"],[0,"]\n        vf"]],"start1":19093,"start2":19093,"length1":25,"length2":29},{"diffs":[[0,"_parade_sat["],[-1,"0"],[1,"index"],[0,"]\n        vf"]],"start1":19143,"start2":19143,"length1":25,"length2":29},{"diffs":[[0,"_parade_lum["],[-1,"0"],[1,"index"],[0,"]))\n        "]],"start1":19218,"start2":19218,"length1":25,"length2":29},{"diffs":[[0,"_parade_hue["],[-1,"1"],[1,"index"],[0,"]\n        vf"]],"start1":19270,"start2":19270,"length1":25,"length2":29},{"diffs":[[0,"_parade_sat["],[-1,"1"],[1,"index"],[0,"]\n        vf"]],"start1":19320,"start2":19320,"length1":25,"length2":29},{"diffs":[[0,"_parade_lum["],[-1,"1"],[1,"index"],[0,"]))\n        "]],"start1":19395,"start2":19395,"length1":25,"length2":29},{"diffs":[[0,"_parade_hue["],[-1,"2"],[1,"index"],[0,"]\n        vf"]],"start1":19447,"start2":19447,"length1":25,"length2":29},{"diffs":[[0,"_parade_sat["],[-1,"2"],[1,"index"],[0,"]\n        vf"]],"start1":19497,"start2":19497,"length1":25,"length2":29},{"diffs":[[0,"_parade_lum["],[-1,"2"],[1,"index"],[0,"]))\n        "]],"start1":19572,"start2":19572,"length1":25,"length2":29},{"diffs":[[0,"ade_hue["],[-1,"3"],[1,"index"],[0,"]\n      "]],"start1":19628,"start2":19628,"length1":17,"length2":21},{"diffs":[[0,"ter_sat["],[-1,"9"],[1,"index"],[0,"] = vfx_"]],"start1":19658,"start2":19658,"length1":17,"length2":21},{"diffs":[[0,"ade_sat["],[-1,"3"],[1,"index"],[0,"]\n      "]],"start1":19682,"start2":19682,"length1":17,"length2":21},{"diffs":[[0,"ter_lum["],[-1,"9"],[1,"index"],[0,"] = Math"]],"start1":19712,"start2":19712,"length1":17,"length2":21},{"diffs":[[0,"ade_lum["],[-1,"3"],[1,"index"],[0,"]))\n    "]],"start1":19761,"start2":19761,"length1":17,"length2":21},{"diffs":[[0,"_master_hue["],[-1,"10"],[1,"index"],[0,"] = vfx_para"]],"start1":19789,"start2":19789,"length1":26,"length2":29},{"diffs":[[0,"ade_hue["],[-1,"4"],[1,"index"],[0,"]\n      "]],"start1":19817,"start2":19817,"length1":17,"length2":21},{"diffs":[[0,"ter_sat["],[-1,"10"],[1,"index"],[0,"] = vfx_"]],"start1":19847,"start2":19847,"length1":18,"length2":21},{"diffs":[[0,"ade_sat["],[-1,"4"],[1,"index"],[0,"]\n      "]],"start1":19871,"start2":19871,"length1":17,"length2":21},{"diffs":[[0,"ter_lum["],[-1,"10"],[1,"index"],[0,"] = Math"]],"start1":19901,"start2":19901,"length1":18,"length2":21},{"diffs":[[0,"ade_lum["],[-1,"4"],[1,"index"],[0,"]))\n    "]],"start1":19950,"start2":19950,"length1":17,"length2":21},{"diffs":[[0,"_master_hue["],[-1,"11"],[1,"index"],[0,"] = vfx_para"]],"start1":19978,"start2":19978,"length1":26,"length2":29},{"diffs":[[0,"ade_hue["],[-1,"5"],[1,"index"],[0,"]\n      "]],"start1":20006,"start2":20006,"length1":17,"length2":21},{"diffs":[[0,"ter_sat["],[-1,"11"],[1,"index"],[0,"] = vfx_"]],"start1":20036,"start2":20036,"length1":18,"length2":21},{"diffs":[[0,"ade_sat["],[-1,"5"],[1,"index"],[0,"]\n      "]],"start1":20060,"start2":20060,"length1":17,"length2":21},{"diffs":[[0,"ter_lum["],[-1,"11"],[1,"index"],[0,"] = Math"]],"start1":20090,"start2":20090,"length1":18,"length2":21},{"diffs":[[0,"lum["],[-1,"5"],[1,"index"],[0,"]))\n\n"],[1,"\n\n"],[1,"        for (let index = 0; index < vfx_light_count; index++) {\n            let thisEffect = vfx_master_effect[index]\n            if (thisEffect == vfxEffect.parade) {\n        "],[0,"    "]],"start1":20143,"start2":20143,"length1":14,"length2":196},{"diffs":[[0,"hue["],[-1,"12"],[1,"index"],[0,"] = vfx_"],[-1,"fir"],[1,"parad"],[0,"e_hue["],[-1,"0"],[1,"index"],[0,"]\n  "]],"start1":20354,"start2":20354,"length1":28,"length2":37},{"diffs":[[0,"[index]\n        "],[1," "],[1,"       "],[0,"vfx_master_sat[1"]],"start1":20381,"start2":20381,"length1":32,"length2":40},{"diffs":[[0,"sat["],[-1,"12"],[1,"index"],[0,"] = vfx_"],[-1,"fir"],[1,"parad"],[0,"e_sat["],[-1,"0]\n"],[1,"index]\n  "],[0,"        "],[1,"      "],[0,"vfx_"]],"start1":20416,"start2":20416,"length1":38,"length2":55},{"diffs":[[0,"ter_lum["],[-1,"12"],[1,"index"],[0,"] = Math"]],"start1":20474,"start2":20474,"length1":18,"length2":21},{"diffs":[[0,"x] = Math.max(0,"],[-1," "],[0,"Math.min(50, vfx"]],"start1":20486,"start2":20486,"length1":33,"length2":32},{"diffs":[[0,"(50,"],[-1," "],[0,"vfx_"],[-1,"fir"],[1,"parad"],[0,"e_lum["],[-1,"0]))\n"],[1,"index]))\n            } else if (thisEffect == vfxEffect.fire) {\n        "],[0,"    "]],"start1":20510,"start2":20510,"length1":27,"length2":95},{"diffs":[[0,"_master_hue["],[-1,"13"],[1,"index"],[0,"] = vfx_fire"]],"start1":20612,"start2":20612,"length1":26,"length2":29},{"diffs":[[0,"fx_fire_hue["],[-1,"1]\n"],[1,"index]\n        "],[0,"        vfx_"]],"start1":20634,"start2":20634,"length1":27,"length2":39},{"diffs":[[0,"ter_sat["],[-1,"13"],[1,"index"],[0,"] = vfx_"]],"start1":20676,"start2":20676,"length1":18,"length2":21},{"diffs":[[0,"fx_fire_sat["],[-1,"1]\n"],[1,"index]\n     "],[0,"        "],[1,"   "],[0,"vfx_master_l"]],"start1":20694,"start2":20694,"length1":35,"length2":47},{"diffs":[[0,"ter_lum["],[-1,"13"],[1,"index"],[0,"] = Math"]],"start1":20736,"start2":20736,"length1":18,"length2":21},{"diffs":[[0,"fx_fire_lum["],[-1,"1"],[1,"index"],[0,"]))\n        "]],"start1":20779,"start2":20779,"length1":25,"length2":29},{"diffs":[[0,"    "],[-1,"vfx_master_hue[14] = vfx_fire_hue[2]\n        vfx_master_sat[14] = vfx_fire_sat[2]\n        vfx_master_lum[14] = Math.max(0, Math.min(50, vfx_fire_lum[2]))\n\n"],[1,"    } else if (thisEffect == vfxEffect.indicate) {\n\n            } else if (thisEffect == vfxEffect.idle) {\n\n            } else if (thisEffect == vfxEffect.glow) {\n\n            } else if (thisEffect == vfxEffect.mine) {\n\n            } else if (thisEffect == vfxEffect.off) {\n        "],[0,"    "]],"start1":20804,"start2":20804,"length1":163,"length2":290},{"diffs":[[0,"hue["],[-1,"15"],[1,"index"],[0,"] = vfx_"],[-1,"off"],[1,"mine"],[0,"_hue["],[-1,"0]\n"],[1,"index]\n        "],[0,"    "]],"start1":21109,"start2":21109,"length1":29,"length2":45},{"diffs":[[0,"sat["],[-1,"15"],[1,"index"],[0,"] = vfx_"],[-1,"off"],[1,"mine"],[0,"_sat["],[-1,"0]\n"],[1,"index]\n        "],[0,"    "]],"start1":21169,"start2":21169,"length1":29,"length2":45},{"diffs":[[0,"lum["],[-1,"15"],[1,"index"],[0,"] = 0\n"],[1,"            }\n        }"],[0,"\n   "]],"start1":21229,"start2":21229,"length1":16,"length2":42}]}]},{"timestamp":1728789349516,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"[]; let vfx_"],[-1,"active"],[1,"glow"],[0,"_lum: number"]],"start1":1397,"start2":1397,"length1":30,"length2":28},{"diffs":[[0,"elPin, 1"],[-1,"7"],[1,"6"],[0,")\n      "]],"start1":5790,"start2":5790,"length1":17,"length2":17},{"diffs":[[0,"k()\n"],[-1,"        activeTick()\n"],[0,"    "]],"start1":12805,"start2":12805,"length1":29,"length2":8},{"diffs":[[0," }\n\n"],[-1,"    function activeTick(): void {\n        for (let index = 0; index < 1; index++) {\n            let thisLum = vfx_active_lum[index]\n            if (thisLum < 4) {\n                vfx_active_lum[index] = thisLum + .2\n            } else if (thisLum < 5) {\n                vfx_active_lum[index] = thisLum + + .3\n            } else if (thisLum < 10) {\n                vfx_active_lum[index] = thisLum + .5\n            } else if (thisLum < 15) {\n                vfx_active_lum[index] = thisLum + 1\n            } else if (thisLum < 30) {\n                vfx_active_lum[index] = thisLum + 1.5\n            } else if (thisLum < 100) {\n                vfx_active_lum[index] = thisLum + 4\n            } else {\n                vfx_active_lum[index] = 0\n            }\n        }\n    }\n"],[0,"    "]],"start1":18328,"start2":18328,"length1":778,"length2":8},{"diffs":[[0,"low_lum[0])\n"],[1,"\n"],[0,"        vfx_"]],"start1":18506,"start2":18506,"length1":24,"length2":25},{"diffs":[[0,"x_mine_lum[0]))\n"],[1,"\n"],[0,"        vfx_mast"]],"start1":18662,"start2":18662,"length1":32,"length2":33},{"diffs":[[0,"x_idle_lum[1]))\n"],[1,"\n"],[0,"        vfx_mast"]],"start1":18981,"start2":18981,"length1":32,"length2":33},{"diffs":[[0,"dicate_lum[1]))\n"],[1,"\n\n"],[0,"        vfx_mast"]],"start1":19324,"start2":19324,"length1":32,"length2":34},{"diffs":[[0,"de_lum[5]))\n"],[1,"\n"],[0,"        vfx_"]],"start1":20326,"start2":20326,"length1":24,"length2":25},{"diffs":[[0,"x_fire_lum[2]))\n"],[1,"\n"],[0,"        vfx_mast"]],"start1":20809,"start2":20809,"length1":32,"length2":33},{"diffs":[[0,"= 0\n"],[1,"\n"],[0,"    "],[1,"}\n"],[0,"    "],[-1,"vfx_master_hue[16] = vfx_active_hue[0]\n        vfx_master_sat[16] = vfx_active_sat[0]"],[1,"function castleSayWrite(): void{\n        vfxPrepareMaster()"],[0,"\n   "]],"start1":20941,"start2":20941,"length1":101,"length2":78},{"diffs":[[0,"    "],[-1,"vfx_"],[1,"let "],[0,"master"],[-1,"_lum[16] = Math.min(100, vfx_active_lum[0])\n"],[1,"Index = 0\n "],[0,"    "],[-1,"}\n"],[0,"   "],[-1," function castleSayWrite(): void{\n        vfxPrepareMaster("],[1,"// for (let index = 0; index < NeoSock.length(); index++){\n        //     NeoSock.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex]"],[0,")\n  "]],"start1":21020,"start2":21020,"length1":130,"length2":229},{"diffs":[[0,"Index])\n        "],[-1,"let"],[1,"//    "],[0," masterIndex = 0"]],"start1":21239,"start2":21239,"length1":35,"length2":38},{"diffs":[[0,"     masterIndex"],[-1," = 0"],[1,"++\n        // }"],[0,"\n        for (le"]],"start1":21257,"start2":21257,"length1":36,"length2":47}]}]},{"timestamp":1728789932013,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"ock "],[-1,"type=\"function_definition\" x=\"4169\" y=\"-242\"><mutation name=\"buttonPress\" functionid=\"+$9AXp*X:[tcODdtL9m)\"><arg name=\"button\" id=\"mfdvbnfdsij7xy9ejk0nd\" type=\"string\"></arg></mutation><field name=\"function_name\">buttonPress</field><value name=\"mfdvbnfdsij7xy9ejk0nd\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">button</field></block></value><statement name=\"STACK\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">button: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">button</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></statement></block><block "],[0,"type"]],"start1":1641,"start2":1641,"length1":935,"length2":8},{"diffs":[[0,"ue><"],[-1,"/block></next></block></next"],[1,"next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.mine</field></block></next></block></next></block></next></block></statement></block><block type=\"function_definition\" x=\"4113\" y=\"-189\"><mutation name=\"buttonPress\" functionid=\"+$9AXp*X:[tcODdtL9m)\"><arg name=\"button\" id=\"mfdvbnfdsij7xy9ejk0nd\" type=\"string\"></arg></mutation><field name=\"function_name\">buttonPress</field><value name=\"mfdvbnfdsij7xy9ejk0nd\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">button</field></block></value><statement name=\"STACK\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">button: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">button</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value"],[0,"></b"]],"start1":3753,"start2":3753,"length1":36,"length2":1129},{"diffs":[[0,"=\"28"],[-1,"68"],[1,"11"],[0,"\" y=\""],[-1,"231"],[1,"122"],[0,"\"><v"]],"start1":5800,"start2":5800,"length1":18,"length2":18},{"diffs":[[0," x=\""],[-1,"107"],[1,"55"],[0,"\" y=\"3"],[-1,"653"],[1,"705"],[0,"\"><m"]],"start1":24293,"start2":24293,"length1":20,"length2":19}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"icros()\n"],[1,"notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.mine)\n"],[0,"loops.ev"]],"start1":8966,"start2":8966,"length1":16,"length2":93}]},{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"talPin): void {\n"],[1,"        // NeoScore = create(scorePin, 8)\n        // NeoSock = create(sockPin, 8)\n"],[0,"        NeoWheel"]],"start1":5665,"start2":5665,"length1":32,"length2":114},{"diffs":[[0,"  vfxInit()\n"],[1,"        // vfx_indicate_hue[30]=hues.green\n"],[0,"        // v"]],"start1":5838,"start2":5838,"length1":24,"length2":67},{"diffs":[[0,"    "],[-1,"vfx_indicate_tog[1] = 1\n    }\n"],[1,"// vfx_indicate_hue[32] = hues.orange\n        // vfx_indicate_hue[33] = hues.red\n        // vfx_indicate_hue[26] = hues.red\n        // vfx_indicate_hue[27] = hues.red\n        // vfx_indicate_hue[28] = hues.red\n        // vfx_indicate_hue[29] = hues.red\n        vfx_indicate_tog[1] = 1\n        // setEffect(vfxRegion.CastleSayAll, vfxEffect.parade)\n    }\n\n    //% blockId=NL_PIXEL_CastleDo\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Strips:%spotPin  Bricks:%brickPin Kong Lights:%kongPin\"\n    //% weight=100\n    export function castleDoLights(stripPin: DigitalPin, brickPin: DigitalPin, kongPin: DigitalPin): void {\n        NeoStrip = create(stripPin, 20)\n        NeoBrick = create(brickPin, 8)\n        NeoKong = create(kongPin, 4)\n        vfx_light_count = 20 + 8 + 4\n        vfxInit()\n        vfx_indicate_hue[0]=hues.cyan; vfx_indicate_hue[1]=hues.cyan   //spot h\n        vfx_indicate_hue[2] = hues.pink; vfx_indicate_hue[3] = hues.pink //spot f\n        vfx_indicate_hue[26] = hues.pink   //shell brick\n        vfx_indicate_hue[4] = hues.orange; vfx_indicate_hue[5] = hues.orange   //spot d\n        vfx_indicate_hue[21] = hues.orange   //cannon brick\n        vfx_indicate_hue[25] = hues.orange   //bomb brick\n        vfx_indicate_hue[6] = hues.yellow; vfx_indicate_hue[7] = hues.yellow   //spot b\n        vfx_indicate_hue[8] = hues.red; vfx_indicate_hue[9] = hues.red; vfx_indicate_hue[10] = hues.red; vfx_indicate_hue[11] = hues.red  //spot a\n        vfx_indicate_hue[20] = hues.red; vfx_indicate_hue[27] = hues.red  //wheel bricks\n        vfx_indicate_hue[12] = hues.blue; vfx_indicate_hue[13] = hues.blue    //spot c\n        vfx_indicate_hue[14] = hues.cyan; vfx_indicate_hue[15] = hues.cyan    //spot e\n        vfx_indicate_hue[16] = hues.purple; vfx_indicate_hue[17] = hues.purple  //spot g\n        vfx_indicate_hue[24] = hues.purple  //ghost brick\n        vfx_indicate_hue[18] = hues.green; vfx_indicate_hue[19] = hues.green   //spot i\n        vfx_indicate_hue[28] = hues.green; vfx_indicate_hue[29] = hues.green; vfx_indicate_hue[30] = hues.green; vfx_indicate_hue[31] = hues.green   //kong\n        vfx_indicate_hue[22] = hues.yellow; vfx_indicate_hue[23] = hues.yellow  //dragon brick\n        vfx_indicate_tog[0] = 1; vfx_indicate_tog[1] = 1 //spot h\n        // vfx_indicate_tog[2] = 1; vfx_indicate_tog[3] = 1 //spot f\n        // vfx_indicate_tog[4] = 1; vfx_indicate_tog[5] = 1 //spot d\n        // vfx_indicate_tog[6] = 1; vfx_indicate_tog[7] = 1 //spot b\n        // vfx_indicate_tog[8] = 1; vfx_indicate_tog[9] = 1 //spot a\n        // vfx_indicate_tog[22] = 1; vfx_indicate_tog[27] = 1    //wheel bricks\n        // vfx_indicate_tog[21] = 1    //cannon brick\n        // vfx_indicate_tog[25] = 1    //bomb brick\n        // vfx_indicate_tog[26] = 1    //shell brick\n        // vfx_indicate_tog[31] = 1; vfx_indicate_tog[30] = 1    //kong\n        \n        // setEffect(vfxRegion.CastleDoAll, vfxEffect.indicate)\n    }"],[0,"\n\n  "]],"start1":5943,"start2":5943,"length1":38,"length2":2954},{"diffs":[[0,"yellow]\n"],[1,"        \n"],[0,"        "]],"start1":9162,"start2":9162,"length1":16,"length2":25},{"diffs":[[0,"sh(0)\n        }\n"],[1,"\n"],[0,"        for (let"]],"start1":10019,"start2":10019,"length1":32,"length2":33},{"diffs":[[0," 80))\n        }\n"],[1,"        \n"],[0,"        for (let"]],"start1":10294,"start2":10294,"length1":32,"length2":41},{"diffs":[[0,"h(50)\n        }\n"],[1,"\n"],[0,"        for (let"]],"start1":10774,"start2":10774,"length1":32,"length2":33},{"diffs":[[0,"ex = 0; index < "],[-1,"2"],[1,"vfx_light_count"],[0,"; index++) {\n   "]],"start1":11336,"start2":11336,"length1":33,"length2":47},{"diffs":[[0,"ex = 0; index < "],[-1,"1"],[1,"vfx_light_count"],[0,"; index++) {\n   "]],"start1":11752,"start2":11752,"length1":33,"length2":47},{"diffs":[[0,"ex = 0; index < "],[-1,"1"],[1,"vfx_light_count"],[0,"; index++) {\n   "]],"start1":12047,"start2":12047,"length1":33,"length2":47},{"diffs":[[0,"ex = 0; index < "],[-1,"2"],[1,"vfx_light_count"],[0,"; index++) {\n   "]],"start1":12350,"start2":12350,"length1":33,"length2":47},{"diffs":[[0,"neTick()\n    }\n\n"],[1,"    //% blockId=NL_PIXEL_CastleDoTick\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Advance Castle Do lights\"\n    //% weight=100\n    export function castleDoTick(): void {\n        paradeTick()\n        fireTick()\n        glowTick()\n        castleDoWrite()\n        indicateTick()\n        idleTick()\n        mineTick()\n    }\n\n"],[0,"    function par"]],"start1":12909,"start2":12909,"length1":32,"length2":372},{"diffs":[[0,"        }\n    }\n"],[-1,"\n"],[0,"    function vfx"]],"start1":19109,"start2":19109,"length1":33,"length2":32},{"diffs":[[0,"e_lum[0])\n    }\n"],[-1,"\n"],[0,"    function cas"]],"start1":21877,"start2":21877,"length1":33,"length2":32},{"diffs":[[0,"        "],[-1,"NeoWheel"],[1,"// for (let index = 0; index < NeoScore.length(); index++) {\n        //     NeoScore.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n        //     masterIndex++\n        // }\n        // NeoSock.show()\n        NeoWheel.show()\n        // NeoScore.show()\n    }\n\n    function castleDoWrite(): void {\n        vfxPrepareMaster()\n        let masterIndex = 0\n        for (let index = 0; index < NeoStrip.length(); index++) {\n            NeoStrip.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        for (let index = 0; index < NeoBrick.length(); index++) {\n            NeoBrick.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        for (let index = 0; index < NeoKong.length(); index++) {\n            NeoKong.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        NeoStrip.show()\n        NeoBrick.show()\n        NeoKong"],[0,".show()\n"]],"start1":22221,"start2":22221,"length1":24,"length2":1201}]}]},{"timestamp":1728790381713,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"ariables><block "],[1,"type=\"every_interval\" x=\"681\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">2000</field></shadow></value><statement name=\"HANDLER\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value></block></statement></block><block "],[0,"type=\"function_d"]],"start1":960,"start2":960,"length1":32,"length2":701},{"diffs":[[0,"x=\"4"],[-1,"217"],[1,"169"],[0,"\" y=\"-2"],[-1,"9"],[1,"4"],[0,"2\"><"]],"start1":1672,"start2":1672,"length1":19,"length2":19},{"diffs":[[0,"val\""],[-1," x=\"681\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">2000</field></shadow></value><statement name=\"HANDLER\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value></block></statement></block><block type=\"every_interval\""],[0," x=\""]],"start1":2589,"start2":2589,"length1":677,"length2":8},{"diffs":[[0,"x=\"2"],[-1,"934"],[1,"868"],[0,"\" y=\""],[-1,"328"],[1,"231"],[0,"\"><v"]],"start1":5633,"start2":5633,"length1":19,"length2":19},{"diffs":[[0,"x=\"1"],[-1,"64"],[1,"07"],[0,"\" y=\"36"],[-1,"01"],[1,"53"],[0,"\"><m"]],"start1":24128,"start2":24128,"length1":19,"length2":19}]},{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,".buf"],[-1,".slice(0,3)"],[0,", Di"]],"start1":4181,"start2":4181,"length1":19,"length2":8}]}]},{"timestamp":1728790914760,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"slice(0,"],[-1," 12"],[1,"3"],[0,"), Digit"]],"start1":4186,"start2":4186,"length1":19,"length2":17},{"diffs":[[0,"in.P16);"],[1," "],[0,"\n       "]],"start1":4206,"start2":4206,"length1":16,"length2":17},{"diffs":[[0,"0])\n"],[-1,"        for (let index=0; index < NeoWheel.length(); index++){\n            \n        }\n"],[0,"    "]],"start1":18438,"start2":18438,"length1":94,"length2":8}]}]},{"timestamp":1728791292818,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"[];\n"],[-1,"    let vfx_master_r: number[] = []; let vfx_master_g: number[] = []; let vfx_master_b: number[] = [];\n"],[0,"    "]],"start1":2029,"start2":2029,"length1":111,"length2":8},{"diffs":[[0,"+){\n"],[-1,"\n"],[0,"        "],[-1,"}\n"],[0,"    "],[1,"\n"],[0,"    "],[-1,"// NeoWheel.buf.getNumber(0)\n"],[1,"    }"],[0,"\n   "]],"start1":18502,"start2":18502,"length1":56,"length2":30}]}]},{"timestamp":1728791841356,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"    "],[-1,"     vfx_master_g[pixeloffset] = Math.round(g * 255);\n            vfx_master_r[pixeloffset] = Math.round(r * 255);\n            vfx_master_b[pixeloffset] = Math.round(b * 255);\n        }\n\n\n        // setPixelHSLPrecise(pixeloffset: number, h: number, s: number, l: number): void {\n        //     if (pixeloffset < 0 || pixeloffset >= this._length)\n        //         return;\n        //     pixeloffset = (pixeloffset + this.start) * 3\n        //     h = Math.clamp(0, 1, h / 360)\n        //     s = Math.clamp(0, 1, s / 100)\n        //     l = Math.clamp(0, 1, l / 100)\n        //     let r, g, b;\n        //     if (s === 0) {\n        //         r = g = b = l; // achromatic\n        //     } else {\n        //         const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        //         const p = 2 * l - q;\n        //         let t = h + 1 / 3\n        //         if (t < 0) { t += 1; }\n        //         else if (t > 1) { t -= 1; }\n        //         if (t < 1 / 6) { r = p + (q - p) * 6 * t; }\n        //         else if (t < 1 / 2) { r = q; }\n        //         else if (t < 2 / 3) { r = p + (q - p) * (2 / 3 - t) * 6; }\n        //         else { r = p; }\n        //         t = h\n        //         if (t < 0) { t += 1; }\n        //         else if (t > 1) { t -= 1; }\n        //         if (t < 1 / 6) { g = p + (q - p) * 6 * t; }\n        //         else if (t < 1 / 2) { g = q; }\n        //         else if (t < 2 / 3) { g = p + (q - p) * (2 / 3 - t) * 6; }\n        //         else { g = p; }\n        //         t = h - 1 / 3\n        //         if (t < 0) { t += 1; }\n        //         else if (t > 1) { t -= 1; }\n        //         if (t < 1 / 6) { b = p + (q - p) * 6 * t; }\n        //         else if (t < 1 / 2) { b = q; }\n        //         else if (t < 2 / 3) { b = p + (q - p) * (2 / 3 - t) * 6; }\n        //         else { b = p; }\n        //     }\n        //"],[0,"    "]],"start1":3955,"start2":3955,"length1":1882,"length2":8},{"diffs":[[0," * 255);\n       "],[-1," //"],[0,"     this.buf[pi"]],"start1":4004,"start2":4004,"length1":35,"length2":32},{"diffs":[[0,"\n       "],[-1," //"],[0,"     thi"]],"start1":4073,"start2":4073,"length1":19,"length2":16},{"diffs":[[0,"\n       "],[-1," //"],[0," }\n\n    "]],"start1":4134,"start2":4134,"length1":19,"length2":16},{"diffs":[[0,"    "],[-1," let newBuffer: Buffer;\n            newBuffer[0] = vfx_master_g[0]\n            newBuffer[1] = vfx_master_r[0]\n            newBuffer[2] = vfx_master_b[0]\n            //"],[0," sen"]],"start1":4264,"start2":4264,"length1":175,"length2":8},{"diffs":[[0,"    "],[-1," sendBuffer(newBuffer, DigitalPin.P16);\n            //"],[0," sen"]],"start1":4327,"start2":4327,"length1":62,"length2":8},{"diffs":[[0,"15);\n           "],[-1," //"],[0," sendBuffer(this"]],"start1":4365,"start2":4365,"length1":35,"length2":32},{"diffs":[[0,"14);\n           "],[-1," //"],[0," sendBuffer(this"]],"start1":4415,"start2":4415,"length1":35,"length2":32},{"diffs":[[0,"13);\n           "],[-1," //"],[0," sendBuffer(this"]],"start1":4465,"start2":4465,"length1":35,"length2":32},{"diffs":[[0,"12);\n           "],[-1," //"],[0," sendBuffer(this"]],"start1":4515,"start2":4515,"length1":35,"length2":32},{"diffs":[[0,"        "],[-1," //"],[0," sendBuf"]],"start1":4572,"start2":4572,"length1":19,"length2":16}]}]},{"timestamp":1728792374456,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"5);\n"],[-1,"            this.buf[pixeloffset + 0] = Math.round(g * 255);\n            this.buf[pixeloffset + 1] = Math.round(r * 255);\n            this.buf[pixeloffset + 2] = Math.round(b * 255);\n"],[0,"    "]],"start1":4131,"start2":4131,"length1":191,"length2":8},{"diffs":[[0,"        "],[-1," //"],[0," let new"]],"start1":6143,"start2":6143,"length1":19,"length2":16},{"diffs":[[0,"fer;\n           "],[-1," //"],[0," newBuffer[0] = "]],"start1":6170,"start2":6170,"length1":35,"length2":32},{"diffs":[[0,"g[0]\n           "],[-1," //"],[0," newBuffer[1] = "]],"start1":6213,"start2":6213,"length1":35,"length2":32},{"diffs":[[0,"        "],[-1," //"],[0," newBuff"]],"start1":6264,"start2":6264,"length1":19,"length2":16},{"diffs":[[0,"    "],[-1,"this.buf[0] = vfx_master_g[0]\n            this.buf[1] = vfx_master_r[0]\n            this.buf[2] = vfx_master_b[0]\n           "],[1,"//"],[0," sen"]],"start1":6312,"start2":6312,"length1":133,"length2":10},{"diffs":[[0,"16);\n           "],[-1," //"],[0," sendBuffer(newB"]],"start1":6365,"start2":6365,"length1":35,"length2":32}]}]},{"timestamp":1728792953892,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"er_g[pixeloffset"],[-1,"/3"],[0,"] = Math.round(g"]],"start1":3972,"start2":3972,"length1":34,"length2":32},{"diffs":[[0,"er_r[pixeloffset"],[-1,"/3"],[0,"] = Math.round(r"]],"start1":4033,"start2":4033,"length1":34,"length2":32},{"diffs":[[0,"eloffset"],[-1,"/3"],[0,"] = Math"]],"start1":4102,"start2":4102,"length1":18,"length2":16},{"diffs":[[0,"aster_g["],[-1,"3"],[1,"0"],[0,"]\n      "]],"start1":6530,"start2":6530,"length1":17,"length2":17},{"diffs":[[0,"aster_r["],[-1,"3"],[1,"0"],[0,"]\n      "]],"start1":6572,"start2":6572,"length1":17,"length2":17},{"diffs":[[0,"aster_b["],[-1,"3"],[1,"0"],[0,"]\n      "]],"start1":6614,"start2":6614,"length1":17,"length2":17}]}]},{"timestamp":1728793163486,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"[3]\n"],[-1,"\n\n\n            \n"],[0,"    "]],"start1":6627,"start2":6627,"length1":24,"length2":8}]}]},{"timestamp":1728839320961,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"r_b[3]\n\n"],[1,"\n\n"],[0,"        "]],"start1":6624,"start2":6624,"length1":16,"length2":18},{"diffs":[[0,"       \n"],[-1,"\n\n"],[0,"        "]],"start1":6639,"start2":6639,"length1":18,"length2":16}]}]},{"timestamp":1728839325326,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"b[0]\n           "],[-1," //"],[0," this.buf[0] = v"]],"start1":6500,"start2":6500,"length1":35,"length2":32},{"diffs":[[0,"g[3]\n           "],[-1," //"],[0," this.buf[1] = v"]],"start1":6542,"start2":6542,"length1":35,"length2":32},{"diffs":[[0,"\n           "],[-1," //"],[0," this.buf[2]"]],"start1":6588,"start2":6588,"length1":27,"length2":24},{"diffs":[[0,"[3]\n"],[-1,"            let paletteKong = [0,0,0,0]\n            for (let i=0; i<4; i++) {\n                this.buf[i * 3 + 0] = vfx_master_g[paletteKong[i]]\n                this.buf[i * 3 + 1] = vfx_master_r[paletteKong[i]]\n                this.buf[i * 3 + 2] = vfx_master_b[paletteKong[i]]\n            }\n            sendBuffer(this.buf.slice(0, 4*3), DigitalPin.P16);\n\n            let paletteWheel = [0, 0, 0, 0]\n            for (let i = 0; i < 20; i++) {\n                this.buf[i * 3 + 0] = vfx_master_g[paletteWheel[i]]\n                this.buf[i * 3 + 1] = vfx_master_r[paletteWheel[i]]\n                this.buf[i * 3 + 2] = vfx_master_b[paletteWheel[i]]\n            }\n            sendBuffer(this.buf.slice(0, 20*3"],[1,"\n            \n\n\n            sendBuffer(this.buf.slice(0, 12"],[0,"), D"]],"start1":6627,"start2":6627,"length1":716,"length2":67},{"diffs":[[0,"n.P1"],[-1,"5"],[1,"6"],[0,");\n"],[-1,"\n\n\n"],[0,"    "]],"start1":6702,"start2":6702,"length1":15,"length2":12},{"diffs":[[0,"eelPin, "],[-1,"20"],[1,"17"],[0,")\n      "]],"start1":8286,"start2":8286,"length1":18,"length2":18},{"diffs":[[0,"count = "],[-1,"20"],[1,"17"],[0,"\n       "]],"start1":8316,"start2":8316,"length1":18,"length2":18}]}]},{"timestamp":1728839907424,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,", 0,"],[-1," 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"],[0," 0]\n"]],"start1":7034,"start2":7034,"length1":56,"length2":8},{"diffs":[[0,");\n\n"],[-1,"            let paletteSock = [0, 0, 0, 0, 0, 0, 0, 0]\n            for (let i = 0; i < 8; i++) {\n                this.buf[i * 3 + 0] = vfx_master_g[paletteSock[i]]\n                this.buf[i * 3 + 1] = vfx_master_r[paletteSock[i]]\n                this.buf[i * 3 + 2] = vfx_master_b[paletteSock[i]]\n            }\n            sendBuffer(this.buf.slice(0, 8 * 3), DigitalPin.P14);\n\n            let paletteScore = [0, 0, 0, 0, 0, 0, 0, 0]\n            for (let i = 0; i < 8; i++) {\n                this.buf[i * 3 + 0] = vfx_master_g[paletteScore[i]]\n                this.buf[i * 3 + 1] = vfx_master_r[paletteScore[i]]\n                this.buf[i * 3 + 2] = vfx_master_b[paletteScore[i]]\n            }\n            sendBuffer(this.buf.slice(0, 8 * 3), DigitalPin.P13);\n\n            let paletteBricks = [0, 0, 0, 0, 0, 0, 0, 0]\n            for (let i = 0; i < 8; i++) {\n                this.buf[i * 3 + 0] = vfx_master_g[paletteBricks[i]]\n                this.buf[i * 3 + 1] = vfx_master_r[paletteBricks[i]]\n                this.buf[i * 3 + 2] = vfx_master_b[paletteBricks[i]]\n            }\n            sendBuffer(this.buf.slice(0, 8 * 3), DigitalPin.P12);\n\n            let paletteStrip = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n            for (let i = 0; i < 20; i++) {\n                this.buf[i * 3 + 0] = vfx_master_g[paletteStrip[i]]\n                this.buf[i * 3 + 1] = vfx_master_r[paletteStrip[i]]\n                this.buf[i * 3 + 2] = vfx_master_b[paletteStrip[i]]\n            }\n            sendBuffer(this.buf.slice(0, 20 * 3), DigitalPin.P8);\n\n\n            let paletteSwing = [0, 0, 0, 0, 0, 0, 0, 0]\n            for (let i = 0; i < 8; i++) {\n                this.buf[i * 3 + 0] = vfx_master_g[paletteSwing[i]]\n                this.buf[i * 3 + 1] = vfx_master_r[paletteSwing[i]]\n                this.buf[i * 3 + 2] = vfx_master_b[paletteSwing[i]]\n            }\n            sendBuffer(this.buf.slice(0, 8 * 3), DigitalPin.P12);\n"],[0,"\n\n  "]],"start1":7365,"start2":7365,"length1":1960,"length2":8}]}]},{"timestamp":1728840488437,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"= 0\n"],[-1,"    let bufferKing: Buffer = null; \n\n"],[0,"\n   "]],"start1":2160,"start2":2160,"length1":45,"length2":8},{"diffs":[[0," = ["],[-1,"1,1,1,1"],[1,"0,0,0,0"],[0,"]\n  "]],"start1":6667,"start2":6667,"length1":15,"length2":15},{"diffs":[[0,"DigitalPin.P"],[1,"1"],[0,"2);\n\n\n      "]],"start1":9352,"start2":9352,"length1":24,"length2":25}]}]},{"timestamp":1728841080208,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"ferK"],[-1,"ong=pins.createBuffer(); let paletteKong = [0,0,0,0]"],[1,"ing: Buffer = null; "],[0,"\n\n\n "]],"start1":2175,"start2":2175,"length1":60,"length2":28},{"diffs":[[0,"    "],[-1,"for (let i=0; i<4; i++) {\n                bufferKong.setNumber(NumberFormat.Int8LE, i * 3 + 0, vfx_master_g[paletteKong[i]])\n                bufferKong.setNumber(NumberFormat.Int8LE, i * 3 + 1, vfx_master_r[paletteKong[i]])\n                bufferKong.setNumber(NumberFormat.Int8LE, "],[1,"let paletteKong = [1,1,1,1]\n            for (let i=0; i<4; i++) {\n                this.buf["],[0,"i * 3 + "],[-1,"2,"],[1,"0] ="],[0," vfx"]],"start1":6685,"start2":6685,"length1":300,"length2":111},{"diffs":[[0,"0] = vfx_master_"],[-1,"b"],[1,"g"],[0,"[paletteKong[i]]"]],"start1":6788,"start2":6788,"length1":33,"length2":33},{"diffs":[[0,"Kong[i]]"],[-1,")"],[0,"\n       "]],"start1":6813,"start2":6813,"length1":17,"length2":16},{"diffs":[[0,"            "],[-1,"// bufferKong"],[1,"this.buf"],[0,"[i * 3 + 1] "]],"start1":6826,"start2":6826,"length1":37,"length2":32},{"diffs":[[0,"    "],[-1,"// bufferKong"],[1,"this.buf"],[0,"[i *"]],"start1":6901,"start2":6901,"length1":21,"length2":16},{"diffs":[[0,"fer("],[-1,"bufferKong"],[1,"this.buf.slice(0, 4*3)"],[0,", Di"]],"start1":6989,"start2":6989,"length1":18,"length2":30}]}]},{"timestamp":1728841690152,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"fer("],[-1,"4*"],[0,"); l"]],"start1":2197,"start2":2197,"length1":10,"length2":8}]}]},{"timestamp":1728841691284,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"unt = 0\n"],[1,"    let bufferKong=pins.createBuffer(4*); let paletteKong = [0,0,0,0]"],[0,"\n\n\n    /"]],"start1":2156,"start2":2156,"length1":16,"length2":85},{"diffs":[[0,"    "],[1," //"],[0," let "],[-1,"paletteKong = [1, 1, 1, 1"],[1,"newBuffer: Buffer;\n            // newBuffer[0] = vfx_master_g[0]\n            // newBuffer[1] = vfx_master_r[0]\n            // newBuffer[2] = vfx_master_b[0]\n            // this.buf[0] = vfx_master_g[3]\n            // this.buf[1] = vfx_master_r[3]\n            // this.buf[2] = vfx_master_b[3"],[0,"]\n  "]],"start1":6407,"start2":6407,"length1":38,"length2":306},{"diffs":[[0,"  for (let i"],[-1," = "],[1,"="],[0,"0; i"],[-1," < "],[1,"<"],[0,"4; i++) {\n  "]],"start1":6721,"start2":6721,"length1":34,"length2":30},{"diffs":[[0,"            "],[-1,"this.buf["],[1,"bufferKong.setNumber(NumberFormat.Int8LE, "],[0,"i * 3 + 0] ="]],"start1":6753,"start2":6753,"length1":33,"length2":66},{"diffs":[[0,"nt8LE, i * 3 + 0"],[-1,"] ="],[1,","],[0," vfx_master_g[pa"]],"start1":6800,"start2":6800,"length1":35,"length2":33},{"diffs":[[0,"[paletteKong[i]]"],[1,")"],[0,"\n               "]],"start1":6830,"start2":6830,"length1":32,"length2":33},{"diffs":[[0,"            "],[-1,"this.buf"],[1,"bufferKong.setNumber(NumberFormat.Int8LE, i * 3 + 1, vfx_master_r[paletteKong[i]])\n                bufferKong.setNumber(NumberFormat.Int8LE, i * 3 + 2, vfx_master_b[paletteKong[i]])\n                // bufferKong"],[0,"[i * 3 + 1] "]],"start1":6852,"start2":6852,"length1":32,"length2":235},{"diffs":[[0,"            "],[-1,"this.buf"],[1,"// bufferKong"],[0,"[i * 3 + 2] "]],"start1":7122,"start2":7122,"length1":32,"length2":37},{"diffs":[[0,"fer("],[-1,"this.buf.slice(0, 4 * 3)"],[1,"bufferKong"],[0,", Di"]],"start1":7223,"start2":7223,"length1":32,"length2":18},{"diffs":[[0,"Sock = ["],[-1,"2, 3, 2, 3, 2, 3, 2, 3"],[1,"0, 0, 0, 0, 0, 0, 0, 0"],[0,"]\n      "]],"start1":7699,"start2":7699,"length1":38,"length2":38},{"diffs":[[0,"core = ["],[-1,"2, 3, 2, 3, 2, 3, 2, 3"],[1,"0, 0, 0, 0, 0, 0, 0, 0"],[0,"]\n      "]],"start1":8079,"start2":8079,"length1":38,"length2":38},{"diffs":[[0,"icks = ["],[-1,"2, 3, 2, 3, 2, 3, 2, 3"],[1,"0, 0, 0, 0, 0, 0, 0, 0"],[0,"]\n      "]],"start1":8463,"start2":8463,"length1":38,"length2":38},{"diffs":[[0," = ["],[-1,"2, 3, 2, 3, 2, 3, 2, 3"],[1,"0, 0, 0, 0, 0, 0, 0, 0"],[0,"]\n  "]],"start1":9274,"start2":9274,"length1":30,"length2":30}]}]},{"timestamp":1728842276111,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0," = ["],[-1,"6, 7, 8, 9"],[1,"0, 0, 0, 0"],[0,", "],[-1,"1"],[0,"0, "],[-1,"11, 6, 7, 8, 9"],[1,"0, 0, 0, 0, 0"],[0,", "],[-1,"1"],[0,"0, "],[-1,"11, 6, 7, 8, 9"],[1,"0, 0, 0, 0, 0"],[0,", "],[-1,"1"],[0,"0, "],[-1,"11, 6, 7"],[1,"0, 0, 0"],[0,"]\n  "]],"start1":8294,"start2":8294,"length1":72,"length2":66}]}]},{"timestamp":1728842335856,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0,"lPin.P8);\n\n\n"],[1,"            let paletteSwing = [2, 3, 2, 3, 2, 3, 2, 3]\n"],[0,"            "]],"start1":8681,"start2":8681,"length1":24,"length2":80}]}]},{"timestamp":1728844014232,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0," 7]\n"],[-1,"            \n"],[0,"    "]],"start1":8360,"start2":8360,"length1":21,"length2":8}]}]},{"timestamp":1728844015977,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"notlegos.ts","patch":[{"diffs":[[0," 0\n\n"],[-1,"    let paletteKong = [1, 1, 1, 1]\n    let paletteWheel = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    let paletteSock = [2, 3, 2, 3, 2, 3, 2, 3]\n    let paletteScore = [2, 3, 2, 3, 2, 3, 2, 3]\n    let paletteBricks = [2, 3, 2, 3, 2, 3, 2, 3]\n    let paletteStrip = [6, 7, 8, 9, 10, 11, 6, 7, 8, 9, 10, 11, 6, 7, 8, 9, 10, 11, 6, 7]\n    let paletteSwing = [2, 3, 2, 3, 2, 3, 2, 3]"],[0,"\n\n  "]],"start1":2161,"start2":2161,"length1":408,"length2":8},{"diffs":[[0,"ow() { \n"],[1,"            let paletteKong = [1, 1, 1, 1]"],[0,"\n"],[-1,""],[0,"        "]],"start1":6323,"start2":6323,"length1":17,"length2":59},{"diffs":[[0,"lPin.P16);\n\n"],[1,"            let paletteWheel = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"],[0,"\n"],[-1,""],[0,"            "]],"start1":6686,"start2":6686,"length1":25,"length2":116},{"diffs":[[0,"lPin.P15);\n\n"],[1,"            let paletteSock = [2, 3, 2, 3, 2, 3, 2, 3]\n"],[0,"            "]],"start1":7105,"start2":7105,"length1":24,"length2":79},{"diffs":[[0,"lPin.P14);\n\n"],[1,"            let paletteScore = [2, 3, 2, 3, 2, 3, 2, 3]\n"],[0,"            "]],"start1":7484,"start2":7484,"length1":24,"length2":80},{"diffs":[[0,"lPin.P13);\n\n"],[1,"            let paletteBricks = [2, 3, 2, 3, 2, 3, 2, 3]"],[0,"\n"],[-1,""],[0,"            "]],"start1":7867,"start2":7867,"length1":25,"length2":81},{"diffs":[[0,"lPin.P12);\n\n"],[1,"            let paletteStrip = [6, 7, 8, 9, 10, 11, 6, 7, 8, 9, 10, 11, 6, 7, 8, 9, 10, 11, 6, 7]\n            "],[0,"\n"],[-1,""],[0,"            "]],"start1":8254,"start2":8254,"length1":25,"length2":135},{"diffs":[[0,".P8);\n\n\n"],[1,"            for (let i = 0; i < 8; i++) {\n                this.buf[i * 3 + 0] = vfx_master_g[paletteSwing[i]]\n                this.buf[i * 3 + 1] = vfx_master_r[paletteSwing[i]]\n                this.buf[i * 3 + 2] = vfx_master_b[paletteSwing[i]]\n            }\n            sendBuffer(this.buf.slice(0, 8 * 3), DigitalPin.P2);\n\n\n            // sendBuffer(newBuffer, DigitalPin.P16);\n            // sendBuffer(this.buf, DigitalPin.P15);\n            // sendBuffer(this.buf, DigitalPin.P14);\n            // sendBuffer(this.buf, DigitalPin.P13);\n            // sendBuffer(this.buf, DigitalPin.P12);\n            // sendBuffer(this.buf, DigitalPin.P8);\n            // sendBuffer(this.buf, DigitalPin.P2);\n"],[0,"        "]],"start1":8698,"start2":8698,"length1":16,"length2":713}]}]},{"timestamp":1728844103009,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"egos"],[-1,"3"],[1,"Master"],[0,"\",\n "]],"start1":19,"start2":19,"length1":9,"length2":14}]}]},{"timestamp":1728849781448,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"ion\""],[-1," id=\"-:0S`K7biRW+S!eK65Z}\""],[0," x=\""]],"start1":998,"start2":998,"length1":34,"length2":8},{"diffs":[[0,"ing\""],[-1," id=\"[}__U}/^ToL-NBi^{].z\""],[0,"><mu"]],"start1":1278,"start2":1278,"length1":34,"length2":8},{"diffs":[[0,"ine\""],[-1," id=\"m=f,}7JRazN(QmQ9D7j$\""],[0,"><va"]],"start1":1428,"start2":1428,"length1":34,"length2":8},{"diffs":[[0,"oin\""],[-1," id=\"XQ#}+x4v^=Sfo@sKe?gB\""],[0,"><mu"]],"start1":1471,"start2":1471,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"_I8REX:DqEg0?C?y~yGi\""],[0,"><fi"]],"start1":1541,"start2":1541,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"mZzkSH*D0y+mG=[@-Y$Q\""],[0,"><fi"]],"start1":1632,"start2":1632,"length1":34,"length2":8},{"diffs":[[0,"ing\""],[-1," id=\"V1R}fG,0$.;~lU3(5G@j\""],[0,"><fi"]],"start1":1707,"start2":1707,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"w62uf:GJipuHi5VN;Js]\""],[0,"><fi"]],"start1":1819,"start2":1819,"length1":34,"length2":8},{"diffs":[[0,"val\""],[-1," id=\"N+5fz{!uA.$*4JIhJadF\""],[0," x=\""]],"start1":1920,"start2":1920,"length1":34,"length2":8},{"diffs":[[0,"ker\""],[-1," id=\"P/=Y3+hM.(`PknH~/?zW\""],[0,"><fi"]],"start1":1989,"start2":1989,"length1":34,"length2":8},{"diffs":[[0,"ine\""],[-1," id=\"|0q}]Qf*O3lty(3vnw8$\""],[0,"><va"]],"start1":2093,"start2":2093,"length1":34,"length2":8},{"diffs":[[0,"oin\""],[-1," id=\"eU.}]OiQgx?!UL.A3w9m\""],[0,"><mu"]],"start1":2136,"start2":2136,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"7=6`{EXf3ha|QhzPfM~!\""],[0,"><fi"]],"start1":2206,"start2":2206,"length1":34,"length2":8},{"diffs":[[0,"get\""],[-1," id=\"iXz(Cz5y3wd35E)C]lP2\""],[0,"><fi"]],"start1":2270,"start2":2270,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"4{4:L__D^7R4q.D;jzQ7\""],[0,"><fi"]],"start1":2382,"start2":2382,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"B#crl!LkKH.3aJnct286\""],[0,"><fi"]],"start1":2488,"start2":2488,"length1":34,"length2":8},{"diffs":[[0,"val\""],[-1," id=\"*HowjB`m[`HGY9N{E6Xs\""],[0," x=\""]],"start1":2589,"start2":2589,"length1":34,"length2":8},{"diffs":[[0,"ker\""],[-1," id=\"(u~NIEh0!!os_E0037-0\""],[0,"><fi"]],"start1":2659,"start2":2659,"length1":34,"length2":8},{"diffs":[[0,"val\""],[-1," id=\"sL[Y-wC3S#Yre?YrO1=)\""],[0," x=\""]],"start1":2741,"start2":2741,"length1":34,"length2":8},{"diffs":[[0,"ker\""],[-1," id=\"U=Q0NoiubX?0Lcpp|d,m\""],[0,"><fi"]],"start1":2811,"start2":2811,"length1":34,"length2":8},{"diffs":[[0,"set\""],[-1," id=\"-S_XcA{Z]8kXLnmuD-t`\""],[0,"><fi"]],"start1":2909,"start2":2909,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"RgNUOYnv?QjI|f{Vle-q\""],[0,"><fi"]],"start1":3014,"start2":3014,"length1":34,"length2":8},{"diffs":[[0,"ime\""],[-1," id=\"xH/`|?km4#oQUi-kn5fy\""],[0,"></b"]],"start1":3088,"start2":3088,"length1":34,"length2":8},{"diffs":[[0,"ick\""],[-1," id=\".BE;s7hHB@4*w)/gBQQl\""],[0,"><ne"]],"start1":3147,"start2":3147,"length1":34,"length2":8},{"diffs":[[0,"_if\""],[-1," id=\"X,9M0IB%%:)a]KUGx])F\""],[0,"><va"]],"start1":3179,"start2":3179,"length1":34,"length2":8},{"diffs":[[0,"ean\""],[-1," id=\"z%3q+raDHWb_,2^X,/`7\""],[0,"><fi"]],"start1":3226,"start2":3226,"length1":34,"length2":8},{"diffs":[[0,"get\""],[-1," id=\"]uA^.t-ZJM/BXkm7V9|t\""],[0,"><fi"]],"start1":3294,"start2":3294,"length1":34,"length2":8},{"diffs":[[0,"all\""],[-1," id=\"M%^KNNX*J*Avy_u0;~$T\""],[0,"><mu"]],"start1":3403,"start2":3403,"length1":34,"length2":8},{"diffs":[[0,"te3\""],[-1," id=\"bWvx%9M5xO|[gOu(.Y4d\""],[0,"><ne"]],"start1":3512,"start2":3512,"length1":34,"length2":8},{"diffs":[[0,"set\""],[-1," id=\"U2.`yjg8dd^)[Lf+0:G{\""],[0,"><fi"]],"start1":3546,"start2":3546,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"k|j^}5X@/Y6u(iP!s;(g\""],[0,"><fi"]],"start1":3650,"start2":3650,"length1":34,"length2":8},{"diffs":[[0,"tic\""],[-1," id=\")n`#25C8Ca9f*H+}7egV\""],[0,"><fi"]],"start1":3716,"start2":3716,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"ak1Eg!z)D%55R]`d-J#u\""],[0,"><fi"]],"start1":3789,"start2":3789,"length1":34,"length2":8},{"diffs":[[0,"ime\""],[-1," id=\"Er0!F}:?eNin_2ZIvh?O\""],[0,"></b"]],"start1":3863,"start2":3863,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"0cb*dn8dCwk{};YcOdL*\""],[0,"><fi"]],"start1":3922,"start2":3922,"length1":34,"length2":8},{"diffs":[[0,"get\""],[-1," id=\"F7$}52Y.cP1+|dJ7=Ems\""],[0,"><fi"]],"start1":3986,"start2":3986,"length1":34,"length2":8},{"diffs":[[0,"art\""],[-1," id=\"TlOhjSHQf`=bb2bzEG#.\""],[0," x=\""]],"start1":4206,"start2":4206,"length1":34,"length2":8},{"diffs":[[0,"nit\""],[-1," id=\"2$o}.O;yzCm/|nR(nsNo\""],[0,"><ne"]],"start1":4271,"start2":4271,"length1":34,"length2":8},{"diffs":[[0,"Say\""],[-1," id=\"fXA$uGj*0z{T0:rX_gXK\""],[0,"><fi"]],"start1":4310,"start2":4310,"length1":34,"length2":8},{"diffs":[[0,"set\""],[-1," id=\"xoNNoaLa2gKw+qdKYvuF\""],[0,"><fi"]],"start1":4476,"start2":4476,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"$A=ID)unm!N@?nCJo_ze\""],[0,"><fi"]],"start1":4581,"start2":4581,"length1":34,"length2":8},{"diffs":[[0,"ros\""],[-1," id=\"y+:hB%HI!wq[C+EQ!`1_\""],[0,"></b"]],"start1":4662,"start2":4662,"length1":34,"length2":8},{"diffs":[[0,"val\""],[-1," id=\"w%S*L?xI67Wlv73P7J+m\""],[0," x=\""]],"start1":4765,"start2":4765,"length1":34,"length2":8},{"diffs":[[0,"ker\""],[-1," id=\"0VA`cgA}Ib9%%gPFmyR-\""],[0,"><fi"]],"start1":4835,"start2":4835,"length1":34,"length2":8},{"diffs":[[0,"ent\""],[-1," id=\"D6U@W6gQ:}cY(z4q!2Ib\""],[0," x=\""]],"start1":4919,"start2":4919,"length1":34,"length2":8},{"diffs":[[0,"_if\""],[-1," id=\"=j(pL[1@QTwWSKAQ5j7r\""],[0,"><va"]],"start1":5041,"start2":5041,"length1":34,"length2":8},{"diffs":[[0,"ean\""],[-1," id=\"nGW]O_{azfJ@CEfnQ4ls\""],[0,"><fi"]],"start1":5088,"start2":5088,"length1":34,"length2":8},{"diffs":[[0,"get\""],[-1," id=\"pvj#]|5zM?D)RKF_,vV-\""],[0,"><fi"]],"start1":5156,"start2":5156,"length1":34,"length2":8},{"diffs":[[0,"Say\""],[-1," id=\"s;nobMz*`lf]Yl?;]6.A\""],[0,"><fi"]],"start1":5288,"start2":5288,"length1":34,"length2":8},{"diffs":[[0,"lay\""],[-1," id=\"95*:=q97?kNZWgr(N]|-\""],[0,"><fi"]],"start1":5379,"start2":5379,"length1":34,"length2":8},{"diffs":[[0,"lay\""],[-1," id=\"trK*;[6%58b0Ax+vP0d:\""],[0,"><fi"]],"start1":5463,"start2":5463,"length1":34,"length2":8},{"diffs":[[0,"rag\""],[-1," id=\"z#HzfaO.@29O:I^Z7Cvf\""],[0," x=\""]],"start1":5628,"start2":5628,"length1":34,"length2":8},{"diffs":[[0,"ing\""],[-1," id=\"KRH0yI!H%sf8DBij)F7@\""],[0,"><mu"]],"start1":5722,"start2":5722,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"K^:/JyW%J./6w)q-/l9C\""],[0,"><mu"]],"start1":5892,"start2":5892,"length1":34,"length2":8},{"diffs":[[0,"_if\""],[-1," id=\"qgOa?A#3)gH2Rd6f7XC+\""],[0,"><va"]],"start1":6037,"start2":6037,"length1":34,"length2":8},{"diffs":[[0,"ean\""],[-1," id=\"Y;yT*ggzKa[Xn}I/VA;L\""],[0,"><fi"]],"start1":6084,"start2":6084,"length1":34,"length2":8},{"diffs":[[0,"are\""],[-1," id=\"!pn9j=l(#~Fz3Zzk*80u\""],[0,"><fi"]],"start1":6152,"start2":6152,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"^`]s=WaH2;}`KS6if@wa\""],[0,"><fi"]],"start1":6222,"start2":6222,"length1":34,"length2":8},{"diffs":[[0,"str\""],[-1," id=\"|Ed@rCS|JNZtOYl~/)L*\""],[0,"><va"]],"start1":6286,"start2":6286,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"^Y!$z[K.Rpuj[DBxg=M@\""],[0,"><fi"]],"start1":6325,"start2":6325,"length1":34,"length2":8},{"diffs":[[0,"ing\""],[-1," id=\"zcCuB|fk5MKu(zqd~51H\""],[0,"><fi"]],"start1":6400,"start2":6400,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"s:gsHH0}M]^|x`qk?`BR\""],[0,"><fi"]],"start1":6495,"start2":6495,"length1":34,"length2":8},{"diffs":[[0,"gth\""],[-1," id=\"Q~^.YC9_Q%vxsS4h8xRR\""],[0,"><va"]],"start1":6586,"start2":6586,"length1":34,"length2":8},{"diffs":[[0,"get\""],[-1," id=\"X25`%x9+@mU6nqx5,qK!\""],[0,"><fi"]],"start1":6634,"start2":6634,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"f[oe|0O*4Sq[Y+8Dz|qY\""],[0,"><fi"]],"start1":6784,"start2":6784,"length1":34,"length2":8},{"diffs":[[0,"get\""],[-1," id=\"oJ~a)MV#GFlv.B9I^~))\""],[0,"><fi"]],"start1":6848,"start2":6848,"length1":34,"length2":8},{"diffs":[[0,"set\""],[-1," id=\"toIY@P9XE])R,3fg.PFx\""],[0,"><fi"]],"start1":6989,"start2":6989,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"KZhJqhxi%Pz3g{m#-:6@\""],[0,"><fi"]],"start1":7095,"start2":7095,"length1":34,"length2":8},{"diffs":[[0,"str\""],[-1," id=\"N4XN#NO7sb}+WgR86AO]\""],[0,"><va"]],"start1":7159,"start2":7159,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"g2{?24VeGl0.)gfZO8Vd\""],[0,"><fi"]],"start1":7198,"start2":7198,"length1":34,"length2":8},{"diffs":[[0,"ing\""],[-1," id=\"4{4qc]L$v,`dDR|=|Jj-\""],[0,"><fi"]],"start1":7273,"start2":7273,"length1":34,"length2":8},{"diffs":[[0,"gth\""],[-1," id=\"Ub8jPS*]Fo)fK$s5`%!K\""],[0,"><va"]],"start1":7367,"start2":7367,"length1":34,"length2":8},{"diffs":[[0,"get\""],[-1," id=\"osZFqN^V)n,X__j,W!qK\""],[0,"><fi"]],"start1":7415,"start2":7415,"length1":34,"length2":8},{"diffs":[[0,"tic\""],[-1," id=\"Ag)C[mwp^te2azigRmf{\""],[0,"><fi"]],"start1":7557,"start2":7557,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"2*WvgY90,oR^*Ven9e%N\""],[0,"><fi"]],"start1":7630,"start2":7630,"length1":34,"length2":8},{"diffs":[[0,"gth\""],[-1," id=\":nqXLkV$50}0Zij94%H[\""],[0,"><va"]],"start1":7692,"start2":7692,"length1":34,"length2":8},{"diffs":[[0,"ing\""],[-1," id=\"6dp]5HT!qJO2QgHmoYep\""],[0,"><fi"]],"start1":7751,"start2":7751,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"0GAHgZY,/hpti=?+D2J0\""],[0,"><fi"]],"start1":7858,"start2":7858,"length1":34,"length2":8},{"diffs":[[0,"gth\""],[-1," id=\".!vm_xr8}0[A4DD[f2;+\""],[0,"><va"]],"start1":7920,"start2":7920,"length1":34,"length2":8},{"diffs":[[0,"get\""],[-1," id=\"QGotDQ[d{kgX$;E%v34u\""],[0,"><fi"]],"start1":7968,"start2":7968,"length1":34,"length2":8},{"diffs":[[0,"_if\""],[-1," id=\"Rfl:0tQ0Jz#%C3qM%9~h\""],[0,"><mu"]],"start1":8123,"start2":8123,"length1":34,"length2":8},{"diffs":[[0,"ean\""],[-1," id=\"M%.w|g8_Qbn1M`s#-8H}\""],[0,"><fi"]],"start1":8200,"start2":8200,"length1":34,"length2":8},{"diffs":[[0,"get\""],[-1," id=\"cUPF%8v6k$P3J?+aHG}?\""],[0,"><fi"]],"start1":8268,"start2":8268,"length1":34,"length2":8},{"diffs":[[0,"_if\""],[-1," id=\"I-Y4zFQ6hb(hR03yf0EW\""],[0,"><mu"]],"start1":8395,"start2":8395,"length1":34,"length2":8},{"diffs":[[0,"ean\""],[-1," id=\"26yNFRHVCz5N?QC~UBp#\""],[0,"><fi"]],"start1":8474,"start2":8474,"length1":34,"length2":8},{"diffs":[[0,"are\""],[-1," id=\"aSC@DI,WMB)KFG.dKhFA\""],[0,"><fi"]],"start1":8542,"start2":8542,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"tIVgdnRG}kFnAT8XX[n^\""],[0,"><fi"]],"start1":8612,"start2":8612,"length1":34,"length2":8},{"diffs":[[0,"get\""],[-1," id=\"UyA|`oPN:N:Dbp(F/E@J\""],[0,"><fi"]],"start1":8676,"start2":8676,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"O`-bZ$oSqF.FqPY.,n6v\""],[0,"><fi"]],"start1":8794,"start2":8794,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"eP|#0q@@xd5YUku@-$8.\""],[0,"><fi"]],"start1":8849,"start2":8849,"length1":34,"length2":8},{"diffs":[[0,"set\""],[-1," id=\"~37YVJ1S_v_{~JQsJVq+\""],[0,"><fi"]],"start1":8963,"start2":8963,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"]nE_4zM!7SV_xBuqh1Ap\""],[0,"><fi"]],"start1":9072,"start2":9072,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"dTSfSB$t4-HFg]zpqPX/\""],[0,"><fi"]],"start1":9127,"start2":9127,"length1":34,"length2":8},{"diffs":[[0,"ean\""],[-1," id=\",!kCkS)Id%pl*m%R4ixy\""],[0,"><fi"]],"start1":9247,"start2":9247,"length1":34,"length2":8},{"diffs":[[0,"are\""],[-1," id=\"Z)fOwS!W;ZqKSMzmu+VJ\""],[0,"><fi"]],"start1":9315,"start2":9315,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"_JxP(j=glDq=@Tm3)FtR\""],[0,"><fi"]],"start1":9385,"start2":9385,"length1":34,"length2":8},{"diffs":[[0,"get\""],[-1," id=\"u{7OOecuMlL9`q4b/@=_\""],[0,"><fi"]],"start1":9449,"start2":9449,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"xo;5!f=|w:l4yVzMjq1-\""],[0,"><fi"]],"start1":9567,"start2":9567,"length1":34,"length2":8},{"diffs":[[0,"ext\""],[-1," id=\"FGg@!u,^O#1o;f?57IO)\""],[0,"><fi"]],"start1":9622,"start2":9622,"length1":34,"length2":8},{"diffs":[[0,"_if\""],[-1," id=\"#Bao,{hA*!9a@g]$/^_!\""],[0,"><mu"]],"start1":9734,"start2":9734,"length1":34,"length2":8},{"diffs":[[0,"ean\""],[-1," id=\"-T*/uZqQBL7Cm{_`:f`w\""],[0,"><fi"]],"start1":9813,"start2":9813,"length1":34,"length2":8},{"diffs":[[0,"are\""],[-1," id=\"SMqu[F}iey^d|;7k5-Yz\""],[0,"><fi"]],"start1":9881,"start2":9881,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"hvG=agQx9~f[icg4-R$K\""],[0,"><fi"]],"start1":9951,"start2":9951,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\".2:XYZHjgk@?JZ`__yvL\""],[0,"><fi"]],"start1":10026,"start2":10026,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"D[p?1)Nt?Qrg]0vUU0QN\""],[0,"><fi"]],"start1":10118,"start2":10118,"length1":34,"length2":8},{"diffs":[[0,"VFX\""],[-1," id=\"HOcJ|UjoAzn|f#Mfd(qJ\""],[0,"><fi"]],"start1":10232,"start2":10232,"length1":34,"length2":8},{"diffs":[[0,"ect\""],[-1," id=\"d,Oo.a_3S_oKLS]V/vI6\""],[0,"><fi"]],"start1":10323,"start2":10323,"length1":34,"length2":8},{"diffs":[[0,"lay\""],[-1," id=\"@Q`W{Eg[6T?Y/F+UXM^W\""],[0,"><fi"]],"start1":10472,"start2":10472,"length1":34,"length2":8},{"diffs":[[0,"ean\""],[-1," id=\"(Rv{bhfLvfeqkrO{=:sm\""],[0,"><fi"]],"start1":10625,"start2":10625,"length1":34,"length2":8},{"diffs":[[0,"are\""],[-1," id=\"Oc}dtrN+hdW7HT^AeRH/\""],[0,"><fi"]],"start1":10693,"start2":10693,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"Y7{gl8~ATb*g*vpjloDU\""],[0,"><fi"]],"start1":10763,"start2":10763,"length1":34,"length2":8},{"diffs":[[0,"ber\""],[-1," id=\"u`g8XV#zd1oz{hXV22[#\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\" id=\"@LE%H@nz:`[.$s|Cll87\"><field name=\"NUM\">2</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"NL_PIXEL_SetEffect\" id=\",gbKGlmPaY_Mp!7pT8*/\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"NL_PIXEL_SetEffect\" id=\"~N)#|s*!l,t?eMk3bSt.\"><field name=\"region\">notLegos.vfxRegion.WheelAll</field><field name=\"effect\">notLegos.vfxEffect.fire</field><next><block type=\"device_pause\" id=\"[b]tNmPl]UC#gP56W)@R\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"H?6v60wJ|XoU[rRt*24)\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\" id=\"+pKE]3*:9*y|VddA68}c\"><field name=\"voice\">notLegos.voiceSaying.intro</field><next><block type=\"device_pause\" id=\"=vw(Zgw}Gha5q9jsvxtD\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"NuPlKfmi9$):^wJDScV5\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" id=\"~-JCH+5?g)x*ZUBx`]Am\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\" id=\"A%5;of~6;_U/cM9.V_Fd\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"o,x~;2v]k$S2[,:H;If=\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\" id=\"A=a%ow_PmQ3~?om,GQ`L\"><field name=\"genre\">notLegos.musicGenre.awaiting</field><next><block type=\"variables_set\" id=\"aW}Ifn=C/JtUg/L@/YQ0\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"F1s{#L16,-5BTvx:ra*T\"><field name=\"NUM\">0</field></shadow><block type=\"text\" id=\"=B(y1b.D]GXY!Bt+=.JN\"><field name=\"TEXT\">wait_reg</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\" id=\"ylnoZHa4K]szeHq5Mf#L\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" id=\"[x@gVW3Y=$:=n)tNt{u0\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\" id=\"7|e=18*fF$hW]ihHw~F:\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" id=\"FOE4G+v5h$?Dto=DE^:*\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\" id=\"48o}g^_^AogWOm%7n*|H\"><field name=\"NUM\">0</field></shadow><block type=\"text\" id=\"a$W)N5-Fgix8O]Sl-nH^\"><field name=\"TEXT\">check</field></block></value></block></value><statement name=\"DO2\"><block type=\"NL_PIXEL_SetEffect\" id=\"30P/__DxXZ=Bo@/v~^PK\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"function_call\" id=\"RpOyKF]fa[}}WX]Q`JpQ\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\" id=\"vWSwXDgK*F7j#T`qp+gU\"><field name=\"TEXT\">ready</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\" id=\"T!]0|fu!JX_,?cK{FeNn\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\" id=\"#/`7G40!ZA!,FF6hngew\"><field name=\"BOOL\">FALSE</field></shadow></value></block></statement><statement name=\"ELSE\"><block type=\"controls_if\" id=\"6T0D*u~[8w_{YAN.oL9d\"><mutation elseif=\"3\" else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\" id=\"{A3z74.EK8eN=:gOntA3\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" id=\")AqKd2a2;sUwZcjDsu*R\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\" id=\"XSd%lV)jPY32OcZPCjs*\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" id=\"9ox+/cFL)S2bJ88AM/|!\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\" id=\"NaQ-Ma[)WOG!zG:cyn8B\"><field name=\"NUM\">0</field></shadow><block type=\"text\" id=\"Ki(JD~jQsDqsh!y;Y$A!\"><field name=\"TEXT\">ready</field></block></value></block></value><statement name=\"DO0\"><block type=\"function_call\" id=\"z4Son+ENiea;(lj|mTw%\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\" id=\"s[G+Vy-03Q+/ce%~Ckm)\"><field name=\"TEXT\">wstar</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\" id=\"Jcu~]#aZ(8h}|i)^)dL^\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" id=\"-SXEvki@jgnfv%)9b*nA\"><field name=\"region\">notLegos.vfxRegion.KongFront</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\" id=\"E}baGKXfZg*lI6ErL[#y\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" id=\"lZY_]EQ{nTJj*47xRtuk\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\" id=\".Pv}7$%)X}uQS+@)lgC4\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" id=\"A(5.*h~;jE|E+i7J5Jib\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\" id=\"PtY6NZ+qnJ:2(3t_G;)P\"><field name=\"NUM\">0</field></shadow><block type=\"text\" id=\"SCKk+h3*r5,.MphQmp9d\"><field name=\"TEXT\">boot</field></block></value></block></value><statement name=\"DO1\"><block type=\"variables_set\" id=\"6HQ%5~MEP3t$2LBM::Rt\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"9`2w^OR^x,Il8qHS1Qgu\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" id=\"t2v_Dc~}wuz@nmup7s^C\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"NL_MOTOR_Set\" id=\",TV{{vzY/fkf(kHRq*7I\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\" id=\"hAzVZwOL9bI!k:tBdT.g\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"w*`kq,]@mRa1Esq.C(9a\"><field name=\"ms\">NaN</field></shadow><block type=\"math_arithmetic\" id=\"qyC^l8}9{.2n5i=Y7`aM\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\" id=\"}:5:w*pq#HJ9@v3/f9q4\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\" id=\"hEQoVn*%tAEg{yo_Rdr%\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\" id=\"oZ,L,1)Qijidhg|+xBrC\"><field name=\"NUM\">1000</field></shadow></value></block></value><next><block type=\"NL_MOTOR_Set\" id=\"ft%@#x0Q(!/B_HpsVuJv\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\" id=\"Lf]y_l4dL(Wf`]?(rvpW\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"P2zSx(-}UaB$mD9xjp!D\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"function_call\" id=\"L$9t:;yZ0v#pQO;O99^N\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\" id=\"zQJ_*tw/=l|8g8X0fh)?\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\" id=\"%~`zn]cqg~2N[U[#Nhp#\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"device_pause\" id=\"]2L*JGT7Wf;4Khqd0x}*\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"RpF/H[UvX~vs:%Wj?+sQ\"><field name=\"ms\">200</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\" id=\"4xk7@x:A7yU*U)61?]@m\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\" id=\"c7nHSOwo7[hQtE^N?OZ5\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\" id=\"]WK^5%vogA[Z.a+^/E3p\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"EM{UU3B!.E9lOoB^aUQ4\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" id=\"Jr57fyetfmF12dU|M?t=\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.idle</field><next><block type=\"NL_PIXEL_SetEffect\" id=\"t+Jnwzn(9t@[N0L?,on~\"><field name=\"region\">notLegos.vfxRegion.SpotH</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"NL_PIXEL_SetEffect\" id=\"mf-zd5ZbdlWty/KNd?m.\"><field name=\"region\">notLegos.vfxRegion.SpotI</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"device_pause\" id=\"A6T_Pg:T/emqXt.SjP%V\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"r5ATEZ5g9H(abekQW7[1\"><field name=\"ms\">0</field></shadow></value><next><block type=\"function_call\" id=\"iO6}vP)Hx|/gV)+8OBw/\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\" id=\"0_$*^coj$u|7i39dP9Lk\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\" id=\"RURG`)@MYi#M;6$2,U,h\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"device_pause\" id=\"p(R}@]){D?6wNEW}nWy#\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"b`$o8tI}Zwbgg(fw:eIc\"><field name=\"ms\">4500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" id=\"IR!4]S#(2_$di3saQmJf\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\" id=\"1EnGNiv`h#^i)i^*A2j/\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"tC+XPEk[1:Xof^XxYSxS\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" id=\",Xjb+WFkcx:]Efj!hGyG\"><field name=\"region\">notLegos.vfxRegion.BrickDragon</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\" id=\"Eg%0R(/r3bRKCF~S24a5\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"IbFBTQ[0Qd9jjm15Vx)B\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" id=\"ZX$sFV94#v.z;i=wq,T}\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\" id=\":l3zmvY7Oq!EDm;yVgLI\"><field name=\"region\">notLegos.vfxRegion.SpotE</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\" id=\";KAe_P[VL135zI=B%XH,\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"EgR*]8(YXkrx2H/[H1Q=\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"variables_set\" id=\"V|~m!?fkp~!GW8jTRmJt\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"FCy+0{vWNG;P65SgO.$r\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MOTOR_Set\" id=\"C[S8!mVV*]~tcdgMXq8U\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\" id=\"vr)nCrgVtK5q3OxtUH+5\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" id=\"%Im3g6aDQwHmb!sinO@4\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\" id=\"dVF[{98gG6vS8wO?}ZT2\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" id=\"y9N=|s6X}NG.IdYbuaQz\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\" id=\"k]*%0MNRAaqcIw|7D@he\"><field name=\"NUM\">0</field></shadow><block type=\"text\" id=\"n0v{g1uB~%nPAW)V4ib_\"><field name=\"TEXT\">tutor</field></block></value></block></value><statement name=\"DO2\"><block type=\"controls_if\" id=\"WenzQ65I:ys7PQhr^rb/\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\" id=\"po4|AyFFawTLn(%AqS`:\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" id=\"`NVvK/:m`ESW/ZPO5DrO\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\" id=\"}sX=JA+oI`lf{me-ZLBD\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\" id=\"7eEL)CO`}Bj33BtsHn=v\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\" id=\"bnpIR8s[]qZ=z@/Rp6w5\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_SetEffect\" id=\"aUaLyQ=Jwf{gp9ojLWC:\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\" id=\"acXHi;+TWl419,23Sb8)\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"a!Co-3$TaUn!++3z_*Fi\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\" id=\"R^[|P`(oyc.#Cws/BwH,\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\" id=\"Rx%xjA!x7C8-lgIz`_Zh\"><field name=\"region\">notLegos.vfxRegion.SpotA</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\" id=\"a=kvW6+0Dn~hW,vcJkW*\"><value name=\"pause\"><shadow type=\"timePicker\" id=\")Q}YmO:LnR#?q$^:#)Y]\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" id=\"}P.QMg#iPu]q1XJ(d{{j\"><field name=\"region\">notLegos.vfxRegion.SpotB</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\" id=\"cF.vEC@F~3+p]a+aZS[l\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\" id=\"^ccruoYHMlUJ.plAUCD:\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" id=\"/yA.td=H~`k}iwN#lZ=I\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\" id=\"A0llY-*{+z%%%z!,tyPZ\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\" id=\"?/`Bq=Dw;@tNn7eQf{1`\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\" id=\".SUz@gV!S9}(Gi2U/4C^\"><field name=\"NUM\">2</field></shadow></value></block></value></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\" id=\"P@pm*/zS$Va*3UlU*HZM\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" id=\"{Q/q~J])4fTdeyklbz?i\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\" id=\"#o6TA/!(emuY`j8.9PGg\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" id=\"pn39}V1q2Wr49mP`Vpum\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\" id=\"H)4fv:)t29R,CKc.5F5{\"><field name=\"NUM\">0</field></shadow><block type=\"text\" id=\"=eS]-x.59=r16v_Q$+xS\"><field name=\"TEXT\">welco</field></block></value></block></value></block></statement><next><block type=\"NL_OLED_PrintLine\" id=\"Iv_(KzsOgpm,JfqUzS^G\"><value name=\"text\"><block type=\"text_join\" id=\"@gR62ap|=Zwk6|1_fG*1\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\" id=\"7UTt/h}:ZC2/*/+kb##2\"><field name=\"TEXT\">heard: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\" id=\":Y53#B+di|=Z^rJM2,vd\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\" id=\"1djoI,BcnBeT?}QOumQ%\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"ADD2\"><shadow type=\"text\" id=\"H|SgFl[*D3,uQXV=Z0xZ\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\" id=\"ezRl5C{u8u,uH$zo~s)6\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\" id=\"$8kga`;Mbw=,X75Zq4`a\"><field name=\"VALUE\">value</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\" id=\"He|m3ViE{PPF~1$^Pq{e\"><field name=\"NUM\">6</field></shadow></value></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" id=\"CDD_yEf:6O2[LGZyiU-N\" x=\"164\" y=\"3601\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><field name=\"function_name\">radioSay</field><value name=\"vt0gv77qprcayj8xalbs\"><block type=\"argument_reporter_string\" id=\"M^5NqtV|pZdIYW`_iw[=\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">text5</field></block></value><value name=\"ok3p1i8gyn97mv69yabw\"><block type=\"argument_reporter_number\" id=\"wKzg.C}Jcsu;k{u|eQ6,\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">val</field></block></value><statement name=\"STACK\"><block type=\"radio_datagram_send_value\" id=\"GU0{{}=VyxsQLGDJZ!#H\"><value name=\"name\"><block type=\"text_join\" id=\"TJCp;rl2N5v,i5,t.NwB\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\" id=\"@u-*VD+y/fp_GUr^%wG,\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\" id=\";O:Or)fY_}VuL:+Me]oP\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value><value name=\"ADD1\"><shadow type=\"text\" id=\"!ThK_+07|0tK)SANywzR\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\" id=\"vw^T`,6ihxawdlT[`|ml\"><field name=\"VALUE\">text5</field></block></value></block></value><value name=\"value\"><block type=\"argument_reporter_number\" id=\"h;(W/$^|GVp@S0uKN{/l\"><field name=\"VALUE\">val</field></block></value><next><block type=\"NL_OLED_PrintLine\" id=\"lQXT`1Z+*qC12U9|WTtE\"><value name=\"text\"><block type=\"text_join\" id=\"O.]2V:efstLrH4]W1)sh\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\" id=\"4I6@`m6ywW0p0u;:Zyh5\"><field name=\"TEXT\">said: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\" id=\"4/Zff$03O+vcRggj,%@w\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\" id=\"iKXG64:EpN?mxRE/93h`\"><field name=\"VALUE\">text5</field></block></value><value name=\"ADD2\"><shadow type=\"text\" id=\"^hZU)z~AtT?D^{le@Upv\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\" id=\"HIl1zE(I=T9AR:BzJc$D\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\" id=\"t7%H1V)HW};HAt+aSjfC\"><field name=\"VALUE\">val</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\" id=\"I]Ju-RvF!gOo0]=UTZ0w\"><field name=\"NUM\">7</field></shadow></value></block></next></block></statement></block><block type=\"function_definition\" id=\"pjZ#fo9f7MeN!?BC(-4[\" x=\"745\" y=\"3814\"><mutation name=\"fogFlood\" functionid=\"VFMl!%hPr#$dm7#L!/;e\"></mutation><field name=\"function_name\">fogFlood</field><statement name=\"STACK\"><block type=\"controls_if\" id=\"g9l!ABU;`4/{VUg6f[*B\"><value name=\"IF0\"><shadow type=\"logic_boolean\" id=\"mufoWeRN:NAi$1bPz#(E\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\" id=\"^%KlRgy1mJKKUk)%.9eI\"><field name=\"VAR\" id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</field></block></value><statement name=\"DO0\"><block type=\"variables_set\" id=\"Pde[lh4CvOn!uxCr}0DZ\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"2A/1@!COp2@Yy|OD|Bqn\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"device_pause\" id=\"9e1dSa~x/fEH^fu=%y]S\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"6uztm?)Ss~X)aX_`!^fU\"><field name=\"ms\">10000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" id=\"sZV#VG6U;@8+~zGRX0eG\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"function_call\" id=\"=VwIAq(83XxJl,[]%oo}\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\" id=\"x$PLQC=q{gc;~=6lTMe1\"><field name=\"TEXT\">para</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\" id=\"WalM1a=y#L8tDQ+f-WUW\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"variables_set\" id=\"#@EB{B1|ilXyR:|kZV#z\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"Y^jX_fG|h^3Ls4;dp6Mr\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_MOTOR_Set\" id=\"yfGq0aCSr-z^^;Mk.!j]\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"NL_MOTOR_Set\" id=\"qb)K.JCVGxLlz4D:{;C`\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\" id=\"?xCjnL59}IG@Njim4qnI\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"4bZHrP8GYAv[-[~+%)=j\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"NL_MOTOR_Set\" id=\"rq=TxPV)9z}z[FnWgYfU\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.mid</field><next><block type=\"device_pause\" id=\"gT@)=7{jZDh`;Zx[c_,n\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"8|Snn-DhxVL6%N}SSa:%\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_MOTOR_Set\" id=\"#u{m40XMu#/9=QED0*)=\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\" id=\"q.$siQDxvKkKpjrn6|V?\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"qnj],d.Ld[jnrja+oy4)\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_MOTOR_Set\" id=\"mnYUJP![$!yuHL^;#$l@\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.off</field><next><block type=\"NL_MOTOR_Set\" id=\"Iiel_mqFJC2vbb!y^eVt\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"variables_set\" id=\"TU~j;[5)~ScZG+{@M6CV\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"{2NTPb|$FOKch[gL7/JY\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_RELAY_SockSet\" id=\"PA%:-D23W,oA(]%#UAc:\"><field name=\"sockState\">notLegos.sockState.dancing</field><next><block type=\"device_pause\" id=\"GUM*e;B%D=3DWy^81Out\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"WF#[G)DFchcnyS#ED)EK\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_RELAY_SockSet\" id=\"TOA/w[3eWaP0i1B1|mVD\"><field name=\"sockState\">notLegos.sockState.still</field><next><block type=\"device_pause\" id=\"6A#RuiZyu/WeE/3h!yX}\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"XwkV~af#35_OKF-hcISw\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\" id=\"N{YW[)Z9:VwlNA?N?(Ft\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\" id=\";:E1XY~kH76sCb#U}ql%\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"r#Dc3i$!to9JaZqYnM{}\"><field name=\"ms\">8000</field></shadow></value><next><block type=\"NL_MOTOR_Set\" id=\"pokhDh.f[!$SHe{=logp\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\" id=\"{yi#sC9#6#^hfKRwX%gM\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"o~.AJ7@qK,}7dh5HR71N\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\" id=\"JAZ03aI24Z|]#eq7#+%d\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\" id=\"OP[9dRYz^ld(4Iaz./sV\"><value name=\"pause\"><shadow type=\"timePicker\" id=\".YqM_;;m=_u_m0aN0{ji\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\" id=\"1gp^!|DyTh%YjFv9o_}|\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\" id=\"=Ky0dB_,3NUVyG@TK^N?\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"[4W(:rs[M#QKa@LT4uE4\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\" id=\"-u$Jdmoh(%cI5-X6Xc)c\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\" id=\"edOSv;/7o*Lw]:7]~2as\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"Ja*T$AL^g6wxEdmF#NBD\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\" id=\"@U=2n,ojzVDcnfKnGSPW\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\" id=\"wv5)`n`f_@cStl3$zlEp\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"ta~+e4@;kl}F(d|?ksb5\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\" id=\"ng#ANNz)NJBk[GF|E:C}\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\" id=\"S0E_T$mRJOo1:i`x`lOj\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"Joj;0RMSFvrh6Sxq#Scf\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\" id=\"h$~8SwVtADQ_/[b/qU+u\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\" id=\"Z0u}EkaX*=udGdmZ8A5V\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"ZcH1wXEdQMcCMR2|BS?r\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\" id=\"-?EthLtFKNla@n-7ZvFY\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\" id=\"^CSoW-a*_$]KvVkQZd=v\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"[Cmg-[/1^i,Q[Symc%}#\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\" id=\"|7CvX2_Za1NXi?W`)B?K\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\" id=\"pd7-WD.RTZcQ0eY*%,.P\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"T2`$vwrl0]~[E.^ei.q,\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\" id=\"K,xyDDcL7=?=zu+v|/}Z\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\" id=\"7NmGCutyR~@|3Q#]%lNe\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"NbNBeX^8hVi3X_IfZ{*N\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\" id=\"wPIGf=2Je|{_r%0gpha]\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\" id=\"Akj)K2$ADkA)2DvN~_SM\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"SWy:cONTP_zurUPcy^LH\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\" id=\"z`}ANP^tcVH0nsYsJbDq\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\" id=\"X+~|-R`$@v./fFzo=:p#\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"SaW}$UmEr^5l_|nR`J^a\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\" id=\"YuZ.;a*;Z`dV%G~iq(kI\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\" id=\"*X+BcSA)0W4.sO*RSfcI\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"Z19Cg:GuqcMs^lFc`NGo\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\" id=\"yng}Dt::E66[Up{b(sHr\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\" id=\"HmCM-%G:O9(o+aUt2xs)\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"D]sk4pVl/KPhuT2X,AI6\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\" id=\")9;qF5?TcvS1.+9e)RnT\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.min</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" id=\"fY@Q=r1ym@bb?VXHtRq)\" x=\"1187\" y=\"3814\"><mutation name=\"runTutorial\" functionid=\"S6D~vG%3KsCIO0/OH*vo\"></mutation><field name=\"function_name\">runTutorial</field><statement name=\"STACK\"><block type=\"function_call\" id=\"1D`7ReM{8][|YkopGxX0\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\" id=\"~rF48zsbVYev@}jcY)1k\"><field name=\"TEXT\">tutor</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\" id=\"c|bM+(.z/,OiD%=wdx;+\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MP3_SetVolume\" id=\"6%S!qOhOUf/m{lvG*E{?\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\" id=\"i9U^cDrI,ejfG!^m=J`N\"><field name=\"NUM\">80</field></shadow></value><next><block type=\"device_pause\" id=\"f[/atsAgXBU,$wXR~e4_\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"EkqP#}@E4bgwlw:i3IHP\"><field name=\"ms\">20</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\" id=\"wJJ~b-}RuTlqV`E38F6M\"><field name=\"genre\">notLegos.musicGenre.tutorial</field><next><block type=\"variables_set\" id=\"tV{N8iuM(i/p*cO()L4o\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"TZTY7ck9.ukgJ5.-N!sJ\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\" id=\"ht5}!xLGLtf:!u2lO`(}\"><field name=\"voice\">notLegos.voiceSaying.howto1</field><next><block type=\"device_pause\" id=\"J{kDvCQU@{X}Mv+RP[[F\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"Hv!t)z0;f9Ic0l-G]}RX\"><field name=\"ms\">5950</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\" id=\"`JAvU*Ailfw1.cf:Jzp6\"><field name=\"voice\">notLegos.voiceSaying.howto2</field><next><block type=\"device_pause\" id=\"PuHKdj5:?s*h/3T$/?[?\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"nU#og-NJ_vSB0.agBHFA\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\" id=\"VEPq0o4v[5}*`9]Czx-O\"><field name=\"voice\">notLegos.voiceSaying.howto3</field><next><block type=\"device_pause\" id=\"}my$llq2[+}DzfR9^$gF\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"CJqkNq07mV+5XSGtPve_\"><field name=\"ms\">7600</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\" id=\"C/hO.B*jse`1w+b%@IL(\"><field name=\"voice\">notLegos.voiceSaying.howto4</field><next><block type=\"device_pause\" id=\"9#C=9O3Gisd:xHmU^xE4\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"Lr|WlS_Gzsou).`R$*tZ\"><field name=\"ms\">6100</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\" id=\"3$uD;y[NA}8$IirV`$,b\"><field name=\"voice\">notLegos.voiceSaying.howto5</field><next><block type=\"device_pause\" id=\"Dte+^PJ%9~.;O]lZ3M*_\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"wW+%*EwtSS*:q*#9Ijzz\"><field name=\"ms\">13000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\" id=\"u@C}5M[kaLB+i*$hWjUz\"><field name=\"voice\">notLegos.voiceSaying.howto6</field><next><block type=\"NL_MP3_SetVolume\" id=\"Y#${tkto/I=v;6aa+^Qk\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\" id=\"j2/IgiHQzm{pQN=(jkye\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\" id=\"aDDG{/uqS~A_@FDDLxP4\"><value name=\"pause\"><shadow type=\"timePicker\" id=\"8vf2n55EKv5%fXWJWtF4\"><field name=\"ms\">7000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\" id=\":R+E5P2YQ$6KMFtv~oe7\"><field name=\"genre\">notLegos.musicGenre.awaiting</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"function_definition\" id=\"N;ypbu)|mqGb!F#OI79+\" x=\"1543\" y=\"3814\"><mutation name=\"ready_oled\" functionid=\"LSuKu]l*}Y2[|u.h3PJ%\"></mutation><field name=\"function_name\">ready_oled</field><statement name=\"STACK\"><block type=\"controls_if\" id=\"7n{.Q7W4*`!EIf{2l0+w\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\" id=\"qAD?JV?c)X|$,2gmiW8z\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\" id=\"UE]vsrHhlxCh}-}d2(/b\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_OLED_PrintLine\" id=\"7F$cDE0]iRX]%U7^jCG*\"><value name=\"text\"><shadow type=\"text\" id=\"+OlwRijf!`538i40c1Q0\"><field name=\"TEXT\">// Castle Say //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\" id=\"_KJf-^V`OW^!]G9)YRZ`\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\" id=\"}1z4m9o|3jQS]iwpLAWP\"><value name=\"text\"><block type=\"text_join\" id=\"{,sd!ZBc{([_E)loKW%p\" inline=\"false\"><mutation items=\"6\"></mutation><value name=\"ADD0\"><shadow type=\"text\" id=\"-%U3mep=eyuKf7~~RmWW\"><field name=\"TEXT\">R</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\" id=\"+k_Pwj~i[]rn$yY6aK!?\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\" id=\"fF65WqvGVl?`,NPMWwi]\"><value name=\"value\"><block type=\"variables_get\" id=\"h?BW0L6IYw13$KjoxyKt\"><field name=\"VAR\" id=\"Y|e4lM)*:N0Ca^S5-64i\">lastLaserR</field></block></value><value name=\"low\"><shadow type=\"math_number\" id=\"m@Uv1HGk?l:lW;_q~iab\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\" id=\"ceq47E/qatu.@;?($9!w\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text\" id=\"3yBDHF*RHE5I33L^NN{F\"><field name=\"TEXT\"> C</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\" id=\"ngqNmm6T;|Ys!GBHr!)J\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\" id=\"bcJ2}aqtD+Jo}2xdhFb5\"><value name=\"value\"><block type=\"variables_get\" id=\"p~S^LoM{/;1*UGo8_]0d\"><field name=\"VAR\" id=\"Uk9;F|_3qS]2aZyBH#]%\">lastLaserC</field></block></value><value name=\"low\"><shadow type=\"math_number\" id=\"ARs-Oa9,e6QAnjyPBjD#\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\" id=\"m=z1!0qz7jNP1Wl0]R`h\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\" id=\",%/sJD~D!gw|FH|{ccoX\"><field name=\"TEXT\"> L</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\" id=\"RwGjb=Y;_/e._,4=Xp@^\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\" id=\"Q;:#UHQkLm!y5SA7bZKq\"><value name=\"value\"><block type=\"variables_get\" id=\"zvIAW!WloX%mWBGIw_u7\"><field name=\"VAR\" id=\"}GOl3M4q[Bn4R~R!?]at\">lastLaserL</field></block></value><value name=\"low\"><shadow type=\"math_number\" id=\"?3xNrl7v$$w|m@=XQx$~\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\" id=\"#3ep^upe{9*MVlRSbFbZ\"><field name=\"NUM\">9</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\" id=\"3#1cZA1MF4tzqU%@W%_s\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_OLED_PrintLine\" id=\"te]0dBR2ms/Y-!m*}1_G\"><value name=\"text\"><block type=\"text_join\" id=\"1hT3u]AYTHJ$4Yp!unVc\" inline=\"false\"><mutation items=\"8\"></mutation><value name=\"ADD0\"><shadow type=\"text\" id=\"G,dy2Q*xCQ^v61ktYq4A\"><field name=\"TEXT\">S</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\" id=\")aP9jKJjkglZ*:;k,jPI\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\" id=\"owXRFWu)JsC3~eWYv25Z\"><field name=\"VAR\" id=\"JQUQT|8QeX)zSvZ?K@,i\">lastSonarRead</field></block></value><value name=\"ADD2\"><shadow type=\"text\" id=\"h9D|v8^.-pN]PGi}1Fio\"><field name=\"TEXT\"> H</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\" id=\"nDuZPDnIdukb9XNX)xp5\"><field name=\"TEXT\"></field></shadow><block type=\"math_js_round\" id=\"5x@(O4BB6LnjHyZO.Cq)\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\" id=\"zMP0@.%pcuC;X;(r)WV=\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\" id=\"5VHO;STi0y[{~$hECc+t\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\" id=\"-I[::1Fm!d{dKtl5XA^H\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" id=\"t[}Zes.PGS^=@;2mN1+A\"><field name=\"VAR\" id=\"=X]tI5AG]3|WfpT`9Jsr\">lastHue</field></block></value><value name=\"B\"><shadow type=\"math_number\" id=\"rp6eq=6;%tYlGL:e;)ge\"><field name=\"NUM\">3</field></shadow></value></block></value></block></value><value name=\"ADD4\"><shadow type=\"text\" id=\"-6a,,uv,e23gWLi8HyU0\"><field name=\"TEXT\"> G</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\" id=\"vepY.S`OJ:DVtBd!7b|V\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\" id=\"K$@({Dp(E5/N?[:pqSw$\"><field name=\"VAR\" id=\"Bc7kXprAfc3]W%ILxbVV\">lastGesture</field></block></value><value name=\"ADD6\"><shadow type=\"text\" id=\"*oRH-#-zUouEw5kI;s4k\"><field name=\"TEXT\"> N</field></shadow></value><value name=\"ADD7\"><shadow type=\"text\" id=\"uEe+C,J^qTp}j#,3$K^J\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\" id=\"!y~:3;`(mAXKvBJLQM1Z\"><field name=\"VAR\" id=\"#oq[[iBLthN][|]:S!n}\">lastHunt</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\" id=\"ya_^vzWAYIZx9{FT.BVg\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"NL_OLED_PrintLine\" id=\")fKVQX)%}%/*[?rL_c+)\"><value name=\"text\"><block type=\"text_join\" id=\"KDRZZ`~Rn`e4T#9jQWW)\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\" id=\"^3p86qj5P0NT[@1$azMS\"><field name=\"TEXT\">Mode: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\" id=\"[,]{NikL,^pokcWrLdv0\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\" id=\"ZVvTy_d@*_5Xj}r5%lKg\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\" id=\"}o3o[-x!{k?%2H|4I0XT\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_OLED_PrintLine\" id=\"nR)cDX}ZbdqCfQ7,r4+]\"><value name=\"text\"><block type=\"text_join\" id=\"VO$(0G?ehuji@M`E/)X6\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\" id=\"bESbtDkN_bYGfI,,*hz_\"><field name=\"TEXT\">M:</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\" id=\"RR6~OAStV=j{Vm~[7mXV\"><field name=\"TEXT\"></field></shadow><block type=\"NL_MP3_PlaytimeMusic\" id=\"MFOxBgXKlTOg(0eFOhrq\"></block></value></block></value><value name=\"line\"><shadow type=\"math_number\" id=\"+n2@Jkj:@yEw):9?VxAI\"><field name=\"NUM\">4</field></shadow></value></block></next></block></next></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"NL_OLED_PrintLine\" id=\"8?c=-HZH!(rJ2#c^a_ru\"><value name=\"text\"><shadow type=\"text\" id=\"~YKr4n6_7m7akZD|.tG9\"><field name=\"TEXT\">// Castle Do //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\" id=\"EJz1Dp:.YuE#IC5A+V%v\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\" id=\"S6F#GUds5}#]voCC+mEe\"><value name=\"text\"><block type=\"text_join\" id=\"Fs8;={4z_K,+U6S:Mqh{\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\" id=\"qKwyCk~`=a+C@/C8vQPB\"><field name=\"TEXT\">M: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\" id=\"[WS?@r3WL]gPAK^sjQGE\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\" id=\"j$q{Q0!J%5JQTHV|5+RW\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field></block></value><value name=\"ADD2\"><shadow type=\"text\" id=\"T*Dv~8F{Msm)Ls(PD@*U\"><field name=\"TEXT\"> T </field></shadow></value><value name=\"ADD3\"><shadow type=\"text\" id=\"WCv+hIW_0![l%hT/$*Kn\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\" id=\"i=Hmr(Leh.KpHb~O+|1g\"><field name=\"VAR\" id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\" id=\"5AeyLjCD]*2Y/p#iYwn."],[1,"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.WheelAll</field><field name=\"effect\">notLegos.vfxEffect.fire</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.intro</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_reg</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">check</field></block></value></block></value><statement name=\"DO2\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">ready</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value></block></statement><statement name=\"ELSE\"><block type=\"controls_if\"><mutation elseif=\"3\" else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">ready</field></block></value></block></value><statement name=\"DO0\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">wstar</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.KongFront</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">boot</field></block></value></block></value><statement name=\"DO1\"><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1000</field></shadow></value></block></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">200</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.idle</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotH</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotI</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">0</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.BrickDragon</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotE</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">tutor</field></block></value></block></value><statement name=\"DO2\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotA</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotB</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value></block></statement><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">heard: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">6</field></shadow></value></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"164\" y=\"3601\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><field name=\"function_name\">radioSay</field><value name=\"vt0gv77qprcayj8xalbs\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">text5</field></block></value><value name=\"ok3p1i8gyn97mv69yabw\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">val</field></block></value><statement name=\"STACK\"><block type=\"radio_datagram_send_value\"><value name=\"name\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value></block></value><value name=\"value\"><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">said: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">7</field></shadow></value></block></next></block></statement></block><block type=\"function_definition\" x=\"745\" y=\"3814\"><mutation name=\"fogFlood\" functionid=\"VFMl!%hPr#$dm7#L!/;e\"></mutation><field name=\"function_name\">fogFlood</field><statement name=\"STACK\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</field></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">10000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">para</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.mid</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.off</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.dancing</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.still</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">8000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.min</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"1187\" y=\"3814\"><mutation name=\"runTutorial\" functionid=\"S6D~vG%3KsCIO0/OH*vo\"></mutation><field name=\"function_name\">runTutorial</field><statement name=\"STACK\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">tutor</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">80</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">20</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.tutorial</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto1</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5950</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto2</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto3</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7600</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto4</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6100</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto5</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">13000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto6</field><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"function_definition\" x=\"1543\" y=\"3814\"><mutation name=\"ready_oled\" functionid=\"LSuKu]l*}Y2[|u.h3PJ%\"></mutation><field name=\"function_name\">ready_oled</field><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Say //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"6\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Y|e4lM)*:N0Ca^S5-64i\">lastLaserR</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> C</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Uk9;F|_3qS]2aZyBH#]%\">lastLaserC</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"}GOl3M4q[Bn4R~R!?]at\">lastLaserL</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"8\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">S</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"JQUQT|8QeX)zSvZ?K@,i\">lastSonarRead</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> H</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_js_round\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"=X]tI5AG]3|WfpT`9Jsr\">lastHue</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> G</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Bc7kXprAfc3]W%ILxbVV\">lastGesture</field></block></value><value name=\"ADD6\"><shadow type=\"text\"><field name=\"TEXT\"> N</field></shadow></value><value name=\"ADD7\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"#oq[[iBLthN][|]:S!n}\">lastHunt</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">Mode: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M:</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"NL_MP3_PlaytimeMusic\"></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">4</field></shadow></value></block></next></block></next></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Do //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> T </field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number"],[0,"\"><f"]],"start1":10838,"start2":10838,"length1":41187,"length2":32529}]}]}],"snapshots":[{"timestamp":1728761585846,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</variable><variable id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</variable><variable id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</variable><variable id=\"SRvF%Vl7CRHE66Kr9~Q[\">lastLaserR</variable><variable id=\"%FT#@+cF!r3!,1uelm~,\">lastLaserC</variable><variable id=\"hs_o5`X:I}y9{R2!_miN\">lastLaserL</variable><variable id=\"}%7r;bz7Byg#SEH9P{dG\">lastSonarRead</variable><variable id=\"u#;Y3,}t+?Ue.~vd$_;0\">lastHue</variable><variable id=\"5rh0sr-gnWZKflz~gbRk\">lastGesture</variable><variable id=\"at2[c#F7*{?za?uyOm!i\">lastHunt</variable><variable id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</variable><variable id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</variable><variable id=\"vlNJo2)`QokXI:|N|`c|\">theName</variable><variable id=\"uj8c~)bC/;JXc[2;l@N!\">iTook</variable><variable id=\"m`bxu=!~_Nj|:o?}Kk!^\">iBegan</variable><variable id=\"E3,(6Z)tM(C:#!xxP.d,\">isReady</variable><variable id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</variable><variable id=\"y@Q6YNBYQMe6tF/068bo\">lastVolumeRead</variable><variable id=\"W@//5%rK$%/F|oN!f$h$\">digits</variable><variable id=\"-O:q;^~u%Gff-w{^C`Ou\">lastWater</variable></variables><block type=\"function_definition\" x=\"4643\" y=\"-1112\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><field name=\"function_name\">buttonPress</field><value name=\"ba9wfs6wbjdlsow065y8\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">button</field></block></value><statement name=\"STACK\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">button: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">button</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></statement></block><block type=\"function_definition\" x=\"5343\" y=\"-1106\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><field name=\"function_name\">radioSay</field><value name=\"fxkpgrx3u5x98l61f5dik\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">text5</field></block></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">val</field></block></value><statement name=\"STACK\"><block type=\"radio_datagram_send_value\"><value name=\"name\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value></block></value><value name=\"value\"><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">said: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">7</field></shadow></value></block></next></block></statement></block><block type=\"every_interval\" x=\"100\" y=\"-376\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">2000</field></shadow></value><statement name=\"HANDLER\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"uj8c~)bC/;JXc[2;l@N!\">iTook</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value></block></statement></block><block type=\"every_interval\" x=\"773\" y=\"-372\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"controls_if\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"1111\" y=\"-344\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_MP3_UpdateVolume\" disabled-reasons=\"MANUALLY_DISABLED\"></block></statement><statement name=\"ELSE\"><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_operation\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">OR</field><value name=\"A\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_negate\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"BOOL\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</field></block></value></block></value><value name=\"B\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value></block></value></block></value><statement name=\"DO0\"><block type=\"NL_RELAY_FogSet\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"level\">notLegos.fogLevels.none</field></block></statement><statement name=\"ELSE\"><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation elseif=\"2\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_RELAY_FogSet\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"level\">notLegos.fogLevels.light</field></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">2</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"NL_RELAY_FogSet\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"level\">notLegos.fogLevels.medium</field></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">3</field></shadow></value></block></value><statement name=\"DO2\"><block type=\"NL_RELAY_FogSet\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"level\">notLegos.fogLevels.heavy</field></block></statement></block></statement></block></statement></block><block type=\"input_logo_event\" x=\"2390\" y=\"-353\"><field name=\"action\">TouchButtonEvent.Touched</field><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_MP3_PlayerSay\"><field name=\"saying\">notLegos.playerSaying.ready</field><next><block type=\"NL_MP3_SfxPlay\"><field name=\"sfx\">notLegos.sfxType.fire</field><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.intro</field></block></next></block></next></block></statement></block></statement></block><block type=\"NL_OLED_PrintLine\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"572\" y=\"-190\"><value name=\"text\"><block type=\"text_join\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">K0: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogPin.P0</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"NL_OLED_PrintLine\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"text\"><block type=\"text_join\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">K1: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_OLED_PrintLine\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"text\"><block type=\"text_join\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">K2: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P2</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">4</field></shadow></value></block></next></block></next></block><block type=\"every_interval\" x=\"1817\" y=\"-101\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">40</field></shadow></value><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"m`bxu=!~_Nj|:o?}Kk!^\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time\"></block></value><next><block type=\"NL_PIXEL_CastleSayTick\"><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"E3,(6Z)tM(C:#!xxP.d,\">isReady</field></block></value><next><block type=\"function_call\"><mutation name=\"ready_oled\" functionid=\",fv3PGT/J~k#ZH}9er,/\"></mutation><next><block type=\"NL_OLED_Update3\"><next><block type=\"variables_set\"><field name=\"VAR\" id=\"uj8c~)bC/;JXc[2;l@N!\">iTook</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"m`bxu=!~_Nj|:o?}Kk!^\">iBegan</field></block></value></block></value></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"NL_OLED_Init\"><next><block type=\"NL_PIXEL_CastleSay\"><field name=\"sockPin\">DigitalPin.P3</field><field name=\"wheelPin\">DigitalPin.P0</field><field name=\"scorePin\">DigitalPin.P16</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"m`bxu=!~_Nj|:o?}Kk!^\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time_micros\"></block></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field></block></next></block></next></block></next></block></statement></block><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"548\" y=\"160\"><field name=\"VAR\" id=\"y@Q6YNBYQMe6tF/068bo\">lastVolumeRead</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"}%7r;bz7Byg#SEH9P{dG\">lastSonarRead</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"5rh0sr-gnWZKflz~gbRk\">lastGesture</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"u#;Y3,}t+?Ue.~vd$_;0\">lastHue</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"SRvF%Vl7CRHE66Kr9~Q[\">lastLaserR</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"hs_o5`X:I}y9{R2!_miN\">lastLaserL</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"%FT#@+cF!r3!,1uelm~,\">lastLaserC</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"at2[c#F7*{?za?uyOm!i\">lastHunt</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">FALSE</field></block></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">KC$</field></block></value><next><block type=\"pin_set_audio_pin_enabled\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"enabled\"><shadow type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">FALSE</field></shadow></value><next><block type=\"device_led_enable\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"on\"><shadow type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">FALSE</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"NL_SENSOR_SonarFirstRead\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin1\">DigitalPin.P8</field><field name=\"pin2\">DigitalPin.P9</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value></block></value><next><block type=\"radio_set_group\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"ID\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">171</field></shadow></value><next><block type=\"NL_OLED_Init\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><next><block type=\"controls_if\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_SENSOR_TrimpotSet\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"aPin\">AnalogPin.P10</field><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"W@//5%rK$%/F|oN!f$h$\">digits</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"nl_digits_create\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"cPin\">DigitalPin.P7</field><field name=\"dPin\">DigitalPin.P6</field></block></value><next><block type=\"nl_digits_number\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"display\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"W@//5%rK$%/F|oN!f$h$\">digits</field></block></value><value name=\"num\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">-1000</field></shadow></value><next><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P13</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"NL_MP3_InitiateAs\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"type\">notLegos.mp3type.music</field><field name=\"sPin\">SerialPin.P14</field><next><block type=\"NL_MP3_InitiateAs\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"type\">notLegos.mp3type.sfxvoice</field><field name=\"sPin\">SerialPin.P15</field><next><block type=\"NL_MP3_InitiateAs\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"type\">notLegos.mp3type.player</field><field name=\"sPin\">SerialPin.P16</field><next><block type=\"NL_PIXEL_CastleSay\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"sockPin\">DigitalPin.P11</field><field name=\"wheelPin\">DigitalPin.P5</field><field name=\"scorePin\">DigitalPin.P12</field><next><block type=\"device_pause\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">20</field></shadow></value><next><block type=\"NL_MP3_SetVolume\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"mp3bit\">notLegos.mp3type.sfxvoice</field><value name=\"vol\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"NL_MP3_SetVolume\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"mp3bit\">notLegos.mp3type.player</field><value name=\"vol\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"NL_MP3_SetVolume\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P0</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">0</field></shadow></value><next><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P2</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P8</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P12</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P13</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_PIXEL_CastleDo\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"spotPin\">DigitalPin.P14</field><field name=\"brickPin\">DigitalPin.P15</field><field name=\"kongPin\">DigitalPin.P16</field><next><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">check</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"m`bxu=!~_Nj|:o?}Kk!^\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time_micros\" disabled-reasons=\"MANUALLY_DISABLED\"></block></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"E3,(6Z)tM(C:#!xxP.d,\">isReady</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">TRUE</field></block></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">init</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"2536\" y=\"310\"><field name=\"VAR\" id=\"-O:q;^~u%Gff-w{^C`Ou\">lastWater</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_js_round\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P0</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value></block></value></block></value></block><block type=\"controls_if\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"2411\" y=\"360\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_CastleSayTick\" disabled-reasons=\"MANUALLY_DISABLED\"><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"at2[c#F7*{?za?uyOm!i\">lastHunt</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P4</field></shadow></value></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"5rh0sr-gnWZKflz~gbRk\">lastGesture</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"Connected_getGesture\" disabled-reasons=\"MANUALLY_DISABLED\"></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"u#;Y3,}t+?Ue.~vd$_;0\">lastHue</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"apds9960_readcolor\" disabled-reasons=\"MANUALLY_DISABLED\"></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"}%7r;bz7Byg#SEH9P{dG\">lastSonarRead</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"NL_SENSOR_SonarNextRead\" disabled-reasons=\"MANUALLY_DISABLED\"></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"SRvF%Vl7CRHE66Kr9~Q[\">lastLaserR</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_js_round\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">80</field></shadow></value></block></value></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"%FT#@+cF!r3!,1uelm~,\">lastLaserC</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_js_round\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P2</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">80</field></shadow></value></block></value></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"hs_o5`X:I}y9{R2!_miN\">lastLaserL</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_js_round\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P3</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">80</field></shadow></value></block></value></block></value><next><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation elseif=\"4\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">wait_start</field></block></value></block></value><statement name=\"DO0\"><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"at2[c#F7*{?za?uyOm!i\">lastHunt</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">idle</field></block></value><next><block type=\"NL_MP3_MusicPlay\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"genre\">notLegos.musicGenre.intro</field><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">boot</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow><block type=\"NL_MP3_PlaytimeMusic\" disabled-reasons=\"MANUALLY_DISABLED\"></block></value></block></next></block></next></block></next></block></statement></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">wait_play</field></block></value></block></value><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">wait_laser</field></block></value></block></value><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">init</field></block></value></block></value><statement name=\"DO3\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">ready</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value></block></statement><value name=\"IF4\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">wait_reg</field></block></value></block></value><statement name=\"DO4\"><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">NEQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"5rh0sr-gnWZKflz~gbRk\">lastGesture</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">tutorial</field></block></value><next><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"runTutorial\" functionid=\"Y{7P,}tzRL|sul3I;].}\"></mutation></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">FALSE</field></shadow></value></block></statement></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"NL_PIXEL_CastleDoTick\" disabled-reasons=\"MANUALLY_DISABLED\"><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">TRUE</field></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><next><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation elseif=\"4\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">10</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><value name=\"ba9wfs6wbjdlsow065y8\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">A</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">60</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><value name=\"ba9wfs6wbjdlsow065y8\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">B</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.fire</field></block></next></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">110</field></shadow></value></block></value><statement name=\"DO2\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><value name=\"ba9wfs6wbjdlsow065y8\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">C</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.mine</field></block></next></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">200</field></shadow></value></block></value><statement name=\"DO3\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><value name=\"ba9wfs6wbjdlsow065y8\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">D</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field></block></next></block></statement><value name=\"IF4\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">700</field></shadow></value></block></value><statement name=\"DO4\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><value name=\"ba9wfs6wbjdlsow065y8\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">E</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field></block></next></block></statement></block></next></block></next></block></next></block></statement></block><block type=\"radio_on_value_drag\" x=\"3422\" y=\"386\"><value name=\"HANDLER_DRAG_PARAM_name\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">name</field></block></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">value</field></block></value><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_substr\"><value name=\"this\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value><value name=\"start\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"length\"><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field></block></value></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_substr\"><value name=\"this\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value><value name=\"start\"><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field></block></value></block></value><value name=\"length\"><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text_length\"><value name=\"VALUE\"><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field></block></value></block></value></block></value></block></value><next><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"controls_if\"><mutation elseif=\"3\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wstar</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_start</field></block></value></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value><statement name=\"DO1\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.welcome</field></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.WheelAll</field><field name=\"effect\">notLegos.vfxEffect.fire</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.intro</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_reg</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">check</field></block></value></block></value><statement name=\"DO2\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">ready</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value></block></statement><statement name=\"ELSE\"><block type=\"controls_if\"><mutation elseif=\"3\" else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">ready</field></block></value></block></value><statement name=\"DO0\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">wstar</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.KongFront</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">boot</field></block></value></block></value><statement name=\"DO1\"><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1000</field></shadow></value></block></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">200</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.idle</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotH</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotI</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">0</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.BrickDragon</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotE</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">tutor</field></block></value></block></value><statement name=\"DO2\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotA</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotB</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value></block></statement><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">heard: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">6</field></shadow></value></block></next></block></next></block></statement></block></statement></block><block type=\"every_interval\" x=\"1006\" y=\"713\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"nl_digits_number\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"1050\" y=\"881\"><value name=\"display\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"W@//5%rK$%/F|oN!f$h$\">digits</field></block></value><value name=\"num\"><shadow type=\"math_number\"><field name=\"NUM\">-1000</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"-O:q;^~u%Gff-w{^C`Ou\">lastWater</field></block></value></block><block type=\"device_get_analog_pin\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"1197\" y=\"952\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P0</field></shadow></value></block><block type=\"logic_compare\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"2373\" y=\"1291\"><field name=\"OP\">LTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P0</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">90</field></shadow></value></block><block type=\"function_definition\" x=\"-562\" y=\"3309\"><mutation name=\"fogFlood\" functionid=\"k_s2+XI@*gx2@)wty=I0\"></mutation><field name=\"function_name\">fogFlood</field><statement name=\"STACK\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</field></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">10000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">para</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.mid</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.off</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.dancing</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.still</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">8000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.min</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"-120\" y=\"3309\"><mutation name=\"runTutorial\" functionid=\"Y{7P,}tzRL|sul3I;].}\"></mutation><field name=\"function_name\">runTutorial</field><statement name=\"STACK\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">tutor</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">80</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">20</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.tutorial</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto1</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5950</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto2</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto3</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7600</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto4</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6100</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto5</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">13000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto6</field><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"function_definition\" x=\"236\" y=\"3309\"><mutation name=\"ready_oled\" functionid=\",fv3PGT/J~k#ZH}9er,/\"></mutation><field name=\"function_name\">ready_oled</field><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Say //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"6\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"SRvF%Vl7CRHE66Kr9~Q[\">lastLaserR</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> C</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"%FT#@+cF!r3!,1uelm~,\">lastLaserC</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"hs_o5`X:I}y9{R2!_miN\">lastLaserL</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"8\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">S</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"}%7r;bz7Byg#SEH9P{dG\">lastSonarRead</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> H</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_js_round\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"u#;Y3,}t+?Ue.~vd$_;0\">lastHue</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> G</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"5rh0sr-gnWZKflz~gbRk\">lastGesture</field></block></value><value name=\"ADD6\"><shadow type=\"text\"><field name=\"TEXT\"> N</field></shadow></value><value name=\"ADD7\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"at2[c#F7*{?za?uyOm!i\">lastHunt</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">Mode: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M:</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"NL_MP3_PlaytimeMusic\"></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">4</field></shadow></value></block></next></block></next></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Do //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> T </field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement></block></statement></block></xml>","main.ts":"","README.md":"\n> Open this page at [https://notlegos.github.io/castleresay/](https://notlegos.github.io/castleresay/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/castleresay** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/castleresay** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/soundbank/](https://notlegos.github.io/soundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/soundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/soundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/resoundbank/](https://notlegos.github.io/resoundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/resoundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/resoundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosext/](https://notlegos.github.io/notlegosext/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosext** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosext** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosmaster/](https://notlegos.github.io/notlegosmaster/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosmaster** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosmaster** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","displaySendBuffer.asm":"sendBufferAsm:\n\n    push {r4,r5,r6,r7,lr}\n    \n    mov r4, r0 ; save buff\n    mov r6, r1 ; save pin\n    \n    mov r0, r4\n    bl BufferMethods::length\n    mov r5, r0\n    \n    mov r0, r4\n    bl BufferMethods::getBytes\n    mov r4, r0\n    \n    ; setup pin as digital\n    mov r0, r6\n    movs r1, #0\n    bl pins::digitalWritePin\n    \n    ; load pin address\n    mov r0, r6\n    bl pins::getPinAddress\n\n    ldr r0, [r0, #8] ; get mbed DigitalOut from MicroBitPin\n    ldr r1, [r0, #4] ; r1-mask for this pin\n    ldr r2, [r0, #16] ; r2-clraddr\n    ldr r3, [r0, #12] ; r3-setaddr\n    \n    cpsid i ; disable irq\n    \n    b .start\n    \n.nextbit:               ;            C0\n    str r1, [r3, #0]    ; pin := hi  C2\n    tst r6, r0          ;            C3\n    bne .islate         ;            C4\n    str r1, [r2, #0]    ; pin := lo  C6\n.islate:\n    lsrs r6, r6, #1     ; r6 >>= 1   C7\n    bne .justbit        ;            C8\n    \n    ; not just a bit - need new byte\n    adds r4, #1         ; r4++       C9\n    subs r5, #1         ; r5--       C10\n    bcc .stop           ; if (r5<0) goto .stop  C11\n.start:\n    movs r6, #0x80      ; reset mask C12\n    nop                 ;            C13\n\n.common:               ;             C13\n    str r1, [r2, #0]   ; pin := lo   C15\n    ; always re-load byte - it just fits with the cycles better this way\n    ldrb r0, [r4, #0]  ; r0 := *r4   C17\n    b .nextbit         ;             C20\n\n.justbit: ; C10\n    ; no nops, branch taken is already 3 cycles\n    b .common ; C13\n\n.stop:    \n    str r1, [r2, #0]   ; pin := lo\n    cpsie i            ; enable irq\n\n    pop {r4,r5,r6,r7,pc}\n","planetxbasic.ts":"/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#00B1ED  icon=\"\\uf005\" block=\"Connected\" blockId=\"PlanetX_Connected\"\n//% groups='[\"Digital\", \"Analog\", \"IIC Port\"]'\nnamespace Connected {\n    \n    ////////////////////////paj7620//////////////////////\n    let gesture_first_init = true\n    const initRegisterArray: number[] = [\n        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17,\n        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F,\n        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14,\n        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27,\n        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01,\n        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00,\n        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20,\n        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37,\n        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A,\n        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F,\n        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30,\n        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19,\n        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04,\n        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00,\n        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00,\n        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F,\n        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07,\n        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01,\n        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F,\n        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01,\n        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40,\n        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E,\n        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00,\n        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08,\n        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00,\n        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01,\n        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01,\n        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01\n    ];\n    \n    /////////////////////////color/////////////////////////\n    const APDS9960_ADDR = 0x39\n    const APDS9960_ENABLE = 0x80\n    const APDS9960_ATIME = 0x81\n    const APDS9960_CONTROL = 0x8F\n    const APDS9960_STATUS = 0x93\n    const APDS9960_CDATAL = 0x94\n    const APDS9960_CDATAH = 0x95\n    const APDS9960_RDATAL = 0x96\n    const APDS9960_RDATAH = 0x97\n    const APDS9960_GDATAL = 0x98\n    const APDS9960_GDATAH = 0x99\n    const APDS9960_BDATAL = 0x9A\n    const APDS9960_BDATAH = 0x9B\n    const APDS9960_GCONF4 = 0xAB\n    const APDS9960_AICLEAR = 0xE7\n    let color_first_init = false\n\n    function i2cwrite_color(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n    function i2cread_color(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n    function rgb2hsl(color_r: number, color_g: number, color_b: number): number {\n        let Hue = 0\n        let R = color_r * 100 / 255;\n        let G = color_g * 100 / 255;\n        let B = color_b * 100 / 255;\n        let maxVal = Math.max(R, Math.max(G, B))\n        let minVal = Math.min(R, Math.min(G, B))\n        let Delta = maxVal - minVal;\n\n        if (Delta < 0) {\n            Hue = 0;\n        }\n        else if (maxVal == R && G >= B) {\n            Hue = (60 * ((G - B) * 100 / Delta)) / 100;\n        }\n        else if (maxVal == R && G < B) {\n            Hue = (60 * ((G - B) * 100 / Delta) + 360 * 100) / 100;\n        }\n        else if (maxVal == G) {\n            Hue = (60 * ((B - R) * 100 / Delta) + 120 * 100) / 100;\n        }\n        else if (maxVal == B) {\n            Hue = (60 * ((R - G) * 100 / Delta) + 240 * 100) / 100;\n        }\n        return Hue\n    }\n    function initModule(): void {\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ATIME, 252)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_CONTROL, 0x03)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_GCONF4, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_AICLEAR, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x01)\n        color_first_init = true\n    }\n    function colorMode(): void {\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_ENABLE) | 0x2;\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, tmp);\n    }\n\n    ///////////////////////////////////////////////////////MP3\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    /*\n    * Play status selection button list\n    */\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(100)\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,        \n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum Distance_Unit_List {\n        //% block=\"cm\" \n        Distance_Unit_cm,\n\n        //% block=\"foot\"\n        Distance_Unit_foot,\n    }\n    export enum ButtonStateList {\n        //% block=\"C\"\n        C,\n        //% block=\"D\"\n        D,\n        //% block=\"C+D\"\n        CD\n    }\n    export enum GestureType {\n        //% block=\"None\"\n        None = 0,\n        //% block=\"Right\"\n        Right = 1,\n        //% block=\"Left\"\n        Left = 2,\n        //% block=\"Up\"\n        Up = 3,\n        //% block=\"Down\"\n        Down = 4,\n        //% block=\"Forward\"\n        Forward = 5,\n        //% block=\"Backward\"\n        Backward = 6,\n        //% block=\"Clockwise\"\n        Clockwise = 7,\n        //% block=\"Anticlockwise\"\n        Anticlockwise = 8,\n        //% block=\"Wave\"\n        Wave = 9\n    }\n    export enum ColorList {\n        //% block=\"Red\"\n        red,\n        //% block=\"Green\"\n        green,\n        //% block=\"Blue\"\n        blue,\n        //% block=\"Cyan\"\n        cyan,\n        //% block=\"Magenta\"\n        magenta,\n        //% block=\"Yellow\"\n        yellow,\n        //% block=\"White\"\n        white\n    }\n\n    ///////////////////////////////////blocks/////////////////////////////\n\n    //% blockId=\"readwaterLevel\" block=\"Water level sensor %Rjpin value(0~100)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function waterLevel(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        let voltage = 0, waterlevel = 0;\n        voltage = pins.map(\n            pins.analogReadPin(pin),\n            50,\n            600,\n            0,\n            100\n        );\n        if (voltage < 0) {\n            voltage = 0\n        }\n        waterlevel = voltage;\n        return Math.round(waterlevel)\n    }\n\n    let distance_last = 0\n\n    //% blockId=sonarbit block=\"Ultrasonic sensor pinT %tPin pinE %ePin distance %distance_unit\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% distance_unit.fieldEditor=\"gridpicker\"\n    //% distance_unit.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    export function ultrasoundSensor(tPin: DigitalPin, ePin: DigitalPin, distance_unit: Distance_Unit_List): number {\n        let pinT = tPin\n        let pinE = ePin\n        pins.setPull(pinT, PinPullMode.PullNone)\n        pins.digitalWritePin(pinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(pinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(pinT, 0)\n\n        // read pulse\n        let d = pins.pulseIn(pinE, PulseValue.High, 25000)\n        let version = control.hardwareVersion()\n        let distance = d * 34 / 2 / 1000\n        if (version == \"1\") {\n            distance = distance * 3 / 2\n        }\n\n        if (distance > 430) {\n            distance = 0\n        }\n\n        if (distance == 0) {\n            distance = distance_last\n            distance_last = 0\n        }\n        else {\n            distance_last = distance\n        }\n\n        switch (distance_unit) {\n            case Distance_Unit_List.Distance_Unit_cm:\n                return Math.floor(distance)  //cm\n                break\n            case Distance_Unit_List.Distance_Unit_foot:\n                return Math.floor(distance / 30.48)   //foot\n                break\n            default:\n                return 0\n        }\n    }\n\n    export class PAJ7620 {\n        private paj7620WriteReg(addr: number, cmd: number) {\n            let buf: Buffer = pins.createBuffer(2);\n            buf[0] = addr;\n            buf[1] = cmd;\n            pins.i2cWriteBuffer(0x73, buf, false);\n        }\n        private paj7620ReadReg(addr: number): number {\n            let buf: Buffer = pins.createBuffer(1);\n            buf[0] = addr;\n            pins.i2cWriteBuffer(0x73, buf, false);\n            buf = pins.i2cReadBuffer(0x73, 1, false);\n            return buf[0];\n        }\n        private paj7620SelectBank(bank: number) {\n            if (bank == 0) this.paj7620WriteReg(0xEF, 0);\n            else if (bank == 1) this.paj7620WriteReg(0xEF, 1);\n        }\n        private paj7620Init() {\n            let temp = 0;\n            this.paj7620SelectBank(0);\n            temp = this.paj7620ReadReg(0);\n            if (temp == 0x20) {\n                for (let i = 0; i < 438; i += 2) {\n                    this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);\n                }\n            }\n            this.paj7620SelectBank(0);\n        }\n        init() {\n            this.paj7620Init();\n            basic.pause(200);\n        }\n        read(): number {\n            let data = 0, result = 0;\n            data = this.paj7620ReadReg(0x43);\n            switch (data) {\n                case 0x01:\n                    result = GestureType.Right;\n                    break;\n                case 0x02:\n                    result = GestureType.Left;\n                    break;\n                case 0x04:\n                    result = GestureType.Up;\n                    break;\n                case 0x08:\n                    result = GestureType.Down;\n                    break;\n                case 0x10:\n                    result = GestureType.Forward;\n                    break;\n                case 0x20:\n                    result = GestureType.Backward;\n                    break;\n                case 0x40:\n                    result = GestureType.Clockwise;\n                    break;\n                case 0x80:\n                    result = GestureType.Anticlockwise;\n                    break;\n                default:\n                    data = this.paj7620ReadReg(0x44);\n                    if (data == 0x01)\n                        result = GestureType.Wave;\n                    break;\n            }\n            return result;\n        }\n    }\n    const gestureEventId = 3100;\n    let lastGesture = GestureType.None;\n    let paj7620 = new PAJ7620();\n    //% blockId= gesture_create_event block=\"Gesture sensor IIC port is %gesture\"\n    //% gesture.fieldEditor=\"gridpicker\" gesture.fieldOptions.columns=3\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function onGesture(gesture: GestureType, handler: () => void) {\n        control.onEvent(gestureEventId, gesture, handler);\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        control.inBackground(() => {\n            while (true) {\n                const gesture = paj7620.read();\n                if (gesture != lastGesture) {\n                    lastGesture = gesture;\n                    control.raiseEvent(gestureEventId, lastGesture);\n                }\n                basic.pause(200);\n            }\n        })\n    }\n\n    //% blockId= gesture_get_event block=\"Gesture sensor IIC port detects\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function getGesture(): number {\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        const gesture = paj7620.read();\n        return gesture\n    }\n\n\n\n\n    //% blockId=apds9960_readcolor block=\"Color sensor IIC port color HUE(0~360)\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function readColor(): number {\n        if (color_first_init == false) {\n            initModule()\n            colorMode()\n        }\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        while (!tmp) {\n            basic.pause(5);\n            tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        }\n        let c = i2cread_color(APDS9960_ADDR, APDS9960_CDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_CDATAH) * 256;\n        let r = i2cread_color(APDS9960_ADDR, APDS9960_RDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_RDATAH) * 256;\n        let g = i2cread_color(APDS9960_ADDR, APDS9960_GDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_GDATAH) * 256;\n        let b = i2cread_color(APDS9960_ADDR, APDS9960_BDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_BDATAH) * 256;\n        // map to rgb based on clear channel\n        let avg = c / 3;\n        r = r * 255 / avg;\n        g = g * 255 / avg;\n        b = b * 255 / avg;\n        //let hue = rgb2hue(r, g, b);\n        let hue = rgb2hsl(r, g, b)\n        return hue\n    }\n    //% block=\"Color sensor IIC port detects %color\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% color.fieldEditor=\"gridpicker\" color.fieldOptions.columns=3\n    export function checkColor(color: ColorList): boolean {\n        let hue = readColor()\n        switch (color) {\n            case ColorList.red:\n                if (hue > 330 || hue < 20) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.green:\n                if (hue > 120 && 180 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.blue:\n                if (hue > 210 && 270 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.cyan:\n                if (hue > 190 && 210 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.magenta:\n                if (hue > 260 && 330 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.yellow:\n                if (hue > 30 && 120 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.white:\n                if (hue >= 180 && 190 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n        }\n    }\n\n    //% blockId=\"potentiometer\" block=\"Trimpot %Rjpin analog value\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Input color=#E2C438 group=\"Analog\"\n    export function trimpot(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        return pins.analogReadPin(pin)\n    }\n    //% blockId=buttonab block=\"Button %Rjpin %button is pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonCD(Rjpin: DigitalRJPin, button: ButtonStateList): boolean {\n        let pinC = DigitalPin.P1\n        let pinD = DigitalPin.P2\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pinC = DigitalPin.P1\n                pinD = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pinC = DigitalPin.P2\n                pinD = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pinC = DigitalPin.P13\n                pinD = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pinC = DigitalPin.P15\n                pinD = DigitalPin.P16\n                break;\n            case DigitalRJPin.P3:\n                pinC = DigitalPin.P3\n                pinD = DigitalPin.P4\n                break;\n        }\n        pins.setPull(pinC, PinPullMode.PullUp)\n        pins.setPull(pinD, PinPullMode.PullUp)\n        if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 0 && button == ButtonStateList.CD) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinC) == 0 && pins.digitalReadPin(pinD) == 1 && button == ButtonStateList.C) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 1 && button == ButtonStateList.D) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    export enum ButtonState {\n        //% block=\"on\"\n        on = 1,\n        //% block=\"off\"\n        off = 2\n    }\n\n    const buttonEventSource = 5000\n    const buttonEventValue = {\n        CD_pressed: ButtonState.on,\n        CD_unpressed: ButtonState.off\n    }\n\n    //% block=\"on button %Rjpin %button pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=4\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonEvent(Rjpin: DigitalRJPin, button: ButtonStateList, handler: () => void) {\n        let ButtonPin_C = DigitalPin.P1\n        let ButtonPin_D = DigitalPin.P2\n        let pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P0\n        let pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                ButtonPin_C = DigitalPin.P1\n                ButtonPin_D = DigitalPin.P8\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P1\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P8\n                break;\n            case DigitalRJPin.J2:\n                ButtonPin_C = DigitalPin.P2\n                ButtonPin_D = DigitalPin.P12\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P2\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P12\n                break;\n            case DigitalRJPin.J3:\n                ButtonPin_C = DigitalPin.P13\n                ButtonPin_D = DigitalPin.P14\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P13\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P14\n                break;\n            case DigitalRJPin.J4:\n                ButtonPin_C = DigitalPin.P15\n                ButtonPin_D = DigitalPin.P16\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P15\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P16\n                break;\n            case DigitalRJPin.P3:\n                ButtonPin_C = DigitalPin.P3\n                ButtonPin_D = DigitalPin.P4\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P3\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P4\n                break;\n        }\n        if (button == ButtonStateList.C) {\n            pins.setPull(ButtonPin_C, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_C, PinEventType.Edge)\n            control.onEvent(pinEventSource_C, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.D) {\n            pins.setPull(ButtonPin_D, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_D, PinEventType.Edge)\n            control.onEvent(pinEventSource_D, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.CD) {\n            loops.everyInterval(50, function () {\n                if (pins.digitalReadPin(ButtonPin_C) == 0 && pins.digitalReadPin(ButtonPin_D) == 0) {\n                    control.raiseEvent(buttonEventSource, buttonEventValue.CD_pressed)\n                }\n            })\n            control.onEvent(buttonEventSource, buttonEventValue.CD_pressed, handler)\n        }\n    }\n\n    //% blockId=fans block=\"Motor fan %Rjpin toggle to $fanstate || speed %speed \\\\%\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% fanstate.shadow=\"toggleOnOff\"\n    //% subcategory=Excute group=\"Digital\" color=#EA5532\n    //% speed.min=0 speed.max=100\n    //% expandableArgumentMode=\"toggle\"\n    export function motorFan(Rjpin: DigitalRJPin, fanstate: boolean, speed: number = 100): void {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case DigitalRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n            case DigitalRJPin.J3:\n                pin = AnalogPin.P13\n                break;\n            case DigitalRJPin.J4:\n                pin = AnalogPin.P15\n                break;\n        }\n        if (fanstate) {\n            pins.analogSetPeriod(pin, 100)\n            pins.analogWritePin(pin, Math.map(speed, 0, 100, 0, 1023))\n        }\n        else {\n            pins.analogWritePin(pin, 0)\n            speed = 0\n        }\n    }\n\n\n    //% blockId=\"setLoopFolder\" block=\"loop play all the MP3s in the folder:$folderNum\"\n    //% folderNum.defl=\"01\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setLoopFolder(folderNum: string): void {\n        CMD = 0x17\n        para1 = 0\n        para2 = parseInt(folderNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    //% blockId=\"folderPlay\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum || repeatList: $myAns\"\n    //% folderNum.defl=\"01\" fileNum.defl=\"001\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function folderPlay(folderNum: string, fileNum: string, myAns: boolean = false): void {\n        CMD = 0x0F\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        if (myAns)\n            execute(0x19)\n    }\n\n    //% blockId=\"playFolderFilePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFilePort(folderNum: string, fileNum: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFolderFileVolumePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum with volume:$theVolume usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" theVolume.defl=\"10\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFileVolumePort(folderNum: string, fileNum: string, theVolume: string, Rjpin: DigitalRJPin): void {\n        \n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        \n        let volume = parseInt(theVolume)\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(200)\n\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"volumePort\" \n    //% block=\"set MP3 volume:$theVolume usingPin:$Rjpin\"\n    //% theVolume.defl=\"10\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function volumePort(theVolume: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        let volume = parseInt(theVolume)\n        if (volume > 30) {\n            volume = 30\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(300)\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n\n\n    //% blockId=\"setTracking\" \n    //% block=\"play the mp3 in order of:%tracking || repeatList: $myAns\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% tracking.defl=1\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setTracking(tracking: number, myAns: boolean = false): void {\n        CMD = 0x03\n        para1 = 0x00\n        para2 = tracking\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        execute(0x0D)\n        if (myAns)\n            execute(0x19)\n    }\n    //% blockId=MP3execute block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=\"setVolume\" block=\"Set volume(0~25):%volume\"\n    //% volume.min=0 volume.max=25\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setVolume(volume: number): void {\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 0x06\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=MP3setPort block=\"Set the MP3 port to %Rjpin\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function MP3SetPort(Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        setVolume(25)\n    }\n}","notlegos.ts":"// NotLegos Blocks\n//% block=\"Not LEGOs\" color=#0031AF weight=1000 icon=\"\\uf3a5\"\n//% groups='[\"MP3\",\"Sensors\"]'\nnamespace notLegos {\n\n\n/// BEGIN NEOPIXEL ///\n    export enum hues { red = 0, orange = 15, yellow = 40, lime = 85, green = 110, cyan = 170, blue = 240, purple = 260, pink = 310 }\n    export enum vfxEffect { parade = 0, fire = 1, indicate = 2, idle = 3, glow = 4, mine = 5, off = 6 }\n    let NeoSock: Strip = null; let NeoScore: Strip = null; let NeoWheel: Strip = null; let NeoKong: Strip = null; let NeoStrip: Strip = null; let NeoBrick: Strip = null\n    let vfx_mine_tog: number[] = []; let vfx_mine_hue: number[] = []; let vfx_mine_sat: number[] = []; let vfx_mine_lum: number[] = []\n    let vfx_fire_tog: number[] = []; let vfx_fire_hue: number[] = []; let vfx_fire_sat: number[] = []; let vfx_fire_lum: number[] = []; let vfx_fire_colors: number[] = []\n    let vfx_indicate_tog: number[] = []; let vfx_indicate_hue: number[] = []; let vfx_indicate_sat: number[] = []; let vfx_indicate_lum: number[] = [];\n    let vfx_idle_tog: number[] = []; let vfx_idle_hue: number[] = []; let vfx_idle_sat: number[] = []; let vfx_idle_lum: number[] = []\n    let vfx_glow_tog: number[] = []; let vfx_glow_hue: number[] = []; let vfx_glow_sat: number[] = []; let vfx_glow_lum: number[] = []\n    let vfx_parade_tog: number[] = []; let vfx_parade_hue: number[] = []; let vfx_parade_sat: number[] = []; let vfx_parade_lum: number[] = []; let vfx_parade_colors: number[] = [];\n    let vfx_last_tog: number[] = []; let vfx_last_hue: number[] = []; let vfx_last_sat: number[] = []; let vfx_last_lum: number[] = []\n    let vfx_master_tog: number[] = []; let vfx_master_hue: number[] = []; let vfx_master_sat: number[] = []; let vfx_master_lum: number[] = []; let vfx_master_effect: number[] = [];\n    let vfx_light_count = 0\n\n    //% shim=sendBufferAsm\n    function sendBuffer(buf: Buffer, pin: DigitalPin) { }\n\n    export class Strip {\n        buf: Buffer;\n        pin: DigitalPin;\n        start: number; // start offset in LED strip\n        _length: number; // number of LEDs\n\n        setPixelHSLPrecise(pixeloffset: number, h: number, s: number, l: number): void {\n            if (pixeloffset < 0 || pixeloffset >= this._length)\n                return;\n            pixeloffset = (pixeloffset + this.start) * 3\n            h = Math.clamp(0,1,h/360)\n            s = Math.clamp(0,1,s/100)\n            l = Math.clamp(0,1,l/100)\n            let r, g, b;\n            if (s === 0) {\n                r = g = b = l; // achromatic\n            } else {\n                const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n                const p = 2 * l - q;\n                r = this.hueToRgb(p, q, h + 1 / 3);\n                g = this.hueToRgb(p, q, h);\n                b = this.hueToRgb(p, q, h - 1 / 3);\n            }\n            this.buf[pixeloffset + 0] = Math.round(g * 255);\n            this.buf[pixeloffset + 1] = Math.round(r * 255);\n            this.buf[pixeloffset + 2] = Math.round(b * 255);\n        }\n\n        hueToRgb(p:number, q:number, t:number) {\n            if (t < 0) t += 1;\n            if (t > 1) t -= 1;\n            if (t < 1 / 6) return p + (q - p) * 6 * t;\n            if (t < 1 / 2) return q;\n            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n            return p;\n        }\n\n        show() { sendBuffer(this.buf, this.pin); }  //Send all the changes to the strip.\n\n        length() { return this._length; }   //Gets the number of pixels declared on the strip\n\n        shift(offset: number = 1): void { this.buf.shift(-offset * 3, this.start * 3, this._length * 3) }   //Shift LEDs forward and clear with zeros.\n\n        rotate(offset: number = 1): void { this.buf.rotate(-offset * 3, this.start * 3, this._length * 3) } //Rotate LEDs forward\n\n        setPin(pin: DigitalPin): void {\n            this.pin = pin;\n            pins.digitalWritePin(this.pin, 0);  // don't yield to avoid races on initialization\n        }\n    }\n\n    function create(thePin: DigitalPin, numleds: number): Strip {\n        let strip = new Strip();\n        strip.buf = pins.createBuffer(numleds * 3);\n        strip.start = 0;\n        strip._length = numleds;\n        strip.setPin(thePin)\n        return strip;\n    }\n\n    //% blockId=NL_PIXEL_CastleSay\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Sock Circle:%sockPin  Wheel Strip/Circle:%wheelPin  Score Circle:%scorePin \"\n    //% weight=100\n    export function castleSayLights(sockPin: DigitalPin, wheelPin: DigitalPin, scorePin: DigitalPin): void {\n        NeoScore = create(scorePin, 8)\n        NeoSock = create(sockPin, 8)\n        NeoWheel = create(wheelPin, 18)\n        vfx_light_count = 8 + 8 + 18\n        vfxInit()\n        vfx_indicate_hue[30]=hues.green\n        vfx_indicate_hue[31] = hues.yellow\n        vfx_indicate_hue[32] = hues.orange\n        vfx_indicate_hue[33] = hues.red\n        vfx_indicate_hue[26] = hues.red\n        vfx_indicate_hue[27] = hues.red\n        vfx_indicate_hue[28] = hues.red\n        vfx_indicate_hue[29] = hues.red\n\n        // setEffect(vfxRegion.CastleSayAll, vfxEffect.parade)\n    }\n\n    //% blockId=NL_PIXEL_CastleDo\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Strips:%spotPin  Bricks:%brickPin Kong Lights:%kongPin\"\n    //% weight=100\n    export function castleDoLights(stripPin: DigitalPin, brickPin: DigitalPin, kongPin: DigitalPin): void {\n        NeoStrip = create(stripPin, 20)\n        NeoBrick = create(brickPin, 8)\n        NeoKong = create(kongPin, 4)\n        vfx_light_count = 20 + 8 + 4\n        vfxInit()\n        vfx_indicate_hue[0]=hues.cyan; vfx_indicate_hue[1]=hues.cyan   //spot h\n        vfx_indicate_hue[2] = hues.pink; vfx_indicate_hue[3] = hues.pink //spot f\n        vfx_indicate_hue[26] = hues.pink   //shell brick\n        vfx_indicate_hue[4] = hues.orange; vfx_indicate_hue[5] = hues.orange   //spot d\n        vfx_indicate_hue[21] = hues.orange   //cannon brick\n        vfx_indicate_hue[25] = hues.orange   //bomb brick\n        vfx_indicate_hue[6] = hues.yellow; vfx_indicate_hue[7] = hues.yellow   //spot b\n        vfx_indicate_hue[8] = hues.red; vfx_indicate_hue[9] = hues.red; vfx_indicate_hue[10] = hues.red; vfx_indicate_hue[11] = hues.red  //spot a\n        vfx_indicate_hue[20] = hues.red; vfx_indicate_hue[27] = hues.red  //wheel bricks\n        vfx_indicate_hue[12] = hues.blue; vfx_indicate_hue[13] = hues.blue    //spot c\n        vfx_indicate_hue[14] = hues.cyan; vfx_indicate_hue[15] = hues.cyan    //spot e\n        vfx_indicate_hue[16] = hues.purple; vfx_indicate_hue[17] = hues.purple  //spot g\n        vfx_indicate_hue[24] = hues.purple  //ghost brick\n        vfx_indicate_hue[18] = hues.green; vfx_indicate_hue[19] = hues.green   //spot i\n        vfx_indicate_hue[28] = hues.green; vfx_indicate_hue[29] = hues.green; vfx_indicate_hue[30] = hues.green; vfx_indicate_hue[31] = hues.green   //kong\n        vfx_indicate_hue[22] = hues.yellow; vfx_indicate_hue[23] = hues.yellow  //dragon brick\n        vfx_indicate_tog[0] = 1; vfx_indicate_tog[1] = 1 //spot h\n        vfx_indicate_tog[2] = 1; vfx_indicate_tog[3] = 1 //spot f\n        vfx_indicate_tog[4] = 1; vfx_indicate_tog[5] = 1 //spot d\n        vfx_indicate_tog[6] = 1; vfx_indicate_tog[7] = 1 //spot b\n        vfx_indicate_tog[8] = 1; vfx_indicate_tog[9] = 1 //spot a\n        vfx_indicate_tog[22] = 1; vfx_indicate_tog[27] = 1    //wheel bricks\n        vfx_indicate_tog[21] = 1    //cannon brick\n        vfx_indicate_tog[25] = 1    //bomb brick\n        vfx_indicate_tog[26] = 1    //shell brick\n        vfx_indicate_tog[31] = 1; vfx_indicate_tog[30] = 1    //kong\n        \n        // setEffect(vfxRegion.CastleDoAll, vfxEffect.indicate)\n    }\n\n    function vfxInit(): void{\n        vfx_parade_colors = [hues.red, hues.orange, hues.yellow, hues.cyan, hues.blue, hues.purple]\n        vfx_fire_colors = [hues.red, hues.red, hues.red, hues.red, hues.orange, hues.orange, hues.orange, hues.orange, hues.orange, hues.yellow]\n        for (let index = 0; index < vfx_light_count; index++) {\n             \n            vfx_indicate_tog.push(0)\n            vfx_indicate_lum.push(50)\n            vfx_indicate_hue.push(50)\n            vfx_indicate_sat.push(100)\n\n            vfx_mine_tog.push(0)\n            vfx_mine_hue.push(hues.red)\n            vfx_mine_sat.push(100)\n            vfx_mine_lum.push(50)\n\n            vfx_fire_tog.push(randint(0, 1))\n            vfx_fire_hue.push(vfx_fire_colors[randint(0, vfx_fire_colors.length - 1)])\n            vfx_fire_sat.push(100)\n            vfx_fire_lum.push(randint(30, 80))\n\n            vfx_idle_tog.push(1)\n            if (index % 2 == 0) { vfx_idle_tog[index] = 0; }\n            vfx_idle_hue.push(265)\n            if (index % 2 == 0) { vfx_idle_hue[index] = 2; }\n            vfx_idle_sat.push(100)\n            vfx_idle_lum.push(50)\n\n            vfx_glow_tog.push(0)\n            vfx_glow_hue.push(50)\n            vfx_glow_sat.push(0)\n            vfx_glow_lum.push(0)\n\n            vfx_parade_tog.push(randint(0, 1))\n            vfx_parade_hue.push(vfx_parade_colors[randint(0, vfx_parade_colors.length-1)])\n            vfx_parade_sat.push(100)\n            vfx_parade_lum.push(randint(10, 65))\n\n            vfx_last_tog.push(0)\n            vfx_last_hue.push(50)\n            vfx_last_sat.push(100)\n            vfx_last_lum.push(50)\n\n            vfx_master_tog.push(0)\n            vfx_master_hue.push(0)\n            vfx_master_sat.push(100)\n            vfx_master_lum.push(50)\n            vfx_master_effect.push(vfxEffect.off)    //leave this be!\n        }\n    }\n\n    //% blockId=NL_PIXEL_ResetVFX\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Reset VFX %effect\"\n    //% weight=100\n    export function vfxReset(effect:vfxEffect):void{\n        if (effect == vfxEffect.idle){\n            for (let index = 0; index < vfx_light_count; index++) {\n                vfx_idle_tog[index]=1\n                if (index % 2 == 0) { vfx_idle_tog[index] = 0; }\n                vfx_idle_hue[index]=265\n                if (index % 2 == 0) { vfx_idle_hue[index] = 2; }\n                vfx_idle_sat[index]=100\n                vfx_idle_lum[index]=50\n            }\n        } else if (effect == vfxEffect.glow) {\n            for (let index = 0; index < vfx_light_count; index++) {\n                vfx_glow_tog[index] = 0\n                vfx_glow_hue[index] = 50\n                // vfx_glow_sat[index] = 100\n                vfx_glow_lum[index] = 0\n            }\n        } else if (effect == vfxEffect.mine) {\n            for (let index = 0; index < vfx_light_count; index++) {\n                vfx_mine_tog[index] = 0\n                vfx_mine_hue[index] = hues.red\n                vfx_mine_sat[index] = 100\n                vfx_mine_lum[index] = 50\n            }\n        } else if (effect == vfxEffect.indicate) {\n            for (let index = 0; index < vfx_light_count; index++) {\n                vfx_indicate_tog[index] = 0\n                vfx_indicate_sat[index] = 100\n                vfx_indicate_lum[index] = 50\n            }\n        }\n    }\n\n    //% blockId=NL_PIXEL_CastleSayTick\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Advance Castle Say lights\"\n    //% weight=100\n    export function castleSayTick(): void {\n        paradeTick()\n        fireTick()\n        glowTick()\n        castleSayWrite()\n        indicateTick()\n        idleTick()\n        mineTick()\n    }\n\n    //% blockId=NL_PIXEL_CastleDoTick\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Advance Castle Do lights\"\n    //% weight=100\n    export function castleDoTick(): void {\n        paradeTick()\n        fireTick()\n        glowTick()\n        castleDoWrite()\n        indicateTick()\n        idleTick()\n        mineTick()\n    }\n\n    function paradeTick(): void{\n        for (let index=0; index < vfx_light_count; index++){\n            let thisLum = vfx_parade_lum[index]\n            let thisHue = vfx_parade_hue[index]\n            let thisTog = vfx_parade_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0){\n                if (thisLum < 65){\n                    vfx_parade_lum[index] = thisLum + 12\n                } else if (thisLum >= 65){\n                    vfx_parade_tog[index] = 1\n                }\n            } else if (thisTog == 1){\n                if (thisLum>10){\n                    vfx_parade_lum[index] = thisLum - 4\n                } else if (thisLum <= 10){\n                    vfx_parade_tog[index] = 0\n                    while (nextHue == thisHue){\n                        nextHue = vfx_parade_colors[randint(0, vfx_parade_colors.length - 1)]\n                    }\n                    vfx_parade_hue[index] = nextHue\n                    vfx_parade_lum[index] = thisLum - randint(0,10)\n                }\n            }\n        }\n    }\n\n    function mineTick(): void {\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisLum = vfx_mine_lum[index]\n            let thisHue = vfx_mine_hue[index]\n            let thisTog = vfx_mine_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 200) {\n                    vfx_mine_lum[index] = thisLum + 30\n                } else if (thisLum >= 200) {\n                    vfx_mine_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 0) {\n                    vfx_mine_lum[index] = thisLum - 30\n                } else if (thisLum <= 0) {\n                    vfx_mine_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function idleTick(): void {\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisLum = vfx_idle_lum[index]\n            let thisHue = vfx_idle_hue[index]\n            let thisTog = vfx_idle_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisHue < 265) {\n                    vfx_idle_hue[index] = thisHue + 1\n                } else if (thisHue >= 265) {\n                    vfx_idle_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisHue > 2) {\n                    vfx_idle_hue[index] = thisHue - 1\n                } else if (thisHue <= 2) {\n                    vfx_idle_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function indicateTick(): void {\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisLum = vfx_indicate_lum[index]\n            let thisHue = vfx_indicate_hue[index]\n            let thisTog = vfx_indicate_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 80) {\n                    vfx_indicate_lum[index] = thisLum + 12\n                } else if (thisLum >= 80) {\n                    vfx_indicate_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 25) {\n                    vfx_indicate_lum[index] = thisLum - 4\n                } else if (thisLum <= 25) {\n                    vfx_indicate_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function fireTick(): void {\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisLum = vfx_fire_lum[index]\n            let thisHue = vfx_fire_hue[index]\n            let thisTog = vfx_fire_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 80) {\n                    vfx_fire_lum[index] = thisLum + 15\n                } else if (thisLum >= 80) {\n                    vfx_fire_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 30) {\n                    vfx_fire_lum[index] = thisLum - 5\n                } else if (thisLum <= 30) {\n                    vfx_fire_tog[index] = 0\n                    while (nextHue == thisHue) {\n                        nextHue = vfx_fire_colors[randint(0, vfx_fire_colors.length - 1)]\n                    }\n                    vfx_fire_hue[index] = nextHue\n                    vfx_fire_lum[index] = thisLum - randint(0, 30)\n                }\n            }\n        }\n    }\n\n    function glowTick(): void {\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisLum = vfx_glow_lum[index]\n            if (thisLum < 4){\n                vfx_glow_lum[index] = thisLum+.2\n            } else if (thisLum < 5) {\n                vfx_glow_lum[index] = thisLum+ + .3\n            } else if (thisLum < 10) {\n                vfx_glow_lum[index] = thisLum + .5\n            } else if (thisLum < 15) {\n                vfx_glow_lum[index] = thisLum + 1\n            }else if (thisLum < 30) {\n                vfx_glow_lum[index] = thisLum + 1.5\n            } else if (thisLum < 100) {\n                vfx_glow_lum[index] = thisLum + 4\n            } else{\n                vfx_glow_lum[index] = 0\n            }\n        }\n    }\n\n    function vfxPrepareMaster(): void{\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisEffect = vfx_master_effect[index]\n            if (thisEffect == vfxEffect.parade) {\n                vfx_master_hue[index] = vfx_parade_hue[index]\n                vfx_master_sat[index] = vfx_parade_sat[index]\n                vfx_master_lum[index] = Math.max(0,Math.min(50,vfx_parade_lum[index]))\n            } else if (thisEffect == vfxEffect.fire) {\n                vfx_master_hue[index] = vfx_fire_hue[index]\n                vfx_master_sat[index] = vfx_fire_sat[index]\n                vfx_master_lum[index] = Math.max(0, Math.min(50, vfx_fire_lum[index]))\n            } else if (thisEffect == vfxEffect.indicate) {\n                vfx_master_hue[index] = vfx_indicate_hue[index]\n                vfx_master_sat[index] = vfx_indicate_sat[index]\n                vfx_master_lum[index] = Math.max(0, Math.min(50, vfx_indicate_lum[index]))\n            } else if (thisEffect == vfxEffect.idle) {\n                vfx_master_hue[index] = vfx_idle_hue[index]\n                vfx_master_sat[index] = vfx_idle_sat[index]\n                vfx_master_lum[index] = Math.max(0, Math.min(50, vfx_idle_lum[index]))\n            } else if (thisEffect == vfxEffect.glow) {\n                vfx_master_hue[index] = vfx_glow_hue[index]\n                vfx_master_sat[index] = vfx_glow_sat[index]\n                vfx_master_lum[index] = Math.min(100,vfx_glow_lum[index])\n            } else if (thisEffect == vfxEffect.mine) {\n                vfx_master_hue[index] = vfx_mine_hue[index]\n                vfx_master_sat[index] = vfx_mine_sat[index]\n                vfx_master_lum[index] = Math.max(0, Math.min(50, vfx_mine_lum[index]))\n            } else if (thisEffect == vfxEffect.off) {\n                vfx_master_hue[index] = vfx_mine_hue[index]\n                vfx_master_sat[index] = vfx_mine_sat[index]\n                vfx_master_lum[index] = 0\n            }\n        }\n    }\n    function castleSayWrite(): void{\n        vfxPrepareMaster()\n        let masterIndex = 0\n        for (let index = 0; index < NeoSock.length(); index++){\n            NeoSock.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        for (let index = 0; index < NeoWheel.length(); index++) {\n            NeoWheel.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        for (let index = 0; index < NeoScore.length(); index++) {\n            NeoScore.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        NeoSock.show()\n        NeoWheel.show()\n        NeoScore.show()\n    }\n\n    function castleDoWrite(): void {\n        vfxPrepareMaster()\n        let masterIndex = 0\n        for (let index = 0; index < NeoStrip.length(); index++) {\n            NeoStrip.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        for (let index = 0; index < NeoBrick.length(); index++) {\n            NeoBrick.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        for (let index = 0; index < NeoKong.length(); index++) {\n            NeoKong.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        NeoStrip.show()\n        NeoBrick.show()\n        NeoKong.show()\n    }\n\n    //% blockId=NL_PIXEL_SetEffect\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Set %region VFX to %effect\"\n    //% weight=100\n    export function setEffect(region:vfxRegion, effect:vfxEffect){\n        if (region == vfxRegion.Score1){\n            vfx_master_effect[30] = effect\n        } else if (region == vfxRegion.Score2) {\n            vfx_master_effect[31] = effect\n        } else if (region == vfxRegion.Score3) {\n            vfx_master_effect[32] = effect\n        } else if (region == vfxRegion.Score4) {\n            vfx_master_effect[33] = effect\n        } else if (region == vfxRegion.Score5) {\n            vfx_master_effect[26] = effect\n        } else if (region == vfxRegion.Score6) {\n            vfx_master_effect[27] = effect\n        } else if (region == vfxRegion.Score7) {\n            vfx_master_effect[28] = effect\n        } else if (region == vfxRegion.Score8) {\n            vfx_master_effect[29] = effect\n        } else if (region == vfxRegion.ScoreAll) {\n            for (let i = 26; i <= 33; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SockAll) {\n            for (let i = 0; i <= 7; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelInner) {\n            for (let i = 18; i <= 25; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelOuter) {\n            for (let i = 8; i <= 17; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelAll) {\n            for (let i=8; i <= 25; i++){ vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.CastleSayAll) {\n            for (let i = 0; i <= 33; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotA) {\n            for (let i = 8; i <= 11; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotB) {\n            for (let i = 6; i <= 7; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotC) {\n            for (let i = 12; i <= 13; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotD) {\n            for (let i = 4; i <= 5; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotE) {\n            for (let i = 14; i <= 15; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotF) {\n            for (let i = 2; i <= 3; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotG) {\n            for (let i = 16; i <= 17; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotH) {\n            for (let i = 0; i <= 1; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotI) {\n            for (let i = 18; i <= 19; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotAll) {\n            for (let i = 0; i <= 19; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.BrickWheel) {\n            vfx_master_effect[20] = effect\n            vfx_master_effect[27] = effect\n        } else if (region == vfxRegion.BrickBomb) {\n            vfx_master_effect[25] = effect\n        } else if (region == vfxRegion.BrickShell) {\n            vfx_master_effect[26] = effect\n        } else if (region == vfxRegion.BrickGhost) {\n            vfx_master_effect[24] = effect\n        } else if (region == vfxRegion.BrickDragon) {\n            for (let i = 22; i <= 23; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.BrickCannon) {\n            vfx_master_effect[21] = effect\n        } else if (region == vfxRegion.BrickAll) {\n            for (let i = 20; i <= 27; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongFront) {\n            for (let i = 28; i <= 29; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongBack) {\n            for (let i = 30; i <= 31; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongAll) {\n            for (let i = 28; i <=31; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.CastleDoAll) {\n            for (let i = 0; i < vfx_light_count; i++) { vfx_master_effect[i] = effect };\n        } \n    }\n\n    export enum vfxRegion{\n        Score1, Score2, Score3, Score4, Score5, Score6, Score7, Score8, ScoreAll,\n        SockAll,\n        WheelInner, WheelOuter, WheelAll,\n        KongFront, KongBack, KongAll,\n        BrickWheel, BrickBomb, BrickShell, BrickGhost, BrickDragon, BrickCannon, BrickAll,\n        SpotA, SpotB, SpotC, SpotD, SpotE, SpotF, SpotG, SpotH, SpotI, SpotAll,\n        CastleSayAll,\n        CastleDoAll\n    }\n\n/// END NEOPIXEL ///\n\n\n/// BEGIN SONAR ///\n\n    let sonarPinT = DigitalPin.P0\n    let sonarPinE = DigitalPin.P0\n\n    //% blockId=NL_SENSOR_SonarFirstRead\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"first distance from sonar at %pin1|%pin2\"\n    //% weight=101\n    export function SonarFirstRead(pin1: DigitalPin, pin2: DigitalPin): number {\n        sonarPinT = pin1\n        sonarPinE = pin2\n        pins.setPull(sonarPinT, PinPullMode.PullNone)\n        return SonarNextRead()\n    }\n\n    //% blockId=NL_SENSOR_SonarNextRead\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"next sonar distance\"\n    //% weight=100\n    export function SonarNextRead(): number {\n        pins.digitalWritePin(sonarPinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(sonarPinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(sonarPinT, 0)\n        return Math.floor(pins.pulseIn(sonarPinE, PulseValue.High, 25000) * 34 / 2000)\n    }\n\n/// END SONAR ///\n\n\n/// BEGIN MP3 ///\n\n    export enum playType { Play = 0x0D, Stop = 0x16, PlayNext = 0x01, PlayPrevious = 0x02, Pause = 0x0E }\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    let mp3musicPin: SerialPin\n    let mp3music = false\n    let mp3player = false\n    let mp3sfxPin: SerialPin\n    let mp3sfx = false\n    let mp3musicVol = 0\n    let mp3playerPin: SerialPin\n    let mp3playerVol = 0\n    let mp3sfxVol = 0\n    let isPot = false\n    let potPin = AnalogPin.P0\n    let masterVolume = 25\n\n    //% blockId=NL_SENSOR_TrimpotSet\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"set volume control pot at %aPin\"\n    export function potSet(aPin: AnalogPin): void {\n        potPin = aPin\n        isPot = true\n        masterVolume = potRead()\n    }\n\n    function potRead() {\n        if (isPot) { return Math.round(pins.map(pins.analogReadPin(potPin), 0, 1023, 0, 30)) }\n        else { return 5 }\n    }\n\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) { total += dataArr[i] }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) { myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i]) }\n        serial.writeBuffer(myBuff)\n        basic.pause(20) // Was 100; problematic at 10\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) { myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i]) }\n        serial.writeBuffer(myBuff)\n    }\n\n    //% blockId=NL_MP3_InitiateAs\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Ready MP3bit for %type at %sPin\"\n    //% dPin.fieldEditor=\"gridpicker\"\n    export function mp3setPorts(mp3bit: mp3type, sPin: SerialPin): void {\n        if (mp3bit == mp3type.music) {\n            mp3musicPin = sPin\n            mp3music = true\n            mp3musicVol = 100\n            setVolume(mp3type.music, mp3musicVol)\n        } else if (mp3bit == mp3type.player) {\n            mp3playerPin = sPin\n            mp3player = true\n            mp3playerVol = 100\n            setVolume(mp3type.player, mp3playerVol)\n        } else if (mp3bit == mp3type.sfxvoice) {\n            mp3sfxPin = sPin\n            mp3sfx = true\n            mp3sfxVol = 100\n            setVolume(mp3type.sfxvoice, mp3sfxVol)\n        }   \n    }\n\n    //% blockId=\"nl_playfilefolder\" \n    //% block=\"Play folder %folderNum file %fileNum on %sPin\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3fileFolder(folderNum: string, fileNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        dataArr[5] = parseInt(folderNum)\n        dataArr[6] = parseInt(fileNum)\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"NL_MP3_SendNumbers\" \n    //% block=\"Send numbers for folder %folderNum file %fileNum on %sPin\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3numbers(folderNum: number, fileNum: number, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        dataArr[3] = 15\n        dataArr[5] = folderNum\n        dataArr[6] = fileNum\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=NL_MP3_UpdateVolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Update volume for all\"\n    export function updateVolumeGlobal(): void {\n        let nowVol = potRead()\n        if (masterVolume != nowVol){\n            masterVolume = nowVol\n            setVolume(mp3type.music, mp3musicVol)\n            setVolume(mp3type.player, mp3playerVol)\n            setVolume(mp3type.sfxvoice, mp3sfxVol)\n        }\n    }\n\n    //% blockId=NL_MP3_SetVolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Set %mp3bit volume to %vol\"\n    export function setVolume(mp3bit:mp3type, vol:number): void {\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3musicVol = vol\n        } else if (mp3bit == mp3type.player) {\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3playerVol = vol\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3sfxVol = vol\n        }\n        dataArr[3] = 6\n        dataArr[5] = 0\n        dataArr[6] = Math.round(vol / 100 * masterVolume)\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=NL_MP3_GetVolumes\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Get current volumes\"\n    export function getVolumes() {\n        return \"m\" + mp3musicVol + \" p\" + mp3playerVol + \" s\" + mp3sfxVol + \" g\" + masterVolume\n    }\n\n    //% blockId=\"NL_MP3_StopPlayback\" \n    //% block=\"Stop playback on %mp3bit\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function stopPlayback(mp3bit:mp3type): void {\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        } else if (mp3bit == mp3type.player){\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        }\n        CMD = 0x16\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n/// END MP3 ///\n\n/// BEGIN SOUND BANK ///\n    export enum mp3type { music, player, sfxvoice }\n    export enum musicGenre { intro, tutorial, awaiting, level, won, lost }\n    export enum playerSaying { ready, yay, intro, nay, ouch, success, failure, won, lost, hurry }\n    export enum sfxType { correct, incorrect, ghost, fire, explosion, splash, spark, slash }\n    export enum voiceSaying { name, begin, retry, next, complete, gameover, welcome, intro, howto1, howto2, howto3, howto4, howto5, howto6, howto7, howto8, howto9 }\n    export enum magicianSaysSide { left, right }\n    export enum magicianDifficulty { easy, medium, hard }\n    export enum spotName { A, B, C, D, E, F, G, H, I }\n    export enum playerChar { mario, luigi, peach, daisy, toad, wario }\n\n    let sb_music_tutorial = feedBank(\"1.1.46|1.2.51|1.3.51|1.4.59|1.5.60|1.6.60|1.7.60|1.8.60|1.9.60|1.10.60|1.11.60|1.12.60|1.13.60|1.14.60|1.15.60|1.16.60|1.17.60|1.18.60|1.19.60|1.20.60|1.21.60\")\n    let sb_music_awaiting = feedBank(\"2.1.64|2.2.120|2.3.120|2.4.120|2.5.120|2.6.114|2.7.120|2.8.103|2.9.120|2.10.120|2.11.120|2.12.120|2.13.119|2.14.120|2.15.120|2.16.103|2.17.119|2.18.120|2.19.86|2.20.120\")\n    let sb_music_level = feedBank(\"3.1.120|3.2.120|3.3.120|3.4.120|3.5.120|3.6.120|3.7.120|3.8.120|3.9.120|3.10.92|3.11.120|3.12.120|3.13.111|3.14.116|3.15.98|3.16.120|3.17.120|3.18.82|3.19.120|3.20.120|3.21.120|3.22.120|3.23.120|3.24.120|3.25.120|3.26.120|3.27.91|3.28.120|3.29.120|3.30.41|3.31.120|3.32.120|3.33.120|3.34.94|3.35.120|3.36.120|3.37.120|3.38.120|3.39.120|3.40.120|3.41.78|3.42.120|3.43.120|3.44.120|3.45.120|3.46.120|3.47.120|3.48.120|3.49.120|3.50.120|3.51.120|3.52.113|3.53.120|3.54.120|3.55.42|3.56.120|3.57.120|3.58.120|3.59.114|3.60.120|3.61.120|3.62.118|3.63.120|3.64.120|3.65.120|3.66.120|3.67.120|3.68.59|3.69.120|3.70.120|3.71.118|3.72.120|3.73.120|3.74.70|3.75.120|3.76.120|3.77.120|3.78.120|3.79.120|3.80.120|3.81.120|3.82.120|3.83.80|3.84.120|3.85.120|3.86.120|3.87.120|3.88.107|3.89.120|3.90.120|3.91.120|3.92.120|3.93.36|3.94.120|3.95.120|3.96.120|3.97.120|3.98.120|3.99.120|3.100.63|3.101.120|3.102.120|3.103.112|3.104.105|3.105.120|3.106.110|3.107.120|3.108.120|3.109.120|3.110.120|3.111.120|3.112.120|3.113.120|3.114.120|3.115.120|3.116.119|3.117.120|3.118.120|3.119.120|3.120.120|3.121.120|3.122.120|3.123.120|3.124.120|3.125.120|3.126.104|3.127.120|3.128.87|3.129.120|3.130.118|3.131.120|3.132.120|3.133.50|3.134.109|3.135.120|3.136.120|3.137.120|3.138.91|3.139.120|3.140.120|3.141.120|3.142.120|3.143.120|3.144.120|3.145.104|3.146.112|3.147.120\")\n    let sb_music_won = feedBank(\"4.1.30|4.2.22|4.3.30|4.4.17|4.5.29|4.6.30|4.7.30|4.8.30|4.9.30|4.10.30|4.11.20|4.12.28|4.13.30|4.14.15|4.15.30|4.16.17|4.17.17|4.18.15|4.19.30|4.20.30|4.21.30|4.22.17|4.23.30|4.24.30|4.25.30\")\n    let sb_music_lost = feedBank(\"5.1.30|5.2.30|5.3.30|5.4.30|5.5.30|5.6.30|5.7.30|5.8.30|5.9.30|5.10.30|5.11.30\")\n    let sb_music_intro = feedBank(\"9.1.3|9.2.4|9.3.8|9.4.5|9.5.4|9.6.12|9.7.3|9.8.7|9.9.6|9.10.7|9.11.9|9.12.9|9.13.11|9.14.3|9.15.10|9.16.3|9.17.6|9.18.5|9.19.6|9.20.5|9.21.7|9.22.5|9.23.3|9.24.7|9.25.6|9.26.6|9.27.11|9.28.5|9.29.5|9.30.4|9.31.6|9.32.4|9.33.4|9.34.10|9.35.8|9.36.8|9.37.3|9.38.7|9.39.4|9.40.6|9.41.3|9.42.7|9.43.7|9.44.3|9.45.6|9.46.1|9.47.2|9.48.2|9.49.8|9.50.16|9.51.9|9.52.10|9.53.13|9.54.14|9.55.14|9.56.16|9.57.7|9.58.4|9.59.9|9.60.8|9.61.9|9.62.9|9.63.12|9.64.4|9.65.6|9.66.9|9.67.5|9.68.6|9.69.5|9.70.10|9.71.8|9.72.8|9.73.5|9.74.3\")\n    let sb_sfx_correct = feedBank(\"6.1.5|6.2.8|6.3.6|6.4.7|6.5.6|6.6.14|6.7.7|6.8.8|6.9.12|6.10.7|6.11.9|6.12.7|6.13.10|6.14.8|6.15.8|6.16.4|6.17.7|6.18.4|6.19.2|6.20.10|6.21.7|6.22.7|6.23.6|6.24.4|6.25.7|6.26.12|6.27.4|6.28.6|6.29.6|6.30.6|6.31.4|6.32.5|6.33.3|6.34.6|6.35.6|6.36.6|6.37.6|6.38.4|6.39.8|6.40.6|6.41.3|6.42.3|6.43.7|6.44.8|6.45.6|6.46.2|6.47.5|6.48.7|6.49.8|6.50.7|6.51.6|6.52.7|6.53.6|6.54.8|6.55.5|6.56.5|6.57.7|6.58.6|6.59.8|6.60.5|6.61.6|6.62.8|6.63.3|6.64.3|6.65.6|6.66.3|6.67.6|6.68.2|6.69.3|6.70.3|6.71.2|6.72.3|6.73.6|6.74.7|6.75.5|6.76.3|6.77.5|6.78.3|6.79.2|6.80.3|6.81.3|6.82.1|6.83.1|6.84.1|6.85.1|6.86.1|6.87.1|6.88.3|6.89.1|6.90.1|6.91.4|6.92.4\")\n    let sb_sfx_incorrect = feedBank(\"7.1.6|7.2.5|7.3.3|7.4.5|7.5.7|7.6.6|7.7.4|7.8.1|7.9.3|7.10.4|7.11.3|7.12.3|7.13.6|7.14.3|7.15.1|7.16.1|7.17.1|7.18.1|7.19.5|7.20.4|7.21.3|7.22.7\")\n    let sb_sfx_beep = feedBank(\"8.1.1|8.2.2|8.3.1\")\n    let sb_sfx_smash = feedBank(\"8.4.1|8.5.1|8.6.1|8.7.3\")\n    let sb_sfx_falling = feedBank(\"8.8.6\")\n    let sb_sfx_boom = feedBank(\"8.9.1|8.10.2|8.11.3|8.12.2\")\n    let sb_sfx_cannon = feedBank(\"8.13.2|8.14.1|8.15.1|8.16.2|8.17.2\")\n    let sb_sfx_fire = feedBank(\"8.18.2|8.19.2|8.20.5|8.21.2\")\n    let sb_sfx_ghost = feedBank(\"8.22.5|8.23.4|8.24.5|8.25.5\")\n    let sb_sfx_hit = feedBank(\"8.26.1|8.27.1|8.28.1|8.29.1|8.30.1\")\n    let sb_sfx_slash = feedBank(\"8.31.1|8.32.1|8.33.1|8.34.1|8.35.1|8.36.1|8.37.1|8.38.1|8.39.1|8.40.1|8.41.1|8.42.2\")\n    let sb_sfx_zap = feedBank(\"8.43.1|8.44.1|8.45.2|8.46.1|8.47.2|8.48.1\")\n    let sb_sfx_splash = feedBank(\"8.49.2|8.50.2|8.51.1|8.52.1|8.53.2|8.54.1|8.55.2|8.56.1|8.57.2\")\n    let sb_sfx_voice = feedBank(\"10.1.4|10.2.6|10.3.4|10.4.4|10.5.6|10.6.4|10.7.11|10.8.6|10.9.4|10.10.1\")\n    let sb_magician_left_easy = feedBank(\"11.1.3|11.2.6|11.3.7|11.4.6|11.5.6|11.6.7|11.7.6|11.8.6|11.9.6|11.10.7|11.11.6|11.12.6|11.13.7|11.14.6|11.15.6|11.16.6|11.17.6|11.18.6|11.19.6|11.20.6|11.21.6|11.22.7|11.23.6|11.24.6|11.25.6|11.26.6|11.27.7|11.28.7|11.29.7|11.30.6|11.31.6|11.32.8|11.33.7|11.34.6|11.35.7|11.36.5|11.37.6|11.38.8|11.39.6|11.40.6|11.41.6|11.42.6|11.43.6|11.44.7|11.45.6|11.46.7|11.47.7|11.48.8|11.49.6|11.50.7|11.51.6|11.52.6|11.53.7|11.54.8|11.55.7|11.56.6|11.57.7|11.58.6|11.59.6|11.60.6|11.61.6\")\n    let sb_magician_left_medium = feedBank(\"11.62.7|11.63.6|11.64.6|11.65.8|11.66.7|11.67.8|11.68.8|11.69.8|11.70.7|11.71.7|11.72.6|11.73.6|11.74.6|11.75.6|11.76.6|11.77.7|11.78.6|11.79.7|11.80.6|11.81.6|11.82.6|11.83.7|11.84.6|11.85.6|11.86.6|11.87.7|11.88.6|11.89.6|11.90.7|11.91.6|11.92.6|11.93.6|11.94.6|11.95.6|11.96.7|11.97.6|11.98.6|11.99.7|11.100.6|11.101.6|11.102.6|11.103.7|11.104.6|11.105.8|11.106.6|11.107.6|11.108.6|11.109.7|11.110.6|11.111.7|11.112.7|11.113.6|11.114.6|11.115.7|11.116.6|11.117.7|11.118.7|11.119.6|11.120.6|11.121.6|11.122.7|11.123.7|11.124.6|11.125.6|11.126.6|11.127.8|11.128.7|11.129.6|11.130.8|11.131.7|11.132.6|11.133.7|11.134.6|11.135.6|11.136.7|11.137.7\")\n    let sb_magician_left_hard = feedBank(\"11.219.7|11.220.6|11.221.6|11.222.6|11.223.6|11.224.6|11.225.7|11.226.7|11.227.6|11.228.6|11.229.6|11.230.8|11.231.7|11.232.7|11.233.6|11.234.6|11.235.6|11.236.8|11.237.7|11.238.7|11.239.6|11.240.6|11.241.8|11.242.7|11.243.7|11.244.6|11.245.6|11.246.7|11.247.7|11.248.7|11.249.7|11.250.6|11.251.6|11.252.6|11.253.6|11.254.6|11.255.6|11.256.6|11.257.6|11.258.7|11.259.7|11.260.7|11.261.6|11.262.6|11.263.6|11.264.6|11.265.6|11.266.6|11.267.7|11.268.6|11.269.6|11.270.6|11.271.6|11.272.6|11.273.6|11.274.6|11.275.7|11.276.6|11.277.6|11.278.7|11.279.7|11.280.7|11.281.6|11.282.6|11.283.7|11.284.9|11.285.7|11.286.6|11.287.6|11.288.6|11.289.7|11.290.7|11.291.6|11.292.6|11.293.7|11.294.7|11.295.6|11.296.7|11.297.6|11.298.6|11.299.6|11.300.6|11.301.6|11.302.6|11.303.7|11.304.6|11.305.6|11.306.7|11.307.6|\")\n    let sb_magician_right_easy = feedBank(\"11.159.6|11.160.6|11.161.7|11.162.6|11.163.7|11.164.7|11.165.6|11.166.6|11.167.7|11.168.7|11.169.6|11.170.8|11.171.7|11.172.7|11.173.6|11.174.6|11.175.6|11.176.6|11.177.7|11.178.6|11.179.6|11.180.6|11.181.6|11.182.7|11.183.6|11.184.6|11.185.6|11.186.6|11.187.8|11.188.7|11.189.6|11.190.6|11.191.6|11.192.6|11.193.6|11.194.6|11.195.5|11.196.6|11.197.6|11.198.6|11.199.7|11.200.6|11.201.6|11.202.6|11.203.6|11.204.6|11.205.6|11.206.6|11.207.6|11.208.6|11.209.6|11.210.7|11.211.7|11.212.7|11.213.6|11.214.7|11.215.7|11.216.6|11.217.7|11.218.6\")\n    let sb_magician_right_medium = feedBank(\"11.219.7|11.220.6|11.221.6|11.222.6|11.223.6|11.224.6|11.225.7|11.226.7|11.227.6|11.228.6|11.229.6|11.230.8|11.231.7|11.232.7|11.233.6|11.234.6|11.235.6|11.236.8|11.237.7|11.238.7|11.239.6|11.240.6|11.241.8|11.242.7|11.243.7|11.244.6|11.245.6|11.246.7|11.247.7|11.248.7|11.249.7|11.250.6|11.251.6|11.252.6|11.253.6|11.254.6|11.255.6|11.256.6|11.257.6|11.258.7|11.259.7|11.260.7|11.261.6|11.262.6|11.263.6|11.264.6|11.265.6|11.266.6|11.267.7|11.268.6|11.269.6|11.270.6|11.271.6|11.272.6|11.273.6|11.274.6|11.275.7|11.276.6|11.277.6|11.278.7|11.279.7|11.280.7|11.281.6|11.282.6|11.283.7|11.284.9|11.285.7|11.286.6|11.287.6\")\n    let sb_magician_right_hard = feedBank(\"11.288.6|11.289.7|11.290.7|11.291.6|11.292.6|11.293.7|11.294.7|11.295.6|11.296.7|11.297.6|11.298.6|11.299.6|11.300.6|11.301.6|11.302.6|11.303.7|11.304.6|11.305.6|11.306.7|11.307.6|11.308.7|11.309.6|11.310.6|11.311.6|11.312.7|11.313.7|11.314.6|11.315.7\")\n    let sb_mario_name = feedBank(\"12.1.2|12.2.1|12.4.2|12.5.3\")\n    let sb_mario_intro = feedBank(\"12.3.4|12.6.2|12.7.212.112.1|12.113.1|\")\n    let sb_mario_ready = feedBank(\"12.8.1|12.9.2|12.10.2|12.11.1|12.12.1|12.13.2|12.14.2|12.15.2|12.16.2|12.17.2|12.18.1\")\n    let sb_mario_yay = feedBank(\"12.19.1|12.20.1|12.21.1|12.22.1|12.23.1|12.24.1|12.25.1|12.26.1|12.27.1|12.28.1|12.29.1|12.30.1|12.31.1|12.32.1|12.33.1|12.34.1|12.35.1|12.36.1|12.37.1|12.38.1|12.39.1|12.40.1|12.41.1|12.42.1|12.43.1|12.44.1|12.45.1|12.46.1|12.47.1|12.48.1|12.49.1|12.50.1|12.51.2|12.52.2|12.53.2|12.54.2|12.55.2|12.56.2|12.57.2|12.58.2|12.59.2|12.60.2|12.61.2|12.62.2\")\n    let sb_mario_success = feedBank(\"12.63.1|12.64.2|12.65.2|12.66.2|12.67.2|12.68.3|12.69.3|12.70.3|12.71.3|12.72.3\")\n    let sb_mario_won = feedBank(\"12.73.2|12.74.2|12.75.3|12.76.3|12.77.3\")\n    let sb_mario_ouch = feedBank(\"12.78.1|12.79.1|12.80.1|12.81.1|12.82.1|12.83.1|12.84.1|12.85.1|12.86.1|12.87.1|12.88.1|12.89.1|12.90.1|12.91.1|12.92.1|12.93.1|12.94.1|12.95.1\")\n    let sb_mario_nay = feedBank(\"12.96.1|12.97.1|12.98.1|12.99.1|12.100.1|12.101.1|12.102.2|12.103.1|12.104.1|12.105.1|12.106.1|12.107.1|12.108.1|12.109.1|12.110.2|12.111.2\")\n    let sb_mario_failure = feedBank(\"12.114.2|12.115.2|12.116.2|12.117.1\")\n    let sb_mario_lost = feedBank(\"12.118.3|12.119.3|12.120.4|12.121.1\")\n    let sb_mario_hurry = feedBank(\"12.122.44\")\n    \n    let playlist_tutorial = makePlaylist(sb_music_tutorial)\n    let playlist_awaiting = makePlaylist(sb_music_awaiting)\n    let playlist_level = makePlaylist(sb_music_level)\n    let playlist_won = makePlaylist(sb_music_won)\n    let playlist_lost = makePlaylist(sb_music_lost)\n    let playlist_correct = makePlaylist(sb_sfx_correct)\n    let playlist_incorrect = makePlaylist(sb_sfx_incorrect)\n    let playlist_intro = makePlaylist(sb_music_intro)\n    let playlist_boom = makePlaylist(sb_sfx_boom)\n    let playlist_smash = makePlaylist(sb_sfx_smash)\n    let playlist_falling = makePlaylist(sb_sfx_falling)\n    let playlist_cannon = makePlaylist(sb_sfx_cannon)\n    let playlist_fire = makePlaylist(sb_sfx_fire)\n    let playlist_ghost = makePlaylist(sb_sfx_ghost)\n    let playlist_hit = makePlaylist(sb_sfx_hit)\n    let playlist_slash = makePlaylist(sb_sfx_slash)\n    let playlist_zap = makePlaylist(sb_sfx_zap)\n    let playlist_splash = makePlaylist(sb_sfx_splash)\n    let playlist_magician_left_easy = makePlaylist(sb_magician_left_easy)\n    let playlist_magician_left_medium = makePlaylist(sb_magician_left_medium)\n    let playlist_magician_left_hard = makePlaylist(sb_magician_left_hard)\n    let playlist_magician_right_easy = makePlaylist(sb_magician_right_easy)\n    let playlist_magician_right_medium = makePlaylist(sb_magician_right_medium)\n    let playlist_magician_right_hard = makePlaylist(sb_magician_right_hard)\n    let playlist_mario_name = makePlaylist(sb_mario_name)\n    let playlist_mario_intro = makePlaylist(sb_mario_intro)\n    let playlist_mario_ready = makePlaylist(sb_mario_ready)\n    let playlist_mario_yay = makePlaylist(sb_mario_yay)\n    let playlist_mario_success = makePlaylist(sb_mario_success)\n    let playlist_mario_won = makePlaylist(sb_mario_won)\n    let playlist_mario_ouch = makePlaylist(sb_mario_ouch)\n    let playlist_mario_nay = makePlaylist(sb_mario_nay)\n    let playlist_mario_failure = makePlaylist(sb_mario_failure)\n    let playlist_mario_lost = makePlaylist(sb_mario_lost)\n    let playlist_mario_hurry = makePlaylist(sb_mario_hurry)\n    let playtimeMusic = 0\n    let playtimePlayer = 0\n    let playtimeSfxVoice = 0\n\n    function takeRotate(PlaylistIn: number[]) {\n        let returnTrack = PlaylistIn.shift()\n        PlaylistIn.push(returnTrack)\n        return returnTrack\n    }\n    function feedBank(BankString: string) {\n        let returnBank: number[][] = []\n        let BankSplit = BankString.split(\"|\")\n        for (let soundString of BankSplit) {\n            returnBank.push([parseFloat(soundString.split(\".\")[0]), parseFloat(soundString.split(\".\")[1]), parseFloat(soundString.split(\".\")[2])])\n        }\n        return returnBank\n    }\n    function makePlaylist(SoundBank: any[]) {\n        let returnList: number[] = []\n        let orderedList: number[] = []\n        for (let soundNo = 0; soundNo <= SoundBank.length - 1; soundNo++) {\n            orderedList.push(soundNo)\n        }\n        while (orderedList.length > 0) {\n            let randTrack = randint(0, orderedList.length - 1)\n            returnList.push(orderedList.removeAt(randTrack))\n        }\n        return returnList\n    }\n    function bankPlay(mp3bit:mp3type, SoundBank: number[][], trackIndex: number) {\n        let theSong = SoundBank[trackIndex]\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimeMusic = theSong[2]\n        } else if (mp3bit == mp3type.player) {\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimePlayer = theSong[2]\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimeSfxVoice = theSong[2]\n        }\n        dataArr[3] = 15\n        dataArr[5] = theSong[0]\n        dataArr[6] = theSong[1]\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=NL_MP3_PlaytimeMusic\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of music\"\n    export function mp3durationMusic(): number{\n        return playtimeMusic\n    }\n\n    //% blockId=NL_MP3_PlaytimePlayer\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of player sound\"\n    export function mp3durationPlayer(): number {\n        return playtimePlayer\n    }\n\n    //% blockId=NL_MP3_PlaytimeSFX\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of sfx/voice\"\n    export function mp3durationSfxVoice(): number {\n        return playtimeSfxVoice\n    }\n\n\n\n    //% blockId=NL_MP3_MusicPlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %genre music\"\n    export function mp3musicPlay(genre: musicGenre): void {\n        if (genre == musicGenre.tutorial){\n            bankPlay(mp3type.music, sb_music_tutorial, takeRotate(playlist_tutorial))\n        } else if (genre == musicGenre.awaiting) {\n            bankPlay(mp3type.music, sb_music_awaiting, takeRotate(playlist_awaiting))\n        } else if (genre == musicGenre.intro){\n            bankPlay(mp3type.music, sb_music_intro, takeRotate(playlist_intro))\n        } else if (genre == musicGenre.level) {\n            bankPlay(mp3type.music, sb_music_level, takeRotate(playlist_level))\n        } else if (genre == musicGenre.won) {\n            bankPlay(mp3type.music, sb_music_won, takeRotate(playlist_won))\n        } else if (genre == musicGenre.lost) {\n            bankPlay(mp3type.music, sb_music_lost, takeRotate(playlist_lost))\n        }\n    }\n\n    //% blockId=NL_MP3_PlayerSay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %saying as player\"\n    export function mp3sayPlay(saying: playerSaying): void {\n        if(saying == playerSaying.ready){\n            bankPlay(mp3type.player, sb_mario_ready, takeRotate(playlist_mario_ready))\n        }else if (saying == playerSaying.yay){\n            bankPlay(mp3type.player, sb_mario_yay, takeRotate(playlist_mario_yay))\n        } else if (saying == playerSaying.intro) {\n            bankPlay(mp3type.player, sb_mario_intro, takeRotate(playlist_mario_intro))\n        } else if (saying == playerSaying.nay) {\n            bankPlay(mp3type.player, sb_mario_nay, takeRotate(playlist_mario_nay))\n        } else if (saying == playerSaying.ouch) {\n            bankPlay(mp3type.player, sb_mario_ouch, takeRotate(playlist_mario_ouch))\n        } else if (saying == playerSaying.success) {\n            bankPlay(mp3type.player, sb_mario_success, takeRotate(playlist_mario_success))\n        } else if (saying == playerSaying.failure) {\n            bankPlay(mp3type.player, sb_mario_failure, takeRotate(playlist_mario_failure))\n        } else if (saying == playerSaying.won) {\n            bankPlay(mp3type.player, sb_mario_won, takeRotate(playlist_mario_won))\n        } else if (saying == playerSaying.lost) {\n            bankPlay(mp3type.player, sb_mario_lost, takeRotate(playlist_mario_lost))\n        } else if (saying == playerSaying.hurry) {\n            bankPlay(mp3type.player, sb_mario_hurry, takeRotate(playlist_mario_hurry))\n        }\n    }\n\n    //% blockId=NL_MP3_VoicePlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %voice as voice\"\n    export function mp3voicePlay(voice: voiceSaying): void {\n        if (voice == voiceSaying.name) {\n\n        } else if (voice == voiceSaying.begin) {\n\n        } else if (voice == voiceSaying.retry) {\n\n        } else if (voice == voiceSaying.next) {\n\n        } else if (voice == voiceSaying.complete) {\n\n        } else if (voice == voiceSaying.gameover) {\n\n        } else if (voice == voiceSaying.welcome) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 0)\n        } else if (voice == voiceSaying.intro) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 1)\n        } else if (voice == voiceSaying.howto1) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 2)\n        } else if (voice == voiceSaying.howto2) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 3)\n        } else if (voice == voiceSaying.howto3) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 4)\n        } else if (voice == voiceSaying.howto4) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 5)\n        } else if (voice == voiceSaying.howto5) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 6)\n        } else if (voice == voiceSaying.howto6) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 7)\n        } else if (voice == voiceSaying.howto7) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 8)\n        } else if (voice == voiceSaying.howto8) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 9)\n        } else if (voice == voiceSaying.howto9) {\n\n        }\n    }\n\n    //% blockId=NL_MP3_MagicianSay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Magician says on the %side difficulty %difficulty\"\n    export function mp3magician(side: magicianSaysSide, difficulty: magicianDifficulty): void {\n        if (side == magicianSaysSide.left) {\n            if (difficulty == magicianDifficulty.easy) {\n\n            } else if (difficulty = magicianDifficulty.medium) {\n\n            } else if (difficulty = magicianDifficulty.hard) {\n\n            }\n        } else if (side = magicianSaysSide.right) {\n            if (difficulty == magicianDifficulty.easy) {\n\n            } else if (difficulty = magicianDifficulty.medium) {\n\n            } else if (difficulty = magicianDifficulty.hard) {\n\n            }\n        } \n    }\n\n    //% blockId=NL_MP3_SfxPlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %sfx sound effect\"\n    export function mp3sfxPlay(sfx: sfxType): void {\n        if(sfx == sfxType.correct){\n            bankPlay(mp3type.sfxvoice, sb_sfx_correct, takeRotate(playlist_correct))\n        }else if (sfx == sfxType.incorrect){\n            bankPlay(mp3type.sfxvoice, sb_sfx_incorrect, takeRotate(playlist_incorrect))\n        }else if (sfx == sfxType.ghost){\n            bankPlay(mp3type.sfxvoice, sb_sfx_ghost, takeRotate(playlist_ghost))\n        }else if (sfx == sfxType.fire){\n            bankPlay(mp3type.sfxvoice, sb_sfx_fire, takeRotate(playlist_fire))\n        }else if (sfx == sfxType.explosion){\n            bankPlay(mp3type.sfxvoice, sb_sfx_boom, takeRotate(playlist_boom))\n        }else if (sfx == sfxType.splash){\n            bankPlay(mp3type.sfxvoice, sb_sfx_splash, takeRotate(playlist_splash))\n        } else if (sfx == sfxType.spark) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_zap, takeRotate(playlist_zap))\n        } else if (sfx == sfxType.slash) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_slash, takeRotate(playlist_slash))\n        }\n    }\n/// END SOUND BANK ///\n\n/// BEGIN MOTOR & RELAY ///\n    const kong_address = 0x10\n    export enum MotorList { M1=1, M2=2 }\n    export enum motors{ redrack=16, shark=4, ghost=5, cannon=8, oarrack=7, shell=6, door=3, dragon=9, wheel=1, fan=2 }\n    export enum motorState { min, max, mid, off }\n    export enum fogLevels { none = 0, light = 1, medium = 2, heavy = 3 }\n    export enum sockState { dancing = 1, still = 0 }\n    let motor_wheel_max = 12; let motor_wheel_min = 0\n    let servo_redrack_max = 150; let servo_redrack_min = 100\n    let servo_cannon_min = 135; let servo_cannon_max = 65\n    let servo_shark_min = 20; let servo_shark_max = 85\n    let servo_oarrack_min = 60; let servo_oarrack_max = 110\n    let servo_ghost_min = 110; let servo_ghost_max = 40\n    let servo_shell_min = 170; let servo_shell_max = 100\n    let servo_door_min = 50; let servo_door_max = 140; let servo_door_mid = 100\n    let motor_fan_min = 0; let motor_fan_mid = 50; let motor_fan_max = 100\n    let servo_dragon_min = 90; let servo_dragon_max = 79\n\n    export function servoSet(servo: motors, angle: number): void {\n        let buf = pins.createBuffer(4);\n        buf[0] = servo;\n        buf[1] = angle;\n        buf[2] = 0;\n        buf[3] = 0;\n        pins.i2cWriteBuffer(kong_address, buf);\n    }\n\n    export function motorSpeed(motor: MotorList, speed: number): void {\n        let buf = pins.createBuffer(4);\n        buf[0] = motor\n        buf[1] = 1;\n        if (speed < 0) {\n            buf[1] = 2;\n            speed = speed * -1\n        }\n        buf[2] = speed;\n        buf[3] = 0;\n        pins.i2cWriteBuffer(kong_address, buf);\n    }\n\n    //% blockId=NL_MOTOR_Set \n    //% block=\"Set %motor to %state\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function motorSet(motor:motors, state:motorState):void{\n        if (motor == motors.redrack){\n            if (state == motorState.min){ servoSet(motor, servo_redrack_min) } \n            else if (state == motorState.max){ servoSet(motor, servo_redrack_max) }\n        } if (motor == motors.shark) {\n            if (state == motorState.min) { servoSet(motor, servo_shark_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_shark_max) }\n        } if (motor == motors.ghost) {\n            if (state == motorState.min) { servoSet(motor, servo_ghost_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_ghost_max) }\n        } if (motor == motors.cannon) {\n            if (state == motorState.min) { servoSet(motor, servo_cannon_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_cannon_max) }\n        } if (motor == motors.oarrack) {\n            if (state == motorState.min) { servoSet(motor, servo_oarrack_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_oarrack_max) }\n        } if (motor == motors.shell) {\n            if (state == motorState.min) { servoSet(motor, servo_shell_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_shell_max) }\n        } if (motor == motors.door) {\n            if (state == motorState.min) { servoSet(motor, servo_door_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_door_max) }\n            else if (state == motorState.mid) { servoSet(motor, servo_door_mid) }\n        } if (motor == motors.dragon) {\n            if (state == motorState.min) { servoSet(motor, servo_dragon_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_dragon_max) }\n        } if (motor == motors.wheel) {\n            if (state == motorState.min) { motorSpeed(MotorList.M1, motor_wheel_min) }\n            else if (state == motorState.max) { motorSpeed(MotorList.M1, motor_wheel_max) }\n            else if (state == motorState.off) { motorSpeed(MotorList.M1, 0) }\n        } if (motor == motors.fan) {\n            if (state == motorState.min) { motorSpeed(MotorList.M2, motor_fan_min) }\n            else if (state == motorState.mid) { motorSpeed(MotorList.M2, motor_fan_mid) }\n            else if (state == motorState.max) { motorSpeed(MotorList.M2, motor_fan_max) }\n            else if (state == motorState.off) { motorSpeed(MotorList.M2, 0) }\n        }\n    }\n\n    //% blockId=NL_RELAY_FogSet \n    //% block=\"set fog level to %level\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function setFog(fog:fogLevels):void{\n        if (fog == fogLevels.none){\n            pins.digitalWritePin(DigitalPin.P2, 1)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 1)\n        } else if (fog == fogLevels.light){\n            pins.digitalWritePin(DigitalPin.P2, 1)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        } else if (fog == fogLevels.medium) {\n            pins.digitalWritePin(DigitalPin.P2, 0)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        } else if (fog == fogLevels.heavy) {\n            pins.digitalWritePin(DigitalPin.P2, 0)\n            pins.digitalWritePin(DigitalPin.P8, 0)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        }\n    }\n\n    //% blockId=NL_RELAY_SockSet\n    //% block=\"set dancing sock to %sockState\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function setSock(state: sockState): void {\n        if(state==sockState.dancing){ pins.digitalWritePin(DigitalPin.P12, 0) }\n        else{ pins.digitalWritePin(DigitalPin.P12, 1) }\n    }\n\n/// END MOTOR & RELAY ///\n\n/// BEGIN OLED\n\n    let d1 = [0, 0, 0, 20, 36, 35, 54, 0, 28, 65, 8, 8, 160, 8, 96, 32, 62, 0, 98, 34, 24, 39, 60, 1, 54, 6, 0, 0, 8, 20, 65, 2, 50, 126, 127, 62, 127, 127, 127, 62, 127, 65, 32, 127, 127, 127, 127, 62, 127, 62, 127, 38, 1, 63, 31, 63, 99, 3, 97, 127, 2, 65, 4, 128, 1, 32, 127, 56, 56, 56, 8, 24, 127, 0, 128, 127, 65, 124, 124, 56, 252, 24, 0, 72, 4, 60, 28, 60, 68, 28, 68, 8, 0, 65, 2]\n    let d2 = [0, 95, 7, 127, 42, 19, 73, 5, 34, 34, 42, 8, 96, 8, 96, 16, 81, 66, 81, 65, 20, 69, 74, 113, 73, 73, 54, 172, 20, 20, 34, 1, 73, 9, 73, 65, 65, 73, 9, 65, 8, 127, 64, 8, 64, 2, 4, 65, 9, 65, 9, 73, 1, 64, 32, 64, 20, 4, 81, 65, 4, 65, 2, 128, 2, 84, 72, 68, 68, 84, 126, 164, 8, 125, 132, 16, 127, 4, 8, 68, 36, 36, 124, 84, 127, 64, 32, 64, 40, 160, 100, 54, 127, 54, 1]\n    let d3 = [0, 0, 0, 20, 127, 8, 85, 3, 65, 28, 28, 62, 0, 8, 0, 8, 73, 127, 73, 73, 18, 69, 73, 9, 73, 73, 54, 108, 34, 20, 20, 81, 121, 9, 73, 65, 65, 73, 9, 65, 8, 65, 65, 20, 64, 12, 8, 65, 9, 81, 25, 73, 127, 64, 64, 56, 8, 120, 73, 65, 8, 127, 1, 128, 4, 84, 68, 68, 68, 84, 9, 164, 4, 0, 125, 40, 64, 24, 4, 68, 36, 36, 8, 84, 68, 64, 64, 48, 16, 160, 84, 65, 0, 8, 1]\n    let d4 = [0, 0, 7, 127, 42, 100, 34, 0, 0, 0, 42, 8, 0, 8, 0, 4, 69, 64, 73, 73, 127, 69, 73, 5, 73, 41, 0, 0, 65, 20, 8, 9, 65, 9, 73, 65, 34, 73, 9, 81, 8, 0, 63, 34, 64, 2, 16, 65, 9, 33, 41, 73, 1, 64, 32, 64, 20, 4, 69, 0, 16, 0, 2, 128, 0, 84, 68, 40, 72, 84, 2, 164, 4, 0, 0, 68, 0, 4, 124, 56, 24, 252, 4, 36, 0, 124, 32, 64, 40, 124, 76, 0, 0, 0, 2]\n    let d5 = [0, 0, 0, 20, 18, 98, 80, 0, 0, 0, 8, 8, 0, 8, 0, 2, 62, 0, 70, 54, 16, 57, 48, 3, 54, 30, 0, 0, 0, 20, 0, 6, 62, 126, 54, 34, 28, 65, 1, 114, 127, 0, 1, 65, 64, 127, 127, 62, 6, 94, 70, 50, 1, 63, 31, 63, 99, 3, 67, 0, 32, 0, 4, 128, 0, 120, 56, 0, 127, 24, 0, 124, 120, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 28, 60, 68, 0, 68, 0, 0, 0, 1]\n\n    let display = [\" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\")]\n    let desired = [\" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\")]\n\n    //% blockId=NL_OLED_Update3\n    //% block=\"oled update from buffer\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function changeThree(): void{\n        let updated: string[][] = []\n        let count = 0\n        for (let row=0; row<8; row++){\n            for(let col=0; col<16; col++){\n                let refChar = desired[row][col]\n                if (refChar != display[row][col]){\n                    writeChar(refChar,row,col)\n                    display[row][col] = refChar\n                    count++\n                    if (count >= 3){\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    //% blockId=NL_OLED_PrintLine\n    //% block=\"print %text to oled buffer line %line\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function printLine(text:any, line:number): void{\n        let thisText = text + \"\"\n        for (let i = 0; i < 16; i++){\n            if (i < thisText.length){\n                desired[line][i]=thisText.charAt(i)\n            } else{\n                desired[line][i]=\" \"\n            }\n        }\n    }\n\n    function oledcmd(c: number) {\n        pins.i2cWriteNumber(0x3c, c, NumberFormat.UInt16BE);\n    }\n\n    function setText(row: number, column: number) {\n        oledcmd(0xB0 + row);            //set page address\n        oledcmd(0x00 + (8 * column & 0x0F));  //set column lower address\n        oledcmd(0x10 + ((8 * column >> 4) & 0x0F));   //set column higher address\n    }\n\n    //% blockId=NL_OLED_Init \n    //% block=\"initiate the oled screen\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function oledinit(): void {\n        oledcmd(0xAE);  // Set display OFF\n        oledcmd(0xD5);  // Set Display Clock Divide Ratio / OSC Frequency 0xD4\n        oledcmd(0x80);  // Display Clock Divide Ratio / OSC Frequency \n        oledcmd(0xA8);  // Set Multiplex Ratio\n        oledcmd(0x3F);  // Multiplex Ratio for 128x64 (64-1)\n        oledcmd(0xD3);  // Set Display Offset\n        oledcmd(0x00);  // Display Offset\n        oledcmd(0x40);  // Set Display Start Line\n        oledcmd(0x8D);  // Set Charge Pump\n        oledcmd(0x14);  // Charge Pump (0x10 External, 0x14 Internal DC/DC)\n        oledcmd(0xA1);  // Set Segment Re-Map\n        oledcmd(0xC8);  // Set Com Output Scan Direction\n        oledcmd(0xDA);  // Set COM Hardware Configuration\n        oledcmd(0x12);  // COM Hardware Configuration\n        oledcmd(0x81);  // Set Contrast\n        oledcmd(0xCF);  // Contrast\n        oledcmd(0xD9);  // Set Pre-Charge Period\n        oledcmd(0xF1);  // Set Pre-Charge Period (0x22 External, 0xF1 Internal)\n        oledcmd(0xDB);  // Set VCOMH Deselect Level\n        oledcmd(0x40);  // VCOMH Deselect Level\n        oledcmd(0xA4);  // Set all pixels OFF\n        oledcmd(0xA6);  // Set display not inverted\n        oledcmd(0xAF);  // Set display On\n        for (let j = 0; j < 8; j++) {\n            setText(j, 0);\n            {\n                for (let i = 0; i < 16; i++)  //clear all columns\n                {\n                    writeChar(\" \",j,i)\n                }\n            }\n        }\n    }\n\n    function writeChar(char: string, row: number, column: number) {\n        setText(row, column)\n        let i = char.charCodeAt(0) - 32\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d1[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d2[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d3[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d4[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d5[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n    }\n\n/// END OLED\n\n\n/// BEGIN DIGITS\n\n    let _SEGMENTS = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71];\n\n    //% blockId=nl_digits_create block=\"4-Digit cPin %cPin dPin %dPin\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function tm1637Create(cPin: DigitalPin, dPin: DigitalPin): TM1637LEDs {\n        let display = new TM1637LEDs();\n        display.clk = cPin\n        display.dio = dPin\n        display.brightness = 7;\n        display.init();\n        return display;\n    }\n    export class TM1637LEDs {\n        buf: Buffer;\n        clk: DigitalPin;\n        dio: DigitalPin;\n        _ON: number;\n        brightness: number;\n        init(): void {\n            pins.digitalWritePin(this.clk, 0);\n            pins.digitalWritePin(this.dio, 0);\n            this._ON = 8;\n            this.buf = pins.createBuffer(4);\n            this.clear();\n        }\n        _start() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _stop() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.dio, 1);\n        }\n        _write_data_cmd() {\n            this._start();\n            this._write_byte(0x40);\n            this._stop();\n        }\n        _write_dsp_ctrl() {\n            this._start();\n            this._write_byte(0x80 | this._ON | this.brightness);\n            this._stop();\n        }\n        _write_byte(b: number) {\n            for (let i = 0; i < 8; i++) {\n                pins.digitalWritePin(this.dio, (b >> i) & 1);\n                pins.digitalWritePin(this.clk, 1);\n                pins.digitalWritePin(this.clk, 0);\n            }\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _intensity(val: number = 7) {\n            this._ON = 8;\n            this.brightness = val - 1;\n            this._write_data_cmd();\n            this._write_dsp_ctrl();\n        }\n        _dat(bit: number, dat: number) {\n            this._write_data_cmd();\n            this._start();\n            this._write_byte(0xC0 | (bit % 4))\n            this._write_byte(dat);\n            this._stop();\n            this._write_dsp_ctrl();\n        }\n        \n        //% blockId=nl_digits_digit block=\"%display|show single number|%num|at digit|%bit\"\n        //% subcategory=\"Display\" group=\"Display\"\n        //% bit.defl=1 bit.min=0 bit.max=9\n        showbit(num: number = 5, bit: number = 0) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            this.buf[bit % 4] = _SEGMENTS[num % 16]\n            this._dat(bit, _SEGMENTS[num % 16])\n        }\n\n        //% blockId=nl_digits_number block=\"%display|show number|%num\"\n        //% subcategory=\"Display\" group=\"Display\"\n        showNumber(num: number) {\n            if (num < 0) {\n                num = -num\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n                this._dat(0, 0x40) // '-'\n                // this._dat(0, 0) // blank\n            }\n            else {\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n            }\n        }\n\n        //% blockId=\"nl_digits_clear\" block=\"clear display %display\"\n        //% subcategory=\"Display\" group=\"Display\"\n        clear() {\n            for (let i = 0; i < 4; i++) {\n                this._dat(i, 0)\n                this.buf[i] = 0\n            }\n        }\n    }\n\n/// END DIGITS\n\n}\n\n\n","pxt.json":"{\n    \"name\": \"NotLegosMaster\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"displaySendBuffer.asm\",\n        \"planetxbasic.ts\",\n        \"notlegos.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"7.0.42\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n","test.ts":""}},{"timestamp":1728764098936,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</variable><variable id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</variable><variable id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</variable><variable id=\"SRvF%Vl7CRHE66Kr9~Q[\">lastLaserR</variable><variable id=\"%FT#@+cF!r3!,1uelm~,\">lastLaserC</variable><variable id=\"hs_o5`X:I}y9{R2!_miN\">lastLaserL</variable><variable id=\"}%7r;bz7Byg#SEH9P{dG\">lastSonarRead</variable><variable id=\"u#;Y3,}t+?Ue.~vd$_;0\">lastHue</variable><variable id=\"5rh0sr-gnWZKflz~gbRk\">lastGesture</variable><variable id=\"at2[c#F7*{?za?uyOm!i\">lastHunt</variable><variable id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</variable><variable id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</variable><variable id=\"vlNJo2)`QokXI:|N|`c|\">theName</variable><variable id=\"uj8c~)bC/;JXc[2;l@N!\">iTook</variable><variable id=\"m`bxu=!~_Nj|:o?}Kk!^\">iBegan</variable><variable id=\"E3,(6Z)tM(C:#!xxP.d,\">isReady</variable><variable id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</variable><variable id=\"y@Q6YNBYQMe6tF/068bo\">lastVolumeRead</variable><variable id=\"W@//5%rK$%/F|oN!f$h$\">digits</variable><variable id=\"-O:q;^~u%Gff-w{^C`Ou\">lastWater</variable></variables><block type=\"function_definition\" x=\"4751\" y=\"-1215\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><field name=\"function_name\">buttonPress</field><value name=\"ba9wfs6wbjdlsow065y8\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">button</field></block></value><statement name=\"STACK\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">button: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">button</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></statement></block><block type=\"function_definition\" x=\"5448\" y=\"-1213\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><field name=\"function_name\">radioSay</field><value name=\"fxkpgrx3u5x98l61f5dik\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">text5</field></block></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">val</field></block></value><statement name=\"STACK\"><block type=\"radio_datagram_send_value\"><value name=\"name\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value></block></value><value name=\"value\"><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">said: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">7</field></shadow></value></block></next></block></statement></block><block type=\"every_interval\" x=\"100\" y=\"-376\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">2000</field></shadow></value><statement name=\"HANDLER\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"uj8c~)bC/;JXc[2;l@N!\">iTook</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value></block></statement></block><block type=\"every_interval\" x=\"773\" y=\"-372\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"controls_if\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"1111\" y=\"-344\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_MP3_UpdateVolume\" disabled-reasons=\"MANUALLY_DISABLED\"></block></statement><statement name=\"ELSE\"><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_operation\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">OR</field><value name=\"A\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_negate\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"BOOL\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</field></block></value></block></value><value name=\"B\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value></block></value></block></value><statement name=\"DO0\"><block type=\"NL_RELAY_FogSet\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"level\">notLegos.fogLevels.none</field></block></statement><statement name=\"ELSE\"><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation elseif=\"2\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_RELAY_FogSet\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"level\">notLegos.fogLevels.light</field></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">2</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"NL_RELAY_FogSet\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"level\">notLegos.fogLevels.medium</field></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">3</field></shadow></value></block></value><statement name=\"DO2\"><block type=\"NL_RELAY_FogSet\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"level\">notLegos.fogLevels.heavy</field></block></statement></block></statement></block></statement></block><block type=\"input_logo_event\" x=\"2390\" y=\"-353\"><field name=\"action\">TouchButtonEvent.Touched</field><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_MP3_PlayerSay\"><field name=\"saying\">notLegos.playerSaying.ready</field><next><block type=\"NL_MP3_SfxPlay\"><field name=\"sfx\">notLegos.sfxType.fire</field><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.intro</field></block></next></block></next></block></statement></block></statement></block><block type=\"NL_OLED_PrintLine\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"572\" y=\"-190\"><value name=\"text\"><block type=\"text_join\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">K0: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogPin.P0</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"NL_OLED_PrintLine\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"text\"><block type=\"text_join\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">K1: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_OLED_PrintLine\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"text\"><block type=\"text_join\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">K2: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P2</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">4</field></shadow></value></block></next></block></next></block><block type=\"every_interval\" x=\"1817\" y=\"-101\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">40</field></shadow></value><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"m`bxu=!~_Nj|:o?}Kk!^\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time\"></block></value><next><block type=\"NL_PIXEL_CastleSayTick\"><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"E3,(6Z)tM(C:#!xxP.d,\">isReady</field></block></value><next><block type=\"function_call\"><mutation name=\"ready_oled\" functionid=\",fv3PGT/J~k#ZH}9er,/\"></mutation><next><block type=\"NL_OLED_Update3\"><next><block type=\"variables_set\"><field name=\"VAR\" id=\"uj8c~)bC/;JXc[2;l@N!\">iTook</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"m`bxu=!~_Nj|:o?}Kk!^\">iBegan</field></block></value></block></value></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"NL_OLED_Init\"><next><block type=\"NL_PIXEL_CastleSay\"><field name=\"sockPin\">DigitalPin.P3</field><field name=\"wheelPin\">DigitalPin.P0</field><field name=\"scorePin\">DigitalPin.P16</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"m`bxu=!~_Nj|:o?}Kk!^\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time_micros\"></block></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field></block></next></block></next></block></next></block></statement></block><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"646\" y=\"269\"><field name=\"VAR\" id=\"y@Q6YNBYQMe6tF/068bo\">lastVolumeRead</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"}%7r;bz7Byg#SEH9P{dG\">lastSonarRead</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"5rh0sr-gnWZKflz~gbRk\">lastGesture</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"u#;Y3,}t+?Ue.~vd$_;0\">lastHue</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"SRvF%Vl7CRHE66Kr9~Q[\">lastLaserR</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"hs_o5`X:I}y9{R2!_miN\">lastLaserL</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"%FT#@+cF!r3!,1uelm~,\">lastLaserC</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"at2[c#F7*{?za?uyOm!i\">lastHunt</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">FALSE</field></block></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">KC$</field></block></value><next><block type=\"pin_set_audio_pin_enabled\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"enabled\"><shadow type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">FALSE</field></shadow></value><next><block type=\"device_led_enable\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"on\"><shadow type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">FALSE</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"NL_SENSOR_SonarFirstRead\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin1\">DigitalPin.P8</field><field name=\"pin2\">DigitalPin.P9</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value></block></value><next><block type=\"radio_set_group\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"ID\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">171</field></shadow></value><next><block type=\"NL_OLED_Init\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><next><block type=\"controls_if\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_SENSOR_TrimpotSet\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"aPin\">AnalogPin.P10</field><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"W@//5%rK$%/F|oN!f$h$\">digits</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"nl_digits_create\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"cPin\">DigitalPin.P7</field><field name=\"dPin\">DigitalPin.P6</field></block></value><next><block type=\"nl_digits_number\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"display\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"W@//5%rK$%/F|oN!f$h$\">digits</field></block></value><value name=\"num\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">-1000</field></shadow></value><next><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P13</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"NL_MP3_InitiateAs\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"type\">notLegos.mp3type.music</field><field name=\"sPin\">SerialPin.P14</field><next><block type=\"NL_MP3_InitiateAs\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"type\">notLegos.mp3type.sfxvoice</field><field name=\"sPin\">SerialPin.P15</field><next><block type=\"NL_MP3_InitiateAs\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"type\">notLegos.mp3type.player</field><field name=\"sPin\">SerialPin.P16</field><next><block type=\"NL_PIXEL_CastleSay\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"sockPin\">DigitalPin.P11</field><field name=\"wheelPin\">DigitalPin.P5</field><field name=\"scorePin\">DigitalPin.P12</field><next><block type=\"device_pause\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">20</field></shadow></value><next><block type=\"NL_MP3_SetVolume\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"mp3bit\">notLegos.mp3type.sfxvoice</field><value name=\"vol\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"NL_MP3_SetVolume\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"mp3bit\">notLegos.mp3type.player</field><value name=\"vol\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"NL_MP3_SetVolume\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P0</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">0</field></shadow></value><next><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P2</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P8</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P12</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P13</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_PIXEL_CastleDo\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"spotPin\">DigitalPin.P14</field><field name=\"brickPin\">DigitalPin.P15</field><field name=\"kongPin\">DigitalPin.P16</field><next><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">check</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"m`bxu=!~_Nj|:o?}Kk!^\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time_micros\" disabled-reasons=\"MANUALLY_DISABLED\"></block></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"E3,(6Z)tM(C:#!xxP.d,\">isReady</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">TRUE</field></block></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">init</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"2536\" y=\"310\"><field name=\"VAR\" id=\"-O:q;^~u%Gff-w{^C`Ou\">lastWater</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_js_round\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P0</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value></block></value></block></value></block><block type=\"controls_if\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"2536\" y=\"566\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_CastleSayTick\" disabled-reasons=\"MANUALLY_DISABLED\"><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"at2[c#F7*{?za?uyOm!i\">lastHunt</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P4</field></shadow></value></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"5rh0sr-gnWZKflz~gbRk\">lastGesture</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"Connected_getGesture\" disabled-reasons=\"MANUALLY_DISABLED\"></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"u#;Y3,}t+?Ue.~vd$_;0\">lastHue</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"apds9960_readcolor\" disabled-reasons=\"MANUALLY_DISABLED\"></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"}%7r;bz7Byg#SEH9P{dG\">lastSonarRead</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"NL_SENSOR_SonarNextRead\" disabled-reasons=\"MANUALLY_DISABLED\"></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"SRvF%Vl7CRHE66Kr9~Q[\">lastLaserR</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_js_round\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">80</field></shadow></value></block></value></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"%FT#@+cF!r3!,1uelm~,\">lastLaserC</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_js_round\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P2</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">80</field></shadow></value></block></value></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"hs_o5`X:I}y9{R2!_miN\">lastLaserL</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_js_round\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P3</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">80</field></shadow></value></block></value></block></value><next><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation elseif=\"4\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">wait_start</field></block></value></block></value><statement name=\"DO0\"><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"at2[c#F7*{?za?uyOm!i\">lastHunt</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">idle</field></block></value><next><block type=\"NL_MP3_MusicPlay\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"genre\">notLegos.musicGenre.intro</field><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">boot</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow><block type=\"NL_MP3_PlaytimeMusic\" disabled-reasons=\"MANUALLY_DISABLED\"></block></value></block></next></block></next></block></next></block></statement></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">wait_play</field></block></value></block></value><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">wait_laser</field></block></value></block></value><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">init</field></block></value></block></value><statement name=\"DO3\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">ready</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value></block></statement><value name=\"IF4\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">wait_reg</field></block></value></block></value><statement name=\"DO4\"><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">NEQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"5rh0sr-gnWZKflz~gbRk\">lastGesture</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">tutorial</field></block></value><next><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"runTutorial\" functionid=\"Y{7P,}tzRL|sul3I;].}\"></mutation></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">FALSE</field></shadow></value></block></statement></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"NL_PIXEL_CastleDoTick\" disabled-reasons=\"MANUALLY_DISABLED\"><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">TRUE</field></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><next><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation elseif=\"4\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">10</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><value name=\"ba9wfs6wbjdlsow065y8\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">A</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">60</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><value name=\"ba9wfs6wbjdlsow065y8\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">B</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.fire</field></block></next></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">110</field></shadow></value></block></value><statement name=\"DO2\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><value name=\"ba9wfs6wbjdlsow065y8\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">C</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.mine</field></block></next></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">200</field></shadow></value></block></value><statement name=\"DO3\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><value name=\"ba9wfs6wbjdlsow065y8\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">D</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field></block></next></block></statement><value name=\"IF4\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">700</field></shadow></value></block></value><statement name=\"DO4\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><value name=\"ba9wfs6wbjdlsow065y8\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">E</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field></block></next></block></statement></block></next></block></next></block></next></block></statement></block><block type=\"every_interval\" x=\"1006\" y=\"713\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"radio_on_value_drag\" x=\"3549\" y=\"584\"><value name=\"HANDLER_DRAG_PARAM_name\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">name</field></block></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">value</field></block></value><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_substr\"><value name=\"this\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value><value name=\"start\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"length\"><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field></block></value></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_substr\"><value name=\"this\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value><value name=\"start\"><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field></block></value></block></value><value name=\"length\"><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text_length\"><value name=\"VALUE\"><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field></block></value></block></value></block></value></block></value><next><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"controls_if\"><mutation elseif=\"3\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wstar</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_start</field></block></value></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value><statement name=\"DO1\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.welcome</field></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.WheelAll</field><field name=\"effect\">notLegos.vfxEffect.fire</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.intro</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_reg</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">check</field></block></value></block></value><statement name=\"DO2\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">ready</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value></block></statement><statement name=\"ELSE\"><block type=\"controls_if\"><mutation elseif=\"3\" else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">ready</field></block></value></block></value><statement name=\"DO0\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">wstar</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.KongFront</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">boot</field></block></value></block></value><statement name=\"DO1\"><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1000</field></shadow></value></block></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">200</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.idle</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotH</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotI</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">0</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.BrickDragon</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotE</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">tutor</field></block></value></block></value><statement name=\"DO2\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotA</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotB</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value></block></statement><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">heard: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">6</field></shadow></value></block></next></block></next></block></statement></block></statement></block><block type=\"nl_digits_number\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"1050\" y=\"881\"><value name=\"display\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"W@//5%rK$%/F|oN!f$h$\">digits</field></block></value><value name=\"num\"><shadow type=\"math_number\"><field name=\"NUM\">-1000</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"-O:q;^~u%Gff-w{^C`Ou\">lastWater</field></block></value></block><block type=\"device_get_analog_pin\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"1197\" y=\"952\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P0</field></shadow></value></block><block type=\"logic_compare\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"2373\" y=\"1291\"><field name=\"OP\">LTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P0</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">90</field></shadow></value></block><block type=\"function_definition\" x=\"-562\" y=\"3309\"><mutation name=\"fogFlood\" functionid=\"k_s2+XI@*gx2@)wty=I0\"></mutation><field name=\"function_name\">fogFlood</field><statement name=\"STACK\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</field></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">10000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">para</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.mid</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.off</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.dancing</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.still</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">8000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.min</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"-120\" y=\"3309\"><mutation name=\"runTutorial\" functionid=\"Y{7P,}tzRL|sul3I;].}\"></mutation><field name=\"function_name\">runTutorial</field><statement name=\"STACK\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">tutor</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">80</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">20</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.tutorial</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto1</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5950</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto2</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto3</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7600</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto4</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6100</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto5</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">13000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto6</field><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"function_definition\" x=\"236\" y=\"3309\"><mutation name=\"ready_oled\" functionid=\",fv3PGT/J~k#ZH}9er,/\"></mutation><field name=\"function_name\">ready_oled</field><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Say //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"6\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"SRvF%Vl7CRHE66Kr9~Q[\">lastLaserR</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> C</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"%FT#@+cF!r3!,1uelm~,\">lastLaserC</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"hs_o5`X:I}y9{R2!_miN\">lastLaserL</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"8\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">S</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"}%7r;bz7Byg#SEH9P{dG\">lastSonarRead</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> H</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_js_round\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"u#;Y3,}t+?Ue.~vd$_;0\">lastHue</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> G</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"5rh0sr-gnWZKflz~gbRk\">lastGesture</field></block></value><value name=\"ADD6\"><shadow type=\"text\"><field name=\"TEXT\"> N</field></shadow></value><value name=\"ADD7\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"at2[c#F7*{?za?uyOm!i\">lastHunt</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">Mode: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M:</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"NL_MP3_PlaytimeMusic\"></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">4</field></shadow></value></block></next></block></next></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Do //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> T </field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement></block></statement></block></xml>","main.ts":"function radioSay (text5: string, val: number) {\n    radio.sendValue(\"\" + btToken + text5, val)\n    notLegos.printLine(\"said: \" + text5 + \"=\" + val, 7)\n}\nfunction buttonPress (button: string) {\n    notLegos.printLine(\"button: \" + button, 3)\n}\nfunction runTutorial () {\n    radioSay(\"tutor\", 1)\n    notLegos.setVolume(notLegos.mp3type.music, 80)\n    basic.pause(20)\n    notLegos.mp3musicPlay(notLegos.musicGenre.tutorial)\n    fogLevel = 3\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto1)\n    basic.pause(5950)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto2)\n    basic.pause(5000)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto3)\n    basic.pause(7600)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto4)\n    basic.pause(6100)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto5)\n    basic.pause(13000)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto6)\n    notLegos.setVolume(notLegos.mp3type.music, 100)\n    basic.pause(7000)\n    notLegos.mp3musicPlay(notLegos.musicGenre.awaiting)\n}\nfunction ready_oled () {\n    if (isCastleSay) {\n        let lastHunt = 0\n        let lastGesture = 0\n        let lastHue = 0\n        let lastSonarRead = 0\n        let lastLaserL = 0\n        let lastLaserC = 0\n        let lastLaserR = 0\n        notLegos.printLine(\"// Castle Say //\", 0)\n        notLegos.printLine(\"R\" + Math.constrain(lastLaserR, 0, 9) + \" C\" + Math.constrain(lastLaserC, 0, 9) + \" L\" + Math.constrain(lastLaserL, 0, 9), 1)\n        notLegos.printLine(\"S\" + lastSonarRead + \" H\" + Math.round(lastHue / 3) + \" G\" + lastGesture + \" N\" + lastHunt, 2)\n        notLegos.printLine(\"Mode: \" + castleMode, 3)\n        notLegos.printLine(\"M:\" + notLegos.mp3durationMusic(), 4)\n    } else {\n        notLegos.printLine(\"// Castle Do //\", 0)\n        notLegos.printLine(\"M: \" + castleMode + \" T \" + fogToggle, 1)\n    }\n}\nradio.onReceivedValue(function (name, value) {\n    if (name.substr(0, btToken.length) == btToken) {\n        theName = name.substr(btToken.length, name.length - btToken.length)\n        if (isCastleSay) {\n            if (theName == \"wstar\") {\n                castleMode = \"wait_start\"\n            } else if (theName == \"welco\") {\n                if (value == 1) {\n                    notLegos.vfxReset(notLegos.vfxEffect.glow)\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.glow)\n                    notLegos.mp3voicePlay(notLegos.voiceSaying.welcome)\n                } else if (value == 2) {\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                    notLegos.setEffect(notLegos.vfxRegion.WheelAll, notLegos.vfxEffect.fire)\n                    basic.pause(1200)\n                    notLegos.mp3voicePlay(notLegos.voiceSaying.intro)\n                    basic.pause(3000)\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                    basic.pause(4000)\n                    notLegos.mp3musicPlay(notLegos.musicGenre.awaiting)\n                    castleMode = \"wait_reg\"\n                }\n            } else if (theName == \"check\") {\n                notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                radioSay(\"ready\", 1)\n            } else if (false) {\n            \t\n            }\n        } else {\n            if (theName == \"ready\") {\n                radioSay(\"wstar\", 1)\n                notLegos.setEffect(notLegos.vfxRegion.KongFront, notLegos.vfxEffect.indicate)\n            } else if (theName == \"boot\") {\n                fogLevel = 3\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.parade)\n                notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.max)\n                basic.pause(value * 1000)\n                notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.min)\n                basic.pause(1000)\n                radioSay(\"welco\", 1)\n                basic.pause(200)\n                notLegos.vfxReset(notLegos.vfxEffect.glow)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.glow)\n                basic.pause(5000)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.idle)\n                notLegos.setEffect(notLegos.vfxRegion.SpotH, notLegos.vfxEffect.mine)\n                notLegos.setEffect(notLegos.vfxRegion.SpotI, notLegos.vfxEffect.mine)\n                basic.pause(0)\n                radioSay(\"welco\", 2)\n                basic.pause(4500)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.off)\n                basic.pause(500)\n                notLegos.setEffect(notLegos.vfxRegion.BrickDragon, notLegos.vfxEffect.indicate)\n                basic.pause(1200)\n                notLegos.setEffect(notLegos.vfxRegion.SpotC, notLegos.vfxEffect.indicate)\n                notLegos.setEffect(notLegos.vfxRegion.SpotE, notLegos.vfxEffect.indicate)\n                basic.pause(3000)\n                fogLevel = 1\n                notLegos.motorSet(notLegos.motors.door, notLegos.motorState.max)\n            } else if (theName == \"tutor\") {\n                if (value == 1) {\n                    notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.off)\n                    basic.pause(4000)\n                    notLegos.vfxReset(notLegos.vfxEffect.glow)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotA, notLegos.vfxEffect.glow)\n                    basic.pause(6000)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotB, notLegos.vfxEffect.indicate)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotC, notLegos.vfxEffect.indicate)\n                } else if (value == 2) {\n                \t\n                }\n            } else if (theName == \"welco\") {\n            \t\n            } else {\n            \t\n            }\n        }\n        notLegos.printLine(\"heard: \" + theName + \"=\" + value, 6)\n    }\n})\ninput.onLogoEvent(TouchButtonEvent.Touched, function () {\n    if (isCastleSay) {\n        notLegos.mp3sayPlay(notLegos.playerSaying.ready)\n        notLegos.mp3sfxPlay(notLegos.sfxType.fire)\n        notLegos.mp3musicPlay(notLegos.musicGenre.intro)\n    }\n})\nfunction fogFlood () {\n    if (fogToggle) {\n        fogLevel = 3\n        basic.pause(10000)\n        notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.parade)\n        radioSay(\"para\", 1)\n        fogLevel = 0\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.max)\n        notLegos.motorSet(notLegos.motors.door, notLegos.motorState.max)\n        basic.pause(1000)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.mid)\n        basic.pause(6000)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.min)\n        basic.pause(500)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.off)\n        notLegos.motorSet(notLegos.motors.door, notLegos.motorState.min)\n        fogLevel = 1\n        notLegos.setSock(notLegos.sockState.dancing)\n        basic.pause(6000)\n        notLegos.setSock(notLegos.sockState.still)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.max)\n        basic.pause(8000)\n        notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.redrack, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.redrack, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shark, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shark, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.ghost, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.ghost, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.cannon, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.cannon, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.oarrack, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.oarrack, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shell, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shell, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.dragon, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.dragon, notLegos.motorState.min)\n    }\n}\nlet iTook = 0\nlet theName = \"\"\nlet fogToggle = 0\nlet castleMode = \"\"\nlet isCastleSay = 0\nlet fogLevel = 0\nlet btToken = \"\"\nnotLegos.oledinit()\nnotLegos.castleSayLights(DigitalPin.P3, DigitalPin.P0, DigitalPin.P16)\nlet iBegan = input.runningTimeMicros()\nnotLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.parade)\nloops.everyInterval(500, function () {\n\t\n})\nloops.everyInterval(500, function () {\n\t\n})\nloops.everyInterval(2000, function () {\n    notLegos.printLine(\"\" + iTook + \"\", 5)\n})\nloops.everyInterval(40, function () {\n    let isReady = 0\n    iBegan = input.runningTime()\n    notLegos.castleSayTick()\n    if (isReady) {\n    \t\n    }\n    ready_oled()\n    notLegos.changeThree()\n    iTook = input.runningTime() - iBegan\n})\n","README.md":"\n> Open this page at [https://notlegos.github.io/castleresay/](https://notlegos.github.io/castleresay/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/castleresay** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/castleresay** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/soundbank/](https://notlegos.github.io/soundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/soundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/soundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/resoundbank/](https://notlegos.github.io/resoundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/resoundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/resoundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosext/](https://notlegos.github.io/notlegosext/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosext** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosext** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosmaster/](https://notlegos.github.io/notlegosmaster/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosmaster** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosmaster** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","displaySendBuffer.asm":"sendBufferAsm:\n\n    push {r4,r5,r6,r7,lr}\n    \n    mov r4, r0 ; save buff\n    mov r6, r1 ; save pin\n    \n    mov r0, r4\n    bl BufferMethods::length\n    mov r5, r0\n    \n    mov r0, r4\n    bl BufferMethods::getBytes\n    mov r4, r0\n    \n    ; setup pin as digital\n    mov r0, r6\n    movs r1, #0\n    bl pins::digitalWritePin\n    \n    ; load pin address\n    mov r0, r6\n    bl pins::getPinAddress\n\n    ldr r0, [r0, #8] ; get mbed DigitalOut from MicroBitPin\n    ldr r1, [r0, #4] ; r1-mask for this pin\n    ldr r2, [r0, #16] ; r2-clraddr\n    ldr r3, [r0, #12] ; r3-setaddr\n    \n    cpsid i ; disable irq\n    \n    b .start\n    \n.nextbit:               ;            C0\n    str r1, [r3, #0]    ; pin := hi  C2\n    tst r6, r0          ;            C3\n    bne .islate         ;            C4\n    str r1, [r2, #0]    ; pin := lo  C6\n.islate:\n    lsrs r6, r6, #1     ; r6 >>= 1   C7\n    bne .justbit        ;            C8\n    \n    ; not just a bit - need new byte\n    adds r4, #1         ; r4++       C9\n    subs r5, #1         ; r5--       C10\n    bcc .stop           ; if (r5<0) goto .stop  C11\n.start:\n    movs r6, #0x80      ; reset mask C12\n    nop                 ;            C13\n\n.common:               ;             C13\n    str r1, [r2, #0]   ; pin := lo   C15\n    ; always re-load byte - it just fits with the cycles better this way\n    ldrb r0, [r4, #0]  ; r0 := *r4   C17\n    b .nextbit         ;             C20\n\n.justbit: ; C10\n    ; no nops, branch taken is already 3 cycles\n    b .common ; C13\n\n.stop:    \n    str r1, [r2, #0]   ; pin := lo\n    cpsie i            ; enable irq\n\n    pop {r4,r5,r6,r7,pc}\n","planetxbasic.ts":"/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#00B1ED  icon=\"\\uf005\" block=\"Connected\" blockId=\"PlanetX_Connected\"\n//% groups='[\"Digital\", \"Analog\", \"IIC Port\"]'\nnamespace Connected {\n    \n    ////////////////////////paj7620//////////////////////\n    let gesture_first_init = true\n    const initRegisterArray: number[] = [\n        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17,\n        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F,\n        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14,\n        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27,\n        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01,\n        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00,\n        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20,\n        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37,\n        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A,\n        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F,\n        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30,\n        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19,\n        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04,\n        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00,\n        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00,\n        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F,\n        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07,\n        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01,\n        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F,\n        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01,\n        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40,\n        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E,\n        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00,\n        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08,\n        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00,\n        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01,\n        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01,\n        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01\n    ];\n    \n    /////////////////////////color/////////////////////////\n    const APDS9960_ADDR = 0x39\n    const APDS9960_ENABLE = 0x80\n    const APDS9960_ATIME = 0x81\n    const APDS9960_CONTROL = 0x8F\n    const APDS9960_STATUS = 0x93\n    const APDS9960_CDATAL = 0x94\n    const APDS9960_CDATAH = 0x95\n    const APDS9960_RDATAL = 0x96\n    const APDS9960_RDATAH = 0x97\n    const APDS9960_GDATAL = 0x98\n    const APDS9960_GDATAH = 0x99\n    const APDS9960_BDATAL = 0x9A\n    const APDS9960_BDATAH = 0x9B\n    const APDS9960_GCONF4 = 0xAB\n    const APDS9960_AICLEAR = 0xE7\n    let color_first_init = false\n\n    function i2cwrite_color(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n    function i2cread_color(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n    function rgb2hsl(color_r: number, color_g: number, color_b: number): number {\n        let Hue = 0\n        let R = color_r * 100 / 255;\n        let G = color_g * 100 / 255;\n        let B = color_b * 100 / 255;\n        let maxVal = Math.max(R, Math.max(G, B))\n        let minVal = Math.min(R, Math.min(G, B))\n        let Delta = maxVal - minVal;\n\n        if (Delta < 0) {\n            Hue = 0;\n        }\n        else if (maxVal == R && G >= B) {\n            Hue = (60 * ((G - B) * 100 / Delta)) / 100;\n        }\n        else if (maxVal == R && G < B) {\n            Hue = (60 * ((G - B) * 100 / Delta) + 360 * 100) / 100;\n        }\n        else if (maxVal == G) {\n            Hue = (60 * ((B - R) * 100 / Delta) + 120 * 100) / 100;\n        }\n        else if (maxVal == B) {\n            Hue = (60 * ((R - G) * 100 / Delta) + 240 * 100) / 100;\n        }\n        return Hue\n    }\n    function initModule(): void {\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ATIME, 252)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_CONTROL, 0x03)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_GCONF4, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_AICLEAR, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x01)\n        color_first_init = true\n    }\n    function colorMode(): void {\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_ENABLE) | 0x2;\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, tmp);\n    }\n\n    ///////////////////////////////////////////////////////MP3\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    /*\n    * Play status selection button list\n    */\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(100)\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,        \n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum Distance_Unit_List {\n        //% block=\"cm\" \n        Distance_Unit_cm,\n\n        //% block=\"foot\"\n        Distance_Unit_foot,\n    }\n    export enum ButtonStateList {\n        //% block=\"C\"\n        C,\n        //% block=\"D\"\n        D,\n        //% block=\"C+D\"\n        CD\n    }\n    export enum GestureType {\n        //% block=\"None\"\n        None = 0,\n        //% block=\"Right\"\n        Right = 1,\n        //% block=\"Left\"\n        Left = 2,\n        //% block=\"Up\"\n        Up = 3,\n        //% block=\"Down\"\n        Down = 4,\n        //% block=\"Forward\"\n        Forward = 5,\n        //% block=\"Backward\"\n        Backward = 6,\n        //% block=\"Clockwise\"\n        Clockwise = 7,\n        //% block=\"Anticlockwise\"\n        Anticlockwise = 8,\n        //% block=\"Wave\"\n        Wave = 9\n    }\n    export enum ColorList {\n        //% block=\"Red\"\n        red,\n        //% block=\"Green\"\n        green,\n        //% block=\"Blue\"\n        blue,\n        //% block=\"Cyan\"\n        cyan,\n        //% block=\"Magenta\"\n        magenta,\n        //% block=\"Yellow\"\n        yellow,\n        //% block=\"White\"\n        white\n    }\n\n    ///////////////////////////////////blocks/////////////////////////////\n\n    //% blockId=\"readwaterLevel\" block=\"Water level sensor %Rjpin value(0~100)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function waterLevel(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        let voltage = 0, waterlevel = 0;\n        voltage = pins.map(\n            pins.analogReadPin(pin),\n            50,\n            600,\n            0,\n            100\n        );\n        if (voltage < 0) {\n            voltage = 0\n        }\n        waterlevel = voltage;\n        return Math.round(waterlevel)\n    }\n\n    let distance_last = 0\n\n    //% blockId=sonarbit block=\"Ultrasonic sensor pinT %tPin pinE %ePin distance %distance_unit\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% distance_unit.fieldEditor=\"gridpicker\"\n    //% distance_unit.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    export function ultrasoundSensor(tPin: DigitalPin, ePin: DigitalPin, distance_unit: Distance_Unit_List): number {\n        let pinT = tPin\n        let pinE = ePin\n        pins.setPull(pinT, PinPullMode.PullNone)\n        pins.digitalWritePin(pinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(pinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(pinT, 0)\n\n        // read pulse\n        let d = pins.pulseIn(pinE, PulseValue.High, 25000)\n        let version = control.hardwareVersion()\n        let distance = d * 34 / 2 / 1000\n        if (version == \"1\") {\n            distance = distance * 3 / 2\n        }\n\n        if (distance > 430) {\n            distance = 0\n        }\n\n        if (distance == 0) {\n            distance = distance_last\n            distance_last = 0\n        }\n        else {\n            distance_last = distance\n        }\n\n        switch (distance_unit) {\n            case Distance_Unit_List.Distance_Unit_cm:\n                return Math.floor(distance)  //cm\n                break\n            case Distance_Unit_List.Distance_Unit_foot:\n                return Math.floor(distance / 30.48)   //foot\n                break\n            default:\n                return 0\n        }\n    }\n\n    export class PAJ7620 {\n        private paj7620WriteReg(addr: number, cmd: number) {\n            let buf: Buffer = pins.createBuffer(2);\n            buf[0] = addr;\n            buf[1] = cmd;\n            pins.i2cWriteBuffer(0x73, buf, false);\n        }\n        private paj7620ReadReg(addr: number): number {\n            let buf: Buffer = pins.createBuffer(1);\n            buf[0] = addr;\n            pins.i2cWriteBuffer(0x73, buf, false);\n            buf = pins.i2cReadBuffer(0x73, 1, false);\n            return buf[0];\n        }\n        private paj7620SelectBank(bank: number) {\n            if (bank == 0) this.paj7620WriteReg(0xEF, 0);\n            else if (bank == 1) this.paj7620WriteReg(0xEF, 1);\n        }\n        private paj7620Init() {\n            let temp = 0;\n            this.paj7620SelectBank(0);\n            temp = this.paj7620ReadReg(0);\n            if (temp == 0x20) {\n                for (let i = 0; i < 438; i += 2) {\n                    this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);\n                }\n            }\n            this.paj7620SelectBank(0);\n        }\n        init() {\n            this.paj7620Init();\n            basic.pause(200);\n        }\n        read(): number {\n            let data = 0, result = 0;\n            data = this.paj7620ReadReg(0x43);\n            switch (data) {\n                case 0x01:\n                    result = GestureType.Right;\n                    break;\n                case 0x02:\n                    result = GestureType.Left;\n                    break;\n                case 0x04:\n                    result = GestureType.Up;\n                    break;\n                case 0x08:\n                    result = GestureType.Down;\n                    break;\n                case 0x10:\n                    result = GestureType.Forward;\n                    break;\n                case 0x20:\n                    result = GestureType.Backward;\n                    break;\n                case 0x40:\n                    result = GestureType.Clockwise;\n                    break;\n                case 0x80:\n                    result = GestureType.Anticlockwise;\n                    break;\n                default:\n                    data = this.paj7620ReadReg(0x44);\n                    if (data == 0x01)\n                        result = GestureType.Wave;\n                    break;\n            }\n            return result;\n        }\n    }\n    const gestureEventId = 3100;\n    let lastGesture = GestureType.None;\n    let paj7620 = new PAJ7620();\n    //% blockId= gesture_create_event block=\"Gesture sensor IIC port is %gesture\"\n    //% gesture.fieldEditor=\"gridpicker\" gesture.fieldOptions.columns=3\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function onGesture(gesture: GestureType, handler: () => void) {\n        control.onEvent(gestureEventId, gesture, handler);\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        control.inBackground(() => {\n            while (true) {\n                const gesture = paj7620.read();\n                if (gesture != lastGesture) {\n                    lastGesture = gesture;\n                    control.raiseEvent(gestureEventId, lastGesture);\n                }\n                basic.pause(200);\n            }\n        })\n    }\n\n    //% blockId= gesture_get_event block=\"Gesture sensor IIC port detects\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function getGesture(): number {\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        const gesture = paj7620.read();\n        return gesture\n    }\n\n\n\n\n    //% blockId=apds9960_readcolor block=\"Color sensor IIC port color HUE(0~360)\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function readColor(): number {\n        if (color_first_init == false) {\n            initModule()\n            colorMode()\n        }\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        while (!tmp) {\n            basic.pause(5);\n            tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        }\n        let c = i2cread_color(APDS9960_ADDR, APDS9960_CDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_CDATAH) * 256;\n        let r = i2cread_color(APDS9960_ADDR, APDS9960_RDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_RDATAH) * 256;\n        let g = i2cread_color(APDS9960_ADDR, APDS9960_GDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_GDATAH) * 256;\n        let b = i2cread_color(APDS9960_ADDR, APDS9960_BDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_BDATAH) * 256;\n        // map to rgb based on clear channel\n        let avg = c / 3;\n        r = r * 255 / avg;\n        g = g * 255 / avg;\n        b = b * 255 / avg;\n        //let hue = rgb2hue(r, g, b);\n        let hue = rgb2hsl(r, g, b)\n        return hue\n    }\n    //% block=\"Color sensor IIC port detects %color\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% color.fieldEditor=\"gridpicker\" color.fieldOptions.columns=3\n    export function checkColor(color: ColorList): boolean {\n        let hue = readColor()\n        switch (color) {\n            case ColorList.red:\n                if (hue > 330 || hue < 20) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.green:\n                if (hue > 120 && 180 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.blue:\n                if (hue > 210 && 270 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.cyan:\n                if (hue > 190 && 210 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.magenta:\n                if (hue > 260 && 330 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.yellow:\n                if (hue > 30 && 120 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.white:\n                if (hue >= 180 && 190 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n        }\n    }\n\n    //% blockId=\"potentiometer\" block=\"Trimpot %Rjpin analog value\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Input color=#E2C438 group=\"Analog\"\n    export function trimpot(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        return pins.analogReadPin(pin)\n    }\n    //% blockId=buttonab block=\"Button %Rjpin %button is pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonCD(Rjpin: DigitalRJPin, button: ButtonStateList): boolean {\n        let pinC = DigitalPin.P1\n        let pinD = DigitalPin.P2\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pinC = DigitalPin.P1\n                pinD = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pinC = DigitalPin.P2\n                pinD = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pinC = DigitalPin.P13\n                pinD = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pinC = DigitalPin.P15\n                pinD = DigitalPin.P16\n                break;\n            case DigitalRJPin.P3:\n                pinC = DigitalPin.P3\n                pinD = DigitalPin.P4\n                break;\n        }\n        pins.setPull(pinC, PinPullMode.PullUp)\n        pins.setPull(pinD, PinPullMode.PullUp)\n        if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 0 && button == ButtonStateList.CD) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinC) == 0 && pins.digitalReadPin(pinD) == 1 && button == ButtonStateList.C) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 1 && button == ButtonStateList.D) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    export enum ButtonState {\n        //% block=\"on\"\n        on = 1,\n        //% block=\"off\"\n        off = 2\n    }\n\n    const buttonEventSource = 5000\n    const buttonEventValue = {\n        CD_pressed: ButtonState.on,\n        CD_unpressed: ButtonState.off\n    }\n\n    //% block=\"on button %Rjpin %button pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=4\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonEvent(Rjpin: DigitalRJPin, button: ButtonStateList, handler: () => void) {\n        let ButtonPin_C = DigitalPin.P1\n        let ButtonPin_D = DigitalPin.P2\n        let pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P0\n        let pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                ButtonPin_C = DigitalPin.P1\n                ButtonPin_D = DigitalPin.P8\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P1\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P8\n                break;\n            case DigitalRJPin.J2:\n                ButtonPin_C = DigitalPin.P2\n                ButtonPin_D = DigitalPin.P12\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P2\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P12\n                break;\n            case DigitalRJPin.J3:\n                ButtonPin_C = DigitalPin.P13\n                ButtonPin_D = DigitalPin.P14\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P13\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P14\n                break;\n            case DigitalRJPin.J4:\n                ButtonPin_C = DigitalPin.P15\n                ButtonPin_D = DigitalPin.P16\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P15\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P16\n                break;\n            case DigitalRJPin.P3:\n                ButtonPin_C = DigitalPin.P3\n                ButtonPin_D = DigitalPin.P4\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P3\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P4\n                break;\n        }\n        if (button == ButtonStateList.C) {\n            pins.setPull(ButtonPin_C, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_C, PinEventType.Edge)\n            control.onEvent(pinEventSource_C, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.D) {\n            pins.setPull(ButtonPin_D, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_D, PinEventType.Edge)\n            control.onEvent(pinEventSource_D, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.CD) {\n            loops.everyInterval(50, function () {\n                if (pins.digitalReadPin(ButtonPin_C) == 0 && pins.digitalReadPin(ButtonPin_D) == 0) {\n                    control.raiseEvent(buttonEventSource, buttonEventValue.CD_pressed)\n                }\n            })\n            control.onEvent(buttonEventSource, buttonEventValue.CD_pressed, handler)\n        }\n    }\n\n    //% blockId=fans block=\"Motor fan %Rjpin toggle to $fanstate || speed %speed \\\\%\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% fanstate.shadow=\"toggleOnOff\"\n    //% subcategory=Excute group=\"Digital\" color=#EA5532\n    //% speed.min=0 speed.max=100\n    //% expandableArgumentMode=\"toggle\"\n    export function motorFan(Rjpin: DigitalRJPin, fanstate: boolean, speed: number = 100): void {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case DigitalRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n            case DigitalRJPin.J3:\n                pin = AnalogPin.P13\n                break;\n            case DigitalRJPin.J4:\n                pin = AnalogPin.P15\n                break;\n        }\n        if (fanstate) {\n            pins.analogSetPeriod(pin, 100)\n            pins.analogWritePin(pin, Math.map(speed, 0, 100, 0, 1023))\n        }\n        else {\n            pins.analogWritePin(pin, 0)\n            speed = 0\n        }\n    }\n\n\n    //% blockId=\"setLoopFolder\" block=\"loop play all the MP3s in the folder:$folderNum\"\n    //% folderNum.defl=\"01\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setLoopFolder(folderNum: string): void {\n        CMD = 0x17\n        para1 = 0\n        para2 = parseInt(folderNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    //% blockId=\"folderPlay\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum || repeatList: $myAns\"\n    //% folderNum.defl=\"01\" fileNum.defl=\"001\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function folderPlay(folderNum: string, fileNum: string, myAns: boolean = false): void {\n        CMD = 0x0F\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        if (myAns)\n            execute(0x19)\n    }\n\n    //% blockId=\"playFolderFilePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFilePort(folderNum: string, fileNum: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFolderFileVolumePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum with volume:$theVolume usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" theVolume.defl=\"10\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFileVolumePort(folderNum: string, fileNum: string, theVolume: string, Rjpin: DigitalRJPin): void {\n        \n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        \n        let volume = parseInt(theVolume)\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(200)\n\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"volumePort\" \n    //% block=\"set MP3 volume:$theVolume usingPin:$Rjpin\"\n    //% theVolume.defl=\"10\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function volumePort(theVolume: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        let volume = parseInt(theVolume)\n        if (volume > 30) {\n            volume = 30\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(300)\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n\n\n    //% blockId=\"setTracking\" \n    //% block=\"play the mp3 in order of:%tracking || repeatList: $myAns\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% tracking.defl=1\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setTracking(tracking: number, myAns: boolean = false): void {\n        CMD = 0x03\n        para1 = 0x00\n        para2 = tracking\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        execute(0x0D)\n        if (myAns)\n            execute(0x19)\n    }\n    //% blockId=MP3execute block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=\"setVolume\" block=\"Set volume(0~25):%volume\"\n    //% volume.min=0 volume.max=25\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setVolume(volume: number): void {\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 0x06\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=MP3setPort block=\"Set the MP3 port to %Rjpin\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function MP3SetPort(Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        setVolume(25)\n    }\n}","notlegos.ts":"// NotLegos Blocks\n//% block=\"Not LEGOs\" color=#0031AF weight=1000 icon=\"\\uf3a5\"\n//% groups='[\"MP3\",\"Sensors\"]'\nnamespace notLegos {\n\n\n/// BEGIN NEOPIXEL ///\n    export enum hues { red = 0, orange = 15, yellow = 40, lime = 85, green = 110, cyan = 170, blue = 240, purple = 260, pink = 310 }\n    export enum vfxEffect { parade = 0, fire = 1, indicate = 2, idle = 3, glow = 4, mine = 5, off = 6 }\n    let NeoSock: Strip = null; let NeoScore: Strip = null; let NeoWheel: Strip = null; let NeoKong: Strip = null; let NeoStrip: Strip = null; let NeoBrick: Strip = null\n    let vfx_mine_tog: number[] = []; let vfx_mine_hue: number[] = []; let vfx_mine_sat: number[] = []; let vfx_mine_lum: number[] = []\n    let vfx_fire_tog: number[] = []; let vfx_fire_hue: number[] = []; let vfx_fire_sat: number[] = []; let vfx_fire_lum: number[] = []; let vfx_fire_colors: number[] = []\n    let vfx_indicate_tog: number[] = []; let vfx_indicate_hue: number[] = []; let vfx_indicate_sat: number[] = []; let vfx_indicate_lum: number[] = [];\n    let vfx_idle_tog: number[] = []; let vfx_idle_hue: number[] = []; let vfx_idle_sat: number[] = []; let vfx_idle_lum: number[] = []\n    let vfx_glow_tog: number[] = []; let vfx_glow_hue: number[] = []; let vfx_glow_sat: number[] = []; let vfx_glow_lum: number[] = []\n    let vfx_parade_tog: number[] = []; let vfx_parade_hue: number[] = []; let vfx_parade_sat: number[] = []; let vfx_parade_lum: number[] = []; let vfx_parade_colors: number[] = [];\n    let vfx_last_tog: number[] = []; let vfx_last_hue: number[] = []; let vfx_last_sat: number[] = []; let vfx_last_lum: number[] = []\n    let vfx_master_tog: number[] = []; let vfx_master_hue: number[] = []; let vfx_master_sat: number[] = []; let vfx_master_lum: number[] = []; let vfx_master_effect: number[] = [];\n    let vfx_light_count = 0\n\n    //% shim=sendBufferAsm\n    function sendBuffer(buf: Buffer, pin: DigitalPin) { }\n\n    export class Strip {\n        buf: Buffer;\n        pin: DigitalPin;\n        start: number; // start offset in LED strip\n        _length: number; // number of LEDs\n\n        setPixelHSLPrecise(pixeloffset: number, h: number, s: number, l: number): void {\n            if (pixeloffset < 0 || pixeloffset >= this._length)\n                return;\n            pixeloffset = (pixeloffset + this.start) * 3\n            h = Math.clamp(0,1,h/360)\n            s = Math.clamp(0,1,s/100)\n            l = Math.clamp(0,1,l/100)\n            let r, g, b;\n            if (s === 0) {\n                r = g = b = l; // achromatic\n            } else {\n                const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n                const p = 2 * l - q;\n                r = this.hueToRgb(p, q, h + 1 / 3);\n                g = this.hueToRgb(p, q, h);\n                b = this.hueToRgb(p, q, h - 1 / 3);\n            }\n            this.buf[pixeloffset + 0] = Math.round(g * 255);\n            this.buf[pixeloffset + 1] = Math.round(r * 255);\n            this.buf[pixeloffset + 2] = Math.round(b * 255);\n        }\n\n        hueToRgb(p:number, q:number, t:number) {\n            if (t < 0) t += 1;\n            if (t > 1) t -= 1;\n            if (t < 1 / 6) return p + (q - p) * 6 * t;\n            if (t < 1 / 2) return q;\n            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n            return p;\n        }\n\n        // show() { sendBuffer(this.buf, this.pin); }  //Send all the changes to the strip.\n\n        show() { \n            sendBuffer(this.buf, DigitalPin.P16); \n            sendBuffer(this.buf, DigitalPin.P15);\n            sendBuffer(this.buf, DigitalPin.P14);\n            sendBuffer(this.buf, DigitalPin.P13);\n            sendBuffer(this.buf, DigitalPin.P12);\n            sendBuffer(this.buf, DigitalPin.P8);\n        }  //Send all the changes to the strip.\n\n        length() { return this._length; }   //Gets the number of pixels declared on the strip\n\n        shift(offset: number = 1): void { this.buf.shift(-offset * 3, this.start * 3, this._length * 3) }   //Shift LEDs forward and clear with zeros.\n\n        rotate(offset: number = 1): void { this.buf.rotate(-offset * 3, this.start * 3, this._length * 3) } //Rotate LEDs forward\n\n        setPin(pin: DigitalPin): void {\n            this.pin = pin;\n            pins.digitalWritePin(this.pin, 0);  // don't yield to avoid races on initialization\n        }\n    }\n\n    function create(thePin: DigitalPin, numleds: number): Strip {\n        let strip = new Strip();\n        strip.buf = pins.createBuffer(numleds * 3);\n        strip.start = 0;\n        strip._length = numleds;\n        strip.setPin(thePin)\n        return strip;\n    }\n\n    //% blockId=NL_PIXEL_CastleSay\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Sock Circle:%sockPin  Wheel Strip/Circle:%wheelPin  Score Circle:%scorePin \"\n    //% weight=100\n    export function castleSayLights(sockPin: DigitalPin, wheelPin: DigitalPin, scorePin: DigitalPin): void {\n        // NeoScore = create(scorePin, 8)\n        // NeoSock = create(sockPin, 8)\n        NeoWheel = create(wheelPin, 10)\n        vfx_light_count = 17\n        vfxInit()\n        // vfx_indicate_hue[30]=hues.green\n        // vfx_indicate_hue[31] = hues.yellow\n        // vfx_indicate_hue[32] = hues.orange\n        // vfx_indicate_hue[33] = hues.red\n        // vfx_indicate_hue[26] = hues.red\n        // vfx_indicate_hue[27] = hues.red\n        // vfx_indicate_hue[28] = hues.red\n        // vfx_indicate_hue[29] = hues.red\n\n        // setEffect(vfxRegion.CastleSayAll, vfxEffect.parade)\n    }\n\n    //% blockId=NL_PIXEL_CastleDo\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Strips:%spotPin  Bricks:%brickPin Kong Lights:%kongPin\"\n    //% weight=100\n    export function castleDoLights(stripPin: DigitalPin, brickPin: DigitalPin, kongPin: DigitalPin): void {\n        NeoStrip = create(stripPin, 20)\n        NeoBrick = create(brickPin, 8)\n        NeoKong = create(kongPin, 4)\n        vfx_light_count = 20 + 8 + 4\n        vfxInit()\n        vfx_indicate_hue[0]=hues.cyan; vfx_indicate_hue[1]=hues.cyan   //spot h\n        vfx_indicate_hue[2] = hues.pink; vfx_indicate_hue[3] = hues.pink //spot f\n        vfx_indicate_hue[26] = hues.pink   //shell brick\n        vfx_indicate_hue[4] = hues.orange; vfx_indicate_hue[5] = hues.orange   //spot d\n        vfx_indicate_hue[21] = hues.orange   //cannon brick\n        vfx_indicate_hue[25] = hues.orange   //bomb brick\n        vfx_indicate_hue[6] = hues.yellow; vfx_indicate_hue[7] = hues.yellow   //spot b\n        vfx_indicate_hue[8] = hues.red; vfx_indicate_hue[9] = hues.red; vfx_indicate_hue[10] = hues.red; vfx_indicate_hue[11] = hues.red  //spot a\n        vfx_indicate_hue[20] = hues.red; vfx_indicate_hue[27] = hues.red  //wheel bricks\n        vfx_indicate_hue[12] = hues.blue; vfx_indicate_hue[13] = hues.blue    //spot c\n        vfx_indicate_hue[14] = hues.cyan; vfx_indicate_hue[15] = hues.cyan    //spot e\n        vfx_indicate_hue[16] = hues.purple; vfx_indicate_hue[17] = hues.purple  //spot g\n        vfx_indicate_hue[24] = hues.purple  //ghost brick\n        vfx_indicate_hue[18] = hues.green; vfx_indicate_hue[19] = hues.green   //spot i\n        vfx_indicate_hue[28] = hues.green; vfx_indicate_hue[29] = hues.green; vfx_indicate_hue[30] = hues.green; vfx_indicate_hue[31] = hues.green   //kong\n        vfx_indicate_hue[22] = hues.yellow; vfx_indicate_hue[23] = hues.yellow  //dragon brick\n        vfx_indicate_tog[0] = 1; vfx_indicate_tog[1] = 1 //spot h\n        vfx_indicate_tog[2] = 1; vfx_indicate_tog[3] = 1 //spot f\n        vfx_indicate_tog[4] = 1; vfx_indicate_tog[5] = 1 //spot d\n        vfx_indicate_tog[6] = 1; vfx_indicate_tog[7] = 1 //spot b\n        vfx_indicate_tog[8] = 1; vfx_indicate_tog[9] = 1 //spot a\n        vfx_indicate_tog[22] = 1; vfx_indicate_tog[27] = 1    //wheel bricks\n        vfx_indicate_tog[21] = 1    //cannon brick\n        vfx_indicate_tog[25] = 1    //bomb brick\n        vfx_indicate_tog[26] = 1    //shell brick\n        vfx_indicate_tog[31] = 1; vfx_indicate_tog[30] = 1    //kong\n        \n        // setEffect(vfxRegion.CastleDoAll, vfxEffect.indicate)\n    }\n\n    function vfxInit(): void{\n        vfx_parade_colors = [hues.red, hues.orange, hues.yellow, hues.cyan, hues.blue, hues.purple]\n        vfx_fire_colors = [hues.red, hues.red, hues.red, hues.red, hues.orange, hues.orange, hues.orange, hues.orange, hues.orange, hues.yellow]\n        for (let index = 0; index < vfx_light_count; index++) {\n             \n            vfx_indicate_tog.push(0)\n            vfx_indicate_lum.push(50)\n            vfx_indicate_hue.push(50)\n            vfx_indicate_sat.push(100)\n\n            vfx_mine_tog.push(0)\n            vfx_mine_hue.push(hues.red)\n            vfx_mine_sat.push(100)\n            vfx_mine_lum.push(50)\n\n            vfx_fire_tog.push(randint(0, 1))\n            vfx_fire_hue.push(vfx_fire_colors[randint(0, vfx_fire_colors.length - 1)])\n            vfx_fire_sat.push(100)\n            vfx_fire_lum.push(randint(30, 80))\n\n            vfx_idle_tog.push(1)\n            if (index % 2 == 0) { vfx_idle_tog[index] = 0; }\n            vfx_idle_hue.push(265)\n            if (index % 2 == 0) { vfx_idle_hue[index] = 2; }\n            vfx_idle_sat.push(100)\n            vfx_idle_lum.push(50)\n\n            vfx_glow_tog.push(0)\n            vfx_glow_hue.push(50)\n            vfx_glow_sat.push(0)\n            vfx_glow_lum.push(0)\n\n            vfx_parade_tog.push(randint(0, 1))\n            vfx_parade_hue.push(vfx_parade_colors[randint(0, vfx_parade_colors.length-1)])\n            vfx_parade_sat.push(100)\n            vfx_parade_lum.push(randint(10, 65))\n\n            vfx_last_tog.push(0)\n            vfx_last_hue.push(50)\n            vfx_last_sat.push(100)\n            vfx_last_lum.push(50)\n\n            vfx_master_tog.push(0)\n            vfx_master_hue.push(0)\n            vfx_master_sat.push(100)\n            vfx_master_lum.push(50)\n            vfx_master_effect.push(vfxEffect.off)    //leave this be!\n        }\n    }\n\n    //% blockId=NL_PIXEL_ResetVFX\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Reset VFX %effect\"\n    //% weight=100\n    export function vfxReset(effect:vfxEffect):void{\n        if (effect == vfxEffect.idle){\n            for (let index = 0; index < vfx_light_count; index++) {\n                vfx_idle_tog[index]=1\n                if (index % 2 == 0) { vfx_idle_tog[index] = 0; }\n                vfx_idle_hue[index]=265\n                if (index % 2 == 0) { vfx_idle_hue[index] = 2; }\n                vfx_idle_sat[index]=100\n                vfx_idle_lum[index]=50\n            }\n        } else if (effect == vfxEffect.glow) {\n            for (let index = 0; index < vfx_light_count; index++) {\n                vfx_glow_tog[index] = 0\n                vfx_glow_hue[index] = 50\n                // vfx_glow_sat[index] = 100\n                vfx_glow_lum[index] = 0\n            }\n        } else if (effect == vfxEffect.mine) {\n            for (let index = 0; index < vfx_light_count; index++) {\n                vfx_mine_tog[index] = 0\n                vfx_mine_hue[index] = hues.red\n                vfx_mine_sat[index] = 100\n                vfx_mine_lum[index] = 50\n            }\n        } else if (effect == vfxEffect.indicate) {\n            for (let index = 0; index < vfx_light_count; index++) {\n                vfx_indicate_tog[index] = 0\n                vfx_indicate_sat[index] = 100\n                vfx_indicate_lum[index] = 50\n            }\n        }\n    }\n\n    //% blockId=NL_PIXEL_CastleSayTick\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Advance Castle Say lights\"\n    //% weight=100\n    export function castleSayTick(): void {\n        paradeTick()\n        fireTick()\n        glowTick()\n        castleSayWrite()\n        indicateTick()\n        idleTick()\n        mineTick()\n    }\n\n    //% blockId=NL_PIXEL_CastleDoTick\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Advance Castle Do lights\"\n    //% weight=100\n    export function castleDoTick(): void {\n        paradeTick()\n        fireTick()\n        glowTick()\n        castleDoWrite()\n        indicateTick()\n        idleTick()\n        mineTick()\n    }\n\n    function paradeTick(): void{\n        for (let index=0; index < vfx_light_count; index++){\n            let thisLum = vfx_parade_lum[index]\n            let thisHue = vfx_parade_hue[index]\n            let thisTog = vfx_parade_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0){\n                if (thisLum < 65){\n                    vfx_parade_lum[index] = thisLum + 12\n                } else if (thisLum >= 65){\n                    vfx_parade_tog[index] = 1\n                }\n            } else if (thisTog == 1){\n                if (thisLum>10){\n                    vfx_parade_lum[index] = thisLum - 4\n                } else if (thisLum <= 10){\n                    vfx_parade_tog[index] = 0\n                    while (nextHue == thisHue){\n                        nextHue = vfx_parade_colors[randint(0, vfx_parade_colors.length - 1)]\n                    }\n                    vfx_parade_hue[index] = nextHue\n                    vfx_parade_lum[index] = thisLum - randint(0,10)\n                }\n            }\n        }\n    }\n\n    function mineTick(): void {\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisLum = vfx_mine_lum[index]\n            let thisHue = vfx_mine_hue[index]\n            let thisTog = vfx_mine_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 200) {\n                    vfx_mine_lum[index] = thisLum + 30\n                } else if (thisLum >= 200) {\n                    vfx_mine_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 0) {\n                    vfx_mine_lum[index] = thisLum - 30\n                } else if (thisLum <= 0) {\n                    vfx_mine_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function idleTick(): void {\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisLum = vfx_idle_lum[index]\n            let thisHue = vfx_idle_hue[index]\n            let thisTog = vfx_idle_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisHue < 265) {\n                    vfx_idle_hue[index] = thisHue + 1\n                } else if (thisHue >= 265) {\n                    vfx_idle_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisHue > 2) {\n                    vfx_idle_hue[index] = thisHue - 1\n                } else if (thisHue <= 2) {\n                    vfx_idle_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function indicateTick(): void {\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisLum = vfx_indicate_lum[index]\n            let thisHue = vfx_indicate_hue[index]\n            let thisTog = vfx_indicate_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 80) {\n                    vfx_indicate_lum[index] = thisLum + 12\n                } else if (thisLum >= 80) {\n                    vfx_indicate_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 25) {\n                    vfx_indicate_lum[index] = thisLum - 4\n                } else if (thisLum <= 25) {\n                    vfx_indicate_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function fireTick(): void {\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisLum = vfx_fire_lum[index]\n            let thisHue = vfx_fire_hue[index]\n            let thisTog = vfx_fire_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 80) {\n                    vfx_fire_lum[index] = thisLum + 15\n                } else if (thisLum >= 80) {\n                    vfx_fire_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 30) {\n                    vfx_fire_lum[index] = thisLum - 5\n                } else if (thisLum <= 30) {\n                    vfx_fire_tog[index] = 0\n                    while (nextHue == thisHue) {\n                        nextHue = vfx_fire_colors[randint(0, vfx_fire_colors.length - 1)]\n                    }\n                    vfx_fire_hue[index] = nextHue\n                    vfx_fire_lum[index] = thisLum - randint(0, 30)\n                }\n            }\n        }\n    }\n\n    function glowTick(): void {\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisLum = vfx_glow_lum[index]\n            if (thisLum < 4){\n                vfx_glow_lum[index] = thisLum+.2\n            } else if (thisLum < 5) {\n                vfx_glow_lum[index] = thisLum+ + .3\n            } else if (thisLum < 10) {\n                vfx_glow_lum[index] = thisLum + .5\n            } else if (thisLum < 15) {\n                vfx_glow_lum[index] = thisLum + 1\n            }else if (thisLum < 30) {\n                vfx_glow_lum[index] = thisLum + 1.5\n            } else if (thisLum < 100) {\n                vfx_glow_lum[index] = thisLum + 4\n            } else{\n                vfx_glow_lum[index] = 0\n            }\n        }\n    }\n\n    function vfxPrepareMaster(): void{\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisEffect = vfx_master_effect[index]\n            if (thisEffect == vfxEffect.parade) {\n                vfx_master_hue[index] = vfx_parade_hue[index]\n                vfx_master_sat[index] = vfx_parade_sat[index]\n                vfx_master_lum[index] = Math.max(0,Math.min(50,vfx_parade_lum[index]))\n            } else if (thisEffect == vfxEffect.fire) {\n                vfx_master_hue[index] = vfx_fire_hue[index]\n                vfx_master_sat[index] = vfx_fire_sat[index]\n                vfx_master_lum[index] = Math.max(0, Math.min(50, vfx_fire_lum[index]))\n            } else if (thisEffect == vfxEffect.indicate) {\n                vfx_master_hue[index] = vfx_indicate_hue[index]\n                vfx_master_sat[index] = vfx_indicate_sat[index]\n                vfx_master_lum[index] = Math.max(0, Math.min(50, vfx_indicate_lum[index]))\n            } else if (thisEffect == vfxEffect.idle) {\n                vfx_master_hue[index] = vfx_idle_hue[index]\n                vfx_master_sat[index] = vfx_idle_sat[index]\n                vfx_master_lum[index] = Math.max(0, Math.min(50, vfx_idle_lum[index]))\n            } else if (thisEffect == vfxEffect.glow) {\n                vfx_master_hue[index] = vfx_glow_hue[index]\n                vfx_master_sat[index] = vfx_glow_sat[index]\n                vfx_master_lum[index] = Math.min(100,vfx_glow_lum[index])\n            } else if (thisEffect == vfxEffect.mine) {\n                vfx_master_hue[index] = vfx_mine_hue[index]\n                vfx_master_sat[index] = vfx_mine_sat[index]\n                vfx_master_lum[index] = Math.max(0, Math.min(50, vfx_mine_lum[index]))\n            } else if (thisEffect == vfxEffect.off) {\n                vfx_master_hue[index] = vfx_mine_hue[index]\n                vfx_master_sat[index] = vfx_mine_sat[index]\n                vfx_master_lum[index] = 0\n            }\n        }\n    }\n    function castleSayWrite(): void{\n        vfxPrepareMaster()\n        let masterIndex = 0\n        // for (let index = 0; index < NeoSock.length(); index++){\n        //     NeoSock.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n        //     masterIndex++\n        // }\n        for (let index = 0; index < NeoWheel.length(); index++) {\n            NeoWheel.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        // for (let index = 0; index < NeoScore.length(); index++) {\n        //     NeoScore.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n        //     masterIndex++\n        // }\n        // NeoSock.show()\n        NeoWheel.show()\n        // NeoScore.show()\n    }\n\n    function castleDoWrite(): void {\n        vfxPrepareMaster()\n        let masterIndex = 0\n        for (let index = 0; index < NeoStrip.length(); index++) {\n            NeoStrip.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        for (let index = 0; index < NeoBrick.length(); index++) {\n            NeoBrick.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        for (let index = 0; index < NeoKong.length(); index++) {\n            NeoKong.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        NeoStrip.show()\n        NeoBrick.show()\n        NeoKong.show()\n    }\n\n    //% blockId=NL_PIXEL_SetEffect\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Set %region VFX to %effect\"\n    //% weight=100\n    export function setEffect(region:vfxRegion, effect:vfxEffect){\n        if (region == vfxRegion.Score1){\n            vfx_master_effect[30] = effect\n        } else if (region == vfxRegion.Score2) {\n            vfx_master_effect[31] = effect\n        } else if (region == vfxRegion.Score3) {\n            vfx_master_effect[32] = effect\n        } else if (region == vfxRegion.Score4) {\n            vfx_master_effect[33] = effect\n        } else if (region == vfxRegion.Score5) {\n            vfx_master_effect[26] = effect\n        } else if (region == vfxRegion.Score6) {\n            vfx_master_effect[27] = effect\n        } else if (region == vfxRegion.Score7) {\n            vfx_master_effect[28] = effect\n        } else if (region == vfxRegion.Score8) {\n            vfx_master_effect[29] = effect\n        } else if (region == vfxRegion.ScoreAll) {\n            for (let i = 26; i <= 33; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SockAll) {\n            for (let i = 0; i <= 7; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelInner) {\n            for (let i = 18; i <= 25; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelOuter) {\n            for (let i = 8; i <= 17; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelAll) {\n            for (let i=8; i <= 25; i++){ vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.CastleSayAll) {\n            for (let i = 0; i <= 33; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotA) {\n            for (let i = 8; i <= 11; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotB) {\n            for (let i = 6; i <= 7; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotC) {\n            for (let i = 12; i <= 13; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotD) {\n            for (let i = 4; i <= 5; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotE) {\n            for (let i = 14; i <= 15; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotF) {\n            for (let i = 2; i <= 3; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotG) {\n            for (let i = 16; i <= 17; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotH) {\n            for (let i = 0; i <= 1; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotI) {\n            for (let i = 18; i <= 19; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotAll) {\n            for (let i = 0; i <= 19; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.BrickWheel) {\n            vfx_master_effect[20] = effect\n            vfx_master_effect[27] = effect\n        } else if (region == vfxRegion.BrickBomb) {\n            vfx_master_effect[25] = effect\n        } else if (region == vfxRegion.BrickShell) {\n            vfx_master_effect[26] = effect\n        } else if (region == vfxRegion.BrickGhost) {\n            vfx_master_effect[24] = effect\n        } else if (region == vfxRegion.BrickDragon) {\n            for (let i = 22; i <= 23; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.BrickCannon) {\n            vfx_master_effect[21] = effect\n        } else if (region == vfxRegion.BrickAll) {\n            for (let i = 20; i <= 27; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongFront) {\n            for (let i = 28; i <= 29; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongBack) {\n            for (let i = 30; i <= 31; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongAll) {\n            for (let i = 28; i <=31; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.CastleDoAll) {\n            for (let i = 0; i < vfx_light_count; i++) { vfx_master_effect[i] = effect };\n        } \n    }\n\n    export enum vfxRegion{\n        Score1, Score2, Score3, Score4, Score5, Score6, Score7, Score8, ScoreAll,\n        SockAll,\n        WheelInner, WheelOuter, WheelAll,\n        KongFront, KongBack, KongAll,\n        BrickWheel, BrickBomb, BrickShell, BrickGhost, BrickDragon, BrickCannon, BrickAll,\n        SpotA, SpotB, SpotC, SpotD, SpotE, SpotF, SpotG, SpotH, SpotI, SpotAll,\n        CastleSayAll,\n        CastleDoAll\n    }\n\n/// END NEOPIXEL ///\n\n\n/// BEGIN SONAR ///\n\n    let sonarPinT = DigitalPin.P0\n    let sonarPinE = DigitalPin.P0\n\n    //% blockId=NL_SENSOR_SonarFirstRead\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"first distance from sonar at %pin1|%pin2\"\n    //% weight=101\n    export function SonarFirstRead(pin1: DigitalPin, pin2: DigitalPin): number {\n        sonarPinT = pin1\n        sonarPinE = pin2\n        pins.setPull(sonarPinT, PinPullMode.PullNone)\n        return SonarNextRead()\n    }\n\n    //% blockId=NL_SENSOR_SonarNextRead\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"next sonar distance\"\n    //% weight=100\n    export function SonarNextRead(): number {\n        pins.digitalWritePin(sonarPinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(sonarPinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(sonarPinT, 0)\n        return Math.floor(pins.pulseIn(sonarPinE, PulseValue.High, 25000) * 34 / 2000)\n    }\n\n/// END SONAR ///\n\n\n/// BEGIN MP3 ///\n\n    export enum playType { Play = 0x0D, Stop = 0x16, PlayNext = 0x01, PlayPrevious = 0x02, Pause = 0x0E }\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    let mp3musicPin: SerialPin\n    let mp3music = false\n    let mp3player = false\n    let mp3sfxPin: SerialPin\n    let mp3sfx = false\n    let mp3musicVol = 0\n    let mp3playerPin: SerialPin\n    let mp3playerVol = 0\n    let mp3sfxVol = 0\n    let isPot = false\n    let potPin = AnalogPin.P0\n    let masterVolume = 25\n\n    //% blockId=NL_SENSOR_TrimpotSet\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"set volume control pot at %aPin\"\n    export function potSet(aPin: AnalogPin): void {\n        potPin = aPin\n        isPot = true\n        masterVolume = potRead()\n    }\n\n    function potRead() {\n        if (isPot) { return Math.round(pins.map(pins.analogReadPin(potPin), 0, 1023, 0, 30)) }\n        else { return 5 }\n    }\n\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) { total += dataArr[i] }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) { myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i]) }\n        serial.writeBuffer(myBuff)\n        basic.pause(20) // Was 100; problematic at 10\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) { myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i]) }\n        serial.writeBuffer(myBuff)\n    }\n\n    //% blockId=NL_MP3_InitiateAs\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Ready MP3bit for %type at %sPin\"\n    //% dPin.fieldEditor=\"gridpicker\"\n    export function mp3setPorts(mp3bit: mp3type, sPin: SerialPin): void {\n        if (mp3bit == mp3type.music) {\n            mp3musicPin = sPin\n            mp3music = true\n            mp3musicVol = 100\n            setVolume(mp3type.music, mp3musicVol)\n        } else if (mp3bit == mp3type.player) {\n            mp3playerPin = sPin\n            mp3player = true\n            mp3playerVol = 100\n            setVolume(mp3type.player, mp3playerVol)\n        } else if (mp3bit == mp3type.sfxvoice) {\n            mp3sfxPin = sPin\n            mp3sfx = true\n            mp3sfxVol = 100\n            setVolume(mp3type.sfxvoice, mp3sfxVol)\n        }   \n    }\n\n    //% blockId=\"nl_playfilefolder\" \n    //% block=\"Play folder %folderNum file %fileNum on %sPin\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3fileFolder(folderNum: string, fileNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        dataArr[5] = parseInt(folderNum)\n        dataArr[6] = parseInt(fileNum)\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"NL_MP3_SendNumbers\" \n    //% block=\"Send numbers for folder %folderNum file %fileNum on %sPin\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3numbers(folderNum: number, fileNum: number, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        dataArr[3] = 15\n        dataArr[5] = folderNum\n        dataArr[6] = fileNum\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=NL_MP3_UpdateVolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Update volume for all\"\n    export function updateVolumeGlobal(): void {\n        let nowVol = potRead()\n        if (masterVolume != nowVol){\n            masterVolume = nowVol\n            setVolume(mp3type.music, mp3musicVol)\n            setVolume(mp3type.player, mp3playerVol)\n            setVolume(mp3type.sfxvoice, mp3sfxVol)\n        }\n    }\n\n    //% blockId=NL_MP3_SetVolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Set %mp3bit volume to %vol\"\n    export function setVolume(mp3bit:mp3type, vol:number): void {\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3musicVol = vol\n        } else if (mp3bit == mp3type.player) {\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3playerVol = vol\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3sfxVol = vol\n        }\n        dataArr[3] = 6\n        dataArr[5] = 0\n        dataArr[6] = Math.round(vol / 100 * masterVolume)\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=NL_MP3_GetVolumes\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Get current volumes\"\n    export function getVolumes() {\n        return \"m\" + mp3musicVol + \" p\" + mp3playerVol + \" s\" + mp3sfxVol + \" g\" + masterVolume\n    }\n\n    //% blockId=\"NL_MP3_StopPlayback\" \n    //% block=\"Stop playback on %mp3bit\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function stopPlayback(mp3bit:mp3type): void {\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        } else if (mp3bit == mp3type.player){\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        }\n        CMD = 0x16\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n/// END MP3 ///\n\n/// BEGIN SOUND BANK ///\n    export enum mp3type { music, player, sfxvoice }\n    export enum musicGenre { intro, tutorial, awaiting, level, won, lost }\n    export enum playerSaying { ready, yay, intro, nay, ouch, success, failure, won, lost, hurry }\n    export enum sfxType { correct, incorrect, ghost, fire, explosion, splash, spark, slash }\n    export enum voiceSaying { name, begin, retry, next, complete, gameover, welcome, intro, howto1, howto2, howto3, howto4, howto5, howto6, howto7, howto8, howto9 }\n    export enum magicianSaysSide { left, right }\n    export enum magicianDifficulty { easy, medium, hard }\n    export enum spotName { A, B, C, D, E, F, G, H, I }\n    export enum playerChar { mario, luigi, peach, daisy, toad, wario }\n\n    let sb_music_tutorial = feedBank(\"1.1.46|1.2.51|1.3.51|1.4.59|1.5.60|1.6.60|1.7.60|1.8.60|1.9.60|1.10.60|1.11.60|1.12.60|1.13.60|1.14.60|1.15.60|1.16.60|1.17.60|1.18.60|1.19.60|1.20.60|1.21.60\")\n    let sb_music_awaiting = feedBank(\"2.1.64|2.2.120|2.3.120|2.4.120|2.5.120|2.6.114|2.7.120|2.8.103|2.9.120|2.10.120|2.11.120|2.12.120|2.13.119|2.14.120|2.15.120|2.16.103|2.17.119|2.18.120|2.19.86|2.20.120\")\n    let sb_music_level = feedBank(\"3.1.120|3.2.120|3.3.120|3.4.120|3.5.120|3.6.120|3.7.120|3.8.120|3.9.120|3.10.92|3.11.120|3.12.120|3.13.111|3.14.116|3.15.98|3.16.120|3.17.120|3.18.82|3.19.120|3.20.120|3.21.120|3.22.120|3.23.120|3.24.120|3.25.120|3.26.120|3.27.91|3.28.120|3.29.120|3.30.41|3.31.120|3.32.120|3.33.120|3.34.94|3.35.120|3.36.120|3.37.120|3.38.120|3.39.120|3.40.120|3.41.78|3.42.120|3.43.120|3.44.120|3.45.120|3.46.120|3.47.120|3.48.120|3.49.120|3.50.120|3.51.120|3.52.113|3.53.120|3.54.120|3.55.42|3.56.120|3.57.120|3.58.120|3.59.114|3.60.120|3.61.120|3.62.118|3.63.120|3.64.120|3.65.120|3.66.120|3.67.120|3.68.59|3.69.120|3.70.120|3.71.118|3.72.120|3.73.120|3.74.70|3.75.120|3.76.120|3.77.120|3.78.120|3.79.120|3.80.120|3.81.120|3.82.120|3.83.80|3.84.120|3.85.120|3.86.120|3.87.120|3.88.107|3.89.120|3.90.120|3.91.120|3.92.120|3.93.36|3.94.120|3.95.120|3.96.120|3.97.120|3.98.120|3.99.120|3.100.63|3.101.120|3.102.120|3.103.112|3.104.105|3.105.120|3.106.110|3.107.120|3.108.120|3.109.120|3.110.120|3.111.120|3.112.120|3.113.120|3.114.120|3.115.120|3.116.119|3.117.120|3.118.120|3.119.120|3.120.120|3.121.120|3.122.120|3.123.120|3.124.120|3.125.120|3.126.104|3.127.120|3.128.87|3.129.120|3.130.118|3.131.120|3.132.120|3.133.50|3.134.109|3.135.120|3.136.120|3.137.120|3.138.91|3.139.120|3.140.120|3.141.120|3.142.120|3.143.120|3.144.120|3.145.104|3.146.112|3.147.120\")\n    let sb_music_won = feedBank(\"4.1.30|4.2.22|4.3.30|4.4.17|4.5.29|4.6.30|4.7.30|4.8.30|4.9.30|4.10.30|4.11.20|4.12.28|4.13.30|4.14.15|4.15.30|4.16.17|4.17.17|4.18.15|4.19.30|4.20.30|4.21.30|4.22.17|4.23.30|4.24.30|4.25.30\")\n    let sb_music_lost = feedBank(\"5.1.30|5.2.30|5.3.30|5.4.30|5.5.30|5.6.30|5.7.30|5.8.30|5.9.30|5.10.30|5.11.30\")\n    let sb_music_intro = feedBank(\"9.1.3|9.2.4|9.3.8|9.4.5|9.5.4|9.6.12|9.7.3|9.8.7|9.9.6|9.10.7|9.11.9|9.12.9|9.13.11|9.14.3|9.15.10|9.16.3|9.17.6|9.18.5|9.19.6|9.20.5|9.21.7|9.22.5|9.23.3|9.24.7|9.25.6|9.26.6|9.27.11|9.28.5|9.29.5|9.30.4|9.31.6|9.32.4|9.33.4|9.34.10|9.35.8|9.36.8|9.37.3|9.38.7|9.39.4|9.40.6|9.41.3|9.42.7|9.43.7|9.44.3|9.45.6|9.46.1|9.47.2|9.48.2|9.49.8|9.50.16|9.51.9|9.52.10|9.53.13|9.54.14|9.55.14|9.56.16|9.57.7|9.58.4|9.59.9|9.60.8|9.61.9|9.62.9|9.63.12|9.64.4|9.65.6|9.66.9|9.67.5|9.68.6|9.69.5|9.70.10|9.71.8|9.72.8|9.73.5|9.74.3\")\n    let sb_sfx_correct = feedBank(\"6.1.5|6.2.8|6.3.6|6.4.7|6.5.6|6.6.14|6.7.7|6.8.8|6.9.12|6.10.7|6.11.9|6.12.7|6.13.10|6.14.8|6.15.8|6.16.4|6.17.7|6.18.4|6.19.2|6.20.10|6.21.7|6.22.7|6.23.6|6.24.4|6.25.7|6.26.12|6.27.4|6.28.6|6.29.6|6.30.6|6.31.4|6.32.5|6.33.3|6.34.6|6.35.6|6.36.6|6.37.6|6.38.4|6.39.8|6.40.6|6.41.3|6.42.3|6.43.7|6.44.8|6.45.6|6.46.2|6.47.5|6.48.7|6.49.8|6.50.7|6.51.6|6.52.7|6.53.6|6.54.8|6.55.5|6.56.5|6.57.7|6.58.6|6.59.8|6.60.5|6.61.6|6.62.8|6.63.3|6.64.3|6.65.6|6.66.3|6.67.6|6.68.2|6.69.3|6.70.3|6.71.2|6.72.3|6.73.6|6.74.7|6.75.5|6.76.3|6.77.5|6.78.3|6.79.2|6.80.3|6.81.3|6.82.1|6.83.1|6.84.1|6.85.1|6.86.1|6.87.1|6.88.3|6.89.1|6.90.1|6.91.4|6.92.4\")\n    let sb_sfx_incorrect = feedBank(\"7.1.6|7.2.5|7.3.3|7.4.5|7.5.7|7.6.6|7.7.4|7.8.1|7.9.3|7.10.4|7.11.3|7.12.3|7.13.6|7.14.3|7.15.1|7.16.1|7.17.1|7.18.1|7.19.5|7.20.4|7.21.3|7.22.7\")\n    let sb_sfx_beep = feedBank(\"8.1.1|8.2.2|8.3.1\")\n    let sb_sfx_smash = feedBank(\"8.4.1|8.5.1|8.6.1|8.7.3\")\n    let sb_sfx_falling = feedBank(\"8.8.6\")\n    let sb_sfx_boom = feedBank(\"8.9.1|8.10.2|8.11.3|8.12.2\")\n    let sb_sfx_cannon = feedBank(\"8.13.2|8.14.1|8.15.1|8.16.2|8.17.2\")\n    let sb_sfx_fire = feedBank(\"8.18.2|8.19.2|8.20.5|8.21.2\")\n    let sb_sfx_ghost = feedBank(\"8.22.5|8.23.4|8.24.5|8.25.5\")\n    let sb_sfx_hit = feedBank(\"8.26.1|8.27.1|8.28.1|8.29.1|8.30.1\")\n    let sb_sfx_slash = feedBank(\"8.31.1|8.32.1|8.33.1|8.34.1|8.35.1|8.36.1|8.37.1|8.38.1|8.39.1|8.40.1|8.41.1|8.42.2\")\n    let sb_sfx_zap = feedBank(\"8.43.1|8.44.1|8.45.2|8.46.1|8.47.2|8.48.1\")\n    let sb_sfx_splash = feedBank(\"8.49.2|8.50.2|8.51.1|8.52.1|8.53.2|8.54.1|8.55.2|8.56.1|8.57.2\")\n    let sb_sfx_voice = feedBank(\"10.1.4|10.2.6|10.3.4|10.4.4|10.5.6|10.6.4|10.7.11|10.8.6|10.9.4|10.10.1\")\n    let sb_magician_left_easy = feedBank(\"11.1.3|11.2.6|11.3.7|11.4.6|11.5.6|11.6.7|11.7.6|11.8.6|11.9.6|11.10.7|11.11.6|11.12.6|11.13.7|11.14.6|11.15.6|11.16.6|11.17.6|11.18.6|11.19.6|11.20.6|11.21.6|11.22.7|11.23.6|11.24.6|11.25.6|11.26.6|11.27.7|11.28.7|11.29.7|11.30.6|11.31.6|11.32.8|11.33.7|11.34.6|11.35.7|11.36.5|11.37.6|11.38.8|11.39.6|11.40.6|11.41.6|11.42.6|11.43.6|11.44.7|11.45.6|11.46.7|11.47.7|11.48.8|11.49.6|11.50.7|11.51.6|11.52.6|11.53.7|11.54.8|11.55.7|11.56.6|11.57.7|11.58.6|11.59.6|11.60.6|11.61.6\")\n    let sb_magician_left_medium = feedBank(\"11.62.7|11.63.6|11.64.6|11.65.8|11.66.7|11.67.8|11.68.8|11.69.8|11.70.7|11.71.7|11.72.6|11.73.6|11.74.6|11.75.6|11.76.6|11.77.7|11.78.6|11.79.7|11.80.6|11.81.6|11.82.6|11.83.7|11.84.6|11.85.6|11.86.6|11.87.7|11.88.6|11.89.6|11.90.7|11.91.6|11.92.6|11.93.6|11.94.6|11.95.6|11.96.7|11.97.6|11.98.6|11.99.7|11.100.6|11.101.6|11.102.6|11.103.7|11.104.6|11.105.8|11.106.6|11.107.6|11.108.6|11.109.7|11.110.6|11.111.7|11.112.7|11.113.6|11.114.6|11.115.7|11.116.6|11.117.7|11.118.7|11.119.6|11.120.6|11.121.6|11.122.7|11.123.7|11.124.6|11.125.6|11.126.6|11.127.8|11.128.7|11.129.6|11.130.8|11.131.7|11.132.6|11.133.7|11.134.6|11.135.6|11.136.7|11.137.7\")\n    let sb_magician_left_hard = feedBank(\"11.219.7|11.220.6|11.221.6|11.222.6|11.223.6|11.224.6|11.225.7|11.226.7|11.227.6|11.228.6|11.229.6|11.230.8|11.231.7|11.232.7|11.233.6|11.234.6|11.235.6|11.236.8|11.237.7|11.238.7|11.239.6|11.240.6|11.241.8|11.242.7|11.243.7|11.244.6|11.245.6|11.246.7|11.247.7|11.248.7|11.249.7|11.250.6|11.251.6|11.252.6|11.253.6|11.254.6|11.255.6|11.256.6|11.257.6|11.258.7|11.259.7|11.260.7|11.261.6|11.262.6|11.263.6|11.264.6|11.265.6|11.266.6|11.267.7|11.268.6|11.269.6|11.270.6|11.271.6|11.272.6|11.273.6|11.274.6|11.275.7|11.276.6|11.277.6|11.278.7|11.279.7|11.280.7|11.281.6|11.282.6|11.283.7|11.284.9|11.285.7|11.286.6|11.287.6|11.288.6|11.289.7|11.290.7|11.291.6|11.292.6|11.293.7|11.294.7|11.295.6|11.296.7|11.297.6|11.298.6|11.299.6|11.300.6|11.301.6|11.302.6|11.303.7|11.304.6|11.305.6|11.306.7|11.307.6|\")\n    let sb_magician_right_easy = feedBank(\"11.159.6|11.160.6|11.161.7|11.162.6|11.163.7|11.164.7|11.165.6|11.166.6|11.167.7|11.168.7|11.169.6|11.170.8|11.171.7|11.172.7|11.173.6|11.174.6|11.175.6|11.176.6|11.177.7|11.178.6|11.179.6|11.180.6|11.181.6|11.182.7|11.183.6|11.184.6|11.185.6|11.186.6|11.187.8|11.188.7|11.189.6|11.190.6|11.191.6|11.192.6|11.193.6|11.194.6|11.195.5|11.196.6|11.197.6|11.198.6|11.199.7|11.200.6|11.201.6|11.202.6|11.203.6|11.204.6|11.205.6|11.206.6|11.207.6|11.208.6|11.209.6|11.210.7|11.211.7|11.212.7|11.213.6|11.214.7|11.215.7|11.216.6|11.217.7|11.218.6\")\n    let sb_magician_right_medium = feedBank(\"11.219.7|11.220.6|11.221.6|11.222.6|11.223.6|11.224.6|11.225.7|11.226.7|11.227.6|11.228.6|11.229.6|11.230.8|11.231.7|11.232.7|11.233.6|11.234.6|11.235.6|11.236.8|11.237.7|11.238.7|11.239.6|11.240.6|11.241.8|11.242.7|11.243.7|11.244.6|11.245.6|11.246.7|11.247.7|11.248.7|11.249.7|11.250.6|11.251.6|11.252.6|11.253.6|11.254.6|11.255.6|11.256.6|11.257.6|11.258.7|11.259.7|11.260.7|11.261.6|11.262.6|11.263.6|11.264.6|11.265.6|11.266.6|11.267.7|11.268.6|11.269.6|11.270.6|11.271.6|11.272.6|11.273.6|11.274.6|11.275.7|11.276.6|11.277.6|11.278.7|11.279.7|11.280.7|11.281.6|11.282.6|11.283.7|11.284.9|11.285.7|11.286.6|11.287.6\")\n    let sb_magician_right_hard = feedBank(\"11.288.6|11.289.7|11.290.7|11.291.6|11.292.6|11.293.7|11.294.7|11.295.6|11.296.7|11.297.6|11.298.6|11.299.6|11.300.6|11.301.6|11.302.6|11.303.7|11.304.6|11.305.6|11.306.7|11.307.6|11.308.7|11.309.6|11.310.6|11.311.6|11.312.7|11.313.7|11.314.6|11.315.7\")\n    let sb_mario_name = feedBank(\"12.1.2|12.2.1|12.4.2|12.5.3\")\n    let sb_mario_intro = feedBank(\"12.3.4|12.6.2|12.7.212.112.1|12.113.1|\")\n    let sb_mario_ready = feedBank(\"12.8.1|12.9.2|12.10.2|12.11.1|12.12.1|12.13.2|12.14.2|12.15.2|12.16.2|12.17.2|12.18.1\")\n    let sb_mario_yay = feedBank(\"12.19.1|12.20.1|12.21.1|12.22.1|12.23.1|12.24.1|12.25.1|12.26.1|12.27.1|12.28.1|12.29.1|12.30.1|12.31.1|12.32.1|12.33.1|12.34.1|12.35.1|12.36.1|12.37.1|12.38.1|12.39.1|12.40.1|12.41.1|12.42.1|12.43.1|12.44.1|12.45.1|12.46.1|12.47.1|12.48.1|12.49.1|12.50.1|12.51.2|12.52.2|12.53.2|12.54.2|12.55.2|12.56.2|12.57.2|12.58.2|12.59.2|12.60.2|12.61.2|12.62.2\")\n    let sb_mario_success = feedBank(\"12.63.1|12.64.2|12.65.2|12.66.2|12.67.2|12.68.3|12.69.3|12.70.3|12.71.3|12.72.3\")\n    let sb_mario_won = feedBank(\"12.73.2|12.74.2|12.75.3|12.76.3|12.77.3\")\n    let sb_mario_ouch = feedBank(\"12.78.1|12.79.1|12.80.1|12.81.1|12.82.1|12.83.1|12.84.1|12.85.1|12.86.1|12.87.1|12.88.1|12.89.1|12.90.1|12.91.1|12.92.1|12.93.1|12.94.1|12.95.1\")\n    let sb_mario_nay = feedBank(\"12.96.1|12.97.1|12.98.1|12.99.1|12.100.1|12.101.1|12.102.2|12.103.1|12.104.1|12.105.1|12.106.1|12.107.1|12.108.1|12.109.1|12.110.2|12.111.2\")\n    let sb_mario_failure = feedBank(\"12.114.2|12.115.2|12.116.2|12.117.1\")\n    let sb_mario_lost = feedBank(\"12.118.3|12.119.3|12.120.4|12.121.1\")\n    let sb_mario_hurry = feedBank(\"12.122.44\")\n    \n    let playlist_tutorial = makePlaylist(sb_music_tutorial)\n    let playlist_awaiting = makePlaylist(sb_music_awaiting)\n    let playlist_level = makePlaylist(sb_music_level)\n    let playlist_won = makePlaylist(sb_music_won)\n    let playlist_lost = makePlaylist(sb_music_lost)\n    let playlist_correct = makePlaylist(sb_sfx_correct)\n    let playlist_incorrect = makePlaylist(sb_sfx_incorrect)\n    let playlist_intro = makePlaylist(sb_music_intro)\n    let playlist_boom = makePlaylist(sb_sfx_boom)\n    let playlist_smash = makePlaylist(sb_sfx_smash)\n    let playlist_falling = makePlaylist(sb_sfx_falling)\n    let playlist_cannon = makePlaylist(sb_sfx_cannon)\n    let playlist_fire = makePlaylist(sb_sfx_fire)\n    let playlist_ghost = makePlaylist(sb_sfx_ghost)\n    let playlist_hit = makePlaylist(sb_sfx_hit)\n    let playlist_slash = makePlaylist(sb_sfx_slash)\n    let playlist_zap = makePlaylist(sb_sfx_zap)\n    let playlist_splash = makePlaylist(sb_sfx_splash)\n    let playlist_magician_left_easy = makePlaylist(sb_magician_left_easy)\n    let playlist_magician_left_medium = makePlaylist(sb_magician_left_medium)\n    let playlist_magician_left_hard = makePlaylist(sb_magician_left_hard)\n    let playlist_magician_right_easy = makePlaylist(sb_magician_right_easy)\n    let playlist_magician_right_medium = makePlaylist(sb_magician_right_medium)\n    let playlist_magician_right_hard = makePlaylist(sb_magician_right_hard)\n    let playlist_mario_name = makePlaylist(sb_mario_name)\n    let playlist_mario_intro = makePlaylist(sb_mario_intro)\n    let playlist_mario_ready = makePlaylist(sb_mario_ready)\n    let playlist_mario_yay = makePlaylist(sb_mario_yay)\n    let playlist_mario_success = makePlaylist(sb_mario_success)\n    let playlist_mario_won = makePlaylist(sb_mario_won)\n    let playlist_mario_ouch = makePlaylist(sb_mario_ouch)\n    let playlist_mario_nay = makePlaylist(sb_mario_nay)\n    let playlist_mario_failure = makePlaylist(sb_mario_failure)\n    let playlist_mario_lost = makePlaylist(sb_mario_lost)\n    let playlist_mario_hurry = makePlaylist(sb_mario_hurry)\n    let playtimeMusic = 0\n    let playtimePlayer = 0\n    let playtimeSfxVoice = 0\n\n    function takeRotate(PlaylistIn: number[]) {\n        let returnTrack = PlaylistIn.shift()\n        PlaylistIn.push(returnTrack)\n        return returnTrack\n    }\n    function feedBank(BankString: string) {\n        let returnBank: number[][] = []\n        let BankSplit = BankString.split(\"|\")\n        for (let soundString of BankSplit) {\n            returnBank.push([parseFloat(soundString.split(\".\")[0]), parseFloat(soundString.split(\".\")[1]), parseFloat(soundString.split(\".\")[2])])\n        }\n        return returnBank\n    }\n    function makePlaylist(SoundBank: any[]) {\n        let returnList: number[] = []\n        let orderedList: number[] = []\n        for (let soundNo = 0; soundNo <= SoundBank.length - 1; soundNo++) {\n            orderedList.push(soundNo)\n        }\n        while (orderedList.length > 0) {\n            let randTrack = randint(0, orderedList.length - 1)\n            returnList.push(orderedList.removeAt(randTrack))\n        }\n        return returnList\n    }\n    function bankPlay(mp3bit:mp3type, SoundBank: number[][], trackIndex: number) {\n        let theSong = SoundBank[trackIndex]\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimeMusic = theSong[2]\n        } else if (mp3bit == mp3type.player) {\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimePlayer = theSong[2]\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimeSfxVoice = theSong[2]\n        }\n        dataArr[3] = 15\n        dataArr[5] = theSong[0]\n        dataArr[6] = theSong[1]\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=NL_MP3_PlaytimeMusic\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of music\"\n    export function mp3durationMusic(): number{\n        return playtimeMusic\n    }\n\n    //% blockId=NL_MP3_PlaytimePlayer\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of player sound\"\n    export function mp3durationPlayer(): number {\n        return playtimePlayer\n    }\n\n    //% blockId=NL_MP3_PlaytimeSFX\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of sfx/voice\"\n    export function mp3durationSfxVoice(): number {\n        return playtimeSfxVoice\n    }\n\n\n\n    //% blockId=NL_MP3_MusicPlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %genre music\"\n    export function mp3musicPlay(genre: musicGenre): void {\n        if (genre == musicGenre.tutorial){\n            bankPlay(mp3type.music, sb_music_tutorial, takeRotate(playlist_tutorial))\n        } else if (genre == musicGenre.awaiting) {\n            bankPlay(mp3type.music, sb_music_awaiting, takeRotate(playlist_awaiting))\n        } else if (genre == musicGenre.intro){\n            bankPlay(mp3type.music, sb_music_intro, takeRotate(playlist_intro))\n        } else if (genre == musicGenre.level) {\n            bankPlay(mp3type.music, sb_music_level, takeRotate(playlist_level))\n        } else if (genre == musicGenre.won) {\n            bankPlay(mp3type.music, sb_music_won, takeRotate(playlist_won))\n        } else if (genre == musicGenre.lost) {\n            bankPlay(mp3type.music, sb_music_lost, takeRotate(playlist_lost))\n        }\n    }\n\n    //% blockId=NL_MP3_PlayerSay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %saying as player\"\n    export function mp3sayPlay(saying: playerSaying): void {\n        if(saying == playerSaying.ready){\n            bankPlay(mp3type.player, sb_mario_ready, takeRotate(playlist_mario_ready))\n        }else if (saying == playerSaying.yay){\n            bankPlay(mp3type.player, sb_mario_yay, takeRotate(playlist_mario_yay))\n        } else if (saying == playerSaying.intro) {\n            bankPlay(mp3type.player, sb_mario_intro, takeRotate(playlist_mario_intro))\n        } else if (saying == playerSaying.nay) {\n            bankPlay(mp3type.player, sb_mario_nay, takeRotate(playlist_mario_nay))\n        } else if (saying == playerSaying.ouch) {\n            bankPlay(mp3type.player, sb_mario_ouch, takeRotate(playlist_mario_ouch))\n        } else if (saying == playerSaying.success) {\n            bankPlay(mp3type.player, sb_mario_success, takeRotate(playlist_mario_success))\n        } else if (saying == playerSaying.failure) {\n            bankPlay(mp3type.player, sb_mario_failure, takeRotate(playlist_mario_failure))\n        } else if (saying == playerSaying.won) {\n            bankPlay(mp3type.player, sb_mario_won, takeRotate(playlist_mario_won))\n        } else if (saying == playerSaying.lost) {\n            bankPlay(mp3type.player, sb_mario_lost, takeRotate(playlist_mario_lost))\n        } else if (saying == playerSaying.hurry) {\n            bankPlay(mp3type.player, sb_mario_hurry, takeRotate(playlist_mario_hurry))\n        }\n    }\n\n    //% blockId=NL_MP3_VoicePlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %voice as voice\"\n    export function mp3voicePlay(voice: voiceSaying): void {\n        if (voice == voiceSaying.name) {\n\n        } else if (voice == voiceSaying.begin) {\n\n        } else if (voice == voiceSaying.retry) {\n\n        } else if (voice == voiceSaying.next) {\n\n        } else if (voice == voiceSaying.complete) {\n\n        } else if (voice == voiceSaying.gameover) {\n\n        } else if (voice == voiceSaying.welcome) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 0)\n        } else if (voice == voiceSaying.intro) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 1)\n        } else if (voice == voiceSaying.howto1) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 2)\n        } else if (voice == voiceSaying.howto2) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 3)\n        } else if (voice == voiceSaying.howto3) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 4)\n        } else if (voice == voiceSaying.howto4) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 5)\n        } else if (voice == voiceSaying.howto5) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 6)\n        } else if (voice == voiceSaying.howto6) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 7)\n        } else if (voice == voiceSaying.howto7) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 8)\n        } else if (voice == voiceSaying.howto8) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 9)\n        } else if (voice == voiceSaying.howto9) {\n\n        }\n    }\n\n    //% blockId=NL_MP3_MagicianSay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Magician says on the %side difficulty %difficulty\"\n    export function mp3magician(side: magicianSaysSide, difficulty: magicianDifficulty): void {\n        if (side == magicianSaysSide.left) {\n            if (difficulty == magicianDifficulty.easy) {\n\n            } else if (difficulty = magicianDifficulty.medium) {\n\n            } else if (difficulty = magicianDifficulty.hard) {\n\n            }\n        } else if (side = magicianSaysSide.right) {\n            if (difficulty == magicianDifficulty.easy) {\n\n            } else if (difficulty = magicianDifficulty.medium) {\n\n            } else if (difficulty = magicianDifficulty.hard) {\n\n            }\n        } \n    }\n\n    //% blockId=NL_MP3_SfxPlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %sfx sound effect\"\n    export function mp3sfxPlay(sfx: sfxType): void {\n        if(sfx == sfxType.correct){\n            bankPlay(mp3type.sfxvoice, sb_sfx_correct, takeRotate(playlist_correct))\n        }else if (sfx == sfxType.incorrect){\n            bankPlay(mp3type.sfxvoice, sb_sfx_incorrect, takeRotate(playlist_incorrect))\n        }else if (sfx == sfxType.ghost){\n            bankPlay(mp3type.sfxvoice, sb_sfx_ghost, takeRotate(playlist_ghost))\n        }else if (sfx == sfxType.fire){\n            bankPlay(mp3type.sfxvoice, sb_sfx_fire, takeRotate(playlist_fire))\n        }else if (sfx == sfxType.explosion){\n            bankPlay(mp3type.sfxvoice, sb_sfx_boom, takeRotate(playlist_boom))\n        }else if (sfx == sfxType.splash){\n            bankPlay(mp3type.sfxvoice, sb_sfx_splash, takeRotate(playlist_splash))\n        } else if (sfx == sfxType.spark) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_zap, takeRotate(playlist_zap))\n        } else if (sfx == sfxType.slash) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_slash, takeRotate(playlist_slash))\n        }\n    }\n/// END SOUND BANK ///\n\n/// BEGIN MOTOR & RELAY ///\n    const kong_address = 0x10\n    export enum MotorList { M1=1, M2=2 }\n    export enum motors{ redrack=16, shark=4, ghost=5, cannon=8, oarrack=7, shell=6, door=3, dragon=9, wheel=1, fan=2 }\n    export enum motorState { min, max, mid, off }\n    export enum fogLevels { none = 0, light = 1, medium = 2, heavy = 3 }\n    export enum sockState { dancing = 1, still = 0 }\n    let motor_wheel_max = 12; let motor_wheel_min = 0\n    let servo_redrack_max = 150; let servo_redrack_min = 100\n    let servo_cannon_min = 135; let servo_cannon_max = 65\n    let servo_shark_min = 20; let servo_shark_max = 85\n    let servo_oarrack_min = 60; let servo_oarrack_max = 110\n    let servo_ghost_min = 110; let servo_ghost_max = 40\n    let servo_shell_min = 170; let servo_shell_max = 100\n    let servo_door_min = 50; let servo_door_max = 140; let servo_door_mid = 100\n    let motor_fan_min = 0; let motor_fan_mid = 50; let motor_fan_max = 100\n    let servo_dragon_min = 90; let servo_dragon_max = 79\n\n    export function servoSet(servo: motors, angle: number): void {\n        let buf = pins.createBuffer(4);\n        buf[0] = servo;\n        buf[1] = angle;\n        buf[2] = 0;\n        buf[3] = 0;\n        pins.i2cWriteBuffer(kong_address, buf);\n    }\n\n    export function motorSpeed(motor: MotorList, speed: number): void {\n        let buf = pins.createBuffer(4);\n        buf[0] = motor\n        buf[1] = 1;\n        if (speed < 0) {\n            buf[1] = 2;\n            speed = speed * -1\n        }\n        buf[2] = speed;\n        buf[3] = 0;\n        pins.i2cWriteBuffer(kong_address, buf);\n    }\n\n    //% blockId=NL_MOTOR_Set \n    //% block=\"Set %motor to %state\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function motorSet(motor:motors, state:motorState):void{\n        if (motor == motors.redrack){\n            if (state == motorState.min){ servoSet(motor, servo_redrack_min) } \n            else if (state == motorState.max){ servoSet(motor, servo_redrack_max) }\n        } if (motor == motors.shark) {\n            if (state == motorState.min) { servoSet(motor, servo_shark_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_shark_max) }\n        } if (motor == motors.ghost) {\n            if (state == motorState.min) { servoSet(motor, servo_ghost_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_ghost_max) }\n        } if (motor == motors.cannon) {\n            if (state == motorState.min) { servoSet(motor, servo_cannon_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_cannon_max) }\n        } if (motor == motors.oarrack) {\n            if (state == motorState.min) { servoSet(motor, servo_oarrack_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_oarrack_max) }\n        } if (motor == motors.shell) {\n            if (state == motorState.min) { servoSet(motor, servo_shell_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_shell_max) }\n        } if (motor == motors.door) {\n            if (state == motorState.min) { servoSet(motor, servo_door_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_door_max) }\n            else if (state == motorState.mid) { servoSet(motor, servo_door_mid) }\n        } if (motor == motors.dragon) {\n            if (state == motorState.min) { servoSet(motor, servo_dragon_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_dragon_max) }\n        } if (motor == motors.wheel) {\n            if (state == motorState.min) { motorSpeed(MotorList.M1, motor_wheel_min) }\n            else if (state == motorState.max) { motorSpeed(MotorList.M1, motor_wheel_max) }\n            else if (state == motorState.off) { motorSpeed(MotorList.M1, 0) }\n        } if (motor == motors.fan) {\n            if (state == motorState.min) { motorSpeed(MotorList.M2, motor_fan_min) }\n            else if (state == motorState.mid) { motorSpeed(MotorList.M2, motor_fan_mid) }\n            else if (state == motorState.max) { motorSpeed(MotorList.M2, motor_fan_max) }\n            else if (state == motorState.off) { motorSpeed(MotorList.M2, 0) }\n        }\n    }\n\n    //% blockId=NL_RELAY_FogSet \n    //% block=\"set fog level to %level\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function setFog(fog:fogLevels):void{\n        if (fog == fogLevels.none){\n            pins.digitalWritePin(DigitalPin.P2, 1)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 1)\n        } else if (fog == fogLevels.light){\n            pins.digitalWritePin(DigitalPin.P2, 1)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        } else if (fog == fogLevels.medium) {\n            pins.digitalWritePin(DigitalPin.P2, 0)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        } else if (fog == fogLevels.heavy) {\n            pins.digitalWritePin(DigitalPin.P2, 0)\n            pins.digitalWritePin(DigitalPin.P8, 0)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        }\n    }\n\n    //% blockId=NL_RELAY_SockSet\n    //% block=\"set dancing sock to %sockState\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function setSock(state: sockState): void {\n        if(state==sockState.dancing){ pins.digitalWritePin(DigitalPin.P12, 0) }\n        else{ pins.digitalWritePin(DigitalPin.P12, 1) }\n    }\n\n/// END MOTOR & RELAY ///\n\n/// BEGIN OLED\n\n    let d1 = [0, 0, 0, 20, 36, 35, 54, 0, 28, 65, 8, 8, 160, 8, 96, 32, 62, 0, 98, 34, 24, 39, 60, 1, 54, 6, 0, 0, 8, 20, 65, 2, 50, 126, 127, 62, 127, 127, 127, 62, 127, 65, 32, 127, 127, 127, 127, 62, 127, 62, 127, 38, 1, 63, 31, 63, 99, 3, 97, 127, 2, 65, 4, 128, 1, 32, 127, 56, 56, 56, 8, 24, 127, 0, 128, 127, 65, 124, 124, 56, 252, 24, 0, 72, 4, 60, 28, 60, 68, 28, 68, 8, 0, 65, 2]\n    let d2 = [0, 95, 7, 127, 42, 19, 73, 5, 34, 34, 42, 8, 96, 8, 96, 16, 81, 66, 81, 65, 20, 69, 74, 113, 73, 73, 54, 172, 20, 20, 34, 1, 73, 9, 73, 65, 65, 73, 9, 65, 8, 127, 64, 8, 64, 2, 4, 65, 9, 65, 9, 73, 1, 64, 32, 64, 20, 4, 81, 65, 4, 65, 2, 128, 2, 84, 72, 68, 68, 84, 126, 164, 8, 125, 132, 16, 127, 4, 8, 68, 36, 36, 124, 84, 127, 64, 32, 64, 40, 160, 100, 54, 127, 54, 1]\n    let d3 = [0, 0, 0, 20, 127, 8, 85, 3, 65, 28, 28, 62, 0, 8, 0, 8, 73, 127, 73, 73, 18, 69, 73, 9, 73, 73, 54, 108, 34, 20, 20, 81, 121, 9, 73, 65, 65, 73, 9, 65, 8, 65, 65, 20, 64, 12, 8, 65, 9, 81, 25, 73, 127, 64, 64, 56, 8, 120, 73, 65, 8, 127, 1, 128, 4, 84, 68, 68, 68, 84, 9, 164, 4, 0, 125, 40, 64, 24, 4, 68, 36, 36, 8, 84, 68, 64, 64, 48, 16, 160, 84, 65, 0, 8, 1]\n    let d4 = [0, 0, 7, 127, 42, 100, 34, 0, 0, 0, 42, 8, 0, 8, 0, 4, 69, 64, 73, 73, 127, 69, 73, 5, 73, 41, 0, 0, 65, 20, 8, 9, 65, 9, 73, 65, 34, 73, 9, 81, 8, 0, 63, 34, 64, 2, 16, 65, 9, 33, 41, 73, 1, 64, 32, 64, 20, 4, 69, 0, 16, 0, 2, 128, 0, 84, 68, 40, 72, 84, 2, 164, 4, 0, 0, 68, 0, 4, 124, 56, 24, 252, 4, 36, 0, 124, 32, 64, 40, 124, 76, 0, 0, 0, 2]\n    let d5 = [0, 0, 0, 20, 18, 98, 80, 0, 0, 0, 8, 8, 0, 8, 0, 2, 62, 0, 70, 54, 16, 57, 48, 3, 54, 30, 0, 0, 0, 20, 0, 6, 62, 126, 54, 34, 28, 65, 1, 114, 127, 0, 1, 65, 64, 127, 127, 62, 6, 94, 70, 50, 1, 63, 31, 63, 99, 3, 67, 0, 32, 0, 4, 128, 0, 120, 56, 0, 127, 24, 0, 124, 120, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 28, 60, 68, 0, 68, 0, 0, 0, 1]\n\n    let display = [\" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\")]\n    let desired = [\" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\")]\n\n    //% blockId=NL_OLED_Update3\n    //% block=\"oled update from buffer\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function changeThree(): void{\n        let updated: string[][] = []\n        let count = 0\n        for (let row=0; row<8; row++){\n            for(let col=0; col<16; col++){\n                let refChar = desired[row][col]\n                if (refChar != display[row][col]){\n                    writeChar(refChar,row,col)\n                    display[row][col] = refChar\n                    count++\n                    if (count >= 3){\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    //% blockId=NL_OLED_PrintLine\n    //% block=\"print %text to oled buffer line %line\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function printLine(text:any, line:number): void{\n        let thisText = text + \"\"\n        for (let i = 0; i < 16; i++){\n            if (i < thisText.length){\n                desired[line][i]=thisText.charAt(i)\n            } else{\n                desired[line][i]=\" \"\n            }\n        }\n    }\n\n    function oledcmd(c: number) {\n        pins.i2cWriteNumber(0x3c, c, NumberFormat.UInt16BE);\n    }\n\n    function setText(row: number, column: number) {\n        oledcmd(0xB0 + row);            //set page address\n        oledcmd(0x00 + (8 * column & 0x0F));  //set column lower address\n        oledcmd(0x10 + ((8 * column >> 4) & 0x0F));   //set column higher address\n    }\n\n    //% blockId=NL_OLED_Init \n    //% block=\"initiate the oled screen\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function oledinit(): void {\n        oledcmd(0xAE);  // Set display OFF\n        oledcmd(0xD5);  // Set Display Clock Divide Ratio / OSC Frequency 0xD4\n        oledcmd(0x80);  // Display Clock Divide Ratio / OSC Frequency \n        oledcmd(0xA8);  // Set Multiplex Ratio\n        oledcmd(0x3F);  // Multiplex Ratio for 128x64 (64-1)\n        oledcmd(0xD3);  // Set Display Offset\n        oledcmd(0x00);  // Display Offset\n        oledcmd(0x40);  // Set Display Start Line\n        oledcmd(0x8D);  // Set Charge Pump\n        oledcmd(0x14);  // Charge Pump (0x10 External, 0x14 Internal DC/DC)\n        oledcmd(0xA1);  // Set Segment Re-Map\n        oledcmd(0xC8);  // Set Com Output Scan Direction\n        oledcmd(0xDA);  // Set COM Hardware Configuration\n        oledcmd(0x12);  // COM Hardware Configuration\n        oledcmd(0x81);  // Set Contrast\n        oledcmd(0xCF);  // Contrast\n        oledcmd(0xD9);  // Set Pre-Charge Period\n        oledcmd(0xF1);  // Set Pre-Charge Period (0x22 External, 0xF1 Internal)\n        oledcmd(0xDB);  // Set VCOMH Deselect Level\n        oledcmd(0x40);  // VCOMH Deselect Level\n        oledcmd(0xA4);  // Set all pixels OFF\n        oledcmd(0xA6);  // Set display not inverted\n        oledcmd(0xAF);  // Set display On\n        for (let j = 0; j < 8; j++) {\n            setText(j, 0);\n            {\n                for (let i = 0; i < 16; i++)  //clear all columns\n                {\n                    writeChar(\" \",j,i)\n                }\n            }\n        }\n    }\n\n    function writeChar(char: string, row: number, column: number) {\n        setText(row, column)\n        let i = char.charCodeAt(0) - 32\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d1[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d2[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d3[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d4[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d5[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n    }\n\n/// END OLED\n\n\n/// BEGIN DIGITS\n\n    let _SEGMENTS = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71];\n\n    //% blockId=nl_digits_create block=\"4-Digit cPin %cPin dPin %dPin\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function tm1637Create(cPin: DigitalPin, dPin: DigitalPin): TM1637LEDs {\n        let display = new TM1637LEDs();\n        display.clk = cPin\n        display.dio = dPin\n        display.brightness = 7;\n        display.init();\n        return display;\n    }\n    export class TM1637LEDs {\n        buf: Buffer;\n        clk: DigitalPin;\n        dio: DigitalPin;\n        _ON: number;\n        brightness: number;\n        init(): void {\n            pins.digitalWritePin(this.clk, 0);\n            pins.digitalWritePin(this.dio, 0);\n            this._ON = 8;\n            this.buf = pins.createBuffer(4);\n            this.clear();\n        }\n        _start() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _stop() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.dio, 1);\n        }\n        _write_data_cmd() {\n            this._start();\n            this._write_byte(0x40);\n            this._stop();\n        }\n        _write_dsp_ctrl() {\n            this._start();\n            this._write_byte(0x80 | this._ON | this.brightness);\n            this._stop();\n        }\n        _write_byte(b: number) {\n            for (let i = 0; i < 8; i++) {\n                pins.digitalWritePin(this.dio, (b >> i) & 1);\n                pins.digitalWritePin(this.clk, 1);\n                pins.digitalWritePin(this.clk, 0);\n            }\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _intensity(val: number = 7) {\n            this._ON = 8;\n            this.brightness = val - 1;\n            this._write_data_cmd();\n            this._write_dsp_ctrl();\n        }\n        _dat(bit: number, dat: number) {\n            this._write_data_cmd();\n            this._start();\n            this._write_byte(0xC0 | (bit % 4))\n            this._write_byte(dat);\n            this._stop();\n            this._write_dsp_ctrl();\n        }\n        \n        //% blockId=nl_digits_digit block=\"%display|show single number|%num|at digit|%bit\"\n        //% subcategory=\"Display\" group=\"Display\"\n        //% bit.defl=1 bit.min=0 bit.max=9\n        showbit(num: number = 5, bit: number = 0) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            this.buf[bit % 4] = _SEGMENTS[num % 16]\n            this._dat(bit, _SEGMENTS[num % 16])\n        }\n\n        //% blockId=nl_digits_number block=\"%display|show number|%num\"\n        //% subcategory=\"Display\" group=\"Display\"\n        showNumber(num: number) {\n            if (num < 0) {\n                num = -num\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n                this._dat(0, 0x40) // '-'\n                // this._dat(0, 0) // blank\n            }\n            else {\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n            }\n        }\n\n        //% blockId=\"nl_digits_clear\" block=\"clear display %display\"\n        //% subcategory=\"Display\" group=\"Display\"\n        clear() {\n            for (let i = 0; i < 4; i++) {\n                this._dat(i, 0)\n                this.buf[i] = 0\n            }\n        }\n    }\n\n/// END DIGITS\n\n}\n\n\n","pxt.json":"{\n    \"name\": \"NotLegosMaster\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"displaySendBuffer.asm\",\n        \"planetxbasic.ts\",\n        \"notlegos.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"7.0.42\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n","test.ts":""}},{"timestamp":1728781641086,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</variable><variable id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</variable><variable id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</variable><variable id=\"SRvF%Vl7CRHE66Kr9~Q[\">lastLaserR</variable><variable id=\"%FT#@+cF!r3!,1uelm~,\">lastLaserC</variable><variable id=\"hs_o5`X:I}y9{R2!_miN\">lastLaserL</variable><variable id=\"}%7r;bz7Byg#SEH9P{dG\">lastSonarRead</variable><variable id=\"u#;Y3,}t+?Ue.~vd$_;0\">lastHue</variable><variable id=\"5rh0sr-gnWZKflz~gbRk\">lastGesture</variable><variable id=\"at2[c#F7*{?za?uyOm!i\">lastHunt</variable><variable id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</variable><variable id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</variable><variable id=\"vlNJo2)`QokXI:|N|`c|\">theName</variable><variable id=\"uj8c~)bC/;JXc[2;l@N!\">iTook</variable><variable id=\"m`bxu=!~_Nj|:o?}Kk!^\">iBegan</variable><variable id=\"E3,(6Z)tM(C:#!xxP.d,\">isReady</variable><variable id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</variable><variable id=\"y@Q6YNBYQMe6tF/068bo\">lastVolumeRead</variable><variable id=\"W@//5%rK$%/F|oN!f$h$\">digits</variable><variable id=\"-O:q;^~u%Gff-w{^C`Ou\">lastWater</variable></variables><block type=\"function_definition\" x=\"4751\" y=\"-1215\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><field name=\"function_name\">buttonPress</field><value name=\"ba9wfs6wbjdlsow065y8\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">button</field></block></value><statement name=\"STACK\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">button: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">button</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></statement></block><block type=\"function_definition\" x=\"5448\" y=\"-1213\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><field name=\"function_name\">radioSay</field><value name=\"fxkpgrx3u5x98l61f5dik\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">text5</field></block></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">val</field></block></value><statement name=\"STACK\"><block type=\"radio_datagram_send_value\"><value name=\"name\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value></block></value><value name=\"value\"><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">said: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">7</field></shadow></value></block></next></block></statement></block><block type=\"every_interval\" x=\"100\" y=\"-376\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">2000</field></shadow></value><statement name=\"HANDLER\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"uj8c~)bC/;JXc[2;l@N!\">iTook</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value></block></statement></block><block type=\"every_interval\" x=\"773\" y=\"-372\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"controls_if\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"1111\" y=\"-344\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_MP3_UpdateVolume\" disabled-reasons=\"MANUALLY_DISABLED\"></block></statement><statement name=\"ELSE\"><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_operation\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">OR</field><value name=\"A\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_negate\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"BOOL\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</field></block></value></block></value><value name=\"B\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value></block></value></block></value><statement name=\"DO0\"><block type=\"NL_RELAY_FogSet\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"level\">notLegos.fogLevels.none</field></block></statement><statement name=\"ELSE\"><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation elseif=\"2\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_RELAY_FogSet\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"level\">notLegos.fogLevels.light</field></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">2</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"NL_RELAY_FogSet\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"level\">notLegos.fogLevels.medium</field></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">3</field></shadow></value></block></value><statement name=\"DO2\"><block type=\"NL_RELAY_FogSet\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"level\">notLegos.fogLevels.heavy</field></block></statement></block></statement></block></statement></block><block type=\"input_logo_event\" x=\"2390\" y=\"-353\"><field name=\"action\">TouchButtonEvent.Touched</field><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_MP3_PlayerSay\"><field name=\"saying\">notLegos.playerSaying.ready</field><next><block type=\"NL_MP3_SfxPlay\"><field name=\"sfx\">notLegos.sfxType.fire</field><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.intro</field></block></next></block></next></block></statement></block></statement></block><block type=\"NL_OLED_PrintLine\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"572\" y=\"-190\"><value name=\"text\"><block type=\"text_join\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">K0: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogPin.P0</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"NL_OLED_PrintLine\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"text\"><block type=\"text_join\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">K1: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_OLED_PrintLine\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"text\"><block type=\"text_join\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">K2: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P2</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">4</field></shadow></value></block></next></block></next></block><block type=\"every_interval\" x=\"1817\" y=\"-101\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">40</field></shadow></value><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"m`bxu=!~_Nj|:o?}Kk!^\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time\"></block></value><next><block type=\"NL_PIXEL_CastleSayTick\"><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"E3,(6Z)tM(C:#!xxP.d,\">isReady</field></block></value><next><block type=\"function_call\"><mutation name=\"ready_oled\" functionid=\",fv3PGT/J~k#ZH}9er,/\"></mutation><next><block type=\"NL_OLED_Update3\"><next><block type=\"variables_set\"><field name=\"VAR\" id=\"uj8c~)bC/;JXc[2;l@N!\">iTook</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"m`bxu=!~_Nj|:o?}Kk!^\">iBegan</field></block></value></block></value></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"NL_OLED_Init\"><next><block type=\"NL_PIXEL_CastleSay\"><field name=\"sockPin\">DigitalPin.P3</field><field name=\"wheelPin\">DigitalPin.P0</field><field name=\"scorePin\">DigitalPin.P16</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"m`bxu=!~_Nj|:o?}Kk!^\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time_micros\"></block></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field></block></next></block></next></block></next></block></statement></block><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"646\" y=\"269\"><field name=\"VAR\" id=\"y@Q6YNBYQMe6tF/068bo\">lastVolumeRead</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"}%7r;bz7Byg#SEH9P{dG\">lastSonarRead</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"5rh0sr-gnWZKflz~gbRk\">lastGesture</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"u#;Y3,}t+?Ue.~vd$_;0\">lastHue</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"SRvF%Vl7CRHE66Kr9~Q[\">lastLaserR</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"hs_o5`X:I}y9{R2!_miN\">lastLaserL</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"%FT#@+cF!r3!,1uelm~,\">lastLaserC</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"at2[c#F7*{?za?uyOm!i\">lastHunt</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">FALSE</field></block></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">KC$</field></block></value><next><block type=\"pin_set_audio_pin_enabled\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"enabled\"><shadow type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">FALSE</field></shadow></value><next><block type=\"device_led_enable\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"on\"><shadow type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">FALSE</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"NL_SENSOR_SonarFirstRead\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin1\">DigitalPin.P8</field><field name=\"pin2\">DigitalPin.P9</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value></block></value><next><block type=\"radio_set_group\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"ID\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">171</field></shadow></value><next><block type=\"NL_OLED_Init\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><next><block type=\"controls_if\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_SENSOR_TrimpotSet\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"aPin\">AnalogPin.P10</field><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"W@//5%rK$%/F|oN!f$h$\">digits</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"nl_digits_create\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"cPin\">DigitalPin.P7</field><field name=\"dPin\">DigitalPin.P6</field></block></value><next><block type=\"nl_digits_number\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"display\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"W@//5%rK$%/F|oN!f$h$\">digits</field></block></value><value name=\"num\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">-1000</field></shadow></value><next><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P13</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"NL_MP3_InitiateAs\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"type\">notLegos.mp3type.music</field><field name=\"sPin\">SerialPin.P14</field><next><block type=\"NL_MP3_InitiateAs\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"type\">notLegos.mp3type.sfxvoice</field><field name=\"sPin\">SerialPin.P15</field><next><block type=\"NL_MP3_InitiateAs\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"type\">notLegos.mp3type.player</field><field name=\"sPin\">SerialPin.P16</field><next><block type=\"NL_PIXEL_CastleSay\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"sockPin\">DigitalPin.P11</field><field name=\"wheelPin\">DigitalPin.P5</field><field name=\"scorePin\">DigitalPin.P12</field><next><block type=\"device_pause\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">20</field></shadow></value><next><block type=\"NL_MP3_SetVolume\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"mp3bit\">notLegos.mp3type.sfxvoice</field><value name=\"vol\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"NL_MP3_SetVolume\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"mp3bit\">notLegos.mp3type.player</field><value name=\"vol\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"NL_MP3_SetVolume\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P0</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">0</field></shadow></value><next><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P2</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P8</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P12</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P13</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_PIXEL_CastleDo\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"spotPin\">DigitalPin.P14</field><field name=\"brickPin\">DigitalPin.P15</field><field name=\"kongPin\">DigitalPin.P16</field><next><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">check</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"m`bxu=!~_Nj|:o?}Kk!^\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time_micros\" disabled-reasons=\"MANUALLY_DISABLED\"></block></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"E3,(6Z)tM(C:#!xxP.d,\">isReady</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">TRUE</field></block></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">init</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"2536\" y=\"310\"><field name=\"VAR\" id=\"-O:q;^~u%Gff-w{^C`Ou\">lastWater</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_js_round\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P0</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value></block></value></block></value></block><block type=\"controls_if\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"2536\" y=\"566\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_CastleSayTick\" disabled-reasons=\"MANUALLY_DISABLED\"><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"at2[c#F7*{?za?uyOm!i\">lastHunt</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P4</field></shadow></value></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"5rh0sr-gnWZKflz~gbRk\">lastGesture</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"Connected_getGesture\" disabled-reasons=\"MANUALLY_DISABLED\"></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"u#;Y3,}t+?Ue.~vd$_;0\">lastHue</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"apds9960_readcolor\" disabled-reasons=\"MANUALLY_DISABLED\"></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"}%7r;bz7Byg#SEH9P{dG\">lastSonarRead</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"NL_SENSOR_SonarNextRead\" disabled-reasons=\"MANUALLY_DISABLED\"></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"SRvF%Vl7CRHE66Kr9~Q[\">lastLaserR</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_js_round\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">80</field></shadow></value></block></value></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"%FT#@+cF!r3!,1uelm~,\">lastLaserC</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_js_round\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P2</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">80</field></shadow></value></block></value></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"hs_o5`X:I}y9{R2!_miN\">lastLaserL</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_js_round\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P3</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">80</field></shadow></value></block></value></block></value><next><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation elseif=\"4\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">wait_start</field></block></value></block></value><statement name=\"DO0\"><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"at2[c#F7*{?za?uyOm!i\">lastHunt</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">idle</field></block></value><next><block type=\"NL_MP3_MusicPlay\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"genre\">notLegos.musicGenre.intro</field><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">boot</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow><block type=\"NL_MP3_PlaytimeMusic\" disabled-reasons=\"MANUALLY_DISABLED\"></block></value></block></next></block></next></block></next></block></statement></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">wait_play</field></block></value></block></value><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">wait_laser</field></block></value></block></value><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">init</field></block></value></block></value><statement name=\"DO3\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">ready</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value></block></statement><value name=\"IF4\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">wait_reg</field></block></value></block></value><statement name=\"DO4\"><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">NEQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"5rh0sr-gnWZKflz~gbRk\">lastGesture</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">tutorial</field></block></value><next><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"runTutorial\" functionid=\"Y{7P,}tzRL|sul3I;].}\"></mutation></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">FALSE</field></shadow></value></block></statement></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"NL_PIXEL_CastleDoTick\" disabled-reasons=\"MANUALLY_DISABLED\"><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">TRUE</field></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><next><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation elseif=\"4\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">10</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><value name=\"ba9wfs6wbjdlsow065y8\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">A</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">60</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><value name=\"ba9wfs6wbjdlsow065y8\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">B</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.fire</field></block></next></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">110</field></shadow></value></block></value><statement name=\"DO2\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><value name=\"ba9wfs6wbjdlsow065y8\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">C</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.mine</field></block></next></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">200</field></shadow></value></block></value><statement name=\"DO3\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><value name=\"ba9wfs6wbjdlsow065y8\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">D</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field></block></next></block></statement><value name=\"IF4\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">700</field></shadow></value></block></value><statement name=\"DO4\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><value name=\"ba9wfs6wbjdlsow065y8\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">E</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field></block></next></block></statement></block></next></block></next></block></next></block></statement></block><block type=\"every_interval\" x=\"1006\" y=\"713\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"radio_on_value_drag\" x=\"3549\" y=\"584\"><value name=\"HANDLER_DRAG_PARAM_name\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">name</field></block></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">value</field></block></value><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_substr\"><value name=\"this\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value><value name=\"start\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"length\"><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field></block></value></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_substr\"><value name=\"this\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value><value name=\"start\"><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field></block></value></block></value><value name=\"length\"><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text_length\"><value name=\"VALUE\"><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field></block></value></block></value></block></value></block></value><next><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"controls_if\"><mutation elseif=\"3\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wstar</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_start</field></block></value></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value><statement name=\"DO1\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.welcome</field></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.WheelAll</field><field name=\"effect\">notLegos.vfxEffect.fire</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.intro</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_reg</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">check</field></block></value></block></value><statement name=\"DO2\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">ready</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value></block></statement><statement name=\"ELSE\"><block type=\"controls_if\"><mutation elseif=\"3\" else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">ready</field></block></value></block></value><statement name=\"DO0\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">wstar</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.KongFront</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">boot</field></block></value></block></value><statement name=\"DO1\"><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1000</field></shadow></value></block></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">200</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.idle</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotH</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotI</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">0</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.BrickDragon</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotE</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">tutor</field></block></value></block></value><statement name=\"DO2\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotA</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotB</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value></block></statement><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">heard: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">6</field></shadow></value></block></next></block></next></block></statement></block></statement></block><block type=\"nl_digits_number\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"1050\" y=\"881\"><value name=\"display\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"W@//5%rK$%/F|oN!f$h$\">digits</field></block></value><value name=\"num\"><shadow type=\"math_number\"><field name=\"NUM\">-1000</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"-O:q;^~u%Gff-w{^C`Ou\">lastWater</field></block></value></block><block type=\"device_get_analog_pin\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"1197\" y=\"952\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P0</field></shadow></value></block><block type=\"logic_compare\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"2373\" y=\"1291\"><field name=\"OP\">LTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P0</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">90</field></shadow></value></block><block type=\"function_definition\" x=\"-562\" y=\"3309\"><mutation name=\"fogFlood\" functionid=\"k_s2+XI@*gx2@)wty=I0\"></mutation><field name=\"function_name\">fogFlood</field><statement name=\"STACK\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</field></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">10000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">para</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.mid</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.off</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.dancing</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.still</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">8000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.min</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"-120\" y=\"3309\"><mutation name=\"runTutorial\" functionid=\"Y{7P,}tzRL|sul3I;].}\"></mutation><field name=\"function_name\">runTutorial</field><statement name=\"STACK\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">tutor</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">80</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">20</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.tutorial</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto1</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5950</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto2</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto3</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7600</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto4</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6100</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto5</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">13000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto6</field><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"function_definition\" x=\"236\" y=\"3309\"><mutation name=\"ready_oled\" functionid=\",fv3PGT/J~k#ZH}9er,/\"></mutation><field name=\"function_name\">ready_oled</field><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Say //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"6\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"SRvF%Vl7CRHE66Kr9~Q[\">lastLaserR</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> C</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"%FT#@+cF!r3!,1uelm~,\">lastLaserC</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"hs_o5`X:I}y9{R2!_miN\">lastLaserL</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"8\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">S</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"}%7r;bz7Byg#SEH9P{dG\">lastSonarRead</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> H</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_js_round\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"u#;Y3,}t+?Ue.~vd$_;0\">lastHue</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> G</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"5rh0sr-gnWZKflz~gbRk\">lastGesture</field></block></value><value name=\"ADD6\"><shadow type=\"text\"><field name=\"TEXT\"> N</field></shadow></value><value name=\"ADD7\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"at2[c#F7*{?za?uyOm!i\">lastHunt</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">Mode: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M:</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"NL_MP3_PlaytimeMusic\"></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">4</field></shadow></value></block></next></block></next></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Do //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> T </field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement></block></statement></block></xml>","main.ts":"function radioSay (text5: string, val: number) {\n    radio.sendValue(\"\" + btToken + text5, val)\n    notLegos.printLine(\"said: \" + text5 + \"=\" + val, 7)\n}\nfunction buttonPress (button: string) {\n    notLegos.printLine(\"button: \" + button, 3)\n}\nfunction runTutorial () {\n    radioSay(\"tutor\", 1)\n    notLegos.setVolume(notLegos.mp3type.music, 80)\n    basic.pause(20)\n    notLegos.mp3musicPlay(notLegos.musicGenre.tutorial)\n    fogLevel = 3\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto1)\n    basic.pause(5950)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto2)\n    basic.pause(5000)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto3)\n    basic.pause(7600)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto4)\n    basic.pause(6100)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto5)\n    basic.pause(13000)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto6)\n    notLegos.setVolume(notLegos.mp3type.music, 100)\n    basic.pause(7000)\n    notLegos.mp3musicPlay(notLegos.musicGenre.awaiting)\n}\nfunction ready_oled () {\n    if (isCastleSay) {\n        let lastHunt = 0\n        let lastGesture = 0\n        let lastHue = 0\n        let lastSonarRead = 0\n        let lastLaserL = 0\n        let lastLaserC = 0\n        let lastLaserR = 0\n        notLegos.printLine(\"// Castle Say //\", 0)\n        notLegos.printLine(\"R\" + Math.constrain(lastLaserR, 0, 9) + \" C\" + Math.constrain(lastLaserC, 0, 9) + \" L\" + Math.constrain(lastLaserL, 0, 9), 1)\n        notLegos.printLine(\"S\" + lastSonarRead + \" H\" + Math.round(lastHue / 3) + \" G\" + lastGesture + \" N\" + lastHunt, 2)\n        notLegos.printLine(\"Mode: \" + castleMode, 3)\n        notLegos.printLine(\"M:\" + notLegos.mp3durationMusic(), 4)\n    } else {\n        notLegos.printLine(\"// Castle Do //\", 0)\n        notLegos.printLine(\"M: \" + castleMode + \" T \" + fogToggle, 1)\n    }\n}\nradio.onReceivedValue(function (name, value) {\n    if (name.substr(0, btToken.length) == btToken) {\n        theName = name.substr(btToken.length, name.length - btToken.length)\n        if (isCastleSay) {\n            if (theName == \"wstar\") {\n                castleMode = \"wait_start\"\n            } else if (theName == \"welco\") {\n                if (value == 1) {\n                    notLegos.vfxReset(notLegos.vfxEffect.glow)\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.glow)\n                    notLegos.mp3voicePlay(notLegos.voiceSaying.welcome)\n                } else if (value == 2) {\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                    notLegos.setEffect(notLegos.vfxRegion.WheelAll, notLegos.vfxEffect.fire)\n                    basic.pause(1200)\n                    notLegos.mp3voicePlay(notLegos.voiceSaying.intro)\n                    basic.pause(3000)\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                    basic.pause(4000)\n                    notLegos.mp3musicPlay(notLegos.musicGenre.awaiting)\n                    castleMode = \"wait_reg\"\n                }\n            } else if (theName == \"check\") {\n                notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                radioSay(\"ready\", 1)\n            } else if (false) {\n            \t\n            }\n        } else {\n            if (theName == \"ready\") {\n                radioSay(\"wstar\", 1)\n                notLegos.setEffect(notLegos.vfxRegion.KongFront, notLegos.vfxEffect.indicate)\n            } else if (theName == \"boot\") {\n                fogLevel = 3\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.parade)\n                notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.max)\n                basic.pause(value * 1000)\n                notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.min)\n                basic.pause(1000)\n                radioSay(\"welco\", 1)\n                basic.pause(200)\n                notLegos.vfxReset(notLegos.vfxEffect.glow)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.glow)\n                basic.pause(5000)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.idle)\n                notLegos.setEffect(notLegos.vfxRegion.SpotH, notLegos.vfxEffect.mine)\n                notLegos.setEffect(notLegos.vfxRegion.SpotI, notLegos.vfxEffect.mine)\n                basic.pause(0)\n                radioSay(\"welco\", 2)\n                basic.pause(4500)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.off)\n                basic.pause(500)\n                notLegos.setEffect(notLegos.vfxRegion.BrickDragon, notLegos.vfxEffect.indicate)\n                basic.pause(1200)\n                notLegos.setEffect(notLegos.vfxRegion.SpotC, notLegos.vfxEffect.indicate)\n                notLegos.setEffect(notLegos.vfxRegion.SpotE, notLegos.vfxEffect.indicate)\n                basic.pause(3000)\n                fogLevel = 1\n                notLegos.motorSet(notLegos.motors.door, notLegos.motorState.max)\n            } else if (theName == \"tutor\") {\n                if (value == 1) {\n                    notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.off)\n                    basic.pause(4000)\n                    notLegos.vfxReset(notLegos.vfxEffect.glow)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotA, notLegos.vfxEffect.glow)\n                    basic.pause(6000)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotB, notLegos.vfxEffect.indicate)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotC, notLegos.vfxEffect.indicate)\n                } else if (value == 2) {\n                \t\n                }\n            } else if (theName == \"welco\") {\n            \t\n            } else {\n            \t\n            }\n        }\n        notLegos.printLine(\"heard: \" + theName + \"=\" + value, 6)\n    }\n})\ninput.onLogoEvent(TouchButtonEvent.Touched, function () {\n    if (isCastleSay) {\n        notLegos.mp3sayPlay(notLegos.playerSaying.ready)\n        notLegos.mp3sfxPlay(notLegos.sfxType.fire)\n        notLegos.mp3musicPlay(notLegos.musicGenre.intro)\n    }\n})\nfunction fogFlood () {\n    if (fogToggle) {\n        fogLevel = 3\n        basic.pause(10000)\n        notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.parade)\n        radioSay(\"para\", 1)\n        fogLevel = 0\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.max)\n        notLegos.motorSet(notLegos.motors.door, notLegos.motorState.max)\n        basic.pause(1000)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.mid)\n        basic.pause(6000)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.min)\n        basic.pause(500)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.off)\n        notLegos.motorSet(notLegos.motors.door, notLegos.motorState.min)\n        fogLevel = 1\n        notLegos.setSock(notLegos.sockState.dancing)\n        basic.pause(6000)\n        notLegos.setSock(notLegos.sockState.still)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.max)\n        basic.pause(8000)\n        notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.redrack, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.redrack, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shark, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shark, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.ghost, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.ghost, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.cannon, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.cannon, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.oarrack, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.oarrack, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shell, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shell, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.dragon, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.dragon, notLegos.motorState.min)\n    }\n}\nlet iTook = 0\nlet theName = \"\"\nlet fogToggle = 0\nlet castleMode = \"\"\nlet isCastleSay = 0\nlet fogLevel = 0\nlet btToken = \"\"\nnotLegos.oledinit()\nnotLegos.castleSayLights(DigitalPin.P3, DigitalPin.P0, DigitalPin.P16)\nlet iBegan = input.runningTimeMicros()\nnotLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.parade)\nloops.everyInterval(500, function () {\n\t\n})\nloops.everyInterval(500, function () {\n\t\n})\nloops.everyInterval(2000, function () {\n    notLegos.printLine(\"\" + iTook + \"\", 5)\n})\nloops.everyInterval(40, function () {\n    let isReady = 0\n    iBegan = input.runningTime()\n    notLegos.castleSayTick()\n    if (isReady) {\n    \t\n    }\n    ready_oled()\n    notLegos.changeThree()\n    iTook = input.runningTime() - iBegan\n})\n","README.md":"\n> Open this page at [https://notlegos.github.io/castleresay/](https://notlegos.github.io/castleresay/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/castleresay** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/castleresay** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/soundbank/](https://notlegos.github.io/soundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/soundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/soundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/resoundbank/](https://notlegos.github.io/resoundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/resoundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/resoundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosext/](https://notlegos.github.io/notlegosext/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosext** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosext** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosmaster/](https://notlegos.github.io/notlegosmaster/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosmaster** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosmaster** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","displaySendBuffer.asm":"sendBufferAsm:\n\n    push {r4,r5,r6,r7,lr}\n    \n    mov r4, r0 ; save buff\n    mov r6, r1 ; save pin\n    \n    mov r0, r4\n    bl BufferMethods::length\n    mov r5, r0\n    \n    mov r0, r4\n    bl BufferMethods::getBytes\n    mov r4, r0\n    \n    ; setup pin as digital\n    mov r0, r6\n    movs r1, #0\n    bl pins::digitalWritePin\n    \n    ; load pin address\n    mov r0, r6\n    bl pins::getPinAddress\n\n    ldr r0, [r0, #8] ; get mbed DigitalOut from MicroBitPin\n    ldr r1, [r0, #4] ; r1-mask for this pin\n    ldr r2, [r0, #16] ; r2-clraddr\n    ldr r3, [r0, #12] ; r3-setaddr\n    \n    cpsid i ; disable irq\n    \n    b .start\n    \n.nextbit:               ;            C0\n    str r1, [r3, #0]    ; pin := hi  C2\n    tst r6, r0          ;            C3\n    bne .islate         ;            C4\n    str r1, [r2, #0]    ; pin := lo  C6\n.islate:\n    lsrs r6, r6, #1     ; r6 >>= 1   C7\n    bne .justbit        ;            C8\n    \n    ; not just a bit - need new byte\n    adds r4, #1         ; r4++       C9\n    subs r5, #1         ; r5--       C10\n    bcc .stop           ; if (r5<0) goto .stop  C11\n.start:\n    movs r6, #0x80      ; reset mask C12\n    nop                 ;            C13\n\n.common:               ;             C13\n    str r1, [r2, #0]   ; pin := lo   C15\n    ; always re-load byte - it just fits with the cycles better this way\n    ldrb r0, [r4, #0]  ; r0 := *r4   C17\n    b .nextbit         ;             C20\n\n.justbit: ; C10\n    ; no nops, branch taken is already 3 cycles\n    b .common ; C13\n\n.stop:    \n    str r1, [r2, #0]   ; pin := lo\n    cpsie i            ; enable irq\n\n    pop {r4,r5,r6,r7,pc}\n","planetxbasic.ts":"/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#00B1ED  icon=\"\\uf005\" block=\"Connected\" blockId=\"PlanetX_Connected\"\n//% groups='[\"Digital\", \"Analog\", \"IIC Port\"]'\nnamespace Connected {\n    \n    ////////////////////////paj7620//////////////////////\n    let gesture_first_init = true\n    const initRegisterArray: number[] = [\n        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17,\n        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F,\n        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14,\n        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27,\n        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01,\n        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00,\n        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20,\n        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37,\n        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A,\n        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F,\n        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30,\n        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19,\n        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04,\n        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00,\n        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00,\n        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F,\n        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07,\n        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01,\n        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F,\n        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01,\n        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40,\n        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E,\n        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00,\n        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08,\n        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00,\n        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01,\n        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01,\n        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01\n    ];\n    \n    /////////////////////////color/////////////////////////\n    const APDS9960_ADDR = 0x39\n    const APDS9960_ENABLE = 0x80\n    const APDS9960_ATIME = 0x81\n    const APDS9960_CONTROL = 0x8F\n    const APDS9960_STATUS = 0x93\n    const APDS9960_CDATAL = 0x94\n    const APDS9960_CDATAH = 0x95\n    const APDS9960_RDATAL = 0x96\n    const APDS9960_RDATAH = 0x97\n    const APDS9960_GDATAL = 0x98\n    const APDS9960_GDATAH = 0x99\n    const APDS9960_BDATAL = 0x9A\n    const APDS9960_BDATAH = 0x9B\n    const APDS9960_GCONF4 = 0xAB\n    const APDS9960_AICLEAR = 0xE7\n    let color_first_init = false\n\n    function i2cwrite_color(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n    function i2cread_color(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n    function rgb2hsl(color_r: number, color_g: number, color_b: number): number {\n        let Hue = 0\n        let R = color_r * 100 / 255;\n        let G = color_g * 100 / 255;\n        let B = color_b * 100 / 255;\n        let maxVal = Math.max(R, Math.max(G, B))\n        let minVal = Math.min(R, Math.min(G, B))\n        let Delta = maxVal - minVal;\n\n        if (Delta < 0) {\n            Hue = 0;\n        }\n        else if (maxVal == R && G >= B) {\n            Hue = (60 * ((G - B) * 100 / Delta)) / 100;\n        }\n        else if (maxVal == R && G < B) {\n            Hue = (60 * ((G - B) * 100 / Delta) + 360 * 100) / 100;\n        }\n        else if (maxVal == G) {\n            Hue = (60 * ((B - R) * 100 / Delta) + 120 * 100) / 100;\n        }\n        else if (maxVal == B) {\n            Hue = (60 * ((R - G) * 100 / Delta) + 240 * 100) / 100;\n        }\n        return Hue\n    }\n    function initModule(): void {\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ATIME, 252)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_CONTROL, 0x03)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_GCONF4, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_AICLEAR, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x01)\n        color_first_init = true\n    }\n    function colorMode(): void {\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_ENABLE) | 0x2;\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, tmp);\n    }\n\n    ///////////////////////////////////////////////////////MP3\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    /*\n    * Play status selection button list\n    */\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(100)\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,        \n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum Distance_Unit_List {\n        //% block=\"cm\" \n        Distance_Unit_cm,\n\n        //% block=\"foot\"\n        Distance_Unit_foot,\n    }\n    export enum ButtonStateList {\n        //% block=\"C\"\n        C,\n        //% block=\"D\"\n        D,\n        //% block=\"C+D\"\n        CD\n    }\n    export enum GestureType {\n        //% block=\"None\"\n        None = 0,\n        //% block=\"Right\"\n        Right = 1,\n        //% block=\"Left\"\n        Left = 2,\n        //% block=\"Up\"\n        Up = 3,\n        //% block=\"Down\"\n        Down = 4,\n        //% block=\"Forward\"\n        Forward = 5,\n        //% block=\"Backward\"\n        Backward = 6,\n        //% block=\"Clockwise\"\n        Clockwise = 7,\n        //% block=\"Anticlockwise\"\n        Anticlockwise = 8,\n        //% block=\"Wave\"\n        Wave = 9\n    }\n    export enum ColorList {\n        //% block=\"Red\"\n        red,\n        //% block=\"Green\"\n        green,\n        //% block=\"Blue\"\n        blue,\n        //% block=\"Cyan\"\n        cyan,\n        //% block=\"Magenta\"\n        magenta,\n        //% block=\"Yellow\"\n        yellow,\n        //% block=\"White\"\n        white\n    }\n\n    ///////////////////////////////////blocks/////////////////////////////\n\n    //% blockId=\"readwaterLevel\" block=\"Water level sensor %Rjpin value(0~100)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function waterLevel(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        let voltage = 0, waterlevel = 0;\n        voltage = pins.map(\n            pins.analogReadPin(pin),\n            50,\n            600,\n            0,\n            100\n        );\n        if (voltage < 0) {\n            voltage = 0\n        }\n        waterlevel = voltage;\n        return Math.round(waterlevel)\n    }\n\n    let distance_last = 0\n\n    //% blockId=sonarbit block=\"Ultrasonic sensor pinT %tPin pinE %ePin distance %distance_unit\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% distance_unit.fieldEditor=\"gridpicker\"\n    //% distance_unit.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    export function ultrasoundSensor(tPin: DigitalPin, ePin: DigitalPin, distance_unit: Distance_Unit_List): number {\n        let pinT = tPin\n        let pinE = ePin\n        pins.setPull(pinT, PinPullMode.PullNone)\n        pins.digitalWritePin(pinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(pinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(pinT, 0)\n\n        // read pulse\n        let d = pins.pulseIn(pinE, PulseValue.High, 25000)\n        let version = control.hardwareVersion()\n        let distance = d * 34 / 2 / 1000\n        if (version == \"1\") {\n            distance = distance * 3 / 2\n        }\n\n        if (distance > 430) {\n            distance = 0\n        }\n\n        if (distance == 0) {\n            distance = distance_last\n            distance_last = 0\n        }\n        else {\n            distance_last = distance\n        }\n\n        switch (distance_unit) {\n            case Distance_Unit_List.Distance_Unit_cm:\n                return Math.floor(distance)  //cm\n                break\n            case Distance_Unit_List.Distance_Unit_foot:\n                return Math.floor(distance / 30.48)   //foot\n                break\n            default:\n                return 0\n        }\n    }\n\n    export class PAJ7620 {\n        private paj7620WriteReg(addr: number, cmd: number) {\n            let buf: Buffer = pins.createBuffer(2);\n            buf[0] = addr;\n            buf[1] = cmd;\n            pins.i2cWriteBuffer(0x73, buf, false);\n        }\n        private paj7620ReadReg(addr: number): number {\n            let buf: Buffer = pins.createBuffer(1);\n            buf[0] = addr;\n            pins.i2cWriteBuffer(0x73, buf, false);\n            buf = pins.i2cReadBuffer(0x73, 1, false);\n            return buf[0];\n        }\n        private paj7620SelectBank(bank: number) {\n            if (bank == 0) this.paj7620WriteReg(0xEF, 0);\n            else if (bank == 1) this.paj7620WriteReg(0xEF, 1);\n        }\n        private paj7620Init() {\n            let temp = 0;\n            this.paj7620SelectBank(0);\n            temp = this.paj7620ReadReg(0);\n            if (temp == 0x20) {\n                for (let i = 0; i < 438; i += 2) {\n                    this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);\n                }\n            }\n            this.paj7620SelectBank(0);\n        }\n        init() {\n            this.paj7620Init();\n            basic.pause(200);\n        }\n        read(): number {\n            let data = 0, result = 0;\n            data = this.paj7620ReadReg(0x43);\n            switch (data) {\n                case 0x01:\n                    result = GestureType.Right;\n                    break;\n                case 0x02:\n                    result = GestureType.Left;\n                    break;\n                case 0x04:\n                    result = GestureType.Up;\n                    break;\n                case 0x08:\n                    result = GestureType.Down;\n                    break;\n                case 0x10:\n                    result = GestureType.Forward;\n                    break;\n                case 0x20:\n                    result = GestureType.Backward;\n                    break;\n                case 0x40:\n                    result = GestureType.Clockwise;\n                    break;\n                case 0x80:\n                    result = GestureType.Anticlockwise;\n                    break;\n                default:\n                    data = this.paj7620ReadReg(0x44);\n                    if (data == 0x01)\n                        result = GestureType.Wave;\n                    break;\n            }\n            return result;\n        }\n    }\n    const gestureEventId = 3100;\n    let lastGesture = GestureType.None;\n    let paj7620 = new PAJ7620();\n    //% blockId= gesture_create_event block=\"Gesture sensor IIC port is %gesture\"\n    //% gesture.fieldEditor=\"gridpicker\" gesture.fieldOptions.columns=3\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function onGesture(gesture: GestureType, handler: () => void) {\n        control.onEvent(gestureEventId, gesture, handler);\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        control.inBackground(() => {\n            while (true) {\n                const gesture = paj7620.read();\n                if (gesture != lastGesture) {\n                    lastGesture = gesture;\n                    control.raiseEvent(gestureEventId, lastGesture);\n                }\n                basic.pause(200);\n            }\n        })\n    }\n\n    //% blockId= gesture_get_event block=\"Gesture sensor IIC port detects\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function getGesture(): number {\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        const gesture = paj7620.read();\n        return gesture\n    }\n\n\n\n\n    //% blockId=apds9960_readcolor block=\"Color sensor IIC port color HUE(0~360)\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function readColor(): number {\n        if (color_first_init == false) {\n            initModule()\n            colorMode()\n        }\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        while (!tmp) {\n            basic.pause(5);\n            tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        }\n        let c = i2cread_color(APDS9960_ADDR, APDS9960_CDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_CDATAH) * 256;\n        let r = i2cread_color(APDS9960_ADDR, APDS9960_RDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_RDATAH) * 256;\n        let g = i2cread_color(APDS9960_ADDR, APDS9960_GDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_GDATAH) * 256;\n        let b = i2cread_color(APDS9960_ADDR, APDS9960_BDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_BDATAH) * 256;\n        // map to rgb based on clear channel\n        let avg = c / 3;\n        r = r * 255 / avg;\n        g = g * 255 / avg;\n        b = b * 255 / avg;\n        //let hue = rgb2hue(r, g, b);\n        let hue = rgb2hsl(r, g, b)\n        return hue\n    }\n    //% block=\"Color sensor IIC port detects %color\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% color.fieldEditor=\"gridpicker\" color.fieldOptions.columns=3\n    export function checkColor(color: ColorList): boolean {\n        let hue = readColor()\n        switch (color) {\n            case ColorList.red:\n                if (hue > 330 || hue < 20) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.green:\n                if (hue > 120 && 180 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.blue:\n                if (hue > 210 && 270 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.cyan:\n                if (hue > 190 && 210 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.magenta:\n                if (hue > 260 && 330 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.yellow:\n                if (hue > 30 && 120 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.white:\n                if (hue >= 180 && 190 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n        }\n    }\n\n    //% blockId=\"potentiometer\" block=\"Trimpot %Rjpin analog value\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Input color=#E2C438 group=\"Analog\"\n    export function trimpot(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        return pins.analogReadPin(pin)\n    }\n    //% blockId=buttonab block=\"Button %Rjpin %button is pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonCD(Rjpin: DigitalRJPin, button: ButtonStateList): boolean {\n        let pinC = DigitalPin.P1\n        let pinD = DigitalPin.P2\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pinC = DigitalPin.P1\n                pinD = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pinC = DigitalPin.P2\n                pinD = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pinC = DigitalPin.P13\n                pinD = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pinC = DigitalPin.P15\n                pinD = DigitalPin.P16\n                break;\n            case DigitalRJPin.P3:\n                pinC = DigitalPin.P3\n                pinD = DigitalPin.P4\n                break;\n        }\n        pins.setPull(pinC, PinPullMode.PullUp)\n        pins.setPull(pinD, PinPullMode.PullUp)\n        if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 0 && button == ButtonStateList.CD) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinC) == 0 && pins.digitalReadPin(pinD) == 1 && button == ButtonStateList.C) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 1 && button == ButtonStateList.D) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    export enum ButtonState {\n        //% block=\"on\"\n        on = 1,\n        //% block=\"off\"\n        off = 2\n    }\n\n    const buttonEventSource = 5000\n    const buttonEventValue = {\n        CD_pressed: ButtonState.on,\n        CD_unpressed: ButtonState.off\n    }\n\n    //% block=\"on button %Rjpin %button pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=4\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonEvent(Rjpin: DigitalRJPin, button: ButtonStateList, handler: () => void) {\n        let ButtonPin_C = DigitalPin.P1\n        let ButtonPin_D = DigitalPin.P2\n        let pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P0\n        let pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                ButtonPin_C = DigitalPin.P1\n                ButtonPin_D = DigitalPin.P8\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P1\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P8\n                break;\n            case DigitalRJPin.J2:\n                ButtonPin_C = DigitalPin.P2\n                ButtonPin_D = DigitalPin.P12\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P2\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P12\n                break;\n            case DigitalRJPin.J3:\n                ButtonPin_C = DigitalPin.P13\n                ButtonPin_D = DigitalPin.P14\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P13\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P14\n                break;\n            case DigitalRJPin.J4:\n                ButtonPin_C = DigitalPin.P15\n                ButtonPin_D = DigitalPin.P16\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P15\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P16\n                break;\n            case DigitalRJPin.P3:\n                ButtonPin_C = DigitalPin.P3\n                ButtonPin_D = DigitalPin.P4\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P3\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P4\n                break;\n        }\n        if (button == ButtonStateList.C) {\n            pins.setPull(ButtonPin_C, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_C, PinEventType.Edge)\n            control.onEvent(pinEventSource_C, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.D) {\n            pins.setPull(ButtonPin_D, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_D, PinEventType.Edge)\n            control.onEvent(pinEventSource_D, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.CD) {\n            loops.everyInterval(50, function () {\n                if (pins.digitalReadPin(ButtonPin_C) == 0 && pins.digitalReadPin(ButtonPin_D) == 0) {\n                    control.raiseEvent(buttonEventSource, buttonEventValue.CD_pressed)\n                }\n            })\n            control.onEvent(buttonEventSource, buttonEventValue.CD_pressed, handler)\n        }\n    }\n\n    //% blockId=fans block=\"Motor fan %Rjpin toggle to $fanstate || speed %speed \\\\%\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% fanstate.shadow=\"toggleOnOff\"\n    //% subcategory=Excute group=\"Digital\" color=#EA5532\n    //% speed.min=0 speed.max=100\n    //% expandableArgumentMode=\"toggle\"\n    export function motorFan(Rjpin: DigitalRJPin, fanstate: boolean, speed: number = 100): void {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case DigitalRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n            case DigitalRJPin.J3:\n                pin = AnalogPin.P13\n                break;\n            case DigitalRJPin.J4:\n                pin = AnalogPin.P15\n                break;\n        }\n        if (fanstate) {\n            pins.analogSetPeriod(pin, 100)\n            pins.analogWritePin(pin, Math.map(speed, 0, 100, 0, 1023))\n        }\n        else {\n            pins.analogWritePin(pin, 0)\n            speed = 0\n        }\n    }\n\n\n    //% blockId=\"setLoopFolder\" block=\"loop play all the MP3s in the folder:$folderNum\"\n    //% folderNum.defl=\"01\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setLoopFolder(folderNum: string): void {\n        CMD = 0x17\n        para1 = 0\n        para2 = parseInt(folderNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    //% blockId=\"folderPlay\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum || repeatList: $myAns\"\n    //% folderNum.defl=\"01\" fileNum.defl=\"001\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function folderPlay(folderNum: string, fileNum: string, myAns: boolean = false): void {\n        CMD = 0x0F\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        if (myAns)\n            execute(0x19)\n    }\n\n    //% blockId=\"playFolderFilePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFilePort(folderNum: string, fileNum: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFolderFileVolumePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum with volume:$theVolume usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" theVolume.defl=\"10\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFileVolumePort(folderNum: string, fileNum: string, theVolume: string, Rjpin: DigitalRJPin): void {\n        \n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        \n        let volume = parseInt(theVolume)\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(200)\n\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"volumePort\" \n    //% block=\"set MP3 volume:$theVolume usingPin:$Rjpin\"\n    //% theVolume.defl=\"10\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function volumePort(theVolume: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        let volume = parseInt(theVolume)\n        if (volume > 30) {\n            volume = 30\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(300)\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n\n\n    //% blockId=\"setTracking\" \n    //% block=\"play the mp3 in order of:%tracking || repeatList: $myAns\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% tracking.defl=1\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setTracking(tracking: number, myAns: boolean = false): void {\n        CMD = 0x03\n        para1 = 0x00\n        para2 = tracking\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        execute(0x0D)\n        if (myAns)\n            execute(0x19)\n    }\n    //% blockId=MP3execute block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=\"setVolume\" block=\"Set volume(0~25):%volume\"\n    //% volume.min=0 volume.max=25\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setVolume(volume: number): void {\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 0x06\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=MP3setPort block=\"Set the MP3 port to %Rjpin\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function MP3SetPort(Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        setVolume(25)\n    }\n}","notlegos.ts":"// NotLegos Blocks\n//% block=\"Not LEGOs\" color=#0031AF weight=1000 icon=\"\\uf3a5\"\n//% groups='[\"MP3\",\"Sensors\"]'\nnamespace notLegos {\n\n\n/// BEGIN NEOPIXEL ///\n    export enum hues { red = 0, orange = 15, yellow = 40, lime = 85, green = 110, cyan = 170, blue = 240, purple = 260, pink = 310 }\n    export enum vfxEffect { parade = 0, fire = 1, indicate = 2, idle = 3, glow = 4, mine = 5, off = 6 }\n    let NeoSock: Strip = null; let NeoScore: Strip = null; let NeoWheel: Strip = null; let NeoKong: Strip = null; let NeoStrip: Strip = null; let NeoBrick: Strip = null\n    let vfx_mine_tog: number[] = []; let vfx_mine_hue: number[] = []; let vfx_mine_sat: number[] = []; let vfx_mine_lum: number[] = []\n    let vfx_fire_tog: number[] = []; let vfx_fire_hue: number[] = []; let vfx_fire_sat: number[] = []; let vfx_fire_lum: number[] = []; let vfx_fire_colors: number[] = []\n    let vfx_indicate_tog: number[] = []; let vfx_indicate_hue: number[] = []; let vfx_indicate_sat: number[] = []; let vfx_indicate_lum: number[] = [];\n    let vfx_idle_tog: number[] = []; let vfx_idle_hue: number[] = []; let vfx_idle_sat: number[] = []; let vfx_idle_lum: number[] = []\n    let vfx_glow_tog: number[] = []; let vfx_glow_hue: number[] = []; let vfx_glow_sat: number[] = []; let vfx_glow_lum: number[] = []\n    let vfx_parade_tog: number[] = []; let vfx_parade_hue: number[] = []; let vfx_parade_sat: number[] = []; let vfx_parade_lum: number[] = []; let vfx_parade_colors: number[] = [];\n    let vfx_last_tog: number[] = []; let vfx_last_hue: number[] = []; let vfx_last_sat: number[] = []; let vfx_last_lum: number[] = []\n    let vfx_master_tog: number[] = []; let vfx_master_hue: number[] = []; let vfx_master_sat: number[] = []; let vfx_master_lum: number[] = []; let vfx_master_effect: number[] = [];\n    let vfx_light_count = 0\n\n    //% shim=sendBufferAsm\n    function sendBuffer(buf: Buffer, pin: DigitalPin) { }\n\n    export class Strip {\n        buf: Buffer;\n        pin: DigitalPin;\n        start: number; // start offset in LED strip\n        _length: number; // number of LEDs\n\n        setPixelHSLPrecise(pixeloffset: number, h: number, s: number, l: number): void {\n            if (pixeloffset < 0 || pixeloffset >= this._length)\n                return;\n            pixeloffset = (pixeloffset + this.start) * 3\n            h = Math.clamp(0,1,h/360)\n            s = Math.clamp(0,1,s/100)\n            l = Math.clamp(0,1,l/100)\n            let r, g, b;\n            if (s === 0) {\n                r = g = b = l; // achromatic\n            } else {\n                const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n                const p = 2 * l - q;\n                r = this.hueToRgb(p, q, h + 1 / 3);\n                g = this.hueToRgb(p, q, h);\n                b = this.hueToRgb(p, q, h - 1 / 3);\n            }\n            this.buf[pixeloffset + 0] = Math.round(g * 255);\n            this.buf[pixeloffset + 1] = Math.round(r * 255);\n            this.buf[pixeloffset + 2] = Math.round(b * 255);\n        }\n\n        hueToRgb(p:number, q:number, t:number) {\n            if (t < 0) t += 1;\n            if (t > 1) t -= 1;\n            if (t < 1 / 6) return p + (q - p) * 6 * t;\n            if (t < 1 / 2) return q;\n            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n            return p;\n        }\n\n        // show() { sendBuffer(this.buf, this.pin); }  //Send all the changes to the strip.\n\n        show() { \n            sendBuffer(this.buf, DigitalPin.P16); \n            sendBuffer(this.buf, DigitalPin.P15);\n            sendBuffer(this.buf, DigitalPin.P14);\n            sendBuffer(this.buf, DigitalPin.P13);\n            sendBuffer(this.buf, DigitalPin.P12);\n            sendBuffer(this.buf, DigitalPin.P8);\n            sendBuffer(this.buf, DigitalPin.P2);\n        }  //Send all the changes to the strip.\n\n        length() { return this._length; }   //Gets the number of pixels declared on the strip\n\n        shift(offset: number = 1): void { this.buf.shift(-offset * 3, this.start * 3, this._length * 3) }   //Shift LEDs forward and clear with zeros.\n\n        rotate(offset: number = 1): void { this.buf.rotate(-offset * 3, this.start * 3, this._length * 3) } //Rotate LEDs forward\n\n        setPin(pin: DigitalPin): void {\n            this.pin = pin;\n            pins.digitalWritePin(this.pin, 0);  // don't yield to avoid races on initialization\n        }\n    }\n\n    function create(thePin: DigitalPin, numleds: number): Strip {\n        let strip = new Strip();\n        strip.buf = pins.createBuffer(numleds * 3);\n        strip.start = 0;\n        strip._length = numleds;\n        strip.setPin(thePin)\n        return strip;\n    }\n\n    //% blockId=NL_PIXEL_CastleSay\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Sock Circle:%sockPin  Wheel Strip/Circle:%wheelPin  Score Circle:%scorePin \"\n    //% weight=100\n    export function castleSayLights(sockPin: DigitalPin, wheelPin: DigitalPin, scorePin: DigitalPin): void {\n        // NeoScore = create(scorePin, 8)\n        // NeoSock = create(sockPin, 8)\n        NeoWheel = create(wheelPin, 10)\n        vfx_light_count = 17\n        vfxInit()\n        // vfx_indicate_hue[30]=hues.green\n        // vfx_indicate_hue[31] = hues.yellow\n        // vfx_indicate_hue[32] = hues.orange\n        // vfx_indicate_hue[33] = hues.red\n        // vfx_indicate_hue[26] = hues.red\n        // vfx_indicate_hue[27] = hues.red\n        // vfx_indicate_hue[28] = hues.red\n        // vfx_indicate_hue[29] = hues.red\n\n        // setEffect(vfxRegion.CastleSayAll, vfxEffect.parade)\n    }\n\n    //% blockId=NL_PIXEL_CastleDo\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Strips:%spotPin  Bricks:%brickPin Kong Lights:%kongPin\"\n    //% weight=100\n    export function castleDoLights(stripPin: DigitalPin, brickPin: DigitalPin, kongPin: DigitalPin): void {\n        NeoStrip = create(stripPin, 20)\n        NeoBrick = create(brickPin, 8)\n        NeoKong = create(kongPin, 4)\n        vfx_light_count = 20 + 8 + 4\n        vfxInit()\n        vfx_indicate_hue[0]=hues.cyan; vfx_indicate_hue[1]=hues.cyan   //spot h\n        vfx_indicate_hue[2] = hues.pink; vfx_indicate_hue[3] = hues.pink //spot f\n        vfx_indicate_hue[26] = hues.pink   //shell brick\n        vfx_indicate_hue[4] = hues.orange; vfx_indicate_hue[5] = hues.orange   //spot d\n        vfx_indicate_hue[21] = hues.orange   //cannon brick\n        vfx_indicate_hue[25] = hues.orange   //bomb brick\n        vfx_indicate_hue[6] = hues.yellow; vfx_indicate_hue[7] = hues.yellow   //spot b\n        vfx_indicate_hue[8] = hues.red; vfx_indicate_hue[9] = hues.red; vfx_indicate_hue[10] = hues.red; vfx_indicate_hue[11] = hues.red  //spot a\n        vfx_indicate_hue[20] = hues.red; vfx_indicate_hue[27] = hues.red  //wheel bricks\n        vfx_indicate_hue[12] = hues.blue; vfx_indicate_hue[13] = hues.blue    //spot c\n        vfx_indicate_hue[14] = hues.cyan; vfx_indicate_hue[15] = hues.cyan    //spot e\n        vfx_indicate_hue[16] = hues.purple; vfx_indicate_hue[17] = hues.purple  //spot g\n        vfx_indicate_hue[24] = hues.purple  //ghost brick\n        vfx_indicate_hue[18] = hues.green; vfx_indicate_hue[19] = hues.green   //spot i\n        vfx_indicate_hue[28] = hues.green; vfx_indicate_hue[29] = hues.green; vfx_indicate_hue[30] = hues.green; vfx_indicate_hue[31] = hues.green   //kong\n        vfx_indicate_hue[22] = hues.yellow; vfx_indicate_hue[23] = hues.yellow  //dragon brick\n        vfx_indicate_tog[0] = 1; vfx_indicate_tog[1] = 1 //spot h\n        vfx_indicate_tog[2] = 1; vfx_indicate_tog[3] = 1 //spot f\n        vfx_indicate_tog[4] = 1; vfx_indicate_tog[5] = 1 //spot d\n        vfx_indicate_tog[6] = 1; vfx_indicate_tog[7] = 1 //spot b\n        vfx_indicate_tog[8] = 1; vfx_indicate_tog[9] = 1 //spot a\n        vfx_indicate_tog[22] = 1; vfx_indicate_tog[27] = 1    //wheel bricks\n        vfx_indicate_tog[21] = 1    //cannon brick\n        vfx_indicate_tog[25] = 1    //bomb brick\n        vfx_indicate_tog[26] = 1    //shell brick\n        vfx_indicate_tog[31] = 1; vfx_indicate_tog[30] = 1    //kong\n        \n        // setEffect(vfxRegion.CastleDoAll, vfxEffect.indicate)\n    }\n\n    function vfxInit(): void{\n        vfx_parade_colors = [hues.red, hues.orange, hues.yellow, hues.cyan, hues.blue, hues.purple]\n        vfx_fire_colors = [hues.red, hues.red, hues.red, hues.red, hues.orange, hues.orange, hues.orange, hues.orange, hues.orange, hues.yellow]\n        for (let index = 0; index < vfx_light_count; index++) {\n             \n            vfx_indicate_tog.push(0)\n            vfx_indicate_lum.push(50)\n            vfx_indicate_hue.push(50)\n            vfx_indicate_sat.push(100)\n\n            vfx_mine_tog.push(0)\n            vfx_mine_hue.push(hues.red)\n            vfx_mine_sat.push(100)\n            vfx_mine_lum.push(50)\n\n            vfx_fire_tog.push(randint(0, 1))\n            vfx_fire_hue.push(vfx_fire_colors[randint(0, vfx_fire_colors.length - 1)])\n            vfx_fire_sat.push(100)\n            vfx_fire_lum.push(randint(30, 80))\n\n            vfx_idle_tog.push(1)\n            if (index % 2 == 0) { vfx_idle_tog[index] = 0; }\n            vfx_idle_hue.push(265)\n            if (index % 2 == 0) { vfx_idle_hue[index] = 2; }\n            vfx_idle_sat.push(100)\n            vfx_idle_lum.push(50)\n\n            vfx_glow_tog.push(0)\n            vfx_glow_hue.push(50)\n            vfx_glow_sat.push(0)\n            vfx_glow_lum.push(0)\n\n            vfx_parade_tog.push(randint(0, 1))\n            vfx_parade_hue.push(vfx_parade_colors[randint(0, vfx_parade_colors.length-1)])\n            vfx_parade_sat.push(100)\n            vfx_parade_lum.push(randint(10, 65))\n\n            vfx_last_tog.push(0)\n            vfx_last_hue.push(50)\n            vfx_last_sat.push(100)\n            vfx_last_lum.push(50)\n\n            vfx_master_tog.push(0)\n            vfx_master_hue.push(0)\n            vfx_master_sat.push(100)\n            vfx_master_lum.push(50)\n            vfx_master_effect.push(vfxEffect.off)    //leave this be!\n        }\n    }\n\n    //% blockId=NL_PIXEL_ResetVFX\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Reset VFX %effect\"\n    //% weight=100\n    export function vfxReset(effect:vfxEffect):void{\n        if (effect == vfxEffect.idle){\n            for (let index = 0; index < vfx_light_count; index++) {\n                vfx_idle_tog[index]=1\n                if (index % 2 == 0) { vfx_idle_tog[index] = 0; }\n                vfx_idle_hue[index]=265\n                if (index % 2 == 0) { vfx_idle_hue[index] = 2; }\n                vfx_idle_sat[index]=100\n                vfx_idle_lum[index]=50\n            }\n        } else if (effect == vfxEffect.glow) {\n            for (let index = 0; index < vfx_light_count; index++) {\n                vfx_glow_tog[index] = 0\n                vfx_glow_hue[index] = 50\n                // vfx_glow_sat[index] = 100\n                vfx_glow_lum[index] = 0\n            }\n        } else if (effect == vfxEffect.mine) {\n            for (let index = 0; index < vfx_light_count; index++) {\n                vfx_mine_tog[index] = 0\n                vfx_mine_hue[index] = hues.red\n                vfx_mine_sat[index] = 100\n                vfx_mine_lum[index] = 50\n            }\n        } else if (effect == vfxEffect.indicate) {\n            for (let index = 0; index < vfx_light_count; index++) {\n                vfx_indicate_tog[index] = 0\n                vfx_indicate_sat[index] = 100\n                vfx_indicate_lum[index] = 50\n            }\n        }\n    }\n\n    //% blockId=NL_PIXEL_CastleSayTick\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Advance Castle Say lights\"\n    //% weight=100\n    export function castleSayTick(): void {\n        paradeTick()\n        fireTick()\n        glowTick()\n        castleSayWrite()\n        indicateTick()\n        idleTick()\n        mineTick()\n    }\n\n    //% blockId=NL_PIXEL_CastleDoTick\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Advance Castle Do lights\"\n    //% weight=100\n    export function castleDoTick(): void {\n        paradeTick()\n        fireTick()\n        glowTick()\n        castleDoWrite()\n        indicateTick()\n        idleTick()\n        mineTick()\n    }\n\n    function paradeTick(): void{\n        for (let index=0; index < vfx_light_count; index++){\n            let thisLum = vfx_parade_lum[index]\n            let thisHue = vfx_parade_hue[index]\n            let thisTog = vfx_parade_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0){\n                if (thisLum < 65){\n                    vfx_parade_lum[index] = thisLum + 12\n                } else if (thisLum >= 65){\n                    vfx_parade_tog[index] = 1\n                }\n            } else if (thisTog == 1){\n                if (thisLum>10){\n                    vfx_parade_lum[index] = thisLum - 4\n                } else if (thisLum <= 10){\n                    vfx_parade_tog[index] = 0\n                    while (nextHue == thisHue){\n                        nextHue = vfx_parade_colors[randint(0, vfx_parade_colors.length - 1)]\n                    }\n                    vfx_parade_hue[index] = nextHue\n                    vfx_parade_lum[index] = thisLum - randint(0,10)\n                }\n            }\n        }\n    }\n\n    function mineTick(): void {\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisLum = vfx_mine_lum[index]\n            let thisHue = vfx_mine_hue[index]\n            let thisTog = vfx_mine_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 200) {\n                    vfx_mine_lum[index] = thisLum + 30\n                } else if (thisLum >= 200) {\n                    vfx_mine_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 0) {\n                    vfx_mine_lum[index] = thisLum - 30\n                } else if (thisLum <= 0) {\n                    vfx_mine_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function idleTick(): void {\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisLum = vfx_idle_lum[index]\n            let thisHue = vfx_idle_hue[index]\n            let thisTog = vfx_idle_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisHue < 265) {\n                    vfx_idle_hue[index] = thisHue + 1\n                } else if (thisHue >= 265) {\n                    vfx_idle_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisHue > 2) {\n                    vfx_idle_hue[index] = thisHue - 1\n                } else if (thisHue <= 2) {\n                    vfx_idle_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function indicateTick(): void {\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisLum = vfx_indicate_lum[index]\n            let thisHue = vfx_indicate_hue[index]\n            let thisTog = vfx_indicate_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 80) {\n                    vfx_indicate_lum[index] = thisLum + 12\n                } else if (thisLum >= 80) {\n                    vfx_indicate_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 25) {\n                    vfx_indicate_lum[index] = thisLum - 4\n                } else if (thisLum <= 25) {\n                    vfx_indicate_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function fireTick(): void {\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisLum = vfx_fire_lum[index]\n            let thisHue = vfx_fire_hue[index]\n            let thisTog = vfx_fire_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 80) {\n                    vfx_fire_lum[index] = thisLum + 15\n                } else if (thisLum >= 80) {\n                    vfx_fire_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 30) {\n                    vfx_fire_lum[index] = thisLum - 5\n                } else if (thisLum <= 30) {\n                    vfx_fire_tog[index] = 0\n                    while (nextHue == thisHue) {\n                        nextHue = vfx_fire_colors[randint(0, vfx_fire_colors.length - 1)]\n                    }\n                    vfx_fire_hue[index] = nextHue\n                    vfx_fire_lum[index] = thisLum - randint(0, 30)\n                }\n            }\n        }\n    }\n\n    function glowTick(): void {\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisLum = vfx_glow_lum[index]\n            if (thisLum < 4){\n                vfx_glow_lum[index] = thisLum+.2\n            } else if (thisLum < 5) {\n                vfx_glow_lum[index] = thisLum+ + .3\n            } else if (thisLum < 10) {\n                vfx_glow_lum[index] = thisLum + .5\n            } else if (thisLum < 15) {\n                vfx_glow_lum[index] = thisLum + 1\n            }else if (thisLum < 30) {\n                vfx_glow_lum[index] = thisLum + 1.5\n            } else if (thisLum < 100) {\n                vfx_glow_lum[index] = thisLum + 4\n            } else{\n                vfx_glow_lum[index] = 0\n            }\n        }\n    }\n\n    function vfxPrepareMaster(): void{\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisEffect = vfx_master_effect[index]\n            if (thisEffect == vfxEffect.parade) {\n                vfx_master_hue[index] = vfx_parade_hue[index]\n                vfx_master_sat[index] = vfx_parade_sat[index]\n                vfx_master_lum[index] = Math.max(0,Math.min(50,vfx_parade_lum[index]))\n            } else if (thisEffect == vfxEffect.fire) {\n                vfx_master_hue[index] = vfx_fire_hue[index]\n                vfx_master_sat[index] = vfx_fire_sat[index]\n                vfx_master_lum[index] = Math.max(0, Math.min(50, vfx_fire_lum[index]))\n            } else if (thisEffect == vfxEffect.indicate) {\n                vfx_master_hue[index] = vfx_indicate_hue[index]\n                vfx_master_sat[index] = vfx_indicate_sat[index]\n                vfx_master_lum[index] = Math.max(0, Math.min(50, vfx_indicate_lum[index]))\n            } else if (thisEffect == vfxEffect.idle) {\n                vfx_master_hue[index] = vfx_idle_hue[index]\n                vfx_master_sat[index] = vfx_idle_sat[index]\n                vfx_master_lum[index] = Math.max(0, Math.min(50, vfx_idle_lum[index]))\n            } else if (thisEffect == vfxEffect.glow) {\n                vfx_master_hue[index] = vfx_glow_hue[index]\n                vfx_master_sat[index] = vfx_glow_sat[index]\n                vfx_master_lum[index] = Math.min(100,vfx_glow_lum[index])\n            } else if (thisEffect == vfxEffect.mine) {\n                vfx_master_hue[index] = vfx_mine_hue[index]\n                vfx_master_sat[index] = vfx_mine_sat[index]\n                vfx_master_lum[index] = Math.max(0, Math.min(50, vfx_mine_lum[index]))\n            } else if (thisEffect == vfxEffect.off) {\n                vfx_master_hue[index] = vfx_mine_hue[index]\n                vfx_master_sat[index] = vfx_mine_sat[index]\n                vfx_master_lum[index] = 0\n            }\n        }\n    }\n    function castleSayWrite(): void{\n        vfxPrepareMaster()\n        let masterIndex = 0\n        // for (let index = 0; index < NeoSock.length(); index++){\n        //     NeoSock.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n        //     masterIndex++\n        // }\n        for (let index = 0; index < NeoWheel.length(); index++) {\n            NeoWheel.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        // for (let index = 0; index < NeoScore.length(); index++) {\n        //     NeoScore.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n        //     masterIndex++\n        // }\n        // NeoSock.show()\n        NeoWheel.show()\n        // NeoScore.show()\n    }\n\n    function castleDoWrite(): void {\n        vfxPrepareMaster()\n        let masterIndex = 0\n        for (let index = 0; index < NeoStrip.length(); index++) {\n            NeoStrip.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        for (let index = 0; index < NeoBrick.length(); index++) {\n            NeoBrick.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        for (let index = 0; index < NeoKong.length(); index++) {\n            NeoKong.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        NeoStrip.show()\n        NeoBrick.show()\n        NeoKong.show()\n    }\n\n    //% blockId=NL_PIXEL_SetEffect\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Set %region VFX to %effect\"\n    //% weight=100\n    export function setEffect(region:vfxRegion, effect:vfxEffect){\n        if (region == vfxRegion.Score1){\n            vfx_master_effect[30] = effect\n        } else if (region == vfxRegion.Score2) {\n            vfx_master_effect[31] = effect\n        } else if (region == vfxRegion.Score3) {\n            vfx_master_effect[32] = effect\n        } else if (region == vfxRegion.Score4) {\n            vfx_master_effect[33] = effect\n        } else if (region == vfxRegion.Score5) {\n            vfx_master_effect[26] = effect\n        } else if (region == vfxRegion.Score6) {\n            vfx_master_effect[27] = effect\n        } else if (region == vfxRegion.Score7) {\n            vfx_master_effect[28] = effect\n        } else if (region == vfxRegion.Score8) {\n            vfx_master_effect[29] = effect\n        } else if (region == vfxRegion.ScoreAll) {\n            for (let i = 26; i <= 33; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SockAll) {\n            for (let i = 0; i <= 7; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelInner) {\n            for (let i = 18; i <= 25; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelOuter) {\n            for (let i = 8; i <= 17; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelAll) {\n            for (let i=8; i <= 25; i++){ vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.CastleSayAll) {\n            for (let i = 0; i <= 33; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotA) {\n            for (let i = 8; i <= 11; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotB) {\n            for (let i = 6; i <= 7; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotC) {\n            for (let i = 12; i <= 13; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotD) {\n            for (let i = 4; i <= 5; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotE) {\n            for (let i = 14; i <= 15; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotF) {\n            for (let i = 2; i <= 3; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotG) {\n            for (let i = 16; i <= 17; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotH) {\n            for (let i = 0; i <= 1; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotI) {\n            for (let i = 18; i <= 19; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotAll) {\n            for (let i = 0; i <= 19; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.BrickWheel) {\n            vfx_master_effect[20] = effect\n            vfx_master_effect[27] = effect\n        } else if (region == vfxRegion.BrickBomb) {\n            vfx_master_effect[25] = effect\n        } else if (region == vfxRegion.BrickShell) {\n            vfx_master_effect[26] = effect\n        } else if (region == vfxRegion.BrickGhost) {\n            vfx_master_effect[24] = effect\n        } else if (region == vfxRegion.BrickDragon) {\n            for (let i = 22; i <= 23; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.BrickCannon) {\n            vfx_master_effect[21] = effect\n        } else if (region == vfxRegion.BrickAll) {\n            for (let i = 20; i <= 27; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongFront) {\n            for (let i = 28; i <= 29; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongBack) {\n            for (let i = 30; i <= 31; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongAll) {\n            for (let i = 28; i <=31; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.CastleDoAll) {\n            for (let i = 0; i < vfx_light_count; i++) { vfx_master_effect[i] = effect };\n        } \n    }\n\n    export enum vfxRegion{\n        Score1, Score2, Score3, Score4, Score5, Score6, Score7, Score8, ScoreAll,\n        SockAll,\n        WheelInner, WheelOuter, WheelAll,\n        KongFront, KongBack, KongAll,\n        BrickWheel, BrickBomb, BrickShell, BrickGhost, BrickDragon, BrickCannon, BrickAll,\n        SpotA, SpotB, SpotC, SpotD, SpotE, SpotF, SpotG, SpotH, SpotI, SpotAll,\n        CastleSayAll,\n        CastleDoAll\n    }\n\n/// END NEOPIXEL ///\n\n\n/// BEGIN SONAR ///\n\n    let sonarPinT = DigitalPin.P0\n    let sonarPinE = DigitalPin.P0\n\n    //% blockId=NL_SENSOR_SonarFirstRead\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"first distance from sonar at %pin1|%pin2\"\n    //% weight=101\n    export function SonarFirstRead(pin1: DigitalPin, pin2: DigitalPin): number {\n        sonarPinT = pin1\n        sonarPinE = pin2\n        pins.setPull(sonarPinT, PinPullMode.PullNone)\n        return SonarNextRead()\n    }\n\n    //% blockId=NL_SENSOR_SonarNextRead\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"next sonar distance\"\n    //% weight=100\n    export function SonarNextRead(): number {\n        pins.digitalWritePin(sonarPinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(sonarPinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(sonarPinT, 0)\n        return Math.floor(pins.pulseIn(sonarPinE, PulseValue.High, 25000) * 34 / 2000)\n    }\n\n/// END SONAR ///\n\n\n/// BEGIN MP3 ///\n\n    export enum playType { Play = 0x0D, Stop = 0x16, PlayNext = 0x01, PlayPrevious = 0x02, Pause = 0x0E }\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    let mp3musicPin: SerialPin\n    let mp3music = false\n    let mp3player = false\n    let mp3sfxPin: SerialPin\n    let mp3sfx = false\n    let mp3musicVol = 0\n    let mp3playerPin: SerialPin\n    let mp3playerVol = 0\n    let mp3sfxVol = 0\n    let isPot = false\n    let potPin = AnalogPin.P0\n    let masterVolume = 25\n\n    //% blockId=NL_SENSOR_TrimpotSet\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"set volume control pot at %aPin\"\n    export function potSet(aPin: AnalogPin): void {\n        potPin = aPin\n        isPot = true\n        masterVolume = potRead()\n    }\n\n    function potRead() {\n        if (isPot) { return Math.round(pins.map(pins.analogReadPin(potPin), 0, 1023, 0, 30)) }\n        else { return 5 }\n    }\n\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) { total += dataArr[i] }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) { myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i]) }\n        serial.writeBuffer(myBuff)\n        basic.pause(20) // Was 100; problematic at 10\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) { myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i]) }\n        serial.writeBuffer(myBuff)\n    }\n\n    //% blockId=NL_MP3_InitiateAs\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Ready MP3bit for %type at %sPin\"\n    //% dPin.fieldEditor=\"gridpicker\"\n    export function mp3setPorts(mp3bit: mp3type, sPin: SerialPin): void {\n        if (mp3bit == mp3type.music) {\n            mp3musicPin = sPin\n            mp3music = true\n            mp3musicVol = 100\n            setVolume(mp3type.music, mp3musicVol)\n        } else if (mp3bit == mp3type.player) {\n            mp3playerPin = sPin\n            mp3player = true\n            mp3playerVol = 100\n            setVolume(mp3type.player, mp3playerVol)\n        } else if (mp3bit == mp3type.sfxvoice) {\n            mp3sfxPin = sPin\n            mp3sfx = true\n            mp3sfxVol = 100\n            setVolume(mp3type.sfxvoice, mp3sfxVol)\n        }   \n    }\n\n    //% blockId=\"nl_playfilefolder\" \n    //% block=\"Play folder %folderNum file %fileNum on %sPin\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3fileFolder(folderNum: string, fileNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        dataArr[5] = parseInt(folderNum)\n        dataArr[6] = parseInt(fileNum)\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"NL_MP3_SendNumbers\" \n    //% block=\"Send numbers for folder %folderNum file %fileNum on %sPin\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3numbers(folderNum: number, fileNum: number, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        dataArr[3] = 15\n        dataArr[5] = folderNum\n        dataArr[6] = fileNum\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=NL_MP3_UpdateVolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Update volume for all\"\n    export function updateVolumeGlobal(): void {\n        let nowVol = potRead()\n        if (masterVolume != nowVol){\n            masterVolume = nowVol\n            setVolume(mp3type.music, mp3musicVol)\n            setVolume(mp3type.player, mp3playerVol)\n            setVolume(mp3type.sfxvoice, mp3sfxVol)\n        }\n    }\n\n    //% blockId=NL_MP3_SetVolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Set %mp3bit volume to %vol\"\n    export function setVolume(mp3bit:mp3type, vol:number): void {\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3musicVol = vol\n        } else if (mp3bit == mp3type.player) {\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3playerVol = vol\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3sfxVol = vol\n        }\n        dataArr[3] = 6\n        dataArr[5] = 0\n        dataArr[6] = Math.round(vol / 100 * masterVolume)\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=NL_MP3_GetVolumes\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Get current volumes\"\n    export function getVolumes() {\n        return \"m\" + mp3musicVol + \" p\" + mp3playerVol + \" s\" + mp3sfxVol + \" g\" + masterVolume\n    }\n\n    //% blockId=\"NL_MP3_StopPlayback\" \n    //% block=\"Stop playback on %mp3bit\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function stopPlayback(mp3bit:mp3type): void {\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        } else if (mp3bit == mp3type.player){\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        }\n        CMD = 0x16\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n/// END MP3 ///\n\n/// BEGIN SOUND BANK ///\n    export enum mp3type { music, player, sfxvoice }\n    export enum musicGenre { intro, tutorial, awaiting, level, won, lost }\n    export enum playerSaying { ready, yay, intro, nay, ouch, success, failure, won, lost, hurry }\n    export enum sfxType { correct, incorrect, ghost, fire, explosion, splash, spark, slash }\n    export enum voiceSaying { name, begin, retry, next, complete, gameover, welcome, intro, howto1, howto2, howto3, howto4, howto5, howto6, howto7, howto8, howto9 }\n    export enum magicianSaysSide { left, right }\n    export enum magicianDifficulty { easy, medium, hard }\n    export enum spotName { A, B, C, D, E, F, G, H, I }\n    export enum playerChar { mario, luigi, peach, daisy, toad, wario }\n\n    let sb_music_tutorial = feedBank(\"1.1.46|1.2.51|1.3.51|1.4.59|1.5.60|1.6.60|1.7.60|1.8.60|1.9.60|1.10.60|1.11.60|1.12.60|1.13.60|1.14.60|1.15.60|1.16.60|1.17.60|1.18.60|1.19.60|1.20.60|1.21.60\")\n    let sb_music_awaiting = feedBank(\"2.1.64|2.2.120|2.3.120|2.4.120|2.5.120|2.6.114|2.7.120|2.8.103|2.9.120|2.10.120|2.11.120|2.12.120|2.13.119|2.14.120|2.15.120|2.16.103|2.17.119|2.18.120|2.19.86|2.20.120\")\n    let sb_music_level = feedBank(\"3.1.120|3.2.120|3.3.120|3.4.120|3.5.120|3.6.120|3.7.120|3.8.120|3.9.120|3.10.92|3.11.120|3.12.120|3.13.111|3.14.116|3.15.98|3.16.120|3.17.120|3.18.82|3.19.120|3.20.120|3.21.120|3.22.120|3.23.120|3.24.120|3.25.120|3.26.120|3.27.91|3.28.120|3.29.120|3.30.41|3.31.120|3.32.120|3.33.120|3.34.94|3.35.120|3.36.120|3.37.120|3.38.120|3.39.120|3.40.120|3.41.78|3.42.120|3.43.120|3.44.120|3.45.120|3.46.120|3.47.120|3.48.120|3.49.120|3.50.120|3.51.120|3.52.113|3.53.120|3.54.120|3.55.42|3.56.120|3.57.120|3.58.120|3.59.114|3.60.120|3.61.120|3.62.118|3.63.120|3.64.120|3.65.120|3.66.120|3.67.120|3.68.59|3.69.120|3.70.120|3.71.118|3.72.120|3.73.120|3.74.70|3.75.120|3.76.120|3.77.120|3.78.120|3.79.120|3.80.120|3.81.120|3.82.120|3.83.80|3.84.120|3.85.120|3.86.120|3.87.120|3.88.107|3.89.120|3.90.120|3.91.120|3.92.120|3.93.36|3.94.120|3.95.120|3.96.120|3.97.120|3.98.120|3.99.120|3.100.63|3.101.120|3.102.120|3.103.112|3.104.105|3.105.120|3.106.110|3.107.120|3.108.120|3.109.120|3.110.120|3.111.120|3.112.120|3.113.120|3.114.120|3.115.120|3.116.119|3.117.120|3.118.120|3.119.120|3.120.120|3.121.120|3.122.120|3.123.120|3.124.120|3.125.120|3.126.104|3.127.120|3.128.87|3.129.120|3.130.118|3.131.120|3.132.120|3.133.50|3.134.109|3.135.120|3.136.120|3.137.120|3.138.91|3.139.120|3.140.120|3.141.120|3.142.120|3.143.120|3.144.120|3.145.104|3.146.112|3.147.120\")\n    let sb_music_won = feedBank(\"4.1.30|4.2.22|4.3.30|4.4.17|4.5.29|4.6.30|4.7.30|4.8.30|4.9.30|4.10.30|4.11.20|4.12.28|4.13.30|4.14.15|4.15.30|4.16.17|4.17.17|4.18.15|4.19.30|4.20.30|4.21.30|4.22.17|4.23.30|4.24.30|4.25.30\")\n    let sb_music_lost = feedBank(\"5.1.30|5.2.30|5.3.30|5.4.30|5.5.30|5.6.30|5.7.30|5.8.30|5.9.30|5.10.30|5.11.30\")\n    let sb_music_intro = feedBank(\"9.1.3|9.2.4|9.3.8|9.4.5|9.5.4|9.6.12|9.7.3|9.8.7|9.9.6|9.10.7|9.11.9|9.12.9|9.13.11|9.14.3|9.15.10|9.16.3|9.17.6|9.18.5|9.19.6|9.20.5|9.21.7|9.22.5|9.23.3|9.24.7|9.25.6|9.26.6|9.27.11|9.28.5|9.29.5|9.30.4|9.31.6|9.32.4|9.33.4|9.34.10|9.35.8|9.36.8|9.37.3|9.38.7|9.39.4|9.40.6|9.41.3|9.42.7|9.43.7|9.44.3|9.45.6|9.46.1|9.47.2|9.48.2|9.49.8|9.50.16|9.51.9|9.52.10|9.53.13|9.54.14|9.55.14|9.56.16|9.57.7|9.58.4|9.59.9|9.60.8|9.61.9|9.62.9|9.63.12|9.64.4|9.65.6|9.66.9|9.67.5|9.68.6|9.69.5|9.70.10|9.71.8|9.72.8|9.73.5|9.74.3\")\n    let sb_sfx_correct = feedBank(\"6.1.5|6.2.8|6.3.6|6.4.7|6.5.6|6.6.14|6.7.7|6.8.8|6.9.12|6.10.7|6.11.9|6.12.7|6.13.10|6.14.8|6.15.8|6.16.4|6.17.7|6.18.4|6.19.2|6.20.10|6.21.7|6.22.7|6.23.6|6.24.4|6.25.7|6.26.12|6.27.4|6.28.6|6.29.6|6.30.6|6.31.4|6.32.5|6.33.3|6.34.6|6.35.6|6.36.6|6.37.6|6.38.4|6.39.8|6.40.6|6.41.3|6.42.3|6.43.7|6.44.8|6.45.6|6.46.2|6.47.5|6.48.7|6.49.8|6.50.7|6.51.6|6.52.7|6.53.6|6.54.8|6.55.5|6.56.5|6.57.7|6.58.6|6.59.8|6.60.5|6.61.6|6.62.8|6.63.3|6.64.3|6.65.6|6.66.3|6.67.6|6.68.2|6.69.3|6.70.3|6.71.2|6.72.3|6.73.6|6.74.7|6.75.5|6.76.3|6.77.5|6.78.3|6.79.2|6.80.3|6.81.3|6.82.1|6.83.1|6.84.1|6.85.1|6.86.1|6.87.1|6.88.3|6.89.1|6.90.1|6.91.4|6.92.4\")\n    let sb_sfx_incorrect = feedBank(\"7.1.6|7.2.5|7.3.3|7.4.5|7.5.7|7.6.6|7.7.4|7.8.1|7.9.3|7.10.4|7.11.3|7.12.3|7.13.6|7.14.3|7.15.1|7.16.1|7.17.1|7.18.1|7.19.5|7.20.4|7.21.3|7.22.7\")\n    let sb_sfx_beep = feedBank(\"8.1.1|8.2.2|8.3.1\")\n    let sb_sfx_smash = feedBank(\"8.4.1|8.5.1|8.6.1|8.7.3\")\n    let sb_sfx_falling = feedBank(\"8.8.6\")\n    let sb_sfx_boom = feedBank(\"8.9.1|8.10.2|8.11.3|8.12.2\")\n    let sb_sfx_cannon = feedBank(\"8.13.2|8.14.1|8.15.1|8.16.2|8.17.2\")\n    let sb_sfx_fire = feedBank(\"8.18.2|8.19.2|8.20.5|8.21.2\")\n    let sb_sfx_ghost = feedBank(\"8.22.5|8.23.4|8.24.5|8.25.5\")\n    let sb_sfx_hit = feedBank(\"8.26.1|8.27.1|8.28.1|8.29.1|8.30.1\")\n    let sb_sfx_slash = feedBank(\"8.31.1|8.32.1|8.33.1|8.34.1|8.35.1|8.36.1|8.37.1|8.38.1|8.39.1|8.40.1|8.41.1|8.42.2\")\n    let sb_sfx_zap = feedBank(\"8.43.1|8.44.1|8.45.2|8.46.1|8.47.2|8.48.1\")\n    let sb_sfx_splash = feedBank(\"8.49.2|8.50.2|8.51.1|8.52.1|8.53.2|8.54.1|8.55.2|8.56.1|8.57.2\")\n    let sb_sfx_voice = feedBank(\"10.1.4|10.2.6|10.3.4|10.4.4|10.5.6|10.6.4|10.7.11|10.8.6|10.9.4|10.10.1\")\n    let sb_magician_left_easy = feedBank(\"11.1.3|11.2.6|11.3.7|11.4.6|11.5.6|11.6.7|11.7.6|11.8.6|11.9.6|11.10.7|11.11.6|11.12.6|11.13.7|11.14.6|11.15.6|11.16.6|11.17.6|11.18.6|11.19.6|11.20.6|11.21.6|11.22.7|11.23.6|11.24.6|11.25.6|11.26.6|11.27.7|11.28.7|11.29.7|11.30.6|11.31.6|11.32.8|11.33.7|11.34.6|11.35.7|11.36.5|11.37.6|11.38.8|11.39.6|11.40.6|11.41.6|11.42.6|11.43.6|11.44.7|11.45.6|11.46.7|11.47.7|11.48.8|11.49.6|11.50.7|11.51.6|11.52.6|11.53.7|11.54.8|11.55.7|11.56.6|11.57.7|11.58.6|11.59.6|11.60.6|11.61.6\")\n    let sb_magician_left_medium = feedBank(\"11.62.7|11.63.6|11.64.6|11.65.8|11.66.7|11.67.8|11.68.8|11.69.8|11.70.7|11.71.7|11.72.6|11.73.6|11.74.6|11.75.6|11.76.6|11.77.7|11.78.6|11.79.7|11.80.6|11.81.6|11.82.6|11.83.7|11.84.6|11.85.6|11.86.6|11.87.7|11.88.6|11.89.6|11.90.7|11.91.6|11.92.6|11.93.6|11.94.6|11.95.6|11.96.7|11.97.6|11.98.6|11.99.7|11.100.6|11.101.6|11.102.6|11.103.7|11.104.6|11.105.8|11.106.6|11.107.6|11.108.6|11.109.7|11.110.6|11.111.7|11.112.7|11.113.6|11.114.6|11.115.7|11.116.6|11.117.7|11.118.7|11.119.6|11.120.6|11.121.6|11.122.7|11.123.7|11.124.6|11.125.6|11.126.6|11.127.8|11.128.7|11.129.6|11.130.8|11.131.7|11.132.6|11.133.7|11.134.6|11.135.6|11.136.7|11.137.7\")\n    let sb_magician_left_hard = feedBank(\"11.219.7|11.220.6|11.221.6|11.222.6|11.223.6|11.224.6|11.225.7|11.226.7|11.227.6|11.228.6|11.229.6|11.230.8|11.231.7|11.232.7|11.233.6|11.234.6|11.235.6|11.236.8|11.237.7|11.238.7|11.239.6|11.240.6|11.241.8|11.242.7|11.243.7|11.244.6|11.245.6|11.246.7|11.247.7|11.248.7|11.249.7|11.250.6|11.251.6|11.252.6|11.253.6|11.254.6|11.255.6|11.256.6|11.257.6|11.258.7|11.259.7|11.260.7|11.261.6|11.262.6|11.263.6|11.264.6|11.265.6|11.266.6|11.267.7|11.268.6|11.269.6|11.270.6|11.271.6|11.272.6|11.273.6|11.274.6|11.275.7|11.276.6|11.277.6|11.278.7|11.279.7|11.280.7|11.281.6|11.282.6|11.283.7|11.284.9|11.285.7|11.286.6|11.287.6|11.288.6|11.289.7|11.290.7|11.291.6|11.292.6|11.293.7|11.294.7|11.295.6|11.296.7|11.297.6|11.298.6|11.299.6|11.300.6|11.301.6|11.302.6|11.303.7|11.304.6|11.305.6|11.306.7|11.307.6|\")\n    let sb_magician_right_easy = feedBank(\"11.159.6|11.160.6|11.161.7|11.162.6|11.163.7|11.164.7|11.165.6|11.166.6|11.167.7|11.168.7|11.169.6|11.170.8|11.171.7|11.172.7|11.173.6|11.174.6|11.175.6|11.176.6|11.177.7|11.178.6|11.179.6|11.180.6|11.181.6|11.182.7|11.183.6|11.184.6|11.185.6|11.186.6|11.187.8|11.188.7|11.189.6|11.190.6|11.191.6|11.192.6|11.193.6|11.194.6|11.195.5|11.196.6|11.197.6|11.198.6|11.199.7|11.200.6|11.201.6|11.202.6|11.203.6|11.204.6|11.205.6|11.206.6|11.207.6|11.208.6|11.209.6|11.210.7|11.211.7|11.212.7|11.213.6|11.214.7|11.215.7|11.216.6|11.217.7|11.218.6\")\n    let sb_magician_right_medium = feedBank(\"11.219.7|11.220.6|11.221.6|11.222.6|11.223.6|11.224.6|11.225.7|11.226.7|11.227.6|11.228.6|11.229.6|11.230.8|11.231.7|11.232.7|11.233.6|11.234.6|11.235.6|11.236.8|11.237.7|11.238.7|11.239.6|11.240.6|11.241.8|11.242.7|11.243.7|11.244.6|11.245.6|11.246.7|11.247.7|11.248.7|11.249.7|11.250.6|11.251.6|11.252.6|11.253.6|11.254.6|11.255.6|11.256.6|11.257.6|11.258.7|11.259.7|11.260.7|11.261.6|11.262.6|11.263.6|11.264.6|11.265.6|11.266.6|11.267.7|11.268.6|11.269.6|11.270.6|11.271.6|11.272.6|11.273.6|11.274.6|11.275.7|11.276.6|11.277.6|11.278.7|11.279.7|11.280.7|11.281.6|11.282.6|11.283.7|11.284.9|11.285.7|11.286.6|11.287.6\")\n    let sb_magician_right_hard = feedBank(\"11.288.6|11.289.7|11.290.7|11.291.6|11.292.6|11.293.7|11.294.7|11.295.6|11.296.7|11.297.6|11.298.6|11.299.6|11.300.6|11.301.6|11.302.6|11.303.7|11.304.6|11.305.6|11.306.7|11.307.6|11.308.7|11.309.6|11.310.6|11.311.6|11.312.7|11.313.7|11.314.6|11.315.7\")\n    let sb_mario_name = feedBank(\"12.1.2|12.2.1|12.4.2|12.5.3\")\n    let sb_mario_intro = feedBank(\"12.3.4|12.6.2|12.7.212.112.1|12.113.1|\")\n    let sb_mario_ready = feedBank(\"12.8.1|12.9.2|12.10.2|12.11.1|12.12.1|12.13.2|12.14.2|12.15.2|12.16.2|12.17.2|12.18.1\")\n    let sb_mario_yay = feedBank(\"12.19.1|12.20.1|12.21.1|12.22.1|12.23.1|12.24.1|12.25.1|12.26.1|12.27.1|12.28.1|12.29.1|12.30.1|12.31.1|12.32.1|12.33.1|12.34.1|12.35.1|12.36.1|12.37.1|12.38.1|12.39.1|12.40.1|12.41.1|12.42.1|12.43.1|12.44.1|12.45.1|12.46.1|12.47.1|12.48.1|12.49.1|12.50.1|12.51.2|12.52.2|12.53.2|12.54.2|12.55.2|12.56.2|12.57.2|12.58.2|12.59.2|12.60.2|12.61.2|12.62.2\")\n    let sb_mario_success = feedBank(\"12.63.1|12.64.2|12.65.2|12.66.2|12.67.2|12.68.3|12.69.3|12.70.3|12.71.3|12.72.3\")\n    let sb_mario_won = feedBank(\"12.73.2|12.74.2|12.75.3|12.76.3|12.77.3\")\n    let sb_mario_ouch = feedBank(\"12.78.1|12.79.1|12.80.1|12.81.1|12.82.1|12.83.1|12.84.1|12.85.1|12.86.1|12.87.1|12.88.1|12.89.1|12.90.1|12.91.1|12.92.1|12.93.1|12.94.1|12.95.1\")\n    let sb_mario_nay = feedBank(\"12.96.1|12.97.1|12.98.1|12.99.1|12.100.1|12.101.1|12.102.2|12.103.1|12.104.1|12.105.1|12.106.1|12.107.1|12.108.1|12.109.1|12.110.2|12.111.2\")\n    let sb_mario_failure = feedBank(\"12.114.2|12.115.2|12.116.2|12.117.1\")\n    let sb_mario_lost = feedBank(\"12.118.3|12.119.3|12.120.4|12.121.1\")\n    let sb_mario_hurry = feedBank(\"12.122.44\")\n    \n    let playlist_tutorial = makePlaylist(sb_music_tutorial)\n    let playlist_awaiting = makePlaylist(sb_music_awaiting)\n    let playlist_level = makePlaylist(sb_music_level)\n    let playlist_won = makePlaylist(sb_music_won)\n    let playlist_lost = makePlaylist(sb_music_lost)\n    let playlist_correct = makePlaylist(sb_sfx_correct)\n    let playlist_incorrect = makePlaylist(sb_sfx_incorrect)\n    let playlist_intro = makePlaylist(sb_music_intro)\n    let playlist_boom = makePlaylist(sb_sfx_boom)\n    let playlist_smash = makePlaylist(sb_sfx_smash)\n    let playlist_falling = makePlaylist(sb_sfx_falling)\n    let playlist_cannon = makePlaylist(sb_sfx_cannon)\n    let playlist_fire = makePlaylist(sb_sfx_fire)\n    let playlist_ghost = makePlaylist(sb_sfx_ghost)\n    let playlist_hit = makePlaylist(sb_sfx_hit)\n    let playlist_slash = makePlaylist(sb_sfx_slash)\n    let playlist_zap = makePlaylist(sb_sfx_zap)\n    let playlist_splash = makePlaylist(sb_sfx_splash)\n    let playlist_magician_left_easy = makePlaylist(sb_magician_left_easy)\n    let playlist_magician_left_medium = makePlaylist(sb_magician_left_medium)\n    let playlist_magician_left_hard = makePlaylist(sb_magician_left_hard)\n    let playlist_magician_right_easy = makePlaylist(sb_magician_right_easy)\n    let playlist_magician_right_medium = makePlaylist(sb_magician_right_medium)\n    let playlist_magician_right_hard = makePlaylist(sb_magician_right_hard)\n    let playlist_mario_name = makePlaylist(sb_mario_name)\n    let playlist_mario_intro = makePlaylist(sb_mario_intro)\n    let playlist_mario_ready = makePlaylist(sb_mario_ready)\n    let playlist_mario_yay = makePlaylist(sb_mario_yay)\n    let playlist_mario_success = makePlaylist(sb_mario_success)\n    let playlist_mario_won = makePlaylist(sb_mario_won)\n    let playlist_mario_ouch = makePlaylist(sb_mario_ouch)\n    let playlist_mario_nay = makePlaylist(sb_mario_nay)\n    let playlist_mario_failure = makePlaylist(sb_mario_failure)\n    let playlist_mario_lost = makePlaylist(sb_mario_lost)\n    let playlist_mario_hurry = makePlaylist(sb_mario_hurry)\n    let playtimeMusic = 0\n    let playtimePlayer = 0\n    let playtimeSfxVoice = 0\n\n    function takeRotate(PlaylistIn: number[]) {\n        let returnTrack = PlaylistIn.shift()\n        PlaylistIn.push(returnTrack)\n        return returnTrack\n    }\n    function feedBank(BankString: string) {\n        let returnBank: number[][] = []\n        let BankSplit = BankString.split(\"|\")\n        for (let soundString of BankSplit) {\n            returnBank.push([parseFloat(soundString.split(\".\")[0]), parseFloat(soundString.split(\".\")[1]), parseFloat(soundString.split(\".\")[2])])\n        }\n        return returnBank\n    }\n    function makePlaylist(SoundBank: any[]) {\n        let returnList: number[] = []\n        let orderedList: number[] = []\n        for (let soundNo = 0; soundNo <= SoundBank.length - 1; soundNo++) {\n            orderedList.push(soundNo)\n        }\n        while (orderedList.length > 0) {\n            let randTrack = randint(0, orderedList.length - 1)\n            returnList.push(orderedList.removeAt(randTrack))\n        }\n        return returnList\n    }\n    function bankPlay(mp3bit:mp3type, SoundBank: number[][], trackIndex: number) {\n        let theSong = SoundBank[trackIndex]\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimeMusic = theSong[2]\n        } else if (mp3bit == mp3type.player) {\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimePlayer = theSong[2]\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimeSfxVoice = theSong[2]\n        }\n        dataArr[3] = 15\n        dataArr[5] = theSong[0]\n        dataArr[6] = theSong[1]\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=NL_MP3_PlaytimeMusic\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of music\"\n    export function mp3durationMusic(): number{\n        return playtimeMusic\n    }\n\n    //% blockId=NL_MP3_PlaytimePlayer\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of player sound\"\n    export function mp3durationPlayer(): number {\n        return playtimePlayer\n    }\n\n    //% blockId=NL_MP3_PlaytimeSFX\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of sfx/voice\"\n    export function mp3durationSfxVoice(): number {\n        return playtimeSfxVoice\n    }\n\n\n\n    //% blockId=NL_MP3_MusicPlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %genre music\"\n    export function mp3musicPlay(genre: musicGenre): void {\n        if (genre == musicGenre.tutorial){\n            bankPlay(mp3type.music, sb_music_tutorial, takeRotate(playlist_tutorial))\n        } else if (genre == musicGenre.awaiting) {\n            bankPlay(mp3type.music, sb_music_awaiting, takeRotate(playlist_awaiting))\n        } else if (genre == musicGenre.intro){\n            bankPlay(mp3type.music, sb_music_intro, takeRotate(playlist_intro))\n        } else if (genre == musicGenre.level) {\n            bankPlay(mp3type.music, sb_music_level, takeRotate(playlist_level))\n        } else if (genre == musicGenre.won) {\n            bankPlay(mp3type.music, sb_music_won, takeRotate(playlist_won))\n        } else if (genre == musicGenre.lost) {\n            bankPlay(mp3type.music, sb_music_lost, takeRotate(playlist_lost))\n        }\n    }\n\n    //% blockId=NL_MP3_PlayerSay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %saying as player\"\n    export function mp3sayPlay(saying: playerSaying): void {\n        if(saying == playerSaying.ready){\n            bankPlay(mp3type.player, sb_mario_ready, takeRotate(playlist_mario_ready))\n        }else if (saying == playerSaying.yay){\n            bankPlay(mp3type.player, sb_mario_yay, takeRotate(playlist_mario_yay))\n        } else if (saying == playerSaying.intro) {\n            bankPlay(mp3type.player, sb_mario_intro, takeRotate(playlist_mario_intro))\n        } else if (saying == playerSaying.nay) {\n            bankPlay(mp3type.player, sb_mario_nay, takeRotate(playlist_mario_nay))\n        } else if (saying == playerSaying.ouch) {\n            bankPlay(mp3type.player, sb_mario_ouch, takeRotate(playlist_mario_ouch))\n        } else if (saying == playerSaying.success) {\n            bankPlay(mp3type.player, sb_mario_success, takeRotate(playlist_mario_success))\n        } else if (saying == playerSaying.failure) {\n            bankPlay(mp3type.player, sb_mario_failure, takeRotate(playlist_mario_failure))\n        } else if (saying == playerSaying.won) {\n            bankPlay(mp3type.player, sb_mario_won, takeRotate(playlist_mario_won))\n        } else if (saying == playerSaying.lost) {\n            bankPlay(mp3type.player, sb_mario_lost, takeRotate(playlist_mario_lost))\n        } else if (saying == playerSaying.hurry) {\n            bankPlay(mp3type.player, sb_mario_hurry, takeRotate(playlist_mario_hurry))\n        }\n    }\n\n    //% blockId=NL_MP3_VoicePlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %voice as voice\"\n    export function mp3voicePlay(voice: voiceSaying): void {\n        if (voice == voiceSaying.name) {\n\n        } else if (voice == voiceSaying.begin) {\n\n        } else if (voice == voiceSaying.retry) {\n\n        } else if (voice == voiceSaying.next) {\n\n        } else if (voice == voiceSaying.complete) {\n\n        } else if (voice == voiceSaying.gameover) {\n\n        } else if (voice == voiceSaying.welcome) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 0)\n        } else if (voice == voiceSaying.intro) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 1)\n        } else if (voice == voiceSaying.howto1) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 2)\n        } else if (voice == voiceSaying.howto2) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 3)\n        } else if (voice == voiceSaying.howto3) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 4)\n        } else if (voice == voiceSaying.howto4) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 5)\n        } else if (voice == voiceSaying.howto5) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 6)\n        } else if (voice == voiceSaying.howto6) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 7)\n        } else if (voice == voiceSaying.howto7) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 8)\n        } else if (voice == voiceSaying.howto8) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 9)\n        } else if (voice == voiceSaying.howto9) {\n\n        }\n    }\n\n    //% blockId=NL_MP3_MagicianSay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Magician says on the %side difficulty %difficulty\"\n    export function mp3magician(side: magicianSaysSide, difficulty: magicianDifficulty): void {\n        if (side == magicianSaysSide.left) {\n            if (difficulty == magicianDifficulty.easy) {\n\n            } else if (difficulty = magicianDifficulty.medium) {\n\n            } else if (difficulty = magicianDifficulty.hard) {\n\n            }\n        } else if (side = magicianSaysSide.right) {\n            if (difficulty == magicianDifficulty.easy) {\n\n            } else if (difficulty = magicianDifficulty.medium) {\n\n            } else if (difficulty = magicianDifficulty.hard) {\n\n            }\n        } \n    }\n\n    //% blockId=NL_MP3_SfxPlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %sfx sound effect\"\n    export function mp3sfxPlay(sfx: sfxType): void {\n        if(sfx == sfxType.correct){\n            bankPlay(mp3type.sfxvoice, sb_sfx_correct, takeRotate(playlist_correct))\n        }else if (sfx == sfxType.incorrect){\n            bankPlay(mp3type.sfxvoice, sb_sfx_incorrect, takeRotate(playlist_incorrect))\n        }else if (sfx == sfxType.ghost){\n            bankPlay(mp3type.sfxvoice, sb_sfx_ghost, takeRotate(playlist_ghost))\n        }else if (sfx == sfxType.fire){\n            bankPlay(mp3type.sfxvoice, sb_sfx_fire, takeRotate(playlist_fire))\n        }else if (sfx == sfxType.explosion){\n            bankPlay(mp3type.sfxvoice, sb_sfx_boom, takeRotate(playlist_boom))\n        }else if (sfx == sfxType.splash){\n            bankPlay(mp3type.sfxvoice, sb_sfx_splash, takeRotate(playlist_splash))\n        } else if (sfx == sfxType.spark) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_zap, takeRotate(playlist_zap))\n        } else if (sfx == sfxType.slash) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_slash, takeRotate(playlist_slash))\n        }\n    }\n/// END SOUND BANK ///\n\n/// BEGIN MOTOR & RELAY ///\n    const kong_address = 0x10\n    export enum MotorList { M1=1, M2=2 }\n    export enum motors{ redrack=16, shark=4, ghost=5, cannon=8, oarrack=7, shell=6, door=3, dragon=9, wheel=1, fan=2 }\n    export enum motorState { min, max, mid, off }\n    export enum fogLevels { none = 0, light = 1, medium = 2, heavy = 3 }\n    export enum sockState { dancing = 1, still = 0 }\n    let motor_wheel_max = 12; let motor_wheel_min = 0\n    let servo_redrack_max = 150; let servo_redrack_min = 100\n    let servo_cannon_min = 135; let servo_cannon_max = 65\n    let servo_shark_min = 20; let servo_shark_max = 85\n    let servo_oarrack_min = 60; let servo_oarrack_max = 110\n    let servo_ghost_min = 110; let servo_ghost_max = 40\n    let servo_shell_min = 170; let servo_shell_max = 100\n    let servo_door_min = 50; let servo_door_max = 140; let servo_door_mid = 100\n    let motor_fan_min = 0; let motor_fan_mid = 50; let motor_fan_max = 100\n    let servo_dragon_min = 90; let servo_dragon_max = 79\n\n    export function servoSet(servo: motors, angle: number): void {\n        let buf = pins.createBuffer(4);\n        buf[0] = servo;\n        buf[1] = angle;\n        buf[2] = 0;\n        buf[3] = 0;\n        pins.i2cWriteBuffer(kong_address, buf);\n    }\n\n    export function motorSpeed(motor: MotorList, speed: number): void {\n        let buf = pins.createBuffer(4);\n        buf[0] = motor\n        buf[1] = 1;\n        if (speed < 0) {\n            buf[1] = 2;\n            speed = speed * -1\n        }\n        buf[2] = speed;\n        buf[3] = 0;\n        pins.i2cWriteBuffer(kong_address, buf);\n    }\n\n    //% blockId=NL_MOTOR_Set \n    //% block=\"Set %motor to %state\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function motorSet(motor:motors, state:motorState):void{\n        if (motor == motors.redrack){\n            if (state == motorState.min){ servoSet(motor, servo_redrack_min) } \n            else if (state == motorState.max){ servoSet(motor, servo_redrack_max) }\n        } if (motor == motors.shark) {\n            if (state == motorState.min) { servoSet(motor, servo_shark_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_shark_max) }\n        } if (motor == motors.ghost) {\n            if (state == motorState.min) { servoSet(motor, servo_ghost_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_ghost_max) }\n        } if (motor == motors.cannon) {\n            if (state == motorState.min) { servoSet(motor, servo_cannon_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_cannon_max) }\n        } if (motor == motors.oarrack) {\n            if (state == motorState.min) { servoSet(motor, servo_oarrack_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_oarrack_max) }\n        } if (motor == motors.shell) {\n            if (state == motorState.min) { servoSet(motor, servo_shell_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_shell_max) }\n        } if (motor == motors.door) {\n            if (state == motorState.min) { servoSet(motor, servo_door_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_door_max) }\n            else if (state == motorState.mid) { servoSet(motor, servo_door_mid) }\n        } if (motor == motors.dragon) {\n            if (state == motorState.min) { servoSet(motor, servo_dragon_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_dragon_max) }\n        } if (motor == motors.wheel) {\n            if (state == motorState.min) { motorSpeed(MotorList.M1, motor_wheel_min) }\n            else if (state == motorState.max) { motorSpeed(MotorList.M1, motor_wheel_max) }\n            else if (state == motorState.off) { motorSpeed(MotorList.M1, 0) }\n        } if (motor == motors.fan) {\n            if (state == motorState.min) { motorSpeed(MotorList.M2, motor_fan_min) }\n            else if (state == motorState.mid) { motorSpeed(MotorList.M2, motor_fan_mid) }\n            else if (state == motorState.max) { motorSpeed(MotorList.M2, motor_fan_max) }\n            else if (state == motorState.off) { motorSpeed(MotorList.M2, 0) }\n        }\n    }\n\n    //% blockId=NL_RELAY_FogSet \n    //% block=\"set fog level to %level\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function setFog(fog:fogLevels):void{\n        if (fog == fogLevels.none){\n            pins.digitalWritePin(DigitalPin.P2, 1)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 1)\n        } else if (fog == fogLevels.light){\n            pins.digitalWritePin(DigitalPin.P2, 1)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        } else if (fog == fogLevels.medium) {\n            pins.digitalWritePin(DigitalPin.P2, 0)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        } else if (fog == fogLevels.heavy) {\n            pins.digitalWritePin(DigitalPin.P2, 0)\n            pins.digitalWritePin(DigitalPin.P8, 0)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        }\n    }\n\n    //% blockId=NL_RELAY_SockSet\n    //% block=\"set dancing sock to %sockState\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function setSock(state: sockState): void {\n        if(state==sockState.dancing){ pins.digitalWritePin(DigitalPin.P12, 0) }\n        else{ pins.digitalWritePin(DigitalPin.P12, 1) }\n    }\n\n/// END MOTOR & RELAY ///\n\n/// BEGIN OLED\n\n    let d1 = [0, 0, 0, 20, 36, 35, 54, 0, 28, 65, 8, 8, 160, 8, 96, 32, 62, 0, 98, 34, 24, 39, 60, 1, 54, 6, 0, 0, 8, 20, 65, 2, 50, 126, 127, 62, 127, 127, 127, 62, 127, 65, 32, 127, 127, 127, 127, 62, 127, 62, 127, 38, 1, 63, 31, 63, 99, 3, 97, 127, 2, 65, 4, 128, 1, 32, 127, 56, 56, 56, 8, 24, 127, 0, 128, 127, 65, 124, 124, 56, 252, 24, 0, 72, 4, 60, 28, 60, 68, 28, 68, 8, 0, 65, 2]\n    let d2 = [0, 95, 7, 127, 42, 19, 73, 5, 34, 34, 42, 8, 96, 8, 96, 16, 81, 66, 81, 65, 20, 69, 74, 113, 73, 73, 54, 172, 20, 20, 34, 1, 73, 9, 73, 65, 65, 73, 9, 65, 8, 127, 64, 8, 64, 2, 4, 65, 9, 65, 9, 73, 1, 64, 32, 64, 20, 4, 81, 65, 4, 65, 2, 128, 2, 84, 72, 68, 68, 84, 126, 164, 8, 125, 132, 16, 127, 4, 8, 68, 36, 36, 124, 84, 127, 64, 32, 64, 40, 160, 100, 54, 127, 54, 1]\n    let d3 = [0, 0, 0, 20, 127, 8, 85, 3, 65, 28, 28, 62, 0, 8, 0, 8, 73, 127, 73, 73, 18, 69, 73, 9, 73, 73, 54, 108, 34, 20, 20, 81, 121, 9, 73, 65, 65, 73, 9, 65, 8, 65, 65, 20, 64, 12, 8, 65, 9, 81, 25, 73, 127, 64, 64, 56, 8, 120, 73, 65, 8, 127, 1, 128, 4, 84, 68, 68, 68, 84, 9, 164, 4, 0, 125, 40, 64, 24, 4, 68, 36, 36, 8, 84, 68, 64, 64, 48, 16, 160, 84, 65, 0, 8, 1]\n    let d4 = [0, 0, 7, 127, 42, 100, 34, 0, 0, 0, 42, 8, 0, 8, 0, 4, 69, 64, 73, 73, 127, 69, 73, 5, 73, 41, 0, 0, 65, 20, 8, 9, 65, 9, 73, 65, 34, 73, 9, 81, 8, 0, 63, 34, 64, 2, 16, 65, 9, 33, 41, 73, 1, 64, 32, 64, 20, 4, 69, 0, 16, 0, 2, 128, 0, 84, 68, 40, 72, 84, 2, 164, 4, 0, 0, 68, 0, 4, 124, 56, 24, 252, 4, 36, 0, 124, 32, 64, 40, 124, 76, 0, 0, 0, 2]\n    let d5 = [0, 0, 0, 20, 18, 98, 80, 0, 0, 0, 8, 8, 0, 8, 0, 2, 62, 0, 70, 54, 16, 57, 48, 3, 54, 30, 0, 0, 0, 20, 0, 6, 62, 126, 54, 34, 28, 65, 1, 114, 127, 0, 1, 65, 64, 127, 127, 62, 6, 94, 70, 50, 1, 63, 31, 63, 99, 3, 67, 0, 32, 0, 4, 128, 0, 120, 56, 0, 127, 24, 0, 124, 120, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 28, 60, 68, 0, 68, 0, 0, 0, 1]\n\n    let display = [\" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\")]\n    let desired = [\" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\")]\n\n    //% blockId=NL_OLED_Update3\n    //% block=\"oled update from buffer\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function changeThree(): void{\n        let updated: string[][] = []\n        let count = 0\n        for (let row=0; row<8; row++){\n            for(let col=0; col<16; col++){\n                let refChar = desired[row][col]\n                if (refChar != display[row][col]){\n                    writeChar(refChar,row,col)\n                    display[row][col] = refChar\n                    count++\n                    if (count >= 3){\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    //% blockId=NL_OLED_PrintLine\n    //% block=\"print %text to oled buffer line %line\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function printLine(text:any, line:number): void{\n        let thisText = text + \"\"\n        for (let i = 0; i < 16; i++){\n            if (i < thisText.length){\n                desired[line][i]=thisText.charAt(i)\n            } else{\n                desired[line][i]=\" \"\n            }\n        }\n    }\n\n    function oledcmd(c: number) {\n        pins.i2cWriteNumber(0x3c, c, NumberFormat.UInt16BE);\n    }\n\n    function setText(row: number, column: number) {\n        oledcmd(0xB0 + row);            //set page address\n        oledcmd(0x00 + (8 * column & 0x0F));  //set column lower address\n        oledcmd(0x10 + ((8 * column >> 4) & 0x0F));   //set column higher address\n    }\n\n    //% blockId=NL_OLED_Init \n    //% block=\"initiate the oled screen\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function oledinit(): void {\n        oledcmd(0xAE);  // Set display OFF\n        oledcmd(0xD5);  // Set Display Clock Divide Ratio / OSC Frequency 0xD4\n        oledcmd(0x80);  // Display Clock Divide Ratio / OSC Frequency \n        oledcmd(0xA8);  // Set Multiplex Ratio\n        oledcmd(0x3F);  // Multiplex Ratio for 128x64 (64-1)\n        oledcmd(0xD3);  // Set Display Offset\n        oledcmd(0x00);  // Display Offset\n        oledcmd(0x40);  // Set Display Start Line\n        oledcmd(0x8D);  // Set Charge Pump\n        oledcmd(0x14);  // Charge Pump (0x10 External, 0x14 Internal DC/DC)\n        oledcmd(0xA1);  // Set Segment Re-Map\n        oledcmd(0xC8);  // Set Com Output Scan Direction\n        oledcmd(0xDA);  // Set COM Hardware Configuration\n        oledcmd(0x12);  // COM Hardware Configuration\n        oledcmd(0x81);  // Set Contrast\n        oledcmd(0xCF);  // Contrast\n        oledcmd(0xD9);  // Set Pre-Charge Period\n        oledcmd(0xF1);  // Set Pre-Charge Period (0x22 External, 0xF1 Internal)\n        oledcmd(0xDB);  // Set VCOMH Deselect Level\n        oledcmd(0x40);  // VCOMH Deselect Level\n        oledcmd(0xA4);  // Set all pixels OFF\n        oledcmd(0xA6);  // Set display not inverted\n        oledcmd(0xAF);  // Set display On\n        for (let j = 0; j < 8; j++) {\n            setText(j, 0);\n            {\n                for (let i = 0; i < 16; i++)  //clear all columns\n                {\n                    writeChar(\" \",j,i)\n                }\n            }\n        }\n    }\n\n    function writeChar(char: string, row: number, column: number) {\n        setText(row, column)\n        let i = char.charCodeAt(0) - 32\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d1[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d2[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d3[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d4[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d5[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n    }\n\n/// END OLED\n\n\n/// BEGIN DIGITS\n\n    let _SEGMENTS = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71];\n\n    //% blockId=nl_digits_create block=\"4-Digit cPin %cPin dPin %dPin\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function tm1637Create(cPin: DigitalPin, dPin: DigitalPin): TM1637LEDs {\n        let display = new TM1637LEDs();\n        display.clk = cPin\n        display.dio = dPin\n        display.brightness = 7;\n        display.init();\n        return display;\n    }\n    export class TM1637LEDs {\n        buf: Buffer;\n        clk: DigitalPin;\n        dio: DigitalPin;\n        _ON: number;\n        brightness: number;\n        init(): void {\n            pins.digitalWritePin(this.clk, 0);\n            pins.digitalWritePin(this.dio, 0);\n            this._ON = 8;\n            this.buf = pins.createBuffer(4);\n            this.clear();\n        }\n        _start() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _stop() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.dio, 1);\n        }\n        _write_data_cmd() {\n            this._start();\n            this._write_byte(0x40);\n            this._stop();\n        }\n        _write_dsp_ctrl() {\n            this._start();\n            this._write_byte(0x80 | this._ON | this.brightness);\n            this._stop();\n        }\n        _write_byte(b: number) {\n            for (let i = 0; i < 8; i++) {\n                pins.digitalWritePin(this.dio, (b >> i) & 1);\n                pins.digitalWritePin(this.clk, 1);\n                pins.digitalWritePin(this.clk, 0);\n            }\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _intensity(val: number = 7) {\n            this._ON = 8;\n            this.brightness = val - 1;\n            this._write_data_cmd();\n            this._write_dsp_ctrl();\n        }\n        _dat(bit: number, dat: number) {\n            this._write_data_cmd();\n            this._start();\n            this._write_byte(0xC0 | (bit % 4))\n            this._write_byte(dat);\n            this._stop();\n            this._write_dsp_ctrl();\n        }\n        \n        //% blockId=nl_digits_digit block=\"%display|show single number|%num|at digit|%bit\"\n        //% subcategory=\"Display\" group=\"Display\"\n        //% bit.defl=1 bit.min=0 bit.max=9\n        showbit(num: number = 5, bit: number = 0) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            this.buf[bit % 4] = _SEGMENTS[num % 16]\n            this._dat(bit, _SEGMENTS[num % 16])\n        }\n\n        //% blockId=nl_digits_number block=\"%display|show number|%num\"\n        //% subcategory=\"Display\" group=\"Display\"\n        showNumber(num: number) {\n            if (num < 0) {\n                num = -num\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n                this._dat(0, 0x40) // '-'\n                // this._dat(0, 0) // blank\n            }\n            else {\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n            }\n        }\n\n        //% blockId=\"nl_digits_clear\" block=\"clear display %display\"\n        //% subcategory=\"Display\" group=\"Display\"\n        clear() {\n            for (let i = 0; i < 4; i++) {\n                this._dat(i, 0)\n                this.buf[i] = 0\n            }\n        }\n    }\n\n/// END DIGITS\n\n}\n\n\n","pxt.json":"{\n    \"name\": \"NotLegosMaster\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"displaySendBuffer.asm\",\n        \"planetxbasic.ts\",\n        \"notlegos.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"7.0.42\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n","test.ts":""}},{"timestamp":1728784812313,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</variable><variable id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</variable><variable id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</variable><variable id=\"SRvF%Vl7CRHE66Kr9~Q[\">lastLaserR</variable><variable id=\"%FT#@+cF!r3!,1uelm~,\">lastLaserC</variable><variable id=\"hs_o5`X:I}y9{R2!_miN\">lastLaserL</variable><variable id=\"}%7r;bz7Byg#SEH9P{dG\">lastSonarRead</variable><variable id=\"u#;Y3,}t+?Ue.~vd$_;0\">lastHue</variable><variable id=\"5rh0sr-gnWZKflz~gbRk\">lastGesture</variable><variable id=\"at2[c#F7*{?za?uyOm!i\">lastHunt</variable><variable id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</variable><variable id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</variable><variable id=\"vlNJo2)`QokXI:|N|`c|\">theName</variable><variable id=\"uj8c~)bC/;JXc[2;l@N!\">iTook</variable><variable id=\"m`bxu=!~_Nj|:o?}Kk!^\">iBegan</variable><variable id=\"E3,(6Z)tM(C:#!xxP.d,\">isReady</variable><variable id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</variable><variable id=\"y@Q6YNBYQMe6tF/068bo\">lastVolumeRead</variable><variable id=\"W@//5%rK$%/F|oN!f$h$\">digits</variable><variable id=\"-O:q;^~u%Gff-w{^C`Ou\">lastWater</variable></variables><block type=\"function_definition\" x=\"4751\" y=\"-1215\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><field name=\"function_name\">buttonPress</field><value name=\"ba9wfs6wbjdlsow065y8\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">button</field></block></value><statement name=\"STACK\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">button: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">button</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></statement></block><block type=\"function_definition\" x=\"5448\" y=\"-1213\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><field name=\"function_name\">radioSay</field><value name=\"fxkpgrx3u5x98l61f5dik\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">text5</field></block></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">val</field></block></value><statement name=\"STACK\"><block type=\"radio_datagram_send_value\"><value name=\"name\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value></block></value><value name=\"value\"><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">said: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">7</field></shadow></value></block></next></block></statement></block><block type=\"every_interval\" x=\"100\" y=\"-376\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">2000</field></shadow></value><statement name=\"HANDLER\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"uj8c~)bC/;JXc[2;l@N!\">iTook</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value></block></statement></block><block type=\"every_interval\" x=\"773\" y=\"-372\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"controls_if\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"1111\" y=\"-344\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_MP3_UpdateVolume\" disabled-reasons=\"MANUALLY_DISABLED\"></block></statement><statement name=\"ELSE\"><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_operation\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">OR</field><value name=\"A\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_negate\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"BOOL\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</field></block></value></block></value><value name=\"B\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value></block></value></block></value><statement name=\"DO0\"><block type=\"NL_RELAY_FogSet\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"level\">notLegos.fogLevels.none</field></block></statement><statement name=\"ELSE\"><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation elseif=\"2\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_RELAY_FogSet\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"level\">notLegos.fogLevels.light</field></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">2</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"NL_RELAY_FogSet\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"level\">notLegos.fogLevels.medium</field></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">3</field></shadow></value></block></value><statement name=\"DO2\"><block type=\"NL_RELAY_FogSet\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"level\">notLegos.fogLevels.heavy</field></block></statement></block></statement></block></statement></block><block type=\"input_logo_event\" x=\"2390\" y=\"-353\"><field name=\"action\">TouchButtonEvent.Touched</field><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_MP3_PlayerSay\"><field name=\"saying\">notLegos.playerSaying.ready</field><next><block type=\"NL_MP3_SfxPlay\"><field name=\"sfx\">notLegos.sfxType.fire</field><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.intro</field></block></next></block></next></block></statement></block></statement></block><block type=\"NL_OLED_PrintLine\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"572\" y=\"-190\"><value name=\"text\"><block type=\"text_join\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">K0: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogPin.P0</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"NL_OLED_PrintLine\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"text\"><block type=\"text_join\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">K1: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_OLED_PrintLine\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"text\"><block type=\"text_join\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">K2: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P2</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">4</field></shadow></value></block></next></block></next></block><block type=\"every_interval\" x=\"1817\" y=\"-101\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">40</field></shadow></value><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"m`bxu=!~_Nj|:o?}Kk!^\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time\"></block></value><next><block type=\"NL_PIXEL_CastleSayTick\"><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"E3,(6Z)tM(C:#!xxP.d,\">isReady</field></block></value><next><block type=\"function_call\"><mutation name=\"ready_oled\" functionid=\",fv3PGT/J~k#ZH}9er,/\"></mutation><next><block type=\"NL_OLED_Update3\"><next><block type=\"variables_set\"><field name=\"VAR\" id=\"uj8c~)bC/;JXc[2;l@N!\">iTook</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"m`bxu=!~_Nj|:o?}Kk!^\">iBegan</field></block></value></block></value></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"NL_OLED_Init\"><next><block type=\"NL_PIXEL_CastleSay\"><field name=\"sockPin\">DigitalPin.P3</field><field name=\"wheelPin\">DigitalPin.P0</field><field name=\"scorePin\">DigitalPin.P16</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"m`bxu=!~_Nj|:o?}Kk!^\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time_micros\"></block></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field></block></next></block></next></block></next></block></statement></block><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"646\" y=\"269\"><field name=\"VAR\" id=\"y@Q6YNBYQMe6tF/068bo\">lastVolumeRead</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"}%7r;bz7Byg#SEH9P{dG\">lastSonarRead</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"5rh0sr-gnWZKflz~gbRk\">lastGesture</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"u#;Y3,}t+?Ue.~vd$_;0\">lastHue</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"SRvF%Vl7CRHE66Kr9~Q[\">lastLaserR</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"hs_o5`X:I}y9{R2!_miN\">lastLaserL</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"%FT#@+cF!r3!,1uelm~,\">lastLaserC</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"at2[c#F7*{?za?uyOm!i\">lastHunt</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">FALSE</field></block></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">KC$</field></block></value><next><block type=\"pin_set_audio_pin_enabled\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"enabled\"><shadow type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">FALSE</field></shadow></value><next><block type=\"device_led_enable\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"on\"><shadow type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">FALSE</field></shadow></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">GT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"NL_SENSOR_SonarFirstRead\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin1\">DigitalPin.P8</field><field name=\"pin2\">DigitalPin.P9</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value></block></value><next><block type=\"radio_set_group\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><value name=\"ID\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"255\" precision=\"0\"></mutation><field name=\"SLIDER\">171</field></shadow></value><next><block type=\"NL_OLED_Init\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><next><block type=\"controls_if\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_SENSOR_TrimpotSet\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"aPin\">AnalogPin.P10</field><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"W@//5%rK$%/F|oN!f$h$\">digits</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"nl_digits_create\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"cPin\">DigitalPin.P7</field><field name=\"dPin\">DigitalPin.P6</field></block></value><next><block type=\"nl_digits_number\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"display\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"W@//5%rK$%/F|oN!f$h$\">digits</field></block></value><value name=\"num\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">-1000</field></shadow></value><next><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P13</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"NL_MP3_InitiateAs\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"type\">notLegos.mp3type.music</field><field name=\"sPin\">SerialPin.P14</field><next><block type=\"NL_MP3_InitiateAs\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"type\">notLegos.mp3type.sfxvoice</field><field name=\"sPin\">SerialPin.P15</field><next><block type=\"NL_MP3_InitiateAs\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"type\">notLegos.mp3type.player</field><field name=\"sPin\">SerialPin.P16</field><next><block type=\"NL_PIXEL_CastleSay\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"sockPin\">DigitalPin.P11</field><field name=\"wheelPin\">DigitalPin.P5</field><field name=\"scorePin\">DigitalPin.P12</field><next><block type=\"device_pause\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"ms\">20</field></shadow></value><next><block type=\"NL_MP3_SetVolume\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"mp3bit\">notLegos.mp3type.sfxvoice</field><value name=\"vol\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"NL_MP3_SetVolume\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"mp3bit\">notLegos.mp3type.player</field><value name=\"vol\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"NL_MP3_SetVolume\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">100</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P0</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">0</field></shadow></value><next><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P2</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P8</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P12</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"device_set_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P13</field></shadow></value><value name=\"value\"><shadow type=\"math_number_minmax\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation min=\"0\" max=\"1\" precision=\"0\"></mutation><field name=\"SLIDER\">1</field></shadow></value><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_MOTOR_Set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"NL_PIXEL_CastleDo\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"spotPin\">DigitalPin.P14</field><field name=\"brickPin\">DigitalPin.P15</field><field name=\"kongPin\">DigitalPin.P16</field><next><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">check</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"m`bxu=!~_Nj|:o?}Kk!^\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time_micros\" disabled-reasons=\"MANUALLY_DISABLED\"></block></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"E3,(6Z)tM(C:#!xxP.d,\">isReady</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">TRUE</field></block></value><next><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">init</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block><block type=\"variables_set\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"2536\" y=\"310\"><field name=\"VAR\" id=\"-O:q;^~u%Gff-w{^C`Ou\">lastWater</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_js_round\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P0</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value></block></value></block></value></block><block type=\"controls_if\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"2536\" y=\"566\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_CastleSayTick\" disabled-reasons=\"MANUALLY_DISABLED\"><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"at2[c#F7*{?za?uyOm!i\">lastHunt</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_digital_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"digital_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">DigitalPin.P4</field></shadow></value></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"5rh0sr-gnWZKflz~gbRk\">lastGesture</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"Connected_getGesture\" disabled-reasons=\"MANUALLY_DISABLED\"></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"u#;Y3,}t+?Ue.~vd$_;0\">lastHue</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"apds9960_readcolor\" disabled-reasons=\"MANUALLY_DISABLED\"></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"}%7r;bz7Byg#SEH9P{dG\">lastSonarRead</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"NL_SENSOR_SonarNextRead\" disabled-reasons=\"MANUALLY_DISABLED\"></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"SRvF%Vl7CRHE66Kr9~Q[\">lastLaserR</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_js_round\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">80</field></shadow></value></block></value></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"%FT#@+cF!r3!,1uelm~,\">lastLaserC</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_js_round\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P2</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">80</field></shadow></value></block></value></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"hs_o5`X:I}y9{R2!_miN\">lastLaserL</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_js_round\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P3</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">80</field></shadow></value></block></value></block></value><next><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation elseif=\"4\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">wait_start</field></block></value></block></value><statement name=\"DO0\"><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"at2[c#F7*{?za?uyOm!i\">lastHunt</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">idle</field></block></value><next><block type=\"NL_MP3_MusicPlay\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"genre\">notLegos.musicGenre.intro</field><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">boot</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow><block type=\"NL_MP3_PlaytimeMusic\" disabled-reasons=\"MANUALLY_DISABLED\"></block></value></block></next></block></next></block></next></block></statement></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">wait_play</field></block></value></block></value><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">wait_laser</field></block></value></block></value><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">init</field></block></value></block></value><statement name=\"DO3\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">ready</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">1</field></shadow></value></block></statement><value name=\"IF4\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">wait_reg</field></block></value></block></value><statement name=\"DO4\"><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">NEQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"5rh0sr-gnWZKflz~gbRk\">lastGesture</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">0</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">tutorial</field></block></value><next><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"runTutorial\" functionid=\"Y{7P,}tzRL|sul3I;].}\"></mutation></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">FALSE</field></shadow></value></block></statement></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"NL_PIXEL_CastleDoTick\" disabled-reasons=\"MANUALLY_DISABLED\"><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"logic_boolean\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"BOOL\">TRUE</field></block></value><next><block type=\"variables_set\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P1</field></shadow></value></block></value><next><block type=\"controls_if\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation elseif=\"4\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">10</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><value name=\"ba9wfs6wbjdlsow065y8\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">A</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">60</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><value name=\"ba9wfs6wbjdlsow065y8\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">B</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.fire</field></block></next></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">110</field></shadow></value></block></value><statement name=\"DO2\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><value name=\"ba9wfs6wbjdlsow065y8\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">C</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.mine</field></block></next></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">200</field></shadow></value></block></value><statement name=\"DO3\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><value name=\"ba9wfs6wbjdlsow065y8\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">D</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field></block></next></block></statement><value name=\"IF4\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"OP\">LT</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"h/D9XaIzf|A5NH51qbEm\">buttonRow</field></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">700</field></shadow></value></block></value><statement name=\"DO4\"><block type=\"function_call\" disabled-reasons=\"MANUALLY_DISABLED\"><mutation name=\"buttonPress\" functionid=\"hQwd-E[c|~F-X8]@NzHG\"><arg name=\"button\" id=\"ba9wfs6wbjdlsow065y8\" type=\"string\"></arg></mutation><value name=\"ba9wfs6wbjdlsow065y8\"><shadow type=\"text\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"TEXT\">E</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field></block></next></block></statement></block></next></block></next></block></next></block></statement></block><block type=\"every_interval\" x=\"1006\" y=\"713\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"radio_on_value_drag\" x=\"3549\" y=\"584\"><value name=\"HANDLER_DRAG_PARAM_name\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">name</field></block></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">value</field></block></value><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_substr\"><value name=\"this\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value><value name=\"start\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"length\"><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field></block></value></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_substr\"><value name=\"this\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value><value name=\"start\"><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field></block></value></block></value><value name=\"length\"><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text_length\"><value name=\"VALUE\"><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"e(zt=aWo[lY`jeVUoVJF\">btToken</field></block></value></block></value></block></value></block></value><next><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"controls_if\"><mutation elseif=\"3\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wstar</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_start</field></block></value></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value><statement name=\"DO1\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.welcome</field></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.WheelAll</field><field name=\"effect\">notLegos.vfxEffect.fire</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.intro</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_reg</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">check</field></block></value></block></value><statement name=\"DO2\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">ready</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value></block></statement><statement name=\"ELSE\"><block type=\"controls_if\"><mutation elseif=\"3\" else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">ready</field></block></value></block></value><statement name=\"DO0\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">wstar</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.KongFront</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">boot</field></block></value></block></value><statement name=\"DO1\"><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1000</field></shadow></value></block></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">200</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.idle</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotH</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotI</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">0</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.BrickDragon</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotE</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">tutor</field></block></value></block></value><statement name=\"DO2\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotA</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotB</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value></block></statement><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">heard: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"vlNJo2)`QokXI:|N|`c|\">theName</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">6</field></shadow></value></block></next></block></next></block></statement></block></statement></block><block type=\"nl_digits_number\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"1050\" y=\"881\"><value name=\"display\"><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"W@//5%rK$%/F|oN!f$h$\">digits</field></block></value><value name=\"num\"><shadow type=\"math_number\"><field name=\"NUM\">-1000</field></shadow><block type=\"variables_get\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"VAR\" id=\"-O:q;^~u%Gff-w{^C`Ou\">lastWater</field></block></value></block><block type=\"device_get_analog_pin\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"1197\" y=\"952\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P0</field></shadow></value></block><block type=\"logic_compare\" disabled-reasons=\"ORPHANED_BLOCK,MANUALLY_DISABLED\" x=\"2373\" y=\"1291\"><field name=\"OP\">LTE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_analog_pin\" disabled-reasons=\"MANUALLY_DISABLED\"><value name=\"name\"><shadow type=\"analog_read_write_pin_shadow\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"pin\">AnalogReadWritePin.P0</field></shadow></value></block></value><value name=\"B\"><shadow type=\"math_number\" disabled-reasons=\"MANUALLY_DISABLED\"><field name=\"NUM\">90</field></shadow></value></block><block type=\"function_definition\" x=\"-562\" y=\"3309\"><mutation name=\"fogFlood\" functionid=\"k_s2+XI@*gx2@)wty=I0\"></mutation><field name=\"function_name\">fogFlood</field><statement name=\"STACK\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</field></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">10000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">para</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.mid</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.off</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.dancing</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.still</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">8000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.min</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"-120\" y=\"3309\"><mutation name=\"runTutorial\" functionid=\"Y{7P,}tzRL|sul3I;].}\"></mutation><field name=\"function_name\">runTutorial</field><statement name=\"STACK\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"nKRfWQ(syQc/y.8DQ.x#\"><arg name=\"text5\" id=\"fxkpgrx3u5x98l61f5dik\" type=\"string\"></arg><arg name=\"val\" id=\"rvdhqzqjw8gzz1h9w1uw\" type=\"number\"></arg></mutation><value name=\"fxkpgrx3u5x98l61f5dik\"><shadow type=\"text\"><field name=\"TEXT\">tutor</field></shadow></value><value name=\"rvdhqzqjw8gzz1h9w1uw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">80</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">20</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.tutorial</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"^acr(i@uH|C[8LteG?#}\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto1</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5950</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto2</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto3</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7600</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto4</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6100</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto5</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">13000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto6</field><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"function_definition\" x=\"236\" y=\"3309\"><mutation name=\"ready_oled\" functionid=\",fv3PGT/J~k#ZH}9er,/\"></mutation><field name=\"function_name\">ready_oled</field><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"PDL_XYoU-yQc6,h6soef\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Say //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"6\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"SRvF%Vl7CRHE66Kr9~Q[\">lastLaserR</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> C</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"%FT#@+cF!r3!,1uelm~,\">lastLaserC</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"hs_o5`X:I}y9{R2!_miN\">lastLaserL</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"8\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">S</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"}%7r;bz7Byg#SEH9P{dG\">lastSonarRead</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> H</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_js_round\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"u#;Y3,}t+?Ue.~vd$_;0\">lastHue</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> G</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"5rh0sr-gnWZKflz~gbRk\">lastGesture</field></block></value><value name=\"ADD6\"><shadow type=\"text\"><field name=\"TEXT\"> N</field></shadow></value><value name=\"ADD7\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"at2[c#F7*{?za?uyOm!i\">lastHunt</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">Mode: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M:</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"NL_MP3_PlaytimeMusic\"></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">4</field></shadow></value></block></next></block></next></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Do //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"6yx5zEY;NaJR[fa/,a#f\">castleMode</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> T </field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Wdm0N8:YM*4Q+_(l9!-/\">fogToggle</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement></block></statement></block></xml>","main.ts":"function radioSay (text5: string, val: number) {\n    radio.sendValue(\"\" + btToken + text5, val)\n    notLegos.printLine(\"said: \" + text5 + \"=\" + val, 7)\n}\nfunction buttonPress (button: string) {\n    notLegos.printLine(\"button: \" + button, 3)\n}\nfunction runTutorial () {\n    radioSay(\"tutor\", 1)\n    notLegos.setVolume(notLegos.mp3type.music, 80)\n    basic.pause(20)\n    notLegos.mp3musicPlay(notLegos.musicGenre.tutorial)\n    fogLevel = 3\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto1)\n    basic.pause(5950)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto2)\n    basic.pause(5000)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto3)\n    basic.pause(7600)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto4)\n    basic.pause(6100)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto5)\n    basic.pause(13000)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto6)\n    notLegos.setVolume(notLegos.mp3type.music, 100)\n    basic.pause(7000)\n    notLegos.mp3musicPlay(notLegos.musicGenre.awaiting)\n}\nfunction ready_oled () {\n    if (isCastleSay) {\n        let lastHunt = 0\n        let lastGesture = 0\n        let lastHue = 0\n        let lastSonarRead = 0\n        let lastLaserL = 0\n        let lastLaserC = 0\n        let lastLaserR = 0\n        notLegos.printLine(\"// Castle Say //\", 0)\n        notLegos.printLine(\"R\" + Math.constrain(lastLaserR, 0, 9) + \" C\" + Math.constrain(lastLaserC, 0, 9) + \" L\" + Math.constrain(lastLaserL, 0, 9), 1)\n        notLegos.printLine(\"S\" + lastSonarRead + \" H\" + Math.round(lastHue / 3) + \" G\" + lastGesture + \" N\" + lastHunt, 2)\n        notLegos.printLine(\"Mode: \" + castleMode, 3)\n        notLegos.printLine(\"M:\" + notLegos.mp3durationMusic(), 4)\n    } else {\n        notLegos.printLine(\"// Castle Do //\", 0)\n        notLegos.printLine(\"M: \" + castleMode + \" T \" + fogToggle, 1)\n    }\n}\nradio.onReceivedValue(function (name, value) {\n    if (name.substr(0, btToken.length) == btToken) {\n        theName = name.substr(btToken.length, name.length - btToken.length)\n        if (isCastleSay) {\n            if (theName == \"wstar\") {\n                castleMode = \"wait_start\"\n            } else if (theName == \"welco\") {\n                if (value == 1) {\n                    notLegos.vfxReset(notLegos.vfxEffect.glow)\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.glow)\n                    notLegos.mp3voicePlay(notLegos.voiceSaying.welcome)\n                } else if (value == 2) {\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                    notLegos.setEffect(notLegos.vfxRegion.WheelAll, notLegos.vfxEffect.fire)\n                    basic.pause(1200)\n                    notLegos.mp3voicePlay(notLegos.voiceSaying.intro)\n                    basic.pause(3000)\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                    basic.pause(4000)\n                    notLegos.mp3musicPlay(notLegos.musicGenre.awaiting)\n                    castleMode = \"wait_reg\"\n                }\n            } else if (theName == \"check\") {\n                notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                radioSay(\"ready\", 1)\n            } else if (false) {\n            \t\n            }\n        } else {\n            if (theName == \"ready\") {\n                radioSay(\"wstar\", 1)\n                notLegos.setEffect(notLegos.vfxRegion.KongFront, notLegos.vfxEffect.indicate)\n            } else if (theName == \"boot\") {\n                fogLevel = 3\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.parade)\n                notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.max)\n                basic.pause(value * 1000)\n                notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.min)\n                basic.pause(1000)\n                radioSay(\"welco\", 1)\n                basic.pause(200)\n                notLegos.vfxReset(notLegos.vfxEffect.glow)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.glow)\n                basic.pause(5000)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.idle)\n                notLegos.setEffect(notLegos.vfxRegion.SpotH, notLegos.vfxEffect.mine)\n                notLegos.setEffect(notLegos.vfxRegion.SpotI, notLegos.vfxEffect.mine)\n                basic.pause(0)\n                radioSay(\"welco\", 2)\n                basic.pause(4500)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.off)\n                basic.pause(500)\n                notLegos.setEffect(notLegos.vfxRegion.BrickDragon, notLegos.vfxEffect.indicate)\n                basic.pause(1200)\n                notLegos.setEffect(notLegos.vfxRegion.SpotC, notLegos.vfxEffect.indicate)\n                notLegos.setEffect(notLegos.vfxRegion.SpotE, notLegos.vfxEffect.indicate)\n                basic.pause(3000)\n                fogLevel = 1\n                notLegos.motorSet(notLegos.motors.door, notLegos.motorState.max)\n            } else if (theName == \"tutor\") {\n                if (value == 1) {\n                    notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.off)\n                    basic.pause(4000)\n                    notLegos.vfxReset(notLegos.vfxEffect.glow)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotA, notLegos.vfxEffect.glow)\n                    basic.pause(6000)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotB, notLegos.vfxEffect.indicate)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotC, notLegos.vfxEffect.indicate)\n                } else if (value == 2) {\n                \t\n                }\n            } else if (theName == \"welco\") {\n            \t\n            } else {\n            \t\n            }\n        }\n        notLegos.printLine(\"heard: \" + theName + \"=\" + value, 6)\n    }\n})\ninput.onLogoEvent(TouchButtonEvent.Touched, function () {\n    if (isCastleSay) {\n        notLegos.mp3sayPlay(notLegos.playerSaying.ready)\n        notLegos.mp3sfxPlay(notLegos.sfxType.fire)\n        notLegos.mp3musicPlay(notLegos.musicGenre.intro)\n    }\n})\nfunction fogFlood () {\n    if (fogToggle) {\n        fogLevel = 3\n        basic.pause(10000)\n        notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.parade)\n        radioSay(\"para\", 1)\n        fogLevel = 0\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.max)\n        notLegos.motorSet(notLegos.motors.door, notLegos.motorState.max)\n        basic.pause(1000)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.mid)\n        basic.pause(6000)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.min)\n        basic.pause(500)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.off)\n        notLegos.motorSet(notLegos.motors.door, notLegos.motorState.min)\n        fogLevel = 1\n        notLegos.setSock(notLegos.sockState.dancing)\n        basic.pause(6000)\n        notLegos.setSock(notLegos.sockState.still)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.max)\n        basic.pause(8000)\n        notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.redrack, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.redrack, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shark, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shark, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.ghost, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.ghost, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.cannon, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.cannon, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.oarrack, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.oarrack, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shell, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shell, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.dragon, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.dragon, notLegos.motorState.min)\n    }\n}\nlet iTook = 0\nlet theName = \"\"\nlet fogToggle = 0\nlet castleMode = \"\"\nlet isCastleSay = 0\nlet fogLevel = 0\nlet btToken = \"\"\nnotLegos.oledinit()\nnotLegos.castleSayLights(DigitalPin.P3, DigitalPin.P0, DigitalPin.P16)\nlet iBegan = input.runningTimeMicros()\nnotLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.parade)\nloops.everyInterval(500, function () {\n\t\n})\nloops.everyInterval(500, function () {\n\t\n})\nloops.everyInterval(2000, function () {\n    notLegos.printLine(\"\" + iTook + \"\", 5)\n})\nloops.everyInterval(40, function () {\n    let isReady = 0\n    iBegan = input.runningTime()\n    notLegos.castleSayTick()\n    if (isReady) {\n    \t\n    }\n    ready_oled()\n    notLegos.changeThree()\n    iTook = input.runningTime() - iBegan\n})\n","README.md":"\n> Open this page at [https://notlegos.github.io/castleresay/](https://notlegos.github.io/castleresay/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/castleresay** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/castleresay** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/soundbank/](https://notlegos.github.io/soundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/soundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/soundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/resoundbank/](https://notlegos.github.io/resoundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/resoundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/resoundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosext/](https://notlegos.github.io/notlegosext/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosext** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosext** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosmaster/](https://notlegos.github.io/notlegosmaster/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosmaster** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosmaster** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","displaySendBuffer.asm":"sendBufferAsm:\n\n    push {r4,r5,r6,r7,lr}\n    \n    mov r4, r0 ; save buff\n    mov r6, r1 ; save pin\n    \n    mov r0, r4\n    bl BufferMethods::length\n    mov r5, r0\n    \n    mov r0, r4\n    bl BufferMethods::getBytes\n    mov r4, r0\n    \n    ; setup pin as digital\n    mov r0, r6\n    movs r1, #0\n    bl pins::digitalWritePin\n    \n    ; load pin address\n    mov r0, r6\n    bl pins::getPinAddress\n\n    ldr r0, [r0, #8] ; get mbed DigitalOut from MicroBitPin\n    ldr r1, [r0, #4] ; r1-mask for this pin\n    ldr r2, [r0, #16] ; r2-clraddr\n    ldr r3, [r0, #12] ; r3-setaddr\n    \n    cpsid i ; disable irq\n    \n    b .start\n    \n.nextbit:               ;            C0\n    str r1, [r3, #0]    ; pin := hi  C2\n    tst r6, r0          ;            C3\n    bne .islate         ;            C4\n    str r1, [r2, #0]    ; pin := lo  C6\n.islate:\n    lsrs r6, r6, #1     ; r6 >>= 1   C7\n    bne .justbit        ;            C8\n    \n    ; not just a bit - need new byte\n    adds r4, #1         ; r4++       C9\n    subs r5, #1         ; r5--       C10\n    bcc .stop           ; if (r5<0) goto .stop  C11\n.start:\n    movs r6, #0x80      ; reset mask C12\n    nop                 ;            C13\n\n.common:               ;             C13\n    str r1, [r2, #0]   ; pin := lo   C15\n    ; always re-load byte - it just fits with the cycles better this way\n    ldrb r0, [r4, #0]  ; r0 := *r4   C17\n    b .nextbit         ;             C20\n\n.justbit: ; C10\n    ; no nops, branch taken is already 3 cycles\n    b .common ; C13\n\n.stop:    \n    str r1, [r2, #0]   ; pin := lo\n    cpsie i            ; enable irq\n\n    pop {r4,r5,r6,r7,pc}\n","planetxbasic.ts":"/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#00B1ED  icon=\"\\uf005\" block=\"Connected\" blockId=\"PlanetX_Connected\"\n//% groups='[\"Digital\", \"Analog\", \"IIC Port\"]'\nnamespace Connected {\n    \n    ////////////////////////paj7620//////////////////////\n    let gesture_first_init = true\n    const initRegisterArray: number[] = [\n        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17,\n        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F,\n        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14,\n        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27,\n        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01,\n        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00,\n        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20,\n        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37,\n        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A,\n        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F,\n        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30,\n        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19,\n        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04,\n        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00,\n        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00,\n        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F,\n        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07,\n        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01,\n        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F,\n        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01,\n        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40,\n        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E,\n        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00,\n        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08,\n        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00,\n        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01,\n        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01,\n        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01\n    ];\n    \n    /////////////////////////color/////////////////////////\n    const APDS9960_ADDR = 0x39\n    const APDS9960_ENABLE = 0x80\n    const APDS9960_ATIME = 0x81\n    const APDS9960_CONTROL = 0x8F\n    const APDS9960_STATUS = 0x93\n    const APDS9960_CDATAL = 0x94\n    const APDS9960_CDATAH = 0x95\n    const APDS9960_RDATAL = 0x96\n    const APDS9960_RDATAH = 0x97\n    const APDS9960_GDATAL = 0x98\n    const APDS9960_GDATAH = 0x99\n    const APDS9960_BDATAL = 0x9A\n    const APDS9960_BDATAH = 0x9B\n    const APDS9960_GCONF4 = 0xAB\n    const APDS9960_AICLEAR = 0xE7\n    let color_first_init = false\n\n    function i2cwrite_color(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n    function i2cread_color(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n    function rgb2hsl(color_r: number, color_g: number, color_b: number): number {\n        let Hue = 0\n        let R = color_r * 100 / 255;\n        let G = color_g * 100 / 255;\n        let B = color_b * 100 / 255;\n        let maxVal = Math.max(R, Math.max(G, B))\n        let minVal = Math.min(R, Math.min(G, B))\n        let Delta = maxVal - minVal;\n\n        if (Delta < 0) {\n            Hue = 0;\n        }\n        else if (maxVal == R && G >= B) {\n            Hue = (60 * ((G - B) * 100 / Delta)) / 100;\n        }\n        else if (maxVal == R && G < B) {\n            Hue = (60 * ((G - B) * 100 / Delta) + 360 * 100) / 100;\n        }\n        else if (maxVal == G) {\n            Hue = (60 * ((B - R) * 100 / Delta) + 120 * 100) / 100;\n        }\n        else if (maxVal == B) {\n            Hue = (60 * ((R - G) * 100 / Delta) + 240 * 100) / 100;\n        }\n        return Hue\n    }\n    function initModule(): void {\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ATIME, 252)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_CONTROL, 0x03)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_GCONF4, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_AICLEAR, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x01)\n        color_first_init = true\n    }\n    function colorMode(): void {\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_ENABLE) | 0x2;\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, tmp);\n    }\n\n    ///////////////////////////////////////////////////////MP3\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    /*\n    * Play status selection button list\n    */\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(100)\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,        \n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum Distance_Unit_List {\n        //% block=\"cm\" \n        Distance_Unit_cm,\n\n        //% block=\"foot\"\n        Distance_Unit_foot,\n    }\n    export enum ButtonStateList {\n        //% block=\"C\"\n        C,\n        //% block=\"D\"\n        D,\n        //% block=\"C+D\"\n        CD\n    }\n    export enum GestureType {\n        //% block=\"None\"\n        None = 0,\n        //% block=\"Right\"\n        Right = 1,\n        //% block=\"Left\"\n        Left = 2,\n        //% block=\"Up\"\n        Up = 3,\n        //% block=\"Down\"\n        Down = 4,\n        //% block=\"Forward\"\n        Forward = 5,\n        //% block=\"Backward\"\n        Backward = 6,\n        //% block=\"Clockwise\"\n        Clockwise = 7,\n        //% block=\"Anticlockwise\"\n        Anticlockwise = 8,\n        //% block=\"Wave\"\n        Wave = 9\n    }\n    export enum ColorList {\n        //% block=\"Red\"\n        red,\n        //% block=\"Green\"\n        green,\n        //% block=\"Blue\"\n        blue,\n        //% block=\"Cyan\"\n        cyan,\n        //% block=\"Magenta\"\n        magenta,\n        //% block=\"Yellow\"\n        yellow,\n        //% block=\"White\"\n        white\n    }\n\n    ///////////////////////////////////blocks/////////////////////////////\n\n    //% blockId=\"readwaterLevel\" block=\"Water level sensor %Rjpin value(0~100)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function waterLevel(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        let voltage = 0, waterlevel = 0;\n        voltage = pins.map(\n            pins.analogReadPin(pin),\n            50,\n            600,\n            0,\n            100\n        );\n        if (voltage < 0) {\n            voltage = 0\n        }\n        waterlevel = voltage;\n        return Math.round(waterlevel)\n    }\n\n    let distance_last = 0\n\n    //% blockId=sonarbit block=\"Ultrasonic sensor pinT %tPin pinE %ePin distance %distance_unit\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% distance_unit.fieldEditor=\"gridpicker\"\n    //% distance_unit.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    export function ultrasoundSensor(tPin: DigitalPin, ePin: DigitalPin, distance_unit: Distance_Unit_List): number {\n        let pinT = tPin\n        let pinE = ePin\n        pins.setPull(pinT, PinPullMode.PullNone)\n        pins.digitalWritePin(pinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(pinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(pinT, 0)\n\n        // read pulse\n        let d = pins.pulseIn(pinE, PulseValue.High, 25000)\n        let version = control.hardwareVersion()\n        let distance = d * 34 / 2 / 1000\n        if (version == \"1\") {\n            distance = distance * 3 / 2\n        }\n\n        if (distance > 430) {\n            distance = 0\n        }\n\n        if (distance == 0) {\n            distance = distance_last\n            distance_last = 0\n        }\n        else {\n            distance_last = distance\n        }\n\n        switch (distance_unit) {\n            case Distance_Unit_List.Distance_Unit_cm:\n                return Math.floor(distance)  //cm\n                break\n            case Distance_Unit_List.Distance_Unit_foot:\n                return Math.floor(distance / 30.48)   //foot\n                break\n            default:\n                return 0\n        }\n    }\n\n    export class PAJ7620 {\n        private paj7620WriteReg(addr: number, cmd: number) {\n            let buf: Buffer = pins.createBuffer(2);\n            buf[0] = addr;\n            buf[1] = cmd;\n            pins.i2cWriteBuffer(0x73, buf, false);\n        }\n        private paj7620ReadReg(addr: number): number {\n            let buf: Buffer = pins.createBuffer(1);\n            buf[0] = addr;\n            pins.i2cWriteBuffer(0x73, buf, false);\n            buf = pins.i2cReadBuffer(0x73, 1, false);\n            return buf[0];\n        }\n        private paj7620SelectBank(bank: number) {\n            if (bank == 0) this.paj7620WriteReg(0xEF, 0);\n            else if (bank == 1) this.paj7620WriteReg(0xEF, 1);\n        }\n        private paj7620Init() {\n            let temp = 0;\n            this.paj7620SelectBank(0);\n            temp = this.paj7620ReadReg(0);\n            if (temp == 0x20) {\n                for (let i = 0; i < 438; i += 2) {\n                    this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);\n                }\n            }\n            this.paj7620SelectBank(0);\n        }\n        init() {\n            this.paj7620Init();\n            basic.pause(200);\n        }\n        read(): number {\n            let data = 0, result = 0;\n            data = this.paj7620ReadReg(0x43);\n            switch (data) {\n                case 0x01:\n                    result = GestureType.Right;\n                    break;\n                case 0x02:\n                    result = GestureType.Left;\n                    break;\n                case 0x04:\n                    result = GestureType.Up;\n                    break;\n                case 0x08:\n                    result = GestureType.Down;\n                    break;\n                case 0x10:\n                    result = GestureType.Forward;\n                    break;\n                case 0x20:\n                    result = GestureType.Backward;\n                    break;\n                case 0x40:\n                    result = GestureType.Clockwise;\n                    break;\n                case 0x80:\n                    result = GestureType.Anticlockwise;\n                    break;\n                default:\n                    data = this.paj7620ReadReg(0x44);\n                    if (data == 0x01)\n                        result = GestureType.Wave;\n                    break;\n            }\n            return result;\n        }\n    }\n    const gestureEventId = 3100;\n    let lastGesture = GestureType.None;\n    let paj7620 = new PAJ7620();\n    //% blockId= gesture_create_event block=\"Gesture sensor IIC port is %gesture\"\n    //% gesture.fieldEditor=\"gridpicker\" gesture.fieldOptions.columns=3\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function onGesture(gesture: GestureType, handler: () => void) {\n        control.onEvent(gestureEventId, gesture, handler);\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        control.inBackground(() => {\n            while (true) {\n                const gesture = paj7620.read();\n                if (gesture != lastGesture) {\n                    lastGesture = gesture;\n                    control.raiseEvent(gestureEventId, lastGesture);\n                }\n                basic.pause(200);\n            }\n        })\n    }\n\n    //% blockId= gesture_get_event block=\"Gesture sensor IIC port detects\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function getGesture(): number {\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        const gesture = paj7620.read();\n        return gesture\n    }\n\n\n\n\n    //% blockId=apds9960_readcolor block=\"Color sensor IIC port color HUE(0~360)\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function readColor(): number {\n        if (color_first_init == false) {\n            initModule()\n            colorMode()\n        }\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        while (!tmp) {\n            basic.pause(5);\n            tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        }\n        let c = i2cread_color(APDS9960_ADDR, APDS9960_CDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_CDATAH) * 256;\n        let r = i2cread_color(APDS9960_ADDR, APDS9960_RDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_RDATAH) * 256;\n        let g = i2cread_color(APDS9960_ADDR, APDS9960_GDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_GDATAH) * 256;\n        let b = i2cread_color(APDS9960_ADDR, APDS9960_BDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_BDATAH) * 256;\n        // map to rgb based on clear channel\n        let avg = c / 3;\n        r = r * 255 / avg;\n        g = g * 255 / avg;\n        b = b * 255 / avg;\n        //let hue = rgb2hue(r, g, b);\n        let hue = rgb2hsl(r, g, b)\n        return hue\n    }\n    //% block=\"Color sensor IIC port detects %color\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% color.fieldEditor=\"gridpicker\" color.fieldOptions.columns=3\n    export function checkColor(color: ColorList): boolean {\n        let hue = readColor()\n        switch (color) {\n            case ColorList.red:\n                if (hue > 330 || hue < 20) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.green:\n                if (hue > 120 && 180 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.blue:\n                if (hue > 210 && 270 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.cyan:\n                if (hue > 190 && 210 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.magenta:\n                if (hue > 260 && 330 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.yellow:\n                if (hue > 30 && 120 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.white:\n                if (hue >= 180 && 190 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n        }\n    }\n\n    //% blockId=\"potentiometer\" block=\"Trimpot %Rjpin analog value\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Input color=#E2C438 group=\"Analog\"\n    export function trimpot(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        return pins.analogReadPin(pin)\n    }\n    //% blockId=buttonab block=\"Button %Rjpin %button is pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonCD(Rjpin: DigitalRJPin, button: ButtonStateList): boolean {\n        let pinC = DigitalPin.P1\n        let pinD = DigitalPin.P2\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pinC = DigitalPin.P1\n                pinD = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pinC = DigitalPin.P2\n                pinD = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pinC = DigitalPin.P13\n                pinD = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pinC = DigitalPin.P15\n                pinD = DigitalPin.P16\n                break;\n            case DigitalRJPin.P3:\n                pinC = DigitalPin.P3\n                pinD = DigitalPin.P4\n                break;\n        }\n        pins.setPull(pinC, PinPullMode.PullUp)\n        pins.setPull(pinD, PinPullMode.PullUp)\n        if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 0 && button == ButtonStateList.CD) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinC) == 0 && pins.digitalReadPin(pinD) == 1 && button == ButtonStateList.C) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 1 && button == ButtonStateList.D) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    export enum ButtonState {\n        //% block=\"on\"\n        on = 1,\n        //% block=\"off\"\n        off = 2\n    }\n\n    const buttonEventSource = 5000\n    const buttonEventValue = {\n        CD_pressed: ButtonState.on,\n        CD_unpressed: ButtonState.off\n    }\n\n    //% block=\"on button %Rjpin %button pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=4\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonEvent(Rjpin: DigitalRJPin, button: ButtonStateList, handler: () => void) {\n        let ButtonPin_C = DigitalPin.P1\n        let ButtonPin_D = DigitalPin.P2\n        let pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P0\n        let pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                ButtonPin_C = DigitalPin.P1\n                ButtonPin_D = DigitalPin.P8\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P1\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P8\n                break;\n            case DigitalRJPin.J2:\n                ButtonPin_C = DigitalPin.P2\n                ButtonPin_D = DigitalPin.P12\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P2\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P12\n                break;\n            case DigitalRJPin.J3:\n                ButtonPin_C = DigitalPin.P13\n                ButtonPin_D = DigitalPin.P14\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P13\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P14\n                break;\n            case DigitalRJPin.J4:\n                ButtonPin_C = DigitalPin.P15\n                ButtonPin_D = DigitalPin.P16\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P15\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P16\n                break;\n            case DigitalRJPin.P3:\n                ButtonPin_C = DigitalPin.P3\n                ButtonPin_D = DigitalPin.P4\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P3\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P4\n                break;\n        }\n        if (button == ButtonStateList.C) {\n            pins.setPull(ButtonPin_C, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_C, PinEventType.Edge)\n            control.onEvent(pinEventSource_C, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.D) {\n            pins.setPull(ButtonPin_D, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_D, PinEventType.Edge)\n            control.onEvent(pinEventSource_D, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.CD) {\n            loops.everyInterval(50, function () {\n                if (pins.digitalReadPin(ButtonPin_C) == 0 && pins.digitalReadPin(ButtonPin_D) == 0) {\n                    control.raiseEvent(buttonEventSource, buttonEventValue.CD_pressed)\n                }\n            })\n            control.onEvent(buttonEventSource, buttonEventValue.CD_pressed, handler)\n        }\n    }\n\n    //% blockId=fans block=\"Motor fan %Rjpin toggle to $fanstate || speed %speed \\\\%\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% fanstate.shadow=\"toggleOnOff\"\n    //% subcategory=Excute group=\"Digital\" color=#EA5532\n    //% speed.min=0 speed.max=100\n    //% expandableArgumentMode=\"toggle\"\n    export function motorFan(Rjpin: DigitalRJPin, fanstate: boolean, speed: number = 100): void {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case DigitalRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n            case DigitalRJPin.J3:\n                pin = AnalogPin.P13\n                break;\n            case DigitalRJPin.J4:\n                pin = AnalogPin.P15\n                break;\n        }\n        if (fanstate) {\n            pins.analogSetPeriod(pin, 100)\n            pins.analogWritePin(pin, Math.map(speed, 0, 100, 0, 1023))\n        }\n        else {\n            pins.analogWritePin(pin, 0)\n            speed = 0\n        }\n    }\n\n\n    //% blockId=\"setLoopFolder\" block=\"loop play all the MP3s in the folder:$folderNum\"\n    //% folderNum.defl=\"01\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setLoopFolder(folderNum: string): void {\n        CMD = 0x17\n        para1 = 0\n        para2 = parseInt(folderNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    //% blockId=\"folderPlay\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum || repeatList: $myAns\"\n    //% folderNum.defl=\"01\" fileNum.defl=\"001\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function folderPlay(folderNum: string, fileNum: string, myAns: boolean = false): void {\n        CMD = 0x0F\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        if (myAns)\n            execute(0x19)\n    }\n\n    //% blockId=\"playFolderFilePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFilePort(folderNum: string, fileNum: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFolderFileVolumePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum with volume:$theVolume usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" theVolume.defl=\"10\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFileVolumePort(folderNum: string, fileNum: string, theVolume: string, Rjpin: DigitalRJPin): void {\n        \n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        \n        let volume = parseInt(theVolume)\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(200)\n\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"volumePort\" \n    //% block=\"set MP3 volume:$theVolume usingPin:$Rjpin\"\n    //% theVolume.defl=\"10\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function volumePort(theVolume: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        let volume = parseInt(theVolume)\n        if (volume > 30) {\n            volume = 30\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(300)\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n\n\n    //% blockId=\"setTracking\" \n    //% block=\"play the mp3 in order of:%tracking || repeatList: $myAns\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% tracking.defl=1\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setTracking(tracking: number, myAns: boolean = false): void {\n        CMD = 0x03\n        para1 = 0x00\n        para2 = tracking\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        execute(0x0D)\n        if (myAns)\n            execute(0x19)\n    }\n    //% blockId=MP3execute block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=\"setVolume\" block=\"Set volume(0~25):%volume\"\n    //% volume.min=0 volume.max=25\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setVolume(volume: number): void {\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 0x06\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=MP3setPort block=\"Set the MP3 port to %Rjpin\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function MP3SetPort(Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        setVolume(25)\n    }\n}","notlegos.ts":"// NotLegos Blocks\n//% block=\"Not LEGOs\" color=#0031AF weight=1000 icon=\"\\uf3a5\"\n//% groups='[\"MP3\",\"Sensors\"]'\nnamespace notLegos {\n\n\n/// BEGIN NEOPIXEL ///\n    export enum hues { red = 0, orange = 15, yellow = 40, lime = 85, green = 110, cyan = 170, blue = 240, purple = 260, pink = 310 }\n    export enum vfxEffect { parade = 0, fire = 1, indicate = 2, idle = 3, glow = 4, mine = 5, off = 6 }\n    let NeoSock: Strip = null; let NeoScore: Strip = null; let NeoWheel: Strip = null; let NeoKong: Strip = null; let NeoStrip: Strip = null; let NeoBrick: Strip = null\n    let vfx_mine_tog: number[] = []; let vfx_mine_hue: number[] = []; let vfx_mine_sat: number[] = []; let vfx_mine_lum: number[] = []\n    let vfx_fire_tog: number[] = []; let vfx_fire_hue: number[] = []; let vfx_fire_sat: number[] = []; let vfx_fire_lum: number[] = []; let vfx_fire_colors: number[] = []\n    let vfx_indicate_tog: number[] = []; let vfx_indicate_hue: number[] = []; let vfx_indicate_sat: number[] = []; let vfx_indicate_lum: number[] = [];\n    let vfx_idle_tog: number[] = []; let vfx_idle_hue: number[] = []; let vfx_idle_sat: number[] = []; let vfx_idle_lum: number[] = []\n    let vfx_glow_tog: number[] = []; let vfx_glow_hue: number[] = []; let vfx_glow_sat: number[] = []; let vfx_glow_lum: number[] = []\n    let vfx_parade_tog: number[] = []; let vfx_parade_hue: number[] = []; let vfx_parade_sat: number[] = []; let vfx_parade_lum: number[] = []; let vfx_parade_colors: number[] = [];\n    let vfx_last_tog: number[] = []; let vfx_last_hue: number[] = []; let vfx_last_sat: number[] = []; let vfx_last_lum: number[] = []\n    let vfx_master_tog: number[] = []; let vfx_master_hue: number[] = []; let vfx_master_sat: number[] = []; let vfx_master_lum: number[] = []; let vfx_master_effect: number[] = [];\n    let vfx_light_count = 0\n\n    //% shim=sendBufferAsm\n    function sendBuffer(buf: Buffer, pin: DigitalPin) { }\n\n    export class Strip {\n        buf: Buffer;\n        pin: DigitalPin;\n        start: number; // start offset in LED strip\n        _length: number; // number of LEDs\n\n        setPixelHSLPrecise(pixeloffset: number, h: number, s: number, l: number): void {\n            if (pixeloffset < 0 || pixeloffset >= this._length)\n                return;\n            pixeloffset = (pixeloffset + this.start) * 3\n            h = Math.clamp(0,1,h/360)\n            s = Math.clamp(0,1,s/100)\n            l = Math.clamp(0,1,l/100)\n            let r, g, b;\n            if (s === 0) {\n                r = g = b = l; // achromatic\n            } else {\n                const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n                const p = 2 * l - q;\n                let t = h + 1/3\n                if (t < 0) { t += 1; }\n                else if (t > 1) {t -= 1; }\n                if (t < 1/6) {r = p + (q - p) * 6 * t;}\n                else if (t < 1/2) {r = q;}\n                else if (t < 2/3) { r = p + (q - p) * (2/3 - t) * 6; }\n                else { r = p; }\n                t = h\n                if (t < 0) { t += 1; }\n                else if (t > 1) { t -= 1; }\n                if (t < 1 / 6) { g = p + (q - p) * 6 * t; }\n                else if (t < 1 / 2) { g = q; }\n                else if (t < 2 / 3) { g = p + (q - p) * (2/3 - t) * 6; }\n                else { g = p; }\n                t = h - 1/3\n                if (t < 0) { t += 1; }\n                else if (t > 1) { t -= 1; }\n                if (t < 1 / 6) { b = p + (q - p) * 6 * t; }\n                else if (t < 1/2) { b = q; }\n                else if (t < 2/3) { b = p + (q - p) * (2/3 - t) * 6; }\n                else { b = p; }\n            }\n            this.buf[pixeloffset + 0] = Math.round(g * 255);\n            this.buf[pixeloffset + 1] = Math.round(r * 255);\n            this.buf[pixeloffset + 2] = Math.round(b * 255);\n        }\n\n        // show() { sendBuffer(this.buf, this.pin); }  //Send all the changes to the strip.\n\n        show() { \n            sendBuffer(this.buf, DigitalPin.P16); \n            sendBuffer(this.buf, DigitalPin.P15);\n            sendBuffer(this.buf, DigitalPin.P14);\n            sendBuffer(this.buf, DigitalPin.P13);\n            sendBuffer(this.buf, DigitalPin.P12);\n            sendBuffer(this.buf, DigitalPin.P8);\n            sendBuffer(this.buf, DigitalPin.P2);\n        }  //Send all the changes to the strip.\n\n        length() { return this._length; }   //Gets the number of pixels declared on the strip\n\n        shift(offset: number = 1): void { this.buf.shift(-offset * 3, this.start * 3, this._length * 3) }   //Shift LEDs forward and clear with zeros.\n\n        rotate(offset: number = 1): void { this.buf.rotate(-offset * 3, this.start * 3, this._length * 3) } //Rotate LEDs forward\n\n        setPin(pin: DigitalPin): void {\n            this.pin = pin;\n            pins.digitalWritePin(this.pin, 0);  // don't yield to avoid races on initialization\n        }\n    }\n\n    function create(thePin: DigitalPin, numleds: number): Strip {\n        let strip = new Strip();\n        strip.buf = pins.createBuffer(numleds * 3);\n        strip.start = 0;\n        strip._length = numleds;\n        strip.setPin(thePin)\n        return strip;\n    }\n\n    //% blockId=NL_PIXEL_CastleSay\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Sock Circle:%sockPin  Wheel Strip/Circle:%wheelPin  Score Circle:%scorePin \"\n    //% weight=100\n    export function castleSayLights(sockPin: DigitalPin, wheelPin: DigitalPin, scorePin: DigitalPin): void {\n        // NeoScore = create(scorePin, 8)\n        // NeoSock = create(sockPin, 8)\n        NeoWheel = create(wheelPin, 10)\n        vfx_light_count = 17\n        vfxInit()\n        // vfx_indicate_hue[30]=hues.green\n        // vfx_indicate_hue[31] = hues.yellow\n        // vfx_indicate_hue[32] = hues.orange\n        // vfx_indicate_hue[33] = hues.red\n        // vfx_indicate_hue[26] = hues.red\n        // vfx_indicate_hue[27] = hues.red\n        // vfx_indicate_hue[28] = hues.red\n        // vfx_indicate_hue[29] = hues.red\n\n        // setEffect(vfxRegion.CastleSayAll, vfxEffect.parade)\n    }\n\n    //% blockId=NL_PIXEL_CastleDo\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Strips:%spotPin  Bricks:%brickPin Kong Lights:%kongPin\"\n    //% weight=100\n    export function castleDoLights(stripPin: DigitalPin, brickPin: DigitalPin, kongPin: DigitalPin): void {\n        NeoStrip = create(stripPin, 20)\n        NeoBrick = create(brickPin, 8)\n        NeoKong = create(kongPin, 4)\n        vfx_light_count = 20 + 8 + 4\n        vfxInit()\n        vfx_indicate_hue[0]=hues.cyan; vfx_indicate_hue[1]=hues.cyan   //spot h\n        vfx_indicate_hue[2] = hues.pink; vfx_indicate_hue[3] = hues.pink //spot f\n        vfx_indicate_hue[26] = hues.pink   //shell brick\n        vfx_indicate_hue[4] = hues.orange; vfx_indicate_hue[5] = hues.orange   //spot d\n        vfx_indicate_hue[21] = hues.orange   //cannon brick\n        vfx_indicate_hue[25] = hues.orange   //bomb brick\n        vfx_indicate_hue[6] = hues.yellow; vfx_indicate_hue[7] = hues.yellow   //spot b\n        vfx_indicate_hue[8] = hues.red; vfx_indicate_hue[9] = hues.red; vfx_indicate_hue[10] = hues.red; vfx_indicate_hue[11] = hues.red  //spot a\n        vfx_indicate_hue[20] = hues.red; vfx_indicate_hue[27] = hues.red  //wheel bricks\n        vfx_indicate_hue[12] = hues.blue; vfx_indicate_hue[13] = hues.blue    //spot c\n        vfx_indicate_hue[14] = hues.cyan; vfx_indicate_hue[15] = hues.cyan    //spot e\n        vfx_indicate_hue[16] = hues.purple; vfx_indicate_hue[17] = hues.purple  //spot g\n        vfx_indicate_hue[24] = hues.purple  //ghost brick\n        vfx_indicate_hue[18] = hues.green; vfx_indicate_hue[19] = hues.green   //spot i\n        vfx_indicate_hue[28] = hues.green; vfx_indicate_hue[29] = hues.green; vfx_indicate_hue[30] = hues.green; vfx_indicate_hue[31] = hues.green   //kong\n        vfx_indicate_hue[22] = hues.yellow; vfx_indicate_hue[23] = hues.yellow  //dragon brick\n        vfx_indicate_tog[0] = 1; vfx_indicate_tog[1] = 1 //spot h\n        vfx_indicate_tog[2] = 1; vfx_indicate_tog[3] = 1 //spot f\n        vfx_indicate_tog[4] = 1; vfx_indicate_tog[5] = 1 //spot d\n        vfx_indicate_tog[6] = 1; vfx_indicate_tog[7] = 1 //spot b\n        vfx_indicate_tog[8] = 1; vfx_indicate_tog[9] = 1 //spot a\n        vfx_indicate_tog[22] = 1; vfx_indicate_tog[27] = 1    //wheel bricks\n        vfx_indicate_tog[21] = 1    //cannon brick\n        vfx_indicate_tog[25] = 1    //bomb brick\n        vfx_indicate_tog[26] = 1    //shell brick\n        vfx_indicate_tog[31] = 1; vfx_indicate_tog[30] = 1    //kong\n        \n        // setEffect(vfxRegion.CastleDoAll, vfxEffect.indicate)\n    }\n\n    function vfxInit(): void{\n        vfx_parade_colors = [hues.red, hues.orange, hues.yellow, hues.cyan, hues.blue, hues.purple]\n        vfx_fire_colors = [hues.red, hues.red, hues.red, hues.red, hues.orange, hues.orange, hues.orange, hues.orange, hues.orange, hues.yellow]\n        for (let index = 0; index < vfx_light_count; index++) {\n             \n            vfx_indicate_tog.push(0)\n            vfx_indicate_lum.push(50)\n            vfx_indicate_hue.push(50)\n            vfx_indicate_sat.push(100)\n\n            vfx_mine_tog.push(0)\n            vfx_mine_hue.push(hues.red)\n            vfx_mine_sat.push(100)\n            vfx_mine_lum.push(50)\n\n            vfx_fire_tog.push(randint(0, 1))\n            vfx_fire_hue.push(vfx_fire_colors[randint(0, vfx_fire_colors.length - 1)])\n            vfx_fire_sat.push(100)\n            vfx_fire_lum.push(randint(30, 80))\n\n            vfx_idle_tog.push(1)\n            if (index % 2 == 0) { vfx_idle_tog[index] = 0; }\n            vfx_idle_hue.push(265)\n            if (index % 2 == 0) { vfx_idle_hue[index] = 2; }\n            vfx_idle_sat.push(100)\n            vfx_idle_lum.push(50)\n\n            vfx_glow_tog.push(0)\n            vfx_glow_hue.push(50)\n            vfx_glow_sat.push(0)\n            vfx_glow_lum.push(0)\n\n            vfx_parade_tog.push(randint(0, 1))\n            vfx_parade_hue.push(vfx_parade_colors[randint(0, vfx_parade_colors.length-1)])\n            vfx_parade_sat.push(100)\n            vfx_parade_lum.push(randint(10, 65))\n\n            vfx_last_tog.push(0)\n            vfx_last_hue.push(50)\n            vfx_last_sat.push(100)\n            vfx_last_lum.push(50)\n\n            vfx_master_tog.push(0)\n            vfx_master_hue.push(0)\n            vfx_master_sat.push(100)\n            vfx_master_lum.push(50)\n            vfx_master_effect.push(vfxEffect.off)    //leave this be!\n        }\n    }\n\n    //% blockId=NL_PIXEL_ResetVFX\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Reset VFX %effect\"\n    //% weight=100\n    export function vfxReset(effect:vfxEffect):void{\n        if (effect == vfxEffect.idle){\n            for (let index = 0; index < vfx_light_count; index++) {\n                vfx_idle_tog[index]=1\n                if (index % 2 == 0) { vfx_idle_tog[index] = 0; }\n                vfx_idle_hue[index]=265\n                if (index % 2 == 0) { vfx_idle_hue[index] = 2; }\n                vfx_idle_sat[index]=100\n                vfx_idle_lum[index]=50\n            }\n        } else if (effect == vfxEffect.glow) {\n            for (let index = 0; index < vfx_light_count; index++) {\n                vfx_glow_tog[index] = 0\n                vfx_glow_hue[index] = 50\n                // vfx_glow_sat[index] = 100\n                vfx_glow_lum[index] = 0\n            }\n        } else if (effect == vfxEffect.mine) {\n            for (let index = 0; index < vfx_light_count; index++) {\n                vfx_mine_tog[index] = 0\n                vfx_mine_hue[index] = hues.red\n                vfx_mine_sat[index] = 100\n                vfx_mine_lum[index] = 50\n            }\n        } else if (effect == vfxEffect.indicate) {\n            for (let index = 0; index < vfx_light_count; index++) {\n                vfx_indicate_tog[index] = 0\n                vfx_indicate_sat[index] = 100\n                vfx_indicate_lum[index] = 50\n            }\n        }\n    }\n\n    //% blockId=NL_PIXEL_CastleSayTick\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Advance Castle Say lights\"\n    //% weight=100\n    export function castleSayTick(): void {\n        paradeTick()\n        fireTick()\n        glowTick()\n        castleSayWrite()\n        indicateTick()\n        idleTick()\n        mineTick()\n    }\n\n    //% blockId=NL_PIXEL_CastleDoTick\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Advance Castle Do lights\"\n    //% weight=100\n    export function castleDoTick(): void {\n        paradeTick()\n        fireTick()\n        glowTick()\n        castleDoWrite()\n        indicateTick()\n        idleTick()\n        mineTick()\n    }\n\n    function paradeTick(): void{\n        for (let index=0; index < vfx_light_count; index++){\n            let thisLum = vfx_parade_lum[index]\n            let thisHue = vfx_parade_hue[index]\n            let thisTog = vfx_parade_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0){\n                if (thisLum < 65){\n                    vfx_parade_lum[index] = thisLum + 12\n                } else if (thisLum >= 65){\n                    vfx_parade_tog[index] = 1\n                }\n            } else if (thisTog == 1){\n                if (thisLum>10){\n                    vfx_parade_lum[index] = thisLum - 4\n                } else if (thisLum <= 10){\n                    vfx_parade_tog[index] = 0\n                    while (nextHue == thisHue){\n                        nextHue = vfx_parade_colors[randint(0, vfx_parade_colors.length - 1)]\n                    }\n                    vfx_parade_hue[index] = nextHue\n                    vfx_parade_lum[index] = thisLum - randint(0,10)\n                }\n            }\n        }\n    }\n\n    function mineTick(): void {\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisLum = vfx_mine_lum[index]\n            let thisHue = vfx_mine_hue[index]\n            let thisTog = vfx_mine_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 200) {\n                    vfx_mine_lum[index] = thisLum + 30\n                } else if (thisLum >= 200) {\n                    vfx_mine_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 0) {\n                    vfx_mine_lum[index] = thisLum - 30\n                } else if (thisLum <= 0) {\n                    vfx_mine_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function idleTick(): void {\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisLum = vfx_idle_lum[index]\n            let thisHue = vfx_idle_hue[index]\n            let thisTog = vfx_idle_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisHue < 265) {\n                    vfx_idle_hue[index] = thisHue + 1\n                } else if (thisHue >= 265) {\n                    vfx_idle_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisHue > 2) {\n                    vfx_idle_hue[index] = thisHue - 1\n                } else if (thisHue <= 2) {\n                    vfx_idle_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function indicateTick(): void {\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisLum = vfx_indicate_lum[index]\n            let thisHue = vfx_indicate_hue[index]\n            let thisTog = vfx_indicate_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 80) {\n                    vfx_indicate_lum[index] = thisLum + 12\n                } else if (thisLum >= 80) {\n                    vfx_indicate_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 25) {\n                    vfx_indicate_lum[index] = thisLum - 4\n                } else if (thisLum <= 25) {\n                    vfx_indicate_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function fireTick(): void {\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisLum = vfx_fire_lum[index]\n            let thisHue = vfx_fire_hue[index]\n            let thisTog = vfx_fire_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 80) {\n                    vfx_fire_lum[index] = thisLum + 15\n                } else if (thisLum >= 80) {\n                    vfx_fire_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 30) {\n                    vfx_fire_lum[index] = thisLum - 5\n                } else if (thisLum <= 30) {\n                    vfx_fire_tog[index] = 0\n                    while (nextHue == thisHue) {\n                        nextHue = vfx_fire_colors[randint(0, vfx_fire_colors.length - 1)]\n                    }\n                    vfx_fire_hue[index] = nextHue\n                    vfx_fire_lum[index] = thisLum - randint(0, 30)\n                }\n            }\n        }\n    }\n\n    function glowTick(): void {\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisLum = vfx_glow_lum[index]\n            if (thisLum < 4){\n                vfx_glow_lum[index] = thisLum+.2\n            } else if (thisLum < 5) {\n                vfx_glow_lum[index] = thisLum+ + .3\n            } else if (thisLum < 10) {\n                vfx_glow_lum[index] = thisLum + .5\n            } else if (thisLum < 15) {\n                vfx_glow_lum[index] = thisLum + 1\n            }else if (thisLum < 30) {\n                vfx_glow_lum[index] = thisLum + 1.5\n            } else if (thisLum < 100) {\n                vfx_glow_lum[index] = thisLum + 4\n            } else{\n                vfx_glow_lum[index] = 0\n            }\n        }\n    }\n\n    function vfxPrepareMaster(): void{\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisEffect = vfx_master_effect[index]\n            if (thisEffect == vfxEffect.parade) {\n                vfx_master_hue[index] = vfx_parade_hue[index]\n                vfx_master_sat[index] = vfx_parade_sat[index]\n                vfx_master_lum[index] = Math.max(0,Math.min(50,vfx_parade_lum[index]))\n            } else if (thisEffect == vfxEffect.fire) {\n                vfx_master_hue[index] = vfx_fire_hue[index]\n                vfx_master_sat[index] = vfx_fire_sat[index]\n                vfx_master_lum[index] = Math.max(0, Math.min(50, vfx_fire_lum[index]))\n            } else if (thisEffect == vfxEffect.indicate) {\n                vfx_master_hue[index] = vfx_indicate_hue[index]\n                vfx_master_sat[index] = vfx_indicate_sat[index]\n                vfx_master_lum[index] = Math.max(0, Math.min(50, vfx_indicate_lum[index]))\n            } else if (thisEffect == vfxEffect.idle) {\n                vfx_master_hue[index] = vfx_idle_hue[index]\n                vfx_master_sat[index] = vfx_idle_sat[index]\n                vfx_master_lum[index] = Math.max(0, Math.min(50, vfx_idle_lum[index]))\n            } else if (thisEffect == vfxEffect.glow) {\n                vfx_master_hue[index] = vfx_glow_hue[index]\n                vfx_master_sat[index] = vfx_glow_sat[index]\n                vfx_master_lum[index] = Math.min(100,vfx_glow_lum[index])\n            } else if (thisEffect == vfxEffect.mine) {\n                vfx_master_hue[index] = vfx_mine_hue[index]\n                vfx_master_sat[index] = vfx_mine_sat[index]\n                vfx_master_lum[index] = Math.max(0, Math.min(50, vfx_mine_lum[index]))\n            } else if (thisEffect == vfxEffect.off) {\n                vfx_master_hue[index] = vfx_mine_hue[index]\n                vfx_master_sat[index] = vfx_mine_sat[index]\n                vfx_master_lum[index] = 0\n            }\n        }\n    }\n    function castleSayWrite(): void{\n        vfxPrepareMaster()\n        let masterIndex = 0\n        // for (let index = 0; index < NeoSock.length(); index++){\n        //     NeoSock.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n        //     masterIndex++\n        // }\n        for (let index = 0; index < NeoWheel.length(); index++) {\n            NeoWheel.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        // for (let index = 0; index < NeoScore.length(); index++) {\n        //     NeoScore.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n        //     masterIndex++\n        // }\n        // NeoSock.show()\n        NeoWheel.show()\n        // NeoScore.show()\n    }\n\n    function castleDoWrite(): void {\n        vfxPrepareMaster()\n        let masterIndex = 0\n        for (let index = 0; index < NeoStrip.length(); index++) {\n            NeoStrip.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        for (let index = 0; index < NeoBrick.length(); index++) {\n            NeoBrick.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        for (let index = 0; index < NeoKong.length(); index++) {\n            NeoKong.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        NeoStrip.show()\n        NeoBrick.show()\n        NeoKong.show()\n    }\n\n    //% blockId=NL_PIXEL_SetEffect\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Set %region VFX to %effect\"\n    //% weight=100\n    export function setEffect(region:vfxRegion, effect:vfxEffect){\n        if (region == vfxRegion.Score1){\n            vfx_master_effect[30] = effect\n        } else if (region == vfxRegion.Score2) {\n            vfx_master_effect[31] = effect\n        } else if (region == vfxRegion.Score3) {\n            vfx_master_effect[32] = effect\n        } else if (region == vfxRegion.Score4) {\n            vfx_master_effect[33] = effect\n        } else if (region == vfxRegion.Score5) {\n            vfx_master_effect[26] = effect\n        } else if (region == vfxRegion.Score6) {\n            vfx_master_effect[27] = effect\n        } else if (region == vfxRegion.Score7) {\n            vfx_master_effect[28] = effect\n        } else if (region == vfxRegion.Score8) {\n            vfx_master_effect[29] = effect\n        } else if (region == vfxRegion.ScoreAll) {\n            for (let i = 26; i <= 33; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SockAll) {\n            for (let i = 0; i <= 7; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelInner) {\n            for (let i = 18; i <= 25; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelOuter) {\n            for (let i = 8; i <= 17; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelAll) {\n            for (let i=8; i <= 25; i++){ vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.CastleSayAll) {\n            for (let i = 0; i <= 33; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotA) {\n            for (let i = 8; i <= 11; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotB) {\n            for (let i = 6; i <= 7; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotC) {\n            for (let i = 12; i <= 13; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotD) {\n            for (let i = 4; i <= 5; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotE) {\n            for (let i = 14; i <= 15; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotF) {\n            for (let i = 2; i <= 3; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotG) {\n            for (let i = 16; i <= 17; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotH) {\n            for (let i = 0; i <= 1; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotI) {\n            for (let i = 18; i <= 19; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotAll) {\n            for (let i = 0; i <= 19; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.BrickWheel) {\n            vfx_master_effect[20] = effect\n            vfx_master_effect[27] = effect\n        } else if (region == vfxRegion.BrickBomb) {\n            vfx_master_effect[25] = effect\n        } else if (region == vfxRegion.BrickShell) {\n            vfx_master_effect[26] = effect\n        } else if (region == vfxRegion.BrickGhost) {\n            vfx_master_effect[24] = effect\n        } else if (region == vfxRegion.BrickDragon) {\n            for (let i = 22; i <= 23; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.BrickCannon) {\n            vfx_master_effect[21] = effect\n        } else if (region == vfxRegion.BrickAll) {\n            for (let i = 20; i <= 27; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongFront) {\n            for (let i = 28; i <= 29; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongBack) {\n            for (let i = 30; i <= 31; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongAll) {\n            for (let i = 28; i <=31; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.CastleDoAll) {\n            for (let i = 0; i < vfx_light_count; i++) { vfx_master_effect[i] = effect };\n        } \n    }\n\n    export enum vfxRegion{\n        Score1, Score2, Score3, Score4, Score5, Score6, Score7, Score8, ScoreAll,\n        SockAll,\n        WheelInner, WheelOuter, WheelAll,\n        KongFront, KongBack, KongAll,\n        BrickWheel, BrickBomb, BrickShell, BrickGhost, BrickDragon, BrickCannon, BrickAll,\n        SpotA, SpotB, SpotC, SpotD, SpotE, SpotF, SpotG, SpotH, SpotI, SpotAll,\n        CastleSayAll,\n        CastleDoAll\n    }\n\n/// END NEOPIXEL ///\n\n\n/// BEGIN SONAR ///\n\n    let sonarPinT = DigitalPin.P0\n    let sonarPinE = DigitalPin.P0\n\n    //% blockId=NL_SENSOR_SonarFirstRead\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"first distance from sonar at %pin1|%pin2\"\n    //% weight=101\n    export function SonarFirstRead(pin1: DigitalPin, pin2: DigitalPin): number {\n        sonarPinT = pin1\n        sonarPinE = pin2\n        pins.setPull(sonarPinT, PinPullMode.PullNone)\n        return SonarNextRead()\n    }\n\n    //% blockId=NL_SENSOR_SonarNextRead\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"next sonar distance\"\n    //% weight=100\n    export function SonarNextRead(): number {\n        pins.digitalWritePin(sonarPinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(sonarPinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(sonarPinT, 0)\n        return Math.floor(pins.pulseIn(sonarPinE, PulseValue.High, 25000) * 34 / 2000)\n    }\n\n/// END SONAR ///\n\n\n/// BEGIN MP3 ///\n\n    export enum playType { Play = 0x0D, Stop = 0x16, PlayNext = 0x01, PlayPrevious = 0x02, Pause = 0x0E }\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    let mp3musicPin: SerialPin\n    let mp3music = false\n    let mp3player = false\n    let mp3sfxPin: SerialPin\n    let mp3sfx = false\n    let mp3musicVol = 0\n    let mp3playerPin: SerialPin\n    let mp3playerVol = 0\n    let mp3sfxVol = 0\n    let isPot = false\n    let potPin = AnalogPin.P0\n    let masterVolume = 25\n\n    //% blockId=NL_SENSOR_TrimpotSet\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"set volume control pot at %aPin\"\n    export function potSet(aPin: AnalogPin): void {\n        potPin = aPin\n        isPot = true\n        masterVolume = potRead()\n    }\n\n    function potRead() {\n        if (isPot) { return Math.round(pins.map(pins.analogReadPin(potPin), 0, 1023, 0, 30)) }\n        else { return 5 }\n    }\n\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) { total += dataArr[i] }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) { myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i]) }\n        serial.writeBuffer(myBuff)\n        basic.pause(20) // Was 100; problematic at 10\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) { myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i]) }\n        serial.writeBuffer(myBuff)\n    }\n\n    //% blockId=NL_MP3_InitiateAs\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Ready MP3bit for %type at %sPin\"\n    //% dPin.fieldEditor=\"gridpicker\"\n    export function mp3setPorts(mp3bit: mp3type, sPin: SerialPin): void {\n        if (mp3bit == mp3type.music) {\n            mp3musicPin = sPin\n            mp3music = true\n            mp3musicVol = 100\n            setVolume(mp3type.music, mp3musicVol)\n        } else if (mp3bit == mp3type.player) {\n            mp3playerPin = sPin\n            mp3player = true\n            mp3playerVol = 100\n            setVolume(mp3type.player, mp3playerVol)\n        } else if (mp3bit == mp3type.sfxvoice) {\n            mp3sfxPin = sPin\n            mp3sfx = true\n            mp3sfxVol = 100\n            setVolume(mp3type.sfxvoice, mp3sfxVol)\n        }   \n    }\n\n    //% blockId=\"nl_playfilefolder\" \n    //% block=\"Play folder %folderNum file %fileNum on %sPin\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3fileFolder(folderNum: string, fileNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        dataArr[5] = parseInt(folderNum)\n        dataArr[6] = parseInt(fileNum)\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"NL_MP3_SendNumbers\" \n    //% block=\"Send numbers for folder %folderNum file %fileNum on %sPin\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3numbers(folderNum: number, fileNum: number, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        dataArr[3] = 15\n        dataArr[5] = folderNum\n        dataArr[6] = fileNum\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=NL_MP3_UpdateVolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Update volume for all\"\n    export function updateVolumeGlobal(): void {\n        let nowVol = potRead()\n        if (masterVolume != nowVol){\n            masterVolume = nowVol\n            setVolume(mp3type.music, mp3musicVol)\n            setVolume(mp3type.player, mp3playerVol)\n            setVolume(mp3type.sfxvoice, mp3sfxVol)\n        }\n    }\n\n    //% blockId=NL_MP3_SetVolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Set %mp3bit volume to %vol\"\n    export function setVolume(mp3bit:mp3type, vol:number): void {\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3musicVol = vol\n        } else if (mp3bit == mp3type.player) {\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3playerVol = vol\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3sfxVol = vol\n        }\n        dataArr[3] = 6\n        dataArr[5] = 0\n        dataArr[6] = Math.round(vol / 100 * masterVolume)\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=NL_MP3_GetVolumes\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Get current volumes\"\n    export function getVolumes() {\n        return \"m\" + mp3musicVol + \" p\" + mp3playerVol + \" s\" + mp3sfxVol + \" g\" + masterVolume\n    }\n\n    //% blockId=\"NL_MP3_StopPlayback\" \n    //% block=\"Stop playback on %mp3bit\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function stopPlayback(mp3bit:mp3type): void {\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        } else if (mp3bit == mp3type.player){\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        }\n        CMD = 0x16\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n/// END MP3 ///\n\n/// BEGIN SOUND BANK ///\n    export enum mp3type { music, player, sfxvoice }\n    export enum musicGenre { intro, tutorial, awaiting, level, won, lost }\n    export enum playerSaying { ready, yay, intro, nay, ouch, success, failure, won, lost, hurry }\n    export enum sfxType { correct, incorrect, ghost, fire, explosion, splash, spark, slash }\n    export enum voiceSaying { name, begin, retry, next, complete, gameover, welcome, intro, howto1, howto2, howto3, howto4, howto5, howto6, howto7, howto8, howto9 }\n    export enum magicianSaysSide { left, right }\n    export enum magicianDifficulty { easy, medium, hard }\n    export enum spotName { A, B, C, D, E, F, G, H, I }\n    export enum playerChar { mario, luigi, peach, daisy, toad, wario }\n\n    let sb_music_tutorial = feedBank(\"1.1.46|1.2.51|1.3.51|1.4.59|1.5.60|1.6.60|1.7.60|1.8.60|1.9.60|1.10.60|1.11.60|1.12.60|1.13.60|1.14.60|1.15.60|1.16.60|1.17.60|1.18.60|1.19.60|1.20.60|1.21.60\")\n    let sb_music_awaiting = feedBank(\"2.1.64|2.2.120|2.3.120|2.4.120|2.5.120|2.6.114|2.7.120|2.8.103|2.9.120|2.10.120|2.11.120|2.12.120|2.13.119|2.14.120|2.15.120|2.16.103|2.17.119|2.18.120|2.19.86|2.20.120\")\n    let sb_music_level = feedBank(\"3.1.120|3.2.120|3.3.120|3.4.120|3.5.120|3.6.120|3.7.120|3.8.120|3.9.120|3.10.92|3.11.120|3.12.120|3.13.111|3.14.116|3.15.98|3.16.120|3.17.120|3.18.82|3.19.120|3.20.120|3.21.120|3.22.120|3.23.120|3.24.120|3.25.120|3.26.120|3.27.91|3.28.120|3.29.120|3.30.41|3.31.120|3.32.120|3.33.120|3.34.94|3.35.120|3.36.120|3.37.120|3.38.120|3.39.120|3.40.120|3.41.78|3.42.120|3.43.120|3.44.120|3.45.120|3.46.120|3.47.120|3.48.120|3.49.120|3.50.120|3.51.120|3.52.113|3.53.120|3.54.120|3.55.42|3.56.120|3.57.120|3.58.120|3.59.114|3.60.120|3.61.120|3.62.118|3.63.120|3.64.120|3.65.120|3.66.120|3.67.120|3.68.59|3.69.120|3.70.120|3.71.118|3.72.120|3.73.120|3.74.70|3.75.120|3.76.120|3.77.120|3.78.120|3.79.120|3.80.120|3.81.120|3.82.120|3.83.80|3.84.120|3.85.120|3.86.120|3.87.120|3.88.107|3.89.120|3.90.120|3.91.120|3.92.120|3.93.36|3.94.120|3.95.120|3.96.120|3.97.120|3.98.120|3.99.120|3.100.63|3.101.120|3.102.120|3.103.112|3.104.105|3.105.120|3.106.110|3.107.120|3.108.120|3.109.120|3.110.120|3.111.120|3.112.120|3.113.120|3.114.120|3.115.120|3.116.119|3.117.120|3.118.120|3.119.120|3.120.120|3.121.120|3.122.120|3.123.120|3.124.120|3.125.120|3.126.104|3.127.120|3.128.87|3.129.120|3.130.118|3.131.120|3.132.120|3.133.50|3.134.109|3.135.120|3.136.120|3.137.120|3.138.91|3.139.120|3.140.120|3.141.120|3.142.120|3.143.120|3.144.120|3.145.104|3.146.112|3.147.120\")\n    let sb_music_won = feedBank(\"4.1.30|4.2.22|4.3.30|4.4.17|4.5.29|4.6.30|4.7.30|4.8.30|4.9.30|4.10.30|4.11.20|4.12.28|4.13.30|4.14.15|4.15.30|4.16.17|4.17.17|4.18.15|4.19.30|4.20.30|4.21.30|4.22.17|4.23.30|4.24.30|4.25.30\")\n    let sb_music_lost = feedBank(\"5.1.30|5.2.30|5.3.30|5.4.30|5.5.30|5.6.30|5.7.30|5.8.30|5.9.30|5.10.30|5.11.30\")\n    let sb_music_intro = feedBank(\"9.1.3|9.2.4|9.3.8|9.4.5|9.5.4|9.6.12|9.7.3|9.8.7|9.9.6|9.10.7|9.11.9|9.12.9|9.13.11|9.14.3|9.15.10|9.16.3|9.17.6|9.18.5|9.19.6|9.20.5|9.21.7|9.22.5|9.23.3|9.24.7|9.25.6|9.26.6|9.27.11|9.28.5|9.29.5|9.30.4|9.31.6|9.32.4|9.33.4|9.34.10|9.35.8|9.36.8|9.37.3|9.38.7|9.39.4|9.40.6|9.41.3|9.42.7|9.43.7|9.44.3|9.45.6|9.46.1|9.47.2|9.48.2|9.49.8|9.50.16|9.51.9|9.52.10|9.53.13|9.54.14|9.55.14|9.56.16|9.57.7|9.58.4|9.59.9|9.60.8|9.61.9|9.62.9|9.63.12|9.64.4|9.65.6|9.66.9|9.67.5|9.68.6|9.69.5|9.70.10|9.71.8|9.72.8|9.73.5|9.74.3\")\n    let sb_sfx_correct = feedBank(\"6.1.5|6.2.8|6.3.6|6.4.7|6.5.6|6.6.14|6.7.7|6.8.8|6.9.12|6.10.7|6.11.9|6.12.7|6.13.10|6.14.8|6.15.8|6.16.4|6.17.7|6.18.4|6.19.2|6.20.10|6.21.7|6.22.7|6.23.6|6.24.4|6.25.7|6.26.12|6.27.4|6.28.6|6.29.6|6.30.6|6.31.4|6.32.5|6.33.3|6.34.6|6.35.6|6.36.6|6.37.6|6.38.4|6.39.8|6.40.6|6.41.3|6.42.3|6.43.7|6.44.8|6.45.6|6.46.2|6.47.5|6.48.7|6.49.8|6.50.7|6.51.6|6.52.7|6.53.6|6.54.8|6.55.5|6.56.5|6.57.7|6.58.6|6.59.8|6.60.5|6.61.6|6.62.8|6.63.3|6.64.3|6.65.6|6.66.3|6.67.6|6.68.2|6.69.3|6.70.3|6.71.2|6.72.3|6.73.6|6.74.7|6.75.5|6.76.3|6.77.5|6.78.3|6.79.2|6.80.3|6.81.3|6.82.1|6.83.1|6.84.1|6.85.1|6.86.1|6.87.1|6.88.3|6.89.1|6.90.1|6.91.4|6.92.4\")\n    let sb_sfx_incorrect = feedBank(\"7.1.6|7.2.5|7.3.3|7.4.5|7.5.7|7.6.6|7.7.4|7.8.1|7.9.3|7.10.4|7.11.3|7.12.3|7.13.6|7.14.3|7.15.1|7.16.1|7.17.1|7.18.1|7.19.5|7.20.4|7.21.3|7.22.7\")\n    let sb_sfx_beep = feedBank(\"8.1.1|8.2.2|8.3.1\")\n    let sb_sfx_smash = feedBank(\"8.4.1|8.5.1|8.6.1|8.7.3\")\n    let sb_sfx_falling = feedBank(\"8.8.6\")\n    let sb_sfx_boom = feedBank(\"8.9.1|8.10.2|8.11.3|8.12.2\")\n    let sb_sfx_cannon = feedBank(\"8.13.2|8.14.1|8.15.1|8.16.2|8.17.2\")\n    let sb_sfx_fire = feedBank(\"8.18.2|8.19.2|8.20.5|8.21.2\")\n    let sb_sfx_ghost = feedBank(\"8.22.5|8.23.4|8.24.5|8.25.5\")\n    let sb_sfx_hit = feedBank(\"8.26.1|8.27.1|8.28.1|8.29.1|8.30.1\")\n    let sb_sfx_slash = feedBank(\"8.31.1|8.32.1|8.33.1|8.34.1|8.35.1|8.36.1|8.37.1|8.38.1|8.39.1|8.40.1|8.41.1|8.42.2\")\n    let sb_sfx_zap = feedBank(\"8.43.1|8.44.1|8.45.2|8.46.1|8.47.2|8.48.1\")\n    let sb_sfx_splash = feedBank(\"8.49.2|8.50.2|8.51.1|8.52.1|8.53.2|8.54.1|8.55.2|8.56.1|8.57.2\")\n    let sb_sfx_voice = feedBank(\"10.1.4|10.2.6|10.3.4|10.4.4|10.5.6|10.6.4|10.7.11|10.8.6|10.9.4|10.10.1\")\n    let sb_magician_left_easy = feedBank(\"11.1.3|11.2.6|11.3.7|11.4.6|11.5.6|11.6.7|11.7.6|11.8.6|11.9.6|11.10.7|11.11.6|11.12.6|11.13.7|11.14.6|11.15.6|11.16.6|11.17.6|11.18.6|11.19.6|11.20.6|11.21.6|11.22.7|11.23.6|11.24.6|11.25.6|11.26.6|11.27.7|11.28.7|11.29.7|11.30.6|11.31.6|11.32.8|11.33.7|11.34.6|11.35.7|11.36.5|11.37.6|11.38.8|11.39.6|11.40.6|11.41.6|11.42.6|11.43.6|11.44.7|11.45.6|11.46.7|11.47.7|11.48.8|11.49.6|11.50.7|11.51.6|11.52.6|11.53.7|11.54.8|11.55.7|11.56.6|11.57.7|11.58.6|11.59.6|11.60.6|11.61.6\")\n    let sb_magician_left_medium = feedBank(\"11.62.7|11.63.6|11.64.6|11.65.8|11.66.7|11.67.8|11.68.8|11.69.8|11.70.7|11.71.7|11.72.6|11.73.6|11.74.6|11.75.6|11.76.6|11.77.7|11.78.6|11.79.7|11.80.6|11.81.6|11.82.6|11.83.7|11.84.6|11.85.6|11.86.6|11.87.7|11.88.6|11.89.6|11.90.7|11.91.6|11.92.6|11.93.6|11.94.6|11.95.6|11.96.7|11.97.6|11.98.6|11.99.7|11.100.6|11.101.6|11.102.6|11.103.7|11.104.6|11.105.8|11.106.6|11.107.6|11.108.6|11.109.7|11.110.6|11.111.7|11.112.7|11.113.6|11.114.6|11.115.7|11.116.6|11.117.7|11.118.7|11.119.6|11.120.6|11.121.6|11.122.7|11.123.7|11.124.6|11.125.6|11.126.6|11.127.8|11.128.7|11.129.6|11.130.8|11.131.7|11.132.6|11.133.7|11.134.6|11.135.6|11.136.7|11.137.7\")\n    let sb_magician_left_hard = feedBank(\"11.219.7|11.220.6|11.221.6|11.222.6|11.223.6|11.224.6|11.225.7|11.226.7|11.227.6|11.228.6|11.229.6|11.230.8|11.231.7|11.232.7|11.233.6|11.234.6|11.235.6|11.236.8|11.237.7|11.238.7|11.239.6|11.240.6|11.241.8|11.242.7|11.243.7|11.244.6|11.245.6|11.246.7|11.247.7|11.248.7|11.249.7|11.250.6|11.251.6|11.252.6|11.253.6|11.254.6|11.255.6|11.256.6|11.257.6|11.258.7|11.259.7|11.260.7|11.261.6|11.262.6|11.263.6|11.264.6|11.265.6|11.266.6|11.267.7|11.268.6|11.269.6|11.270.6|11.271.6|11.272.6|11.273.6|11.274.6|11.275.7|11.276.6|11.277.6|11.278.7|11.279.7|11.280.7|11.281.6|11.282.6|11.283.7|11.284.9|11.285.7|11.286.6|11.287.6|11.288.6|11.289.7|11.290.7|11.291.6|11.292.6|11.293.7|11.294.7|11.295.6|11.296.7|11.297.6|11.298.6|11.299.6|11.300.6|11.301.6|11.302.6|11.303.7|11.304.6|11.305.6|11.306.7|11.307.6|\")\n    let sb_magician_right_easy = feedBank(\"11.159.6|11.160.6|11.161.7|11.162.6|11.163.7|11.164.7|11.165.6|11.166.6|11.167.7|11.168.7|11.169.6|11.170.8|11.171.7|11.172.7|11.173.6|11.174.6|11.175.6|11.176.6|11.177.7|11.178.6|11.179.6|11.180.6|11.181.6|11.182.7|11.183.6|11.184.6|11.185.6|11.186.6|11.187.8|11.188.7|11.189.6|11.190.6|11.191.6|11.192.6|11.193.6|11.194.6|11.195.5|11.196.6|11.197.6|11.198.6|11.199.7|11.200.6|11.201.6|11.202.6|11.203.6|11.204.6|11.205.6|11.206.6|11.207.6|11.208.6|11.209.6|11.210.7|11.211.7|11.212.7|11.213.6|11.214.7|11.215.7|11.216.6|11.217.7|11.218.6\")\n    let sb_magician_right_medium = feedBank(\"11.219.7|11.220.6|11.221.6|11.222.6|11.223.6|11.224.6|11.225.7|11.226.7|11.227.6|11.228.6|11.229.6|11.230.8|11.231.7|11.232.7|11.233.6|11.234.6|11.235.6|11.236.8|11.237.7|11.238.7|11.239.6|11.240.6|11.241.8|11.242.7|11.243.7|11.244.6|11.245.6|11.246.7|11.247.7|11.248.7|11.249.7|11.250.6|11.251.6|11.252.6|11.253.6|11.254.6|11.255.6|11.256.6|11.257.6|11.258.7|11.259.7|11.260.7|11.261.6|11.262.6|11.263.6|11.264.6|11.265.6|11.266.6|11.267.7|11.268.6|11.269.6|11.270.6|11.271.6|11.272.6|11.273.6|11.274.6|11.275.7|11.276.6|11.277.6|11.278.7|11.279.7|11.280.7|11.281.6|11.282.6|11.283.7|11.284.9|11.285.7|11.286.6|11.287.6\")\n    let sb_magician_right_hard = feedBank(\"11.288.6|11.289.7|11.290.7|11.291.6|11.292.6|11.293.7|11.294.7|11.295.6|11.296.7|11.297.6|11.298.6|11.299.6|11.300.6|11.301.6|11.302.6|11.303.7|11.304.6|11.305.6|11.306.7|11.307.6|11.308.7|11.309.6|11.310.6|11.311.6|11.312.7|11.313.7|11.314.6|11.315.7\")\n    let sb_mario_name = feedBank(\"12.1.2|12.2.1|12.4.2|12.5.3\")\n    let sb_mario_intro = feedBank(\"12.3.4|12.6.2|12.7.212.112.1|12.113.1|\")\n    let sb_mario_ready = feedBank(\"12.8.1|12.9.2|12.10.2|12.11.1|12.12.1|12.13.2|12.14.2|12.15.2|12.16.2|12.17.2|12.18.1\")\n    let sb_mario_yay = feedBank(\"12.19.1|12.20.1|12.21.1|12.22.1|12.23.1|12.24.1|12.25.1|12.26.1|12.27.1|12.28.1|12.29.1|12.30.1|12.31.1|12.32.1|12.33.1|12.34.1|12.35.1|12.36.1|12.37.1|12.38.1|12.39.1|12.40.1|12.41.1|12.42.1|12.43.1|12.44.1|12.45.1|12.46.1|12.47.1|12.48.1|12.49.1|12.50.1|12.51.2|12.52.2|12.53.2|12.54.2|12.55.2|12.56.2|12.57.2|12.58.2|12.59.2|12.60.2|12.61.2|12.62.2\")\n    let sb_mario_success = feedBank(\"12.63.1|12.64.2|12.65.2|12.66.2|12.67.2|12.68.3|12.69.3|12.70.3|12.71.3|12.72.3\")\n    let sb_mario_won = feedBank(\"12.73.2|12.74.2|12.75.3|12.76.3|12.77.3\")\n    let sb_mario_ouch = feedBank(\"12.78.1|12.79.1|12.80.1|12.81.1|12.82.1|12.83.1|12.84.1|12.85.1|12.86.1|12.87.1|12.88.1|12.89.1|12.90.1|12.91.1|12.92.1|12.93.1|12.94.1|12.95.1\")\n    let sb_mario_nay = feedBank(\"12.96.1|12.97.1|12.98.1|12.99.1|12.100.1|12.101.1|12.102.2|12.103.1|12.104.1|12.105.1|12.106.1|12.107.1|12.108.1|12.109.1|12.110.2|12.111.2\")\n    let sb_mario_failure = feedBank(\"12.114.2|12.115.2|12.116.2|12.117.1\")\n    let sb_mario_lost = feedBank(\"12.118.3|12.119.3|12.120.4|12.121.1\")\n    let sb_mario_hurry = feedBank(\"12.122.44\")\n    \n    let playlist_tutorial = makePlaylist(sb_music_tutorial)\n    let playlist_awaiting = makePlaylist(sb_music_awaiting)\n    let playlist_level = makePlaylist(sb_music_level)\n    let playlist_won = makePlaylist(sb_music_won)\n    let playlist_lost = makePlaylist(sb_music_lost)\n    let playlist_correct = makePlaylist(sb_sfx_correct)\n    let playlist_incorrect = makePlaylist(sb_sfx_incorrect)\n    let playlist_intro = makePlaylist(sb_music_intro)\n    let playlist_boom = makePlaylist(sb_sfx_boom)\n    let playlist_smash = makePlaylist(sb_sfx_smash)\n    let playlist_falling = makePlaylist(sb_sfx_falling)\n    let playlist_cannon = makePlaylist(sb_sfx_cannon)\n    let playlist_fire = makePlaylist(sb_sfx_fire)\n    let playlist_ghost = makePlaylist(sb_sfx_ghost)\n    let playlist_hit = makePlaylist(sb_sfx_hit)\n    let playlist_slash = makePlaylist(sb_sfx_slash)\n    let playlist_zap = makePlaylist(sb_sfx_zap)\n    let playlist_splash = makePlaylist(sb_sfx_splash)\n    let playlist_magician_left_easy = makePlaylist(sb_magician_left_easy)\n    let playlist_magician_left_medium = makePlaylist(sb_magician_left_medium)\n    let playlist_magician_left_hard = makePlaylist(sb_magician_left_hard)\n    let playlist_magician_right_easy = makePlaylist(sb_magician_right_easy)\n    let playlist_magician_right_medium = makePlaylist(sb_magician_right_medium)\n    let playlist_magician_right_hard = makePlaylist(sb_magician_right_hard)\n    let playlist_mario_name = makePlaylist(sb_mario_name)\n    let playlist_mario_intro = makePlaylist(sb_mario_intro)\n    let playlist_mario_ready = makePlaylist(sb_mario_ready)\n    let playlist_mario_yay = makePlaylist(sb_mario_yay)\n    let playlist_mario_success = makePlaylist(sb_mario_success)\n    let playlist_mario_won = makePlaylist(sb_mario_won)\n    let playlist_mario_ouch = makePlaylist(sb_mario_ouch)\n    let playlist_mario_nay = makePlaylist(sb_mario_nay)\n    let playlist_mario_failure = makePlaylist(sb_mario_failure)\n    let playlist_mario_lost = makePlaylist(sb_mario_lost)\n    let playlist_mario_hurry = makePlaylist(sb_mario_hurry)\n    let playtimeMusic = 0\n    let playtimePlayer = 0\n    let playtimeSfxVoice = 0\n\n    function takeRotate(PlaylistIn: number[]) {\n        let returnTrack = PlaylistIn.shift()\n        PlaylistIn.push(returnTrack)\n        return returnTrack\n    }\n    function feedBank(BankString: string) {\n        let returnBank: number[][] = []\n        let BankSplit = BankString.split(\"|\")\n        for (let soundString of BankSplit) {\n            returnBank.push([parseFloat(soundString.split(\".\")[0]), parseFloat(soundString.split(\".\")[1]), parseFloat(soundString.split(\".\")[2])])\n        }\n        return returnBank\n    }\n    function makePlaylist(SoundBank: any[]) {\n        let returnList: number[] = []\n        let orderedList: number[] = []\n        for (let soundNo = 0; soundNo <= SoundBank.length - 1; soundNo++) {\n            orderedList.push(soundNo)\n        }\n        while (orderedList.length > 0) {\n            let randTrack = randint(0, orderedList.length - 1)\n            returnList.push(orderedList.removeAt(randTrack))\n        }\n        return returnList\n    }\n    function bankPlay(mp3bit:mp3type, SoundBank: number[][], trackIndex: number) {\n        let theSong = SoundBank[trackIndex]\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimeMusic = theSong[2]\n        } else if (mp3bit == mp3type.player) {\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimePlayer = theSong[2]\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimeSfxVoice = theSong[2]\n        }\n        dataArr[3] = 15\n        dataArr[5] = theSong[0]\n        dataArr[6] = theSong[1]\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=NL_MP3_PlaytimeMusic\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of music\"\n    export function mp3durationMusic(): number{\n        return playtimeMusic\n    }\n\n    //% blockId=NL_MP3_PlaytimePlayer\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of player sound\"\n    export function mp3durationPlayer(): number {\n        return playtimePlayer\n    }\n\n    //% blockId=NL_MP3_PlaytimeSFX\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of sfx/voice\"\n    export function mp3durationSfxVoice(): number {\n        return playtimeSfxVoice\n    }\n\n\n\n    //% blockId=NL_MP3_MusicPlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %genre music\"\n    export function mp3musicPlay(genre: musicGenre): void {\n        if (genre == musicGenre.tutorial){\n            bankPlay(mp3type.music, sb_music_tutorial, takeRotate(playlist_tutorial))\n        } else if (genre == musicGenre.awaiting) {\n            bankPlay(mp3type.music, sb_music_awaiting, takeRotate(playlist_awaiting))\n        } else if (genre == musicGenre.intro){\n            bankPlay(mp3type.music, sb_music_intro, takeRotate(playlist_intro))\n        } else if (genre == musicGenre.level) {\n            bankPlay(mp3type.music, sb_music_level, takeRotate(playlist_level))\n        } else if (genre == musicGenre.won) {\n            bankPlay(mp3type.music, sb_music_won, takeRotate(playlist_won))\n        } else if (genre == musicGenre.lost) {\n            bankPlay(mp3type.music, sb_music_lost, takeRotate(playlist_lost))\n        }\n    }\n\n    //% blockId=NL_MP3_PlayerSay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %saying as player\"\n    export function mp3sayPlay(saying: playerSaying): void {\n        if(saying == playerSaying.ready){\n            bankPlay(mp3type.player, sb_mario_ready, takeRotate(playlist_mario_ready))\n        }else if (saying == playerSaying.yay){\n            bankPlay(mp3type.player, sb_mario_yay, takeRotate(playlist_mario_yay))\n        } else if (saying == playerSaying.intro) {\n            bankPlay(mp3type.player, sb_mario_intro, takeRotate(playlist_mario_intro))\n        } else if (saying == playerSaying.nay) {\n            bankPlay(mp3type.player, sb_mario_nay, takeRotate(playlist_mario_nay))\n        } else if (saying == playerSaying.ouch) {\n            bankPlay(mp3type.player, sb_mario_ouch, takeRotate(playlist_mario_ouch))\n        } else if (saying == playerSaying.success) {\n            bankPlay(mp3type.player, sb_mario_success, takeRotate(playlist_mario_success))\n        } else if (saying == playerSaying.failure) {\n            bankPlay(mp3type.player, sb_mario_failure, takeRotate(playlist_mario_failure))\n        } else if (saying == playerSaying.won) {\n            bankPlay(mp3type.player, sb_mario_won, takeRotate(playlist_mario_won))\n        } else if (saying == playerSaying.lost) {\n            bankPlay(mp3type.player, sb_mario_lost, takeRotate(playlist_mario_lost))\n        } else if (saying == playerSaying.hurry) {\n            bankPlay(mp3type.player, sb_mario_hurry, takeRotate(playlist_mario_hurry))\n        }\n    }\n\n    //% blockId=NL_MP3_VoicePlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %voice as voice\"\n    export function mp3voicePlay(voice: voiceSaying): void {\n        if (voice == voiceSaying.name) {\n\n        } else if (voice == voiceSaying.begin) {\n\n        } else if (voice == voiceSaying.retry) {\n\n        } else if (voice == voiceSaying.next) {\n\n        } else if (voice == voiceSaying.complete) {\n\n        } else if (voice == voiceSaying.gameover) {\n\n        } else if (voice == voiceSaying.welcome) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 0)\n        } else if (voice == voiceSaying.intro) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 1)\n        } else if (voice == voiceSaying.howto1) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 2)\n        } else if (voice == voiceSaying.howto2) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 3)\n        } else if (voice == voiceSaying.howto3) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 4)\n        } else if (voice == voiceSaying.howto4) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 5)\n        } else if (voice == voiceSaying.howto5) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 6)\n        } else if (voice == voiceSaying.howto6) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 7)\n        } else if (voice == voiceSaying.howto7) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 8)\n        } else if (voice == voiceSaying.howto8) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 9)\n        } else if (voice == voiceSaying.howto9) {\n\n        }\n    }\n\n    //% blockId=NL_MP3_MagicianSay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Magician says on the %side difficulty %difficulty\"\n    export function mp3magician(side: magicianSaysSide, difficulty: magicianDifficulty): void {\n        if (side == magicianSaysSide.left) {\n            if (difficulty == magicianDifficulty.easy) {\n\n            } else if (difficulty = magicianDifficulty.medium) {\n\n            } else if (difficulty = magicianDifficulty.hard) {\n\n            }\n        } else if (side = magicianSaysSide.right) {\n            if (difficulty == magicianDifficulty.easy) {\n\n            } else if (difficulty = magicianDifficulty.medium) {\n\n            } else if (difficulty = magicianDifficulty.hard) {\n\n            }\n        } \n    }\n\n    //% blockId=NL_MP3_SfxPlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %sfx sound effect\"\n    export function mp3sfxPlay(sfx: sfxType): void {\n        if(sfx == sfxType.correct){\n            bankPlay(mp3type.sfxvoice, sb_sfx_correct, takeRotate(playlist_correct))\n        }else if (sfx == sfxType.incorrect){\n            bankPlay(mp3type.sfxvoice, sb_sfx_incorrect, takeRotate(playlist_incorrect))\n        }else if (sfx == sfxType.ghost){\n            bankPlay(mp3type.sfxvoice, sb_sfx_ghost, takeRotate(playlist_ghost))\n        }else if (sfx == sfxType.fire){\n            bankPlay(mp3type.sfxvoice, sb_sfx_fire, takeRotate(playlist_fire))\n        }else if (sfx == sfxType.explosion){\n            bankPlay(mp3type.sfxvoice, sb_sfx_boom, takeRotate(playlist_boom))\n        }else if (sfx == sfxType.splash){\n            bankPlay(mp3type.sfxvoice, sb_sfx_splash, takeRotate(playlist_splash))\n        } else if (sfx == sfxType.spark) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_zap, takeRotate(playlist_zap))\n        } else if (sfx == sfxType.slash) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_slash, takeRotate(playlist_slash))\n        }\n    }\n/// END SOUND BANK ///\n\n/// BEGIN MOTOR & RELAY ///\n    const kong_address = 0x10\n    export enum MotorList { M1=1, M2=2 }\n    export enum motors{ redrack=16, shark=4, ghost=5, cannon=8, oarrack=7, shell=6, door=3, dragon=9, wheel=1, fan=2 }\n    export enum motorState { min, max, mid, off }\n    export enum fogLevels { none = 0, light = 1, medium = 2, heavy = 3 }\n    export enum sockState { dancing = 1, still = 0 }\n    let motor_wheel_max = 12; let motor_wheel_min = 0\n    let servo_redrack_max = 150; let servo_redrack_min = 100\n    let servo_cannon_min = 135; let servo_cannon_max = 65\n    let servo_shark_min = 20; let servo_shark_max = 85\n    let servo_oarrack_min = 60; let servo_oarrack_max = 110\n    let servo_ghost_min = 110; let servo_ghost_max = 40\n    let servo_shell_min = 170; let servo_shell_max = 100\n    let servo_door_min = 50; let servo_door_max = 140; let servo_door_mid = 100\n    let motor_fan_min = 0; let motor_fan_mid = 50; let motor_fan_max = 100\n    let servo_dragon_min = 90; let servo_dragon_max = 79\n\n    export function servoSet(servo: motors, angle: number): void {\n        let buf = pins.createBuffer(4);\n        buf[0] = servo;\n        buf[1] = angle;\n        buf[2] = 0;\n        buf[3] = 0;\n        pins.i2cWriteBuffer(kong_address, buf);\n    }\n\n    export function motorSpeed(motor: MotorList, speed: number): void {\n        let buf = pins.createBuffer(4);\n        buf[0] = motor\n        buf[1] = 1;\n        if (speed < 0) {\n            buf[1] = 2;\n            speed = speed * -1\n        }\n        buf[2] = speed;\n        buf[3] = 0;\n        pins.i2cWriteBuffer(kong_address, buf);\n    }\n\n    //% blockId=NL_MOTOR_Set \n    //% block=\"Set %motor to %state\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function motorSet(motor:motors, state:motorState):void{\n        if (motor == motors.redrack){\n            if (state == motorState.min){ servoSet(motor, servo_redrack_min) } \n            else if (state == motorState.max){ servoSet(motor, servo_redrack_max) }\n        } if (motor == motors.shark) {\n            if (state == motorState.min) { servoSet(motor, servo_shark_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_shark_max) }\n        } if (motor == motors.ghost) {\n            if (state == motorState.min) { servoSet(motor, servo_ghost_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_ghost_max) }\n        } if (motor == motors.cannon) {\n            if (state == motorState.min) { servoSet(motor, servo_cannon_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_cannon_max) }\n        } if (motor == motors.oarrack) {\n            if (state == motorState.min) { servoSet(motor, servo_oarrack_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_oarrack_max) }\n        } if (motor == motors.shell) {\n            if (state == motorState.min) { servoSet(motor, servo_shell_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_shell_max) }\n        } if (motor == motors.door) {\n            if (state == motorState.min) { servoSet(motor, servo_door_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_door_max) }\n            else if (state == motorState.mid) { servoSet(motor, servo_door_mid) }\n        } if (motor == motors.dragon) {\n            if (state == motorState.min) { servoSet(motor, servo_dragon_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_dragon_max) }\n        } if (motor == motors.wheel) {\n            if (state == motorState.min) { motorSpeed(MotorList.M1, motor_wheel_min) }\n            else if (state == motorState.max) { motorSpeed(MotorList.M1, motor_wheel_max) }\n            else if (state == motorState.off) { motorSpeed(MotorList.M1, 0) }\n        } if (motor == motors.fan) {\n            if (state == motorState.min) { motorSpeed(MotorList.M2, motor_fan_min) }\n            else if (state == motorState.mid) { motorSpeed(MotorList.M2, motor_fan_mid) }\n            else if (state == motorState.max) { motorSpeed(MotorList.M2, motor_fan_max) }\n            else if (state == motorState.off) { motorSpeed(MotorList.M2, 0) }\n        }\n    }\n\n    //% blockId=NL_RELAY_FogSet \n    //% block=\"set fog level to %level\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function setFog(fog:fogLevels):void{\n        if (fog == fogLevels.none){\n            pins.digitalWritePin(DigitalPin.P2, 1)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 1)\n        } else if (fog == fogLevels.light){\n            pins.digitalWritePin(DigitalPin.P2, 1)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        } else if (fog == fogLevels.medium) {\n            pins.digitalWritePin(DigitalPin.P2, 0)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        } else if (fog == fogLevels.heavy) {\n            pins.digitalWritePin(DigitalPin.P2, 0)\n            pins.digitalWritePin(DigitalPin.P8, 0)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        }\n    }\n\n    //% blockId=NL_RELAY_SockSet\n    //% block=\"set dancing sock to %sockState\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function setSock(state: sockState): void {\n        if(state==sockState.dancing){ pins.digitalWritePin(DigitalPin.P12, 0) }\n        else{ pins.digitalWritePin(DigitalPin.P12, 1) }\n    }\n\n/// END MOTOR & RELAY ///\n\n/// BEGIN OLED\n\n    let d1 = [0, 0, 0, 20, 36, 35, 54, 0, 28, 65, 8, 8, 160, 8, 96, 32, 62, 0, 98, 34, 24, 39, 60, 1, 54, 6, 0, 0, 8, 20, 65, 2, 50, 126, 127, 62, 127, 127, 127, 62, 127, 65, 32, 127, 127, 127, 127, 62, 127, 62, 127, 38, 1, 63, 31, 63, 99, 3, 97, 127, 2, 65, 4, 128, 1, 32, 127, 56, 56, 56, 8, 24, 127, 0, 128, 127, 65, 124, 124, 56, 252, 24, 0, 72, 4, 60, 28, 60, 68, 28, 68, 8, 0, 65, 2]\n    let d2 = [0, 95, 7, 127, 42, 19, 73, 5, 34, 34, 42, 8, 96, 8, 96, 16, 81, 66, 81, 65, 20, 69, 74, 113, 73, 73, 54, 172, 20, 20, 34, 1, 73, 9, 73, 65, 65, 73, 9, 65, 8, 127, 64, 8, 64, 2, 4, 65, 9, 65, 9, 73, 1, 64, 32, 64, 20, 4, 81, 65, 4, 65, 2, 128, 2, 84, 72, 68, 68, 84, 126, 164, 8, 125, 132, 16, 127, 4, 8, 68, 36, 36, 124, 84, 127, 64, 32, 64, 40, 160, 100, 54, 127, 54, 1]\n    let d3 = [0, 0, 0, 20, 127, 8, 85, 3, 65, 28, 28, 62, 0, 8, 0, 8, 73, 127, 73, 73, 18, 69, 73, 9, 73, 73, 54, 108, 34, 20, 20, 81, 121, 9, 73, 65, 65, 73, 9, 65, 8, 65, 65, 20, 64, 12, 8, 65, 9, 81, 25, 73, 127, 64, 64, 56, 8, 120, 73, 65, 8, 127, 1, 128, 4, 84, 68, 68, 68, 84, 9, 164, 4, 0, 125, 40, 64, 24, 4, 68, 36, 36, 8, 84, 68, 64, 64, 48, 16, 160, 84, 65, 0, 8, 1]\n    let d4 = [0, 0, 7, 127, 42, 100, 34, 0, 0, 0, 42, 8, 0, 8, 0, 4, 69, 64, 73, 73, 127, 69, 73, 5, 73, 41, 0, 0, 65, 20, 8, 9, 65, 9, 73, 65, 34, 73, 9, 81, 8, 0, 63, 34, 64, 2, 16, 65, 9, 33, 41, 73, 1, 64, 32, 64, 20, 4, 69, 0, 16, 0, 2, 128, 0, 84, 68, 40, 72, 84, 2, 164, 4, 0, 0, 68, 0, 4, 124, 56, 24, 252, 4, 36, 0, 124, 32, 64, 40, 124, 76, 0, 0, 0, 2]\n    let d5 = [0, 0, 0, 20, 18, 98, 80, 0, 0, 0, 8, 8, 0, 8, 0, 2, 62, 0, 70, 54, 16, 57, 48, 3, 54, 30, 0, 0, 0, 20, 0, 6, 62, 126, 54, 34, 28, 65, 1, 114, 127, 0, 1, 65, 64, 127, 127, 62, 6, 94, 70, 50, 1, 63, 31, 63, 99, 3, 67, 0, 32, 0, 4, 128, 0, 120, 56, 0, 127, 24, 0, 124, 120, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 28, 60, 68, 0, 68, 0, 0, 0, 1]\n\n    let display = [\" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\")]\n    let desired = [\" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\")]\n\n    //% blockId=NL_OLED_Update3\n    //% block=\"oled update from buffer\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function changeThree(): void{\n        let updated: string[][] = []\n        let count = 0\n        for (let row=0; row<8; row++){\n            for(let col=0; col<16; col++){\n                let refChar = desired[row][col]\n                if (refChar != display[row][col]){\n                    writeChar(refChar,row,col)\n                    display[row][col] = refChar\n                    count++\n                    if (count >= 3){\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    //% blockId=NL_OLED_PrintLine\n    //% block=\"print %text to oled buffer line %line\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function printLine(text:any, line:number): void{\n        let thisText = text + \"\"\n        for (let i = 0; i < 16; i++){\n            if (i < thisText.length){\n                desired[line][i]=thisText.charAt(i)\n            } else{\n                desired[line][i]=\" \"\n            }\n        }\n    }\n\n    function oledcmd(c: number) {\n        pins.i2cWriteNumber(0x3c, c, NumberFormat.UInt16BE);\n    }\n\n    function setText(row: number, column: number) {\n        oledcmd(0xB0 + row);            //set page address\n        oledcmd(0x00 + (8 * column & 0x0F));  //set column lower address\n        oledcmd(0x10 + ((8 * column >> 4) & 0x0F));   //set column higher address\n    }\n\n    //% blockId=NL_OLED_Init \n    //% block=\"initiate the oled screen\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function oledinit(): void {\n        oledcmd(0xAE);  // Set display OFF\n        oledcmd(0xD5);  // Set Display Clock Divide Ratio / OSC Frequency 0xD4\n        oledcmd(0x80);  // Display Clock Divide Ratio / OSC Frequency \n        oledcmd(0xA8);  // Set Multiplex Ratio\n        oledcmd(0x3F);  // Multiplex Ratio for 128x64 (64-1)\n        oledcmd(0xD3);  // Set Display Offset\n        oledcmd(0x00);  // Display Offset\n        oledcmd(0x40);  // Set Display Start Line\n        oledcmd(0x8D);  // Set Charge Pump\n        oledcmd(0x14);  // Charge Pump (0x10 External, 0x14 Internal DC/DC)\n        oledcmd(0xA1);  // Set Segment Re-Map\n        oledcmd(0xC8);  // Set Com Output Scan Direction\n        oledcmd(0xDA);  // Set COM Hardware Configuration\n        oledcmd(0x12);  // COM Hardware Configuration\n        oledcmd(0x81);  // Set Contrast\n        oledcmd(0xCF);  // Contrast\n        oledcmd(0xD9);  // Set Pre-Charge Period\n        oledcmd(0xF1);  // Set Pre-Charge Period (0x22 External, 0xF1 Internal)\n        oledcmd(0xDB);  // Set VCOMH Deselect Level\n        oledcmd(0x40);  // VCOMH Deselect Level\n        oledcmd(0xA4);  // Set all pixels OFF\n        oledcmd(0xA6);  // Set display not inverted\n        oledcmd(0xAF);  // Set display On\n        for (let j = 0; j < 8; j++) {\n            setText(j, 0);\n            {\n                for (let i = 0; i < 16; i++)  //clear all columns\n                {\n                    writeChar(\" \",j,i)\n                }\n            }\n        }\n    }\n\n    function writeChar(char: string, row: number, column: number) {\n        setText(row, column)\n        let i = char.charCodeAt(0) - 32\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d1[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d2[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d3[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d4[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d5[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n    }\n\n/// END OLED\n\n\n/// BEGIN DIGITS\n\n    let _SEGMENTS = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71];\n\n    //% blockId=nl_digits_create block=\"4-Digit cPin %cPin dPin %dPin\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function tm1637Create(cPin: DigitalPin, dPin: DigitalPin): TM1637LEDs {\n        let display = new TM1637LEDs();\n        display.clk = cPin\n        display.dio = dPin\n        display.brightness = 7;\n        display.init();\n        return display;\n    }\n    export class TM1637LEDs {\n        buf: Buffer;\n        clk: DigitalPin;\n        dio: DigitalPin;\n        _ON: number;\n        brightness: number;\n        init(): void {\n            pins.digitalWritePin(this.clk, 0);\n            pins.digitalWritePin(this.dio, 0);\n            this._ON = 8;\n            this.buf = pins.createBuffer(4);\n            this.clear();\n        }\n        _start() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _stop() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.dio, 1);\n        }\n        _write_data_cmd() {\n            this._start();\n            this._write_byte(0x40);\n            this._stop();\n        }\n        _write_dsp_ctrl() {\n            this._start();\n            this._write_byte(0x80 | this._ON | this.brightness);\n            this._stop();\n        }\n        _write_byte(b: number) {\n            for (let i = 0; i < 8; i++) {\n                pins.digitalWritePin(this.dio, (b >> i) & 1);\n                pins.digitalWritePin(this.clk, 1);\n                pins.digitalWritePin(this.clk, 0);\n            }\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _intensity(val: number = 7) {\n            this._ON = 8;\n            this.brightness = val - 1;\n            this._write_data_cmd();\n            this._write_dsp_ctrl();\n        }\n        _dat(bit: number, dat: number) {\n            this._write_data_cmd();\n            this._start();\n            this._write_byte(0xC0 | (bit % 4))\n            this._write_byte(dat);\n            this._stop();\n            this._write_dsp_ctrl();\n        }\n        \n        //% blockId=nl_digits_digit block=\"%display|show single number|%num|at digit|%bit\"\n        //% subcategory=\"Display\" group=\"Display\"\n        //% bit.defl=1 bit.min=0 bit.max=9\n        showbit(num: number = 5, bit: number = 0) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            this.buf[bit % 4] = _SEGMENTS[num % 16]\n            this._dat(bit, _SEGMENTS[num % 16])\n        }\n\n        //% blockId=nl_digits_number block=\"%display|show number|%num\"\n        //% subcategory=\"Display\" group=\"Display\"\n        showNumber(num: number) {\n            if (num < 0) {\n                num = -num\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n                this._dat(0, 0x40) // '-'\n                // this._dat(0, 0) // blank\n            }\n            else {\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n            }\n        }\n\n        //% blockId=\"nl_digits_clear\" block=\"clear display %display\"\n        //% subcategory=\"Display\" group=\"Display\"\n        clear() {\n            for (let i = 0; i < 4; i++) {\n                this._dat(i, 0)\n                this.buf[i] = 0\n            }\n        }\n    }\n\n/// END DIGITS\n\n}\n\n\n","pxt.json":"{\n    \"name\": \"NotLegosMaster\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"displaySendBuffer.asm\",\n        \"planetxbasic.ts\",\n        \"notlegos.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"7.0.42\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n","test.ts":""}},{"timestamp":1728786698694,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"NFHB?|vd].P(}_Y-C82U\">btToken</variable><variable id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</variable><variable id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</variable><variable id=\"Y|e4lM)*:N0Ca^S5-64i\">lastLaserR</variable><variable id=\"Uk9;F|_3qS]2aZyBH#]%\">lastLaserC</variable><variable id=\"}GOl3M4q[Bn4R~R!?]at\">lastLaserL</variable><variable id=\"JQUQT|8QeX)zSvZ?K@,i\">lastSonarRead</variable><variable id=\"=X]tI5AG]3|WfpT`9Jsr\">lastHue</variable><variable id=\"Bc7kXprAfc3]W%ILxbVV\">lastGesture</variable><variable id=\"#oq[[iBLthN][|]:S!n}\">lastHunt</variable><variable id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</variable><variable id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</variable><variable id=\"8GDUfe;)i@P.Do~T6|{[\">theName</variable><variable id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</variable><variable id=\"=9JavC*{GElF}/FS78a@\">iBegan</variable><variable id=\"e.[{0v-j0Tp(kJ9$~N@:\">isReady</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"NL_OLED_Init\"><next><block type=\"NL_PIXEL_CastleSay\"><field name=\"sockPin\">DigitalPin.P3</field><field name=\"wheelPin\">DigitalPin.P0</field><field name=\"scorePin\">DigitalPin.P16</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"=9JavC*{GElF}/FS78a@\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time_micros\"></block></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field></block></next></block></next></block></next></block></statement></block><block type=\"every_interval\" x=\"714\" y=\"-37\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">2000</field></shadow></value><statement name=\"HANDLER\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value></block></statement></block><block type=\"every_interval\" x=\"1360\" y=\"-37\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"every_interval\" x=\"1575\" y=\"-37\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">40</field></shadow></value><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"=9JavC*{GElF}/FS78a@\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time\"></block></value><next><block type=\"NL_PIXEL_CastleSayTick\"><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"e.[{0v-j0Tp(kJ9$~N@:\">isReady</field></block></value><next><block type=\"function_call\"><mutation name=\"ready_oled\" functionid=\"LSuKu]l*}Y2[|u.h3PJ%\"></mutation><next><block type=\"NL_OLED_Update3\"><next><block type=\"variables_set\"><field name=\"VAR\" id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"=9JavC*{GElF}/FS78a@\">iBegan</field></block></value></block></value></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"every_interval\" x=\"2169\" y=\"-37\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"input_logo_event\" x=\"2384\" y=\"-37\"><field name=\"action\">TouchButtonEvent.Touched</field><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_MP3_PlayerSay\"><field name=\"saying\">notLegos.playerSaying.ready</field><next><block type=\"NL_MP3_SfxPlay\"><field name=\"sfx\">notLegos.sfxType.fire</field><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.intro</field></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"4091\" y=\"-86\"><mutation name=\"buttonPress\" functionid=\"+$9AXp*X:[tcODdtL9m)\"><arg name=\"button\" id=\"mfdvbnfdsij7xy9ejk0nd\" type=\"string\"></arg></mutation><field name=\"function_name\">buttonPress</field><value name=\"mfdvbnfdsij7xy9ejk0nd\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">button</field></block></value><statement name=\"STACK\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">button: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">button</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></statement></block><block type=\"radio_on_value_drag\" x=\"2791\" y=\"55\"><value name=\"HANDLER_DRAG_PARAM_name\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">name</field></block></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">value</field></block></value><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_substr\"><value name=\"this\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value><value name=\"start\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"length\"><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_substr\"><value name=\"this\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value><value name=\"start\"><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value><value name=\"length\"><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text_length\"><value name=\"VALUE\"><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value></block></value></block></value><next><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"controls_if\"><mutation elseif=\"3\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wstar</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_start</field></block></value></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value><statement name=\"DO1\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.welcome</field></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.WheelAll</field><field name=\"effect\">notLegos.vfxEffect.fire</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.intro</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_reg</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">check</field></block></value></block></value><statement name=\"DO2\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">ready</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value></block></statement><statement name=\"ELSE\"><block type=\"controls_if\"><mutation elseif=\"3\" else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">ready</field></block></value></block></value><statement name=\"DO0\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">wstar</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.KongFront</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">boot</field></block></value></block></value><statement name=\"DO1\"><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1000</field></shadow></value></block></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">200</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.idle</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotH</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotI</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">0</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.BrickDragon</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotE</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">tutor</field></block></value></block></value><statement name=\"DO2\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotA</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotB</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value></block></statement><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">heard: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">6</field></shadow></value></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"33\" y=\"3807\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><field name=\"function_name\">radioSay</field><value name=\"vt0gv77qprcayj8xalbs\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">text5</field></block></value><value name=\"ok3p1i8gyn97mv69yabw\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">val</field></block></value><statement name=\"STACK\"><block type=\"radio_datagram_send_value\"><value name=\"name\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value></block></value><value name=\"value\"><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">said: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">7</field></shadow></value></block></next></block></statement></block><block type=\"function_definition\" x=\"778\" y=\"3860\"><mutation name=\"fogFlood\" functionid=\"VFMl!%hPr#$dm7#L!/;e\"></mutation><field name=\"function_name\">fogFlood</field><statement name=\"STACK\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</field></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">10000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">para</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.mid</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.off</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.dancing</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.still</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">8000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.min</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"1220\" y=\"3860\"><mutation name=\"runTutorial\" functionid=\"S6D~vG%3KsCIO0/OH*vo\"></mutation><field name=\"function_name\">runTutorial</field><statement name=\"STACK\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">tutor</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">80</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">20</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.tutorial</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto1</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5950</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto2</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto3</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7600</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto4</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6100</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto5</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">13000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto6</field><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"function_definition\" x=\"1576\" y=\"3860\"><mutation name=\"ready_oled\" functionid=\"LSuKu]l*}Y2[|u.h3PJ%\"></mutation><field name=\"function_name\">ready_oled</field><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Say //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"6\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Y|e4lM)*:N0Ca^S5-64i\">lastLaserR</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> C</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Uk9;F|_3qS]2aZyBH#]%\">lastLaserC</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"}GOl3M4q[Bn4R~R!?]at\">lastLaserL</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"8\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">S</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"JQUQT|8QeX)zSvZ?K@,i\">lastSonarRead</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> H</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_js_round\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"=X]tI5AG]3|WfpT`9Jsr\">lastHue</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> G</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Bc7kXprAfc3]W%ILxbVV\">lastGesture</field></block></value><value name=\"ADD6\"><shadow type=\"text\"><field name=\"TEXT\"> N</field></shadow></value><value name=\"ADD7\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"#oq[[iBLthN][|]:S!n}\">lastHunt</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">Mode: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M:</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"NL_MP3_PlaytimeMusic\"></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">4</field></shadow></value></block></next></block></next></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Do //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> T </field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement></block></statement></block></xml>","main.ts":"function radioSay (text5: string, val: number) {\n    radio.sendValue(\"\" + btToken + text5, val)\n    notLegos.printLine(\"said: \" + text5 + \"=\" + val, 7)\n}\nfunction buttonPress (button: string) {\n    notLegos.printLine(\"button: \" + button, 3)\n}\nfunction runTutorial () {\n    radioSay(\"tutor\", 1)\n    notLegos.setVolume(notLegos.mp3type.music, 80)\n    basic.pause(20)\n    notLegos.mp3musicPlay(notLegos.musicGenre.tutorial)\n    fogLevel = 3\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto1)\n    basic.pause(5950)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto2)\n    basic.pause(5000)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto3)\n    basic.pause(7600)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto4)\n    basic.pause(6100)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto5)\n    basic.pause(13000)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto6)\n    notLegos.setVolume(notLegos.mp3type.music, 100)\n    basic.pause(7000)\n    notLegos.mp3musicPlay(notLegos.musicGenre.awaiting)\n}\nfunction ready_oled () {\n    if (isCastleSay) {\n        let lastHunt = 0\n        let lastGesture = 0\n        let lastHue = 0\n        let lastSonarRead = 0\n        let lastLaserL = 0\n        let lastLaserC = 0\n        let lastLaserR = 0\n        notLegos.printLine(\"// Castle Say //\", 0)\n        notLegos.printLine(\"R\" + Math.constrain(lastLaserR, 0, 9) + \" C\" + Math.constrain(lastLaserC, 0, 9) + \" L\" + Math.constrain(lastLaserL, 0, 9), 1)\n        notLegos.printLine(\"S\" + lastSonarRead + \" H\" + Math.round(lastHue / 3) + \" G\" + lastGesture + \" N\" + lastHunt, 2)\n        notLegos.printLine(\"Mode: \" + castleMode, 3)\n        notLegos.printLine(\"M:\" + notLegos.mp3durationMusic(), 4)\n    } else {\n        notLegos.printLine(\"// Castle Do //\", 0)\n        notLegos.printLine(\"M: \" + castleMode + \" T \" + fogToggle, 1)\n    }\n}\nradio.onReceivedValue(function (name, value) {\n    if (name.substr(0, btToken.length) == btToken) {\n        theName = name.substr(btToken.length, name.length - btToken.length)\n        if (isCastleSay) {\n            if (theName == \"wstar\") {\n                castleMode = \"wait_start\"\n            } else if (theName == \"welco\") {\n                if (value == 1) {\n                    notLegos.vfxReset(notLegos.vfxEffect.glow)\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.glow)\n                    notLegos.mp3voicePlay(notLegos.voiceSaying.welcome)\n                } else if (value == 2) {\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                    notLegos.setEffect(notLegos.vfxRegion.WheelAll, notLegos.vfxEffect.fire)\n                    basic.pause(1200)\n                    notLegos.mp3voicePlay(notLegos.voiceSaying.intro)\n                    basic.pause(3000)\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                    basic.pause(4000)\n                    notLegos.mp3musicPlay(notLegos.musicGenre.awaiting)\n                    castleMode = \"wait_reg\"\n                }\n            } else if (theName == \"check\") {\n                notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                radioSay(\"ready\", 1)\n            } else if (false) {\n            \t\n            }\n        } else {\n            if (theName == \"ready\") {\n                radioSay(\"wstar\", 1)\n                notLegos.setEffect(notLegos.vfxRegion.KongFront, notLegos.vfxEffect.indicate)\n            } else if (theName == \"boot\") {\n                fogLevel = 3\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.parade)\n                notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.max)\n                basic.pause(value * 1000)\n                notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.min)\n                basic.pause(1000)\n                radioSay(\"welco\", 1)\n                basic.pause(200)\n                notLegos.vfxReset(notLegos.vfxEffect.glow)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.glow)\n                basic.pause(5000)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.idle)\n                notLegos.setEffect(notLegos.vfxRegion.SpotH, notLegos.vfxEffect.mine)\n                notLegos.setEffect(notLegos.vfxRegion.SpotI, notLegos.vfxEffect.mine)\n                basic.pause(0)\n                radioSay(\"welco\", 2)\n                basic.pause(4500)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.off)\n                basic.pause(500)\n                notLegos.setEffect(notLegos.vfxRegion.BrickDragon, notLegos.vfxEffect.indicate)\n                basic.pause(1200)\n                notLegos.setEffect(notLegos.vfxRegion.SpotC, notLegos.vfxEffect.indicate)\n                notLegos.setEffect(notLegos.vfxRegion.SpotE, notLegos.vfxEffect.indicate)\n                basic.pause(3000)\n                fogLevel = 1\n                notLegos.motorSet(notLegos.motors.door, notLegos.motorState.max)\n            } else if (theName == \"tutor\") {\n                if (value == 1) {\n                    notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.off)\n                    basic.pause(4000)\n                    notLegos.vfxReset(notLegos.vfxEffect.glow)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotA, notLegos.vfxEffect.glow)\n                    basic.pause(6000)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotB, notLegos.vfxEffect.indicate)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotC, notLegos.vfxEffect.indicate)\n                } else if (value == 2) {\n                \t\n                }\n            } else if (theName == \"welco\") {\n            \t\n            } else {\n            \t\n            }\n        }\n        notLegos.printLine(\"heard: \" + theName + \"=\" + value, 6)\n    }\n})\ninput.onLogoEvent(TouchButtonEvent.Touched, function () {\n    if (isCastleSay) {\n        notLegos.mp3sayPlay(notLegos.playerSaying.ready)\n        notLegos.mp3sfxPlay(notLegos.sfxType.fire)\n        notLegos.mp3musicPlay(notLegos.musicGenre.intro)\n    }\n})\nfunction fogFlood () {\n    if (fogToggle) {\n        fogLevel = 3\n        basic.pause(10000)\n        notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.parade)\n        radioSay(\"para\", 1)\n        fogLevel = 0\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.max)\n        notLegos.motorSet(notLegos.motors.door, notLegos.motorState.max)\n        basic.pause(1000)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.mid)\n        basic.pause(6000)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.min)\n        basic.pause(500)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.off)\n        notLegos.motorSet(notLegos.motors.door, notLegos.motorState.min)\n        fogLevel = 1\n        notLegos.setSock(notLegos.sockState.dancing)\n        basic.pause(6000)\n        notLegos.setSock(notLegos.sockState.still)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.max)\n        basic.pause(8000)\n        notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.redrack, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.redrack, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shark, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shark, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.ghost, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.ghost, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.cannon, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.cannon, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.oarrack, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.oarrack, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shell, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shell, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.dragon, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.dragon, notLegos.motorState.min)\n    }\n}\nlet iTook = 0\nlet theName = \"\"\nlet fogToggle = 0\nlet castleMode = \"\"\nlet isCastleSay = 0\nlet fogLevel = 0\nlet btToken = \"\"\nnotLegos.oledinit()\nnotLegos.castleSayLights(DigitalPin.P3, DigitalPin.P0, DigitalPin.P16)\nlet iBegan = input.runningTimeMicros()\nnotLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.parade)\nloops.everyInterval(500, function () {\n\t\n})\nloops.everyInterval(500, function () {\n\t\n})\nloops.everyInterval(2000, function () {\n    notLegos.printLine(\"\" + iTook + \"\", 5)\n})\nloops.everyInterval(40, function () {\n    let isReady = 0\n    iBegan = input.runningTime()\n    notLegos.castleSayTick()\n    if (isReady) {\n    \t\n    }\n    ready_oled()\n    notLegos.changeThree()\n    iTook = input.runningTime() - iBegan\n})\n","README.md":"\n> Open this page at [https://notlegos.github.io/castleresay/](https://notlegos.github.io/castleresay/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/castleresay** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/castleresay** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/soundbank/](https://notlegos.github.io/soundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/soundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/soundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/resoundbank/](https://notlegos.github.io/resoundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/resoundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/resoundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosext/](https://notlegos.github.io/notlegosext/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosext** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosext** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosmaster/](https://notlegos.github.io/notlegosmaster/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosmaster** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosmaster** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","displaySendBuffer.asm":"sendBufferAsm:\n\n    push {r4,r5,r6,r7,lr}\n    \n    mov r4, r0 ; save buff\n    mov r6, r1 ; save pin\n    \n    mov r0, r4\n    bl BufferMethods::length\n    mov r5, r0\n    \n    mov r0, r4\n    bl BufferMethods::getBytes\n    mov r4, r0\n    \n    ; setup pin as digital\n    mov r0, r6\n    movs r1, #0\n    bl pins::digitalWritePin\n    \n    ; load pin address\n    mov r0, r6\n    bl pins::getPinAddress\n\n    ldr r0, [r0, #8] ; get mbed DigitalOut from MicroBitPin\n    ldr r1, [r0, #4] ; r1-mask for this pin\n    ldr r2, [r0, #16] ; r2-clraddr\n    ldr r3, [r0, #12] ; r3-setaddr\n    \n    cpsid i ; disable irq\n    \n    b .start\n    \n.nextbit:               ;            C0\n    str r1, [r3, #0]    ; pin := hi  C2\n    tst r6, r0          ;            C3\n    bne .islate         ;            C4\n    str r1, [r2, #0]    ; pin := lo  C6\n.islate:\n    lsrs r6, r6, #1     ; r6 >>= 1   C7\n    bne .justbit        ;            C8\n    \n    ; not just a bit - need new byte\n    adds r4, #1         ; r4++       C9\n    subs r5, #1         ; r5--       C10\n    bcc .stop           ; if (r5<0) goto .stop  C11\n.start:\n    movs r6, #0x80      ; reset mask C12\n    nop                 ;            C13\n\n.common:               ;             C13\n    str r1, [r2, #0]   ; pin := lo   C15\n    ; always re-load byte - it just fits with the cycles better this way\n    ldrb r0, [r4, #0]  ; r0 := *r4   C17\n    b .nextbit         ;             C20\n\n.justbit: ; C10\n    ; no nops, branch taken is already 3 cycles\n    b .common ; C13\n\n.stop:    \n    str r1, [r2, #0]   ; pin := lo\n    cpsie i            ; enable irq\n\n    pop {r4,r5,r6,r7,pc}\n","planetxbasic.ts":"/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#00B1ED  icon=\"\\uf005\" block=\"Connected\" blockId=\"PlanetX_Connected\"\n//% groups='[\"Digital\", \"Analog\", \"IIC Port\"]'\nnamespace Connected {\n    \n    ////////////////////////paj7620//////////////////////\n    let gesture_first_init = true\n    const initRegisterArray: number[] = [\n        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17,\n        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F,\n        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14,\n        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27,\n        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01,\n        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00,\n        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20,\n        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37,\n        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A,\n        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F,\n        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30,\n        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19,\n        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04,\n        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00,\n        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00,\n        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F,\n        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07,\n        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01,\n        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F,\n        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01,\n        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40,\n        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E,\n        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00,\n        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08,\n        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00,\n        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01,\n        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01,\n        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01\n    ];\n    \n    /////////////////////////color/////////////////////////\n    const APDS9960_ADDR = 0x39\n    const APDS9960_ENABLE = 0x80\n    const APDS9960_ATIME = 0x81\n    const APDS9960_CONTROL = 0x8F\n    const APDS9960_STATUS = 0x93\n    const APDS9960_CDATAL = 0x94\n    const APDS9960_CDATAH = 0x95\n    const APDS9960_RDATAL = 0x96\n    const APDS9960_RDATAH = 0x97\n    const APDS9960_GDATAL = 0x98\n    const APDS9960_GDATAH = 0x99\n    const APDS9960_BDATAL = 0x9A\n    const APDS9960_BDATAH = 0x9B\n    const APDS9960_GCONF4 = 0xAB\n    const APDS9960_AICLEAR = 0xE7\n    let color_first_init = false\n\n    function i2cwrite_color(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n    function i2cread_color(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n    function rgb2hsl(color_r: number, color_g: number, color_b: number): number {\n        let Hue = 0\n        let R = color_r * 100 / 255;\n        let G = color_g * 100 / 255;\n        let B = color_b * 100 / 255;\n        let maxVal = Math.max(R, Math.max(G, B))\n        let minVal = Math.min(R, Math.min(G, B))\n        let Delta = maxVal - minVal;\n\n        if (Delta < 0) {\n            Hue = 0;\n        }\n        else if (maxVal == R && G >= B) {\n            Hue = (60 * ((G - B) * 100 / Delta)) / 100;\n        }\n        else if (maxVal == R && G < B) {\n            Hue = (60 * ((G - B) * 100 / Delta) + 360 * 100) / 100;\n        }\n        else if (maxVal == G) {\n            Hue = (60 * ((B - R) * 100 / Delta) + 120 * 100) / 100;\n        }\n        else if (maxVal == B) {\n            Hue = (60 * ((R - G) * 100 / Delta) + 240 * 100) / 100;\n        }\n        return Hue\n    }\n    function initModule(): void {\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ATIME, 252)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_CONTROL, 0x03)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_GCONF4, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_AICLEAR, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x01)\n        color_first_init = true\n    }\n    function colorMode(): void {\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_ENABLE) | 0x2;\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, tmp);\n    }\n\n    ///////////////////////////////////////////////////////MP3\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    /*\n    * Play status selection button list\n    */\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(100)\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,        \n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum Distance_Unit_List {\n        //% block=\"cm\" \n        Distance_Unit_cm,\n\n        //% block=\"foot\"\n        Distance_Unit_foot,\n    }\n    export enum ButtonStateList {\n        //% block=\"C\"\n        C,\n        //% block=\"D\"\n        D,\n        //% block=\"C+D\"\n        CD\n    }\n    export enum GestureType {\n        //% block=\"None\"\n        None = 0,\n        //% block=\"Right\"\n        Right = 1,\n        //% block=\"Left\"\n        Left = 2,\n        //% block=\"Up\"\n        Up = 3,\n        //% block=\"Down\"\n        Down = 4,\n        //% block=\"Forward\"\n        Forward = 5,\n        //% block=\"Backward\"\n        Backward = 6,\n        //% block=\"Clockwise\"\n        Clockwise = 7,\n        //% block=\"Anticlockwise\"\n        Anticlockwise = 8,\n        //% block=\"Wave\"\n        Wave = 9\n    }\n    export enum ColorList {\n        //% block=\"Red\"\n        red,\n        //% block=\"Green\"\n        green,\n        //% block=\"Blue\"\n        blue,\n        //% block=\"Cyan\"\n        cyan,\n        //% block=\"Magenta\"\n        magenta,\n        //% block=\"Yellow\"\n        yellow,\n        //% block=\"White\"\n        white\n    }\n\n    ///////////////////////////////////blocks/////////////////////////////\n\n    //% blockId=\"readwaterLevel\" block=\"Water level sensor %Rjpin value(0~100)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function waterLevel(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        let voltage = 0, waterlevel = 0;\n        voltage = pins.map(\n            pins.analogReadPin(pin),\n            50,\n            600,\n            0,\n            100\n        );\n        if (voltage < 0) {\n            voltage = 0\n        }\n        waterlevel = voltage;\n        return Math.round(waterlevel)\n    }\n\n    let distance_last = 0\n\n    //% blockId=sonarbit block=\"Ultrasonic sensor pinT %tPin pinE %ePin distance %distance_unit\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% distance_unit.fieldEditor=\"gridpicker\"\n    //% distance_unit.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    export function ultrasoundSensor(tPin: DigitalPin, ePin: DigitalPin, distance_unit: Distance_Unit_List): number {\n        let pinT = tPin\n        let pinE = ePin\n        pins.setPull(pinT, PinPullMode.PullNone)\n        pins.digitalWritePin(pinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(pinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(pinT, 0)\n\n        // read pulse\n        let d = pins.pulseIn(pinE, PulseValue.High, 25000)\n        let version = control.hardwareVersion()\n        let distance = d * 34 / 2 / 1000\n        if (version == \"1\") {\n            distance = distance * 3 / 2\n        }\n\n        if (distance > 430) {\n            distance = 0\n        }\n\n        if (distance == 0) {\n            distance = distance_last\n            distance_last = 0\n        }\n        else {\n            distance_last = distance\n        }\n\n        switch (distance_unit) {\n            case Distance_Unit_List.Distance_Unit_cm:\n                return Math.floor(distance)  //cm\n                break\n            case Distance_Unit_List.Distance_Unit_foot:\n                return Math.floor(distance / 30.48)   //foot\n                break\n            default:\n                return 0\n        }\n    }\n\n    export class PAJ7620 {\n        private paj7620WriteReg(addr: number, cmd: number) {\n            let buf: Buffer = pins.createBuffer(2);\n            buf[0] = addr;\n            buf[1] = cmd;\n            pins.i2cWriteBuffer(0x73, buf, false);\n        }\n        private paj7620ReadReg(addr: number): number {\n            let buf: Buffer = pins.createBuffer(1);\n            buf[0] = addr;\n            pins.i2cWriteBuffer(0x73, buf, false);\n            buf = pins.i2cReadBuffer(0x73, 1, false);\n            return buf[0];\n        }\n        private paj7620SelectBank(bank: number) {\n            if (bank == 0) this.paj7620WriteReg(0xEF, 0);\n            else if (bank == 1) this.paj7620WriteReg(0xEF, 1);\n        }\n        private paj7620Init() {\n            let temp = 0;\n            this.paj7620SelectBank(0);\n            temp = this.paj7620ReadReg(0);\n            if (temp == 0x20) {\n                for (let i = 0; i < 438; i += 2) {\n                    this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);\n                }\n            }\n            this.paj7620SelectBank(0);\n        }\n        init() {\n            this.paj7620Init();\n            basic.pause(200);\n        }\n        read(): number {\n            let data = 0, result = 0;\n            data = this.paj7620ReadReg(0x43);\n            switch (data) {\n                case 0x01:\n                    result = GestureType.Right;\n                    break;\n                case 0x02:\n                    result = GestureType.Left;\n                    break;\n                case 0x04:\n                    result = GestureType.Up;\n                    break;\n                case 0x08:\n                    result = GestureType.Down;\n                    break;\n                case 0x10:\n                    result = GestureType.Forward;\n                    break;\n                case 0x20:\n                    result = GestureType.Backward;\n                    break;\n                case 0x40:\n                    result = GestureType.Clockwise;\n                    break;\n                case 0x80:\n                    result = GestureType.Anticlockwise;\n                    break;\n                default:\n                    data = this.paj7620ReadReg(0x44);\n                    if (data == 0x01)\n                        result = GestureType.Wave;\n                    break;\n            }\n            return result;\n        }\n    }\n    const gestureEventId = 3100;\n    let lastGesture = GestureType.None;\n    let paj7620 = new PAJ7620();\n    //% blockId= gesture_create_event block=\"Gesture sensor IIC port is %gesture\"\n    //% gesture.fieldEditor=\"gridpicker\" gesture.fieldOptions.columns=3\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function onGesture(gesture: GestureType, handler: () => void) {\n        control.onEvent(gestureEventId, gesture, handler);\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        control.inBackground(() => {\n            while (true) {\n                const gesture = paj7620.read();\n                if (gesture != lastGesture) {\n                    lastGesture = gesture;\n                    control.raiseEvent(gestureEventId, lastGesture);\n                }\n                basic.pause(200);\n            }\n        })\n    }\n\n    //% blockId= gesture_get_event block=\"Gesture sensor IIC port detects\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function getGesture(): number {\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        const gesture = paj7620.read();\n        return gesture\n    }\n\n\n\n\n    //% blockId=apds9960_readcolor block=\"Color sensor IIC port color HUE(0~360)\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function readColor(): number {\n        if (color_first_init == false) {\n            initModule()\n            colorMode()\n        }\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        while (!tmp) {\n            basic.pause(5);\n            tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        }\n        let c = i2cread_color(APDS9960_ADDR, APDS9960_CDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_CDATAH) * 256;\n        let r = i2cread_color(APDS9960_ADDR, APDS9960_RDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_RDATAH) * 256;\n        let g = i2cread_color(APDS9960_ADDR, APDS9960_GDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_GDATAH) * 256;\n        let b = i2cread_color(APDS9960_ADDR, APDS9960_BDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_BDATAH) * 256;\n        // map to rgb based on clear channel\n        let avg = c / 3;\n        r = r * 255 / avg;\n        g = g * 255 / avg;\n        b = b * 255 / avg;\n        //let hue = rgb2hue(r, g, b);\n        let hue = rgb2hsl(r, g, b)\n        return hue\n    }\n    //% block=\"Color sensor IIC port detects %color\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% color.fieldEditor=\"gridpicker\" color.fieldOptions.columns=3\n    export function checkColor(color: ColorList): boolean {\n        let hue = readColor()\n        switch (color) {\n            case ColorList.red:\n                if (hue > 330 || hue < 20) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.green:\n                if (hue > 120 && 180 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.blue:\n                if (hue > 210 && 270 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.cyan:\n                if (hue > 190 && 210 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.magenta:\n                if (hue > 260 && 330 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.yellow:\n                if (hue > 30 && 120 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.white:\n                if (hue >= 180 && 190 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n        }\n    }\n\n    //% blockId=\"potentiometer\" block=\"Trimpot %Rjpin analog value\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Input color=#E2C438 group=\"Analog\"\n    export function trimpot(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        return pins.analogReadPin(pin)\n    }\n    //% blockId=buttonab block=\"Button %Rjpin %button is pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonCD(Rjpin: DigitalRJPin, button: ButtonStateList): boolean {\n        let pinC = DigitalPin.P1\n        let pinD = DigitalPin.P2\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pinC = DigitalPin.P1\n                pinD = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pinC = DigitalPin.P2\n                pinD = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pinC = DigitalPin.P13\n                pinD = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pinC = DigitalPin.P15\n                pinD = DigitalPin.P16\n                break;\n            case DigitalRJPin.P3:\n                pinC = DigitalPin.P3\n                pinD = DigitalPin.P4\n                break;\n        }\n        pins.setPull(pinC, PinPullMode.PullUp)\n        pins.setPull(pinD, PinPullMode.PullUp)\n        if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 0 && button == ButtonStateList.CD) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinC) == 0 && pins.digitalReadPin(pinD) == 1 && button == ButtonStateList.C) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 1 && button == ButtonStateList.D) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    export enum ButtonState {\n        //% block=\"on\"\n        on = 1,\n        //% block=\"off\"\n        off = 2\n    }\n\n    const buttonEventSource = 5000\n    const buttonEventValue = {\n        CD_pressed: ButtonState.on,\n        CD_unpressed: ButtonState.off\n    }\n\n    //% block=\"on button %Rjpin %button pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=4\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonEvent(Rjpin: DigitalRJPin, button: ButtonStateList, handler: () => void) {\n        let ButtonPin_C = DigitalPin.P1\n        let ButtonPin_D = DigitalPin.P2\n        let pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P0\n        let pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                ButtonPin_C = DigitalPin.P1\n                ButtonPin_D = DigitalPin.P8\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P1\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P8\n                break;\n            case DigitalRJPin.J2:\n                ButtonPin_C = DigitalPin.P2\n                ButtonPin_D = DigitalPin.P12\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P2\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P12\n                break;\n            case DigitalRJPin.J3:\n                ButtonPin_C = DigitalPin.P13\n                ButtonPin_D = DigitalPin.P14\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P13\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P14\n                break;\n            case DigitalRJPin.J4:\n                ButtonPin_C = DigitalPin.P15\n                ButtonPin_D = DigitalPin.P16\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P15\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P16\n                break;\n            case DigitalRJPin.P3:\n                ButtonPin_C = DigitalPin.P3\n                ButtonPin_D = DigitalPin.P4\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P3\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P4\n                break;\n        }\n        if (button == ButtonStateList.C) {\n            pins.setPull(ButtonPin_C, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_C, PinEventType.Edge)\n            control.onEvent(pinEventSource_C, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.D) {\n            pins.setPull(ButtonPin_D, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_D, PinEventType.Edge)\n            control.onEvent(pinEventSource_D, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.CD) {\n            loops.everyInterval(50, function () {\n                if (pins.digitalReadPin(ButtonPin_C) == 0 && pins.digitalReadPin(ButtonPin_D) == 0) {\n                    control.raiseEvent(buttonEventSource, buttonEventValue.CD_pressed)\n                }\n            })\n            control.onEvent(buttonEventSource, buttonEventValue.CD_pressed, handler)\n        }\n    }\n\n    //% blockId=fans block=\"Motor fan %Rjpin toggle to $fanstate || speed %speed \\\\%\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% fanstate.shadow=\"toggleOnOff\"\n    //% subcategory=Excute group=\"Digital\" color=#EA5532\n    //% speed.min=0 speed.max=100\n    //% expandableArgumentMode=\"toggle\"\n    export function motorFan(Rjpin: DigitalRJPin, fanstate: boolean, speed: number = 100): void {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case DigitalRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n            case DigitalRJPin.J3:\n                pin = AnalogPin.P13\n                break;\n            case DigitalRJPin.J4:\n                pin = AnalogPin.P15\n                break;\n        }\n        if (fanstate) {\n            pins.analogSetPeriod(pin, 100)\n            pins.analogWritePin(pin, Math.map(speed, 0, 100, 0, 1023))\n        }\n        else {\n            pins.analogWritePin(pin, 0)\n            speed = 0\n        }\n    }\n\n\n    //% blockId=\"setLoopFolder\" block=\"loop play all the MP3s in the folder:$folderNum\"\n    //% folderNum.defl=\"01\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setLoopFolder(folderNum: string): void {\n        CMD = 0x17\n        para1 = 0\n        para2 = parseInt(folderNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    //% blockId=\"folderPlay\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum || repeatList: $myAns\"\n    //% folderNum.defl=\"01\" fileNum.defl=\"001\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function folderPlay(folderNum: string, fileNum: string, myAns: boolean = false): void {\n        CMD = 0x0F\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        if (myAns)\n            execute(0x19)\n    }\n\n    //% blockId=\"playFolderFilePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFilePort(folderNum: string, fileNum: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFolderFileVolumePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum with volume:$theVolume usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" theVolume.defl=\"10\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFileVolumePort(folderNum: string, fileNum: string, theVolume: string, Rjpin: DigitalRJPin): void {\n        \n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        \n        let volume = parseInt(theVolume)\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(200)\n\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"volumePort\" \n    //% block=\"set MP3 volume:$theVolume usingPin:$Rjpin\"\n    //% theVolume.defl=\"10\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function volumePort(theVolume: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        let volume = parseInt(theVolume)\n        if (volume > 30) {\n            volume = 30\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(300)\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n\n\n    //% blockId=\"setTracking\" \n    //% block=\"play the mp3 in order of:%tracking || repeatList: $myAns\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% tracking.defl=1\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setTracking(tracking: number, myAns: boolean = false): void {\n        CMD = 0x03\n        para1 = 0x00\n        para2 = tracking\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        execute(0x0D)\n        if (myAns)\n            execute(0x19)\n    }\n    //% blockId=MP3execute block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=\"setVolume\" block=\"Set volume(0~25):%volume\"\n    //% volume.min=0 volume.max=25\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setVolume(volume: number): void {\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 0x06\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=MP3setPort block=\"Set the MP3 port to %Rjpin\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function MP3SetPort(Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        setVolume(25)\n    }\n}","notlegos.ts":"// NotLegos Blocks\n//% block=\"Not LEGOs\" color=#0031AF weight=1000 icon=\"\\uf3a5\"\n//% groups='[\"MP3\",\"Sensors\"]'\nnamespace notLegos {\n\n\n/// BEGIN NEOPIXEL ///\n    export enum hues { red = 0, orange = 15, yellow = 40, lime = 85, green = 110, cyan = 170, blue = 240, purple = 260, pink = 310 }\n    export enum vfxEffect { parade = 0, fire = 1, indicate = 2, idle = 3, glow = 4, mine = 5, off = 6 }\n    let NeoSock: Strip = null; let NeoScore: Strip = null; let NeoWheel: Strip = null; let NeoKong: Strip = null; let NeoStrip: Strip = null; let NeoBrick: Strip = null\n    let vfx_mine_tog: number[] = []; let vfx_mine_hue: number[] = []; let vfx_mine_sat: number[] = []; let vfx_mine_lum: number[] = []\n    let vfx_fire_tog: number[] = []; let vfx_fire_hue: number[] = []; let vfx_fire_sat: number[] = []; let vfx_fire_lum: number[] = []; let vfx_fire_colors: number[] = []\n    let vfx_indicate_tog: number[] = []; let vfx_indicate_hue: number[] = []; let vfx_indicate_sat: number[] = []; let vfx_indicate_lum: number[] = [];\n    let vfx_idle_tog: number[] = []; let vfx_idle_hue: number[] = []; let vfx_idle_sat: number[] = []; let vfx_idle_lum: number[] = []\n    let vfx_glow_tog: number[] = []; let vfx_glow_hue: number[] = []; let vfx_glow_sat: number[] = []; let vfx_glow_lum: number[] = []\n    let vfx_off_hue: number[] = []; let vfx_off_sat: number[] = []; let vfx_off_lum: number[] = []\n    let vfx_parade_tog: number[] = []; let vfx_parade_hue: number[] = []; let vfx_parade_sat: number[] = []; let vfx_parade_lum: number[] = []; let vfx_parade_colors: number[] = [];\n    let vfx_last_tog: number[] = []; let vfx_last_hue: number[] = []; let vfx_last_sat: number[] = []; let vfx_last_lum: number[] = []\n    let vfx_master_tog: number[] = []; let vfx_master_hue: number[] = []; let vfx_master_sat: number[] = []; let vfx_master_lum: number[] = []; let vfx_master_effect: number[] = [];\n    let vfx_light_count = 0\n\n    //% shim=sendBufferAsm\n    function sendBuffer(buf: Buffer, pin: DigitalPin) { }\n\n    export class Strip {\n        buf: Buffer;\n        pin: DigitalPin;\n        start: number; // start offset in LED strip\n        _length: number; // number of LEDs\n\n        setPixelHSLPrecise(pixeloffset: number, h: number, s: number, l: number): void {\n            if (pixeloffset < 0 || pixeloffset >= this._length)\n                return;\n            pixeloffset = (pixeloffset + this.start) * 3\n            h = Math.clamp(0,1,h/360)\n            s = Math.clamp(0,1,s/100)\n            l = Math.clamp(0,1,l/100)\n            let r, g, b;\n            if (s === 0) {\n                r = g = b = l; // achromatic\n            } else {\n                const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n                const p = 2 * l - q;\n                let t = h + 1/3\n                if (t < 0) { t += 1; }\n                else if (t > 1) {t -= 1; }\n                if (t < 1/6) {r = p + (q - p) * 6 * t;}\n                else if (t < 1/2) {r = q;}\n                else if (t < 2/3) { r = p + (q - p) * (2/3 - t) * 6; }\n                else { r = p; }\n                t = h\n                if (t < 0) { t += 1; }\n                else if (t > 1) { t -= 1; }\n                if (t < 1 / 6) { g = p + (q - p) * 6 * t; }\n                else if (t < 1 / 2) { g = q; }\n                else if (t < 2 / 3) { g = p + (q - p) * (2/3 - t) * 6; }\n                else { g = p; }\n                t = h - 1/3\n                if (t < 0) { t += 1; }\n                else if (t > 1) { t -= 1; }\n                if (t < 1 / 6) { b = p + (q - p) * 6 * t; }\n                else if (t < 1/2) { b = q; }\n                else if (t < 2/3) { b = p + (q - p) * (2/3 - t) * 6; }\n                else { b = p; }\n            }\n            this.buf[pixeloffset + 0] = Math.round(g * 255);\n            this.buf[pixeloffset + 1] = Math.round(r * 255);\n            this.buf[pixeloffset + 2] = Math.round(b * 255);\n        }\n\n        // show() { sendBuffer(this.buf, this.pin); }  //Send all the changes to the strip.\n\n        show() { \n            sendBuffer(this.buf, DigitalPin.P16); \n            sendBuffer(this.buf, DigitalPin.P15);\n            sendBuffer(this.buf, DigitalPin.P14);\n            sendBuffer(this.buf, DigitalPin.P13);\n            sendBuffer(this.buf, DigitalPin.P12);\n            sendBuffer(this.buf, DigitalPin.P8);\n            sendBuffer(this.buf, DigitalPin.P2);\n        }  //Send all the changes to the strip.\n\n        length() { return this._length; }   //Gets the number of pixels declared on the strip\n\n        shift(offset: number = 1): void { this.buf.shift(-offset * 3, this.start * 3, this._length * 3) }   //Shift LEDs forward and clear with zeros.\n\n        rotate(offset: number = 1): void { this.buf.rotate(-offset * 3, this.start * 3, this._length * 3) } //Rotate LEDs forward\n\n        setPin(pin: DigitalPin): void {\n            this.pin = pin;\n            pins.digitalWritePin(this.pin, 0);  // don't yield to avoid races on initialization\n        }\n    }\n\n    function create(thePin: DigitalPin, numleds: number): Strip {\n        let strip = new Strip();\n        strip.buf = pins.createBuffer(numleds * 3);\n        strip.start = 0;\n        strip._length = numleds;\n        strip.setPin(thePin)\n        return strip;\n    }\n\n    //% blockId=NL_PIXEL_CastleSay\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Sock Circle:%sockPin  Wheel Strip/Circle:%wheelPin  Score Circle:%scorePin \"\n    //% weight=100\n    export function castleSayLights(sockPin: DigitalPin, wheelPin: DigitalPin, scorePin: DigitalPin): void {\n        // NeoScore = create(scorePin, 8)\n        // NeoSock = create(sockPin, 8)\n        NeoWheel = create(wheelPin, 10)\n        vfx_light_count = 17\n        vfxInit()\n        // vfx_indicate_hue[30]=hues.green\n        // vfx_indicate_hue[31] = hues.yellow\n        // vfx_indicate_hue[32] = hues.orange\n        // vfx_indicate_hue[33] = hues.red\n        // vfx_indicate_hue[26] = hues.red\n        // vfx_indicate_hue[27] = hues.red\n        // vfx_indicate_hue[28] = hues.red\n        // vfx_indicate_hue[29] = hues.red\n\n        // setEffect(vfxRegion.CastleSayAll, vfxEffect.parade)\n    }\n\n    //% blockId=NL_PIXEL_CastleDo\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Strips:%spotPin  Bricks:%brickPin Kong Lights:%kongPin\"\n    //% weight=100\n    export function castleDoLights(stripPin: DigitalPin, brickPin: DigitalPin, kongPin: DigitalPin): void {\n        NeoStrip = create(stripPin, 20)\n        NeoBrick = create(brickPin, 8)\n        NeoKong = create(kongPin, 4)\n        vfx_light_count = 20 + 8 + 4\n        vfxInit()\n        vfx_indicate_hue[0]=hues.cyan; vfx_indicate_hue[1]=hues.cyan   //spot h\n        vfx_indicate_hue[2] = hues.pink; vfx_indicate_hue[3] = hues.pink //spot f\n        vfx_indicate_hue[26] = hues.pink   //shell brick\n        vfx_indicate_hue[4] = hues.orange; vfx_indicate_hue[5] = hues.orange   //spot d\n        vfx_indicate_hue[21] = hues.orange   //cannon brick\n        vfx_indicate_hue[25] = hues.orange   //bomb brick\n        vfx_indicate_hue[6] = hues.yellow; vfx_indicate_hue[7] = hues.yellow   //spot b\n        vfx_indicate_hue[8] = hues.red; vfx_indicate_hue[9] = hues.red; vfx_indicate_hue[10] = hues.red; vfx_indicate_hue[11] = hues.red  //spot a\n        vfx_indicate_hue[20] = hues.red; vfx_indicate_hue[27] = hues.red  //wheel bricks\n        vfx_indicate_hue[12] = hues.blue; vfx_indicate_hue[13] = hues.blue    //spot c\n        vfx_indicate_hue[14] = hues.cyan; vfx_indicate_hue[15] = hues.cyan    //spot e\n        vfx_indicate_hue[16] = hues.purple; vfx_indicate_hue[17] = hues.purple  //spot g\n        vfx_indicate_hue[24] = hues.purple  //ghost brick\n        vfx_indicate_hue[18] = hues.green; vfx_indicate_hue[19] = hues.green   //spot i\n        vfx_indicate_hue[28] = hues.green; vfx_indicate_hue[29] = hues.green; vfx_indicate_hue[30] = hues.green; vfx_indicate_hue[31] = hues.green   //kong\n        vfx_indicate_hue[22] = hues.yellow; vfx_indicate_hue[23] = hues.yellow  //dragon brick\n        vfx_indicate_tog[0] = 1; vfx_indicate_tog[1] = 1 //spot h\n        vfx_indicate_tog[2] = 1; vfx_indicate_tog[3] = 1 //spot f\n        vfx_indicate_tog[4] = 1; vfx_indicate_tog[5] = 1 //spot d\n        vfx_indicate_tog[6] = 1; vfx_indicate_tog[7] = 1 //spot b\n        vfx_indicate_tog[8] = 1; vfx_indicate_tog[9] = 1 //spot a\n        vfx_indicate_tog[22] = 1; vfx_indicate_tog[27] = 1    //wheel bricks\n        vfx_indicate_tog[21] = 1    //cannon brick\n        vfx_indicate_tog[25] = 1    //bomb brick\n        vfx_indicate_tog[26] = 1    //shell brick\n        vfx_indicate_tog[31] = 1; vfx_indicate_tog[30] = 1    //kong\n        \n        // setEffect(vfxRegion.CastleDoAll, vfxEffect.indicate)\n    }\n\n    function vfxInit(): void{\n        vfx_parade_colors = [hues.red, hues.orange, hues.yellow, hues.cyan, hues.blue, hues.purple]\n        vfx_fire_colors = [hues.red, hues.red, hues.red, hues.red, hues.orange, hues.orange, hues.orange, hues.orange, hues.orange, hues.yellow]\n        \n        for (let index = 0; index < 6; index++) {\n            vfx_parade_tog.push(randint(0, 1))\n            vfx_parade_hue.push(vfx_parade_colors[randint(0, vfx_parade_colors.length - 1)])\n            vfx_parade_sat.push(100)\n            vfx_parade_lum.push(randint(10, 65))\n        }\n        for (let index = 0; index < 1; index++) {\n            vfx_mine_tog.push(0)\n            vfx_mine_hue.push(hues.red)\n            vfx_mine_sat.push(100)\n            vfx_mine_lum.push(50)\n            vfx_glow_tog.push(0)\n            vfx_glow_hue.push(50)\n            vfx_glow_sat.push(0)\n            vfx_glow_lum.push(0)\n            vfx_off_hue.push(0)\n            vfx_off_sat.push(0)\n            vfx_off_lum.push(0)\n        }\n\n        for (let index = 0; index < 3; index++) {\n            vfx_fire_tog.push(randint(0, 1))\n            vfx_fire_hue.push(vfx_fire_colors[randint(0, vfx_fire_colors.length - 1)])\n            vfx_fire_sat.push(100)\n            vfx_fire_lum.push(randint(30, 80))\n        }\n        \n        for (let index = 0; index < 2; index++) {\n            vfx_indicate_tog.push(0)\n            vfx_indicate_lum.push(50)\n            vfx_indicate_hue.push(50)\n            vfx_indicate_sat.push(100)\n            vfx_idle_tog.push(1)\n            if (index % 2 == 0) { vfx_idle_tog[index] = 0; }\n            vfx_idle_hue.push(265)\n            if (index % 2 == 0) { vfx_idle_hue[index] = 2; }\n            vfx_idle_sat.push(100)\n            vfx_idle_lum.push(50)\n        }\n\n        for (let index = 0; index < vfx_light_count; index++) {\n            vfx_master_tog.push(0)\n            vfx_master_hue.push(0)\n            vfx_master_sat.push(100)\n            vfx_master_lum.push(50)\n            vfx_master_effect.push(vfxEffect.off)    //leave this be!\n        }\n    }\n\n    //% blockId=NL_PIXEL_ResetVFX\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Reset VFX %effect\"\n    //% weight=100\n    export function vfxReset(effect:vfxEffect):void{\n        if (effect == vfxEffect.idle){\n            for (let index = 0; index < vfx_light_count; index++) {\n                vfx_idle_tog[index]=1\n                if (index % 2 == 0) { vfx_idle_tog[index] = 0; }\n                vfx_idle_hue[index]=265\n                if (index % 2 == 0) { vfx_idle_hue[index] = 2; }\n                vfx_idle_sat[index]=100\n                vfx_idle_lum[index]=50\n            }\n        } else if (effect == vfxEffect.glow) {\n            for (let index = 0; index < vfx_light_count; index++) {\n                vfx_glow_tog[index] = 0\n                vfx_glow_hue[index] = 50\n                // vfx_glow_sat[index] = 100\n                vfx_glow_lum[index] = 0\n            }\n        } else if (effect == vfxEffect.mine) {\n            for (let index = 0; index < vfx_light_count; index++) {\n                vfx_mine_tog[index] = 0\n                vfx_mine_hue[index] = hues.red\n                vfx_mine_sat[index] = 100\n                vfx_mine_lum[index] = 50\n            }\n        } else if (effect == vfxEffect.indicate) {\n            for (let index = 0; index < vfx_light_count; index++) {\n                vfx_indicate_tog[index] = 0\n                vfx_indicate_sat[index] = 100\n                vfx_indicate_lum[index] = 50\n            }\n        }\n    }\n\n    //% blockId=NL_PIXEL_CastleSayTick\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Advance Castle Say lights\"\n    //% weight=100\n    export function castleSayTick(): void {\n        paradeTick()\n        fireTick()\n        glowTick()\n        castleSayWrite()\n        indicateTick()\n        idleTick()\n        mineTick()\n    }\n\n    //% blockId=NL_PIXEL_CastleDoTick\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Advance Castle Do lights\"\n    //% weight=100\n    export function castleDoTick(): void {\n        paradeTick()\n        fireTick()\n        glowTick()\n        castleDoWrite()\n        indicateTick()\n        idleTick()\n        mineTick()\n    }\n\n    function paradeTick(): void{\n        for (let index=0; index < vfx_light_count; index++){\n            let thisLum = vfx_parade_lum[index]\n            let thisHue = vfx_parade_hue[index]\n            let thisTog = vfx_parade_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0){\n                if (thisLum < 65){\n                    vfx_parade_lum[index] = thisLum + 12\n                } else if (thisLum >= 65){\n                    vfx_parade_tog[index] = 1\n                }\n            } else if (thisTog == 1){\n                if (thisLum>10){\n                    vfx_parade_lum[index] = thisLum - 4\n                } else if (thisLum <= 10){\n                    vfx_parade_tog[index] = 0\n                    while (nextHue == thisHue){\n                        nextHue = vfx_parade_colors[randint(0, vfx_parade_colors.length - 1)]\n                    }\n                    vfx_parade_hue[index] = nextHue\n                    vfx_parade_lum[index] = thisLum - randint(0,10)\n                }\n            }\n        }\n    }\n\n    function mineTick(): void {\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisLum = vfx_mine_lum[index]\n            let thisHue = vfx_mine_hue[index]\n            let thisTog = vfx_mine_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 200) {\n                    vfx_mine_lum[index] = thisLum + 30\n                } else if (thisLum >= 200) {\n                    vfx_mine_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 0) {\n                    vfx_mine_lum[index] = thisLum - 30\n                } else if (thisLum <= 0) {\n                    vfx_mine_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function idleTick(): void {\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisLum = vfx_idle_lum[index]\n            let thisHue = vfx_idle_hue[index]\n            let thisTog = vfx_idle_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisHue < 265) {\n                    vfx_idle_hue[index] = thisHue + 1\n                } else if (thisHue >= 265) {\n                    vfx_idle_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisHue > 2) {\n                    vfx_idle_hue[index] = thisHue - 1\n                } else if (thisHue <= 2) {\n                    vfx_idle_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function indicateTick(): void {\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisLum = vfx_indicate_lum[index]\n            let thisHue = vfx_indicate_hue[index]\n            let thisTog = vfx_indicate_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 80) {\n                    vfx_indicate_lum[index] = thisLum + 12\n                } else if (thisLum >= 80) {\n                    vfx_indicate_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 25) {\n                    vfx_indicate_lum[index] = thisLum - 4\n                } else if (thisLum <= 25) {\n                    vfx_indicate_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function fireTick(): void {\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisLum = vfx_fire_lum[index]\n            let thisHue = vfx_fire_hue[index]\n            let thisTog = vfx_fire_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 80) {\n                    vfx_fire_lum[index] = thisLum + 15\n                } else if (thisLum >= 80) {\n                    vfx_fire_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 30) {\n                    vfx_fire_lum[index] = thisLum - 5\n                } else if (thisLum <= 30) {\n                    vfx_fire_tog[index] = 0\n                    while (nextHue == thisHue) {\n                        nextHue = vfx_fire_colors[randint(0, vfx_fire_colors.length - 1)]\n                    }\n                    vfx_fire_hue[index] = nextHue\n                    vfx_fire_lum[index] = thisLum - randint(0, 30)\n                }\n            }\n        }\n    }\n\n    function glowTick(): void {\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisLum = vfx_glow_lum[index]\n            if (thisLum < 4){\n                vfx_glow_lum[index] = thisLum+.2\n            } else if (thisLum < 5) {\n                vfx_glow_lum[index] = thisLum+ + .3\n            } else if (thisLum < 10) {\n                vfx_glow_lum[index] = thisLum + .5\n            } else if (thisLum < 15) {\n                vfx_glow_lum[index] = thisLum + 1\n            }else if (thisLum < 30) {\n                vfx_glow_lum[index] = thisLum + 1.5\n            } else if (thisLum < 100) {\n                vfx_glow_lum[index] = thisLum + 4\n            } else{\n                vfx_glow_lum[index] = 0\n            }\n        }\n    }\n\n    function vfxPrepareMaster(): void{\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisEffect = vfx_master_effect[index]\n            if (thisEffect == vfxEffect.parade) {\n                vfx_master_hue[index] = vfx_parade_hue[index]\n                vfx_master_sat[index] = vfx_parade_sat[index]\n                vfx_master_lum[index] = Math.max(0,Math.min(50,vfx_parade_lum[index]))\n            } else if (thisEffect == vfxEffect.fire) {\n                vfx_master_hue[index] = vfx_fire_hue[index]\n                vfx_master_sat[index] = vfx_fire_sat[index]\n                vfx_master_lum[index] = Math.max(0, Math.min(50, vfx_fire_lum[index]))\n            } else if (thisEffect == vfxEffect.indicate) {\n                vfx_master_hue[index] = vfx_indicate_hue[index]\n                vfx_master_sat[index] = vfx_indicate_sat[index]\n                vfx_master_lum[index] = Math.max(0, Math.min(50, vfx_indicate_lum[index]))\n            } else if (thisEffect == vfxEffect.idle) {\n                vfx_master_hue[index] = vfx_idle_hue[index]\n                vfx_master_sat[index] = vfx_idle_sat[index]\n                vfx_master_lum[index] = Math.max(0, Math.min(50, vfx_idle_lum[index]))\n            } else if (thisEffect == vfxEffect.glow) {\n                vfx_master_hue[index] = vfx_glow_hue[index]\n                vfx_master_sat[index] = vfx_glow_sat[index]\n                vfx_master_lum[index] = Math.min(100,vfx_glow_lum[index])\n            } else if (thisEffect == vfxEffect.mine) {\n                vfx_master_hue[index] = vfx_mine_hue[index]\n                vfx_master_sat[index] = vfx_mine_sat[index]\n                vfx_master_lum[index] = Math.max(0, Math.min(50, vfx_mine_lum[index]))\n            } else if (thisEffect == vfxEffect.off) {\n                vfx_master_hue[index] = vfx_mine_hue[index]\n                vfx_master_sat[index] = vfx_mine_sat[index]\n                vfx_master_lum[index] = 0\n            }\n        }\n    }\n    function castleSayWrite(): void{\n        vfxPrepareMaster()\n        let masterIndex = 0\n        // for (let index = 0; index < NeoSock.length(); index++){\n        //     NeoSock.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n        //     masterIndex++\n        // }\n        for (let index = 0; index < NeoWheel.length(); index++) {\n            NeoWheel.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        // for (let index = 0; index < NeoScore.length(); index++) {\n        //     NeoScore.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n        //     masterIndex++\n        // }\n        // NeoSock.show()\n        NeoWheel.show()\n        // NeoScore.show()\n    }\n\n    function castleDoWrite(): void {\n        vfxPrepareMaster()\n        let masterIndex = 0\n        for (let index = 0; index < NeoStrip.length(); index++) {\n            NeoStrip.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        for (let index = 0; index < NeoBrick.length(); index++) {\n            NeoBrick.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        for (let index = 0; index < NeoKong.length(); index++) {\n            NeoKong.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        NeoStrip.show()\n        NeoBrick.show()\n        NeoKong.show()\n    }\n\n    //% blockId=NL_PIXEL_SetEffect\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Set %region VFX to %effect\"\n    //% weight=100\n    export function setEffect(region:vfxRegion, effect:vfxEffect){\n        if (region == vfxRegion.Score1){\n            vfx_master_effect[30] = effect\n        } else if (region == vfxRegion.Score2) {\n            vfx_master_effect[31] = effect\n        } else if (region == vfxRegion.Score3) {\n            vfx_master_effect[32] = effect\n        } else if (region == vfxRegion.Score4) {\n            vfx_master_effect[33] = effect\n        } else if (region == vfxRegion.Score5) {\n            vfx_master_effect[26] = effect\n        } else if (region == vfxRegion.Score6) {\n            vfx_master_effect[27] = effect\n        } else if (region == vfxRegion.Score7) {\n            vfx_master_effect[28] = effect\n        } else if (region == vfxRegion.Score8) {\n            vfx_master_effect[29] = effect\n        } else if (region == vfxRegion.ScoreAll) {\n            for (let i = 26; i <= 33; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SockAll) {\n            for (let i = 0; i <= 7; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelInner) {\n            for (let i = 18; i <= 25; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelOuter) {\n            for (let i = 8; i <= 17; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelAll) {\n            for (let i=8; i <= 25; i++){ vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.CastleSayAll) {\n            for (let i = 0; i <= 33; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotA) {\n            for (let i = 8; i <= 11; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotB) {\n            for (let i = 6; i <= 7; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotC) {\n            for (let i = 12; i <= 13; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotD) {\n            for (let i = 4; i <= 5; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotE) {\n            for (let i = 14; i <= 15; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotF) {\n            for (let i = 2; i <= 3; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotG) {\n            for (let i = 16; i <= 17; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotH) {\n            for (let i = 0; i <= 1; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotI) {\n            for (let i = 18; i <= 19; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotAll) {\n            for (let i = 0; i <= 19; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.BrickWheel) {\n            vfx_master_effect[20] = effect\n            vfx_master_effect[27] = effect\n        } else if (region == vfxRegion.BrickBomb) {\n            vfx_master_effect[25] = effect\n        } else if (region == vfxRegion.BrickShell) {\n            vfx_master_effect[26] = effect\n        } else if (region == vfxRegion.BrickGhost) {\n            vfx_master_effect[24] = effect\n        } else if (region == vfxRegion.BrickDragon) {\n            for (let i = 22; i <= 23; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.BrickCannon) {\n            vfx_master_effect[21] = effect\n        } else if (region == vfxRegion.BrickAll) {\n            for (let i = 20; i <= 27; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongFront) {\n            for (let i = 28; i <= 29; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongBack) {\n            for (let i = 30; i <= 31; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongAll) {\n            for (let i = 28; i <=31; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.CastleDoAll) {\n            for (let i = 0; i < vfx_light_count; i++) { vfx_master_effect[i] = effect };\n        } \n    }\n\n    export enum vfxRegion{\n        Score1, Score2, Score3, Score4, Score5, Score6, Score7, Score8, ScoreAll,\n        SockAll,\n        WheelInner, WheelOuter, WheelAll,\n        KongFront, KongBack, KongAll,\n        BrickWheel, BrickBomb, BrickShell, BrickGhost, BrickDragon, BrickCannon, BrickAll,\n        SpotA, SpotB, SpotC, SpotD, SpotE, SpotF, SpotG, SpotH, SpotI, SpotAll,\n        CastleSayAll,\n        CastleDoAll\n    }\n\n/// END NEOPIXEL ///\n\n\n/// BEGIN SONAR ///\n\n    let sonarPinT = DigitalPin.P0\n    let sonarPinE = DigitalPin.P0\n\n    //% blockId=NL_SENSOR_SonarFirstRead\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"first distance from sonar at %pin1|%pin2\"\n    //% weight=101\n    export function SonarFirstRead(pin1: DigitalPin, pin2: DigitalPin): number {\n        sonarPinT = pin1\n        sonarPinE = pin2\n        pins.setPull(sonarPinT, PinPullMode.PullNone)\n        return SonarNextRead()\n    }\n\n    //% blockId=NL_SENSOR_SonarNextRead\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"next sonar distance\"\n    //% weight=100\n    export function SonarNextRead(): number {\n        pins.digitalWritePin(sonarPinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(sonarPinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(sonarPinT, 0)\n        return Math.floor(pins.pulseIn(sonarPinE, PulseValue.High, 25000) * 34 / 2000)\n    }\n\n/// END SONAR ///\n\n\n/// BEGIN MP3 ///\n\n    export enum playType { Play = 0x0D, Stop = 0x16, PlayNext = 0x01, PlayPrevious = 0x02, Pause = 0x0E }\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    let mp3musicPin: SerialPin\n    let mp3music = false\n    let mp3player = false\n    let mp3sfxPin: SerialPin\n    let mp3sfx = false\n    let mp3musicVol = 0\n    let mp3playerPin: SerialPin\n    let mp3playerVol = 0\n    let mp3sfxVol = 0\n    let isPot = false\n    let potPin = AnalogPin.P0\n    let masterVolume = 25\n\n    //% blockId=NL_SENSOR_TrimpotSet\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"set volume control pot at %aPin\"\n    export function potSet(aPin: AnalogPin): void {\n        potPin = aPin\n        isPot = true\n        masterVolume = potRead()\n    }\n\n    function potRead() {\n        if (isPot) { return Math.round(pins.map(pins.analogReadPin(potPin), 0, 1023, 0, 30)) }\n        else { return 5 }\n    }\n\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) { total += dataArr[i] }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) { myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i]) }\n        serial.writeBuffer(myBuff)\n        basic.pause(20) // Was 100; problematic at 10\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) { myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i]) }\n        serial.writeBuffer(myBuff)\n    }\n\n    //% blockId=NL_MP3_InitiateAs\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Ready MP3bit for %type at %sPin\"\n    //% dPin.fieldEditor=\"gridpicker\"\n    export function mp3setPorts(mp3bit: mp3type, sPin: SerialPin): void {\n        if (mp3bit == mp3type.music) {\n            mp3musicPin = sPin\n            mp3music = true\n            mp3musicVol = 100\n            setVolume(mp3type.music, mp3musicVol)\n        } else if (mp3bit == mp3type.player) {\n            mp3playerPin = sPin\n            mp3player = true\n            mp3playerVol = 100\n            setVolume(mp3type.player, mp3playerVol)\n        } else if (mp3bit == mp3type.sfxvoice) {\n            mp3sfxPin = sPin\n            mp3sfx = true\n            mp3sfxVol = 100\n            setVolume(mp3type.sfxvoice, mp3sfxVol)\n        }   \n    }\n\n    //% blockId=\"nl_playfilefolder\" \n    //% block=\"Play folder %folderNum file %fileNum on %sPin\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3fileFolder(folderNum: string, fileNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        dataArr[5] = parseInt(folderNum)\n        dataArr[6] = parseInt(fileNum)\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"NL_MP3_SendNumbers\" \n    //% block=\"Send numbers for folder %folderNum file %fileNum on %sPin\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3numbers(folderNum: number, fileNum: number, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        dataArr[3] = 15\n        dataArr[5] = folderNum\n        dataArr[6] = fileNum\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=NL_MP3_UpdateVolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Update volume for all\"\n    export function updateVolumeGlobal(): void {\n        let nowVol = potRead()\n        if (masterVolume != nowVol){\n            masterVolume = nowVol\n            setVolume(mp3type.music, mp3musicVol)\n            setVolume(mp3type.player, mp3playerVol)\n            setVolume(mp3type.sfxvoice, mp3sfxVol)\n        }\n    }\n\n    //% blockId=NL_MP3_SetVolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Set %mp3bit volume to %vol\"\n    export function setVolume(mp3bit:mp3type, vol:number): void {\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3musicVol = vol\n        } else if (mp3bit == mp3type.player) {\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3playerVol = vol\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3sfxVol = vol\n        }\n        dataArr[3] = 6\n        dataArr[5] = 0\n        dataArr[6] = Math.round(vol / 100 * masterVolume)\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=NL_MP3_GetVolumes\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Get current volumes\"\n    export function getVolumes() {\n        return \"m\" + mp3musicVol + \" p\" + mp3playerVol + \" s\" + mp3sfxVol + \" g\" + masterVolume\n    }\n\n    //% blockId=\"NL_MP3_StopPlayback\" \n    //% block=\"Stop playback on %mp3bit\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function stopPlayback(mp3bit:mp3type): void {\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        } else if (mp3bit == mp3type.player){\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        }\n        CMD = 0x16\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n/// END MP3 ///\n\n/// BEGIN SOUND BANK ///\n    export enum mp3type { music, player, sfxvoice }\n    export enum musicGenre { intro, tutorial, awaiting, level, won, lost }\n    export enum playerSaying { ready, yay, intro, nay, ouch, success, failure, won, lost, hurry }\n    export enum sfxType { correct, incorrect, ghost, fire, explosion, splash, spark, slash }\n    export enum voiceSaying { name, begin, retry, next, complete, gameover, welcome, intro, howto1, howto2, howto3, howto4, howto5, howto6, howto7, howto8, howto9 }\n    export enum magicianSaysSide { left, right }\n    export enum magicianDifficulty { easy, medium, hard }\n    export enum spotName { A, B, C, D, E, F, G, H, I }\n    export enum playerChar { mario, luigi, peach, daisy, toad, wario }\n\n    let sb_music_tutorial = feedBank(\"1.1.46|1.2.51|1.3.51|1.4.59|1.5.60|1.6.60|1.7.60|1.8.60|1.9.60|1.10.60|1.11.60|1.12.60|1.13.60|1.14.60|1.15.60|1.16.60|1.17.60|1.18.60|1.19.60|1.20.60|1.21.60\")\n    let sb_music_awaiting = feedBank(\"2.1.64|2.2.120|2.3.120|2.4.120|2.5.120|2.6.114|2.7.120|2.8.103|2.9.120|2.10.120|2.11.120|2.12.120|2.13.119|2.14.120|2.15.120|2.16.103|2.17.119|2.18.120|2.19.86|2.20.120\")\n    let sb_music_level = feedBank(\"3.1.120|3.2.120|3.3.120|3.4.120|3.5.120|3.6.120|3.7.120|3.8.120|3.9.120|3.10.92|3.11.120|3.12.120|3.13.111|3.14.116|3.15.98|3.16.120|3.17.120|3.18.82|3.19.120|3.20.120|3.21.120|3.22.120|3.23.120|3.24.120|3.25.120|3.26.120|3.27.91|3.28.120|3.29.120|3.30.41|3.31.120|3.32.120|3.33.120|3.34.94|3.35.120|3.36.120|3.37.120|3.38.120|3.39.120|3.40.120|3.41.78|3.42.120|3.43.120|3.44.120|3.45.120|3.46.120|3.47.120|3.48.120|3.49.120|3.50.120|3.51.120|3.52.113|3.53.120|3.54.120|3.55.42|3.56.120|3.57.120|3.58.120|3.59.114|3.60.120|3.61.120|3.62.118|3.63.120|3.64.120|3.65.120|3.66.120|3.67.120|3.68.59|3.69.120|3.70.120|3.71.118|3.72.120|3.73.120|3.74.70|3.75.120|3.76.120|3.77.120|3.78.120|3.79.120|3.80.120|3.81.120|3.82.120|3.83.80|3.84.120|3.85.120|3.86.120|3.87.120|3.88.107|3.89.120|3.90.120|3.91.120|3.92.120|3.93.36|3.94.120|3.95.120|3.96.120|3.97.120|3.98.120|3.99.120|3.100.63|3.101.120|3.102.120|3.103.112|3.104.105|3.105.120|3.106.110|3.107.120|3.108.120|3.109.120|3.110.120|3.111.120|3.112.120|3.113.120|3.114.120|3.115.120|3.116.119|3.117.120|3.118.120|3.119.120|3.120.120|3.121.120|3.122.120|3.123.120|3.124.120|3.125.120|3.126.104|3.127.120|3.128.87|3.129.120|3.130.118|3.131.120|3.132.120|3.133.50|3.134.109|3.135.120|3.136.120|3.137.120|3.138.91|3.139.120|3.140.120|3.141.120|3.142.120|3.143.120|3.144.120|3.145.104|3.146.112|3.147.120\")\n    let sb_music_won = feedBank(\"4.1.30|4.2.22|4.3.30|4.4.17|4.5.29|4.6.30|4.7.30|4.8.30|4.9.30|4.10.30|4.11.20|4.12.28|4.13.30|4.14.15|4.15.30|4.16.17|4.17.17|4.18.15|4.19.30|4.20.30|4.21.30|4.22.17|4.23.30|4.24.30|4.25.30\")\n    let sb_music_lost = feedBank(\"5.1.30|5.2.30|5.3.30|5.4.30|5.5.30|5.6.30|5.7.30|5.8.30|5.9.30|5.10.30|5.11.30\")\n    let sb_music_intro = feedBank(\"9.1.3|9.2.4|9.3.8|9.4.5|9.5.4|9.6.12|9.7.3|9.8.7|9.9.6|9.10.7|9.11.9|9.12.9|9.13.11|9.14.3|9.15.10|9.16.3|9.17.6|9.18.5|9.19.6|9.20.5|9.21.7|9.22.5|9.23.3|9.24.7|9.25.6|9.26.6|9.27.11|9.28.5|9.29.5|9.30.4|9.31.6|9.32.4|9.33.4|9.34.10|9.35.8|9.36.8|9.37.3|9.38.7|9.39.4|9.40.6|9.41.3|9.42.7|9.43.7|9.44.3|9.45.6|9.46.1|9.47.2|9.48.2|9.49.8|9.50.16|9.51.9|9.52.10|9.53.13|9.54.14|9.55.14|9.56.16|9.57.7|9.58.4|9.59.9|9.60.8|9.61.9|9.62.9|9.63.12|9.64.4|9.65.6|9.66.9|9.67.5|9.68.6|9.69.5|9.70.10|9.71.8|9.72.8|9.73.5|9.74.3\")\n    let sb_sfx_correct = feedBank(\"6.1.5|6.2.8|6.3.6|6.4.7|6.5.6|6.6.14|6.7.7|6.8.8|6.9.12|6.10.7|6.11.9|6.12.7|6.13.10|6.14.8|6.15.8|6.16.4|6.17.7|6.18.4|6.19.2|6.20.10|6.21.7|6.22.7|6.23.6|6.24.4|6.25.7|6.26.12|6.27.4|6.28.6|6.29.6|6.30.6|6.31.4|6.32.5|6.33.3|6.34.6|6.35.6|6.36.6|6.37.6|6.38.4|6.39.8|6.40.6|6.41.3|6.42.3|6.43.7|6.44.8|6.45.6|6.46.2|6.47.5|6.48.7|6.49.8|6.50.7|6.51.6|6.52.7|6.53.6|6.54.8|6.55.5|6.56.5|6.57.7|6.58.6|6.59.8|6.60.5|6.61.6|6.62.8|6.63.3|6.64.3|6.65.6|6.66.3|6.67.6|6.68.2|6.69.3|6.70.3|6.71.2|6.72.3|6.73.6|6.74.7|6.75.5|6.76.3|6.77.5|6.78.3|6.79.2|6.80.3|6.81.3|6.82.1|6.83.1|6.84.1|6.85.1|6.86.1|6.87.1|6.88.3|6.89.1|6.90.1|6.91.4|6.92.4\")\n    let sb_sfx_incorrect = feedBank(\"7.1.6|7.2.5|7.3.3|7.4.5|7.5.7|7.6.6|7.7.4|7.8.1|7.9.3|7.10.4|7.11.3|7.12.3|7.13.6|7.14.3|7.15.1|7.16.1|7.17.1|7.18.1|7.19.5|7.20.4|7.21.3|7.22.7\")\n    let sb_sfx_beep = feedBank(\"8.1.1|8.2.2|8.3.1\")\n    let sb_sfx_smash = feedBank(\"8.4.1|8.5.1|8.6.1|8.7.3\")\n    let sb_sfx_falling = feedBank(\"8.8.6\")\n    let sb_sfx_boom = feedBank(\"8.9.1|8.10.2|8.11.3|8.12.2\")\n    let sb_sfx_cannon = feedBank(\"8.13.2|8.14.1|8.15.1|8.16.2|8.17.2\")\n    let sb_sfx_fire = feedBank(\"8.18.2|8.19.2|8.20.5|8.21.2\")\n    let sb_sfx_ghost = feedBank(\"8.22.5|8.23.4|8.24.5|8.25.5\")\n    let sb_sfx_hit = feedBank(\"8.26.1|8.27.1|8.28.1|8.29.1|8.30.1\")\n    let sb_sfx_slash = feedBank(\"8.31.1|8.32.1|8.33.1|8.34.1|8.35.1|8.36.1|8.37.1|8.38.1|8.39.1|8.40.1|8.41.1|8.42.2\")\n    let sb_sfx_zap = feedBank(\"8.43.1|8.44.1|8.45.2|8.46.1|8.47.2|8.48.1\")\n    let sb_sfx_splash = feedBank(\"8.49.2|8.50.2|8.51.1|8.52.1|8.53.2|8.54.1|8.55.2|8.56.1|8.57.2\")\n    let sb_sfx_voice = feedBank(\"10.1.4|10.2.6|10.3.4|10.4.4|10.5.6|10.6.4|10.7.11|10.8.6|10.9.4|10.10.1\")\n    let sb_magician_left_easy = feedBank(\"11.1.3|11.2.6|11.3.7|11.4.6|11.5.6|11.6.7|11.7.6|11.8.6|11.9.6|11.10.7|11.11.6|11.12.6|11.13.7|11.14.6|11.15.6|11.16.6|11.17.6|11.18.6|11.19.6|11.20.6|11.21.6|11.22.7|11.23.6|11.24.6|11.25.6|11.26.6|11.27.7|11.28.7|11.29.7|11.30.6|11.31.6|11.32.8|11.33.7|11.34.6|11.35.7|11.36.5|11.37.6|11.38.8|11.39.6|11.40.6|11.41.6|11.42.6|11.43.6|11.44.7|11.45.6|11.46.7|11.47.7|11.48.8|11.49.6|11.50.7|11.51.6|11.52.6|11.53.7|11.54.8|11.55.7|11.56.6|11.57.7|11.58.6|11.59.6|11.60.6|11.61.6\")\n    let sb_magician_left_medium = feedBank(\"11.62.7|11.63.6|11.64.6|11.65.8|11.66.7|11.67.8|11.68.8|11.69.8|11.70.7|11.71.7|11.72.6|11.73.6|11.74.6|11.75.6|11.76.6|11.77.7|11.78.6|11.79.7|11.80.6|11.81.6|11.82.6|11.83.7|11.84.6|11.85.6|11.86.6|11.87.7|11.88.6|11.89.6|11.90.7|11.91.6|11.92.6|11.93.6|11.94.6|11.95.6|11.96.7|11.97.6|11.98.6|11.99.7|11.100.6|11.101.6|11.102.6|11.103.7|11.104.6|11.105.8|11.106.6|11.107.6|11.108.6|11.109.7|11.110.6|11.111.7|11.112.7|11.113.6|11.114.6|11.115.7|11.116.6|11.117.7|11.118.7|11.119.6|11.120.6|11.121.6|11.122.7|11.123.7|11.124.6|11.125.6|11.126.6|11.127.8|11.128.7|11.129.6|11.130.8|11.131.7|11.132.6|11.133.7|11.134.6|11.135.6|11.136.7|11.137.7\")\n    let sb_magician_left_hard = feedBank(\"11.219.7|11.220.6|11.221.6|11.222.6|11.223.6|11.224.6|11.225.7|11.226.7|11.227.6|11.228.6|11.229.6|11.230.8|11.231.7|11.232.7|11.233.6|11.234.6|11.235.6|11.236.8|11.237.7|11.238.7|11.239.6|11.240.6|11.241.8|11.242.7|11.243.7|11.244.6|11.245.6|11.246.7|11.247.7|11.248.7|11.249.7|11.250.6|11.251.6|11.252.6|11.253.6|11.254.6|11.255.6|11.256.6|11.257.6|11.258.7|11.259.7|11.260.7|11.261.6|11.262.6|11.263.6|11.264.6|11.265.6|11.266.6|11.267.7|11.268.6|11.269.6|11.270.6|11.271.6|11.272.6|11.273.6|11.274.6|11.275.7|11.276.6|11.277.6|11.278.7|11.279.7|11.280.7|11.281.6|11.282.6|11.283.7|11.284.9|11.285.7|11.286.6|11.287.6|11.288.6|11.289.7|11.290.7|11.291.6|11.292.6|11.293.7|11.294.7|11.295.6|11.296.7|11.297.6|11.298.6|11.299.6|11.300.6|11.301.6|11.302.6|11.303.7|11.304.6|11.305.6|11.306.7|11.307.6|\")\n    let sb_magician_right_easy = feedBank(\"11.159.6|11.160.6|11.161.7|11.162.6|11.163.7|11.164.7|11.165.6|11.166.6|11.167.7|11.168.7|11.169.6|11.170.8|11.171.7|11.172.7|11.173.6|11.174.6|11.175.6|11.176.6|11.177.7|11.178.6|11.179.6|11.180.6|11.181.6|11.182.7|11.183.6|11.184.6|11.185.6|11.186.6|11.187.8|11.188.7|11.189.6|11.190.6|11.191.6|11.192.6|11.193.6|11.194.6|11.195.5|11.196.6|11.197.6|11.198.6|11.199.7|11.200.6|11.201.6|11.202.6|11.203.6|11.204.6|11.205.6|11.206.6|11.207.6|11.208.6|11.209.6|11.210.7|11.211.7|11.212.7|11.213.6|11.214.7|11.215.7|11.216.6|11.217.7|11.218.6\")\n    let sb_magician_right_medium = feedBank(\"11.219.7|11.220.6|11.221.6|11.222.6|11.223.6|11.224.6|11.225.7|11.226.7|11.227.6|11.228.6|11.229.6|11.230.8|11.231.7|11.232.7|11.233.6|11.234.6|11.235.6|11.236.8|11.237.7|11.238.7|11.239.6|11.240.6|11.241.8|11.242.7|11.243.7|11.244.6|11.245.6|11.246.7|11.247.7|11.248.7|11.249.7|11.250.6|11.251.6|11.252.6|11.253.6|11.254.6|11.255.6|11.256.6|11.257.6|11.258.7|11.259.7|11.260.7|11.261.6|11.262.6|11.263.6|11.264.6|11.265.6|11.266.6|11.267.7|11.268.6|11.269.6|11.270.6|11.271.6|11.272.6|11.273.6|11.274.6|11.275.7|11.276.6|11.277.6|11.278.7|11.279.7|11.280.7|11.281.6|11.282.6|11.283.7|11.284.9|11.285.7|11.286.6|11.287.6\")\n    let sb_magician_right_hard = feedBank(\"11.288.6|11.289.7|11.290.7|11.291.6|11.292.6|11.293.7|11.294.7|11.295.6|11.296.7|11.297.6|11.298.6|11.299.6|11.300.6|11.301.6|11.302.6|11.303.7|11.304.6|11.305.6|11.306.7|11.307.6|11.308.7|11.309.6|11.310.6|11.311.6|11.312.7|11.313.7|11.314.6|11.315.7\")\n    let sb_mario_name = feedBank(\"12.1.2|12.2.1|12.4.2|12.5.3\")\n    let sb_mario_intro = feedBank(\"12.3.4|12.6.2|12.7.212.112.1|12.113.1|\")\n    let sb_mario_ready = feedBank(\"12.8.1|12.9.2|12.10.2|12.11.1|12.12.1|12.13.2|12.14.2|12.15.2|12.16.2|12.17.2|12.18.1\")\n    let sb_mario_yay = feedBank(\"12.19.1|12.20.1|12.21.1|12.22.1|12.23.1|12.24.1|12.25.1|12.26.1|12.27.1|12.28.1|12.29.1|12.30.1|12.31.1|12.32.1|12.33.1|12.34.1|12.35.1|12.36.1|12.37.1|12.38.1|12.39.1|12.40.1|12.41.1|12.42.1|12.43.1|12.44.1|12.45.1|12.46.1|12.47.1|12.48.1|12.49.1|12.50.1|12.51.2|12.52.2|12.53.2|12.54.2|12.55.2|12.56.2|12.57.2|12.58.2|12.59.2|12.60.2|12.61.2|12.62.2\")\n    let sb_mario_success = feedBank(\"12.63.1|12.64.2|12.65.2|12.66.2|12.67.2|12.68.3|12.69.3|12.70.3|12.71.3|12.72.3\")\n    let sb_mario_won = feedBank(\"12.73.2|12.74.2|12.75.3|12.76.3|12.77.3\")\n    let sb_mario_ouch = feedBank(\"12.78.1|12.79.1|12.80.1|12.81.1|12.82.1|12.83.1|12.84.1|12.85.1|12.86.1|12.87.1|12.88.1|12.89.1|12.90.1|12.91.1|12.92.1|12.93.1|12.94.1|12.95.1\")\n    let sb_mario_nay = feedBank(\"12.96.1|12.97.1|12.98.1|12.99.1|12.100.1|12.101.1|12.102.2|12.103.1|12.104.1|12.105.1|12.106.1|12.107.1|12.108.1|12.109.1|12.110.2|12.111.2\")\n    let sb_mario_failure = feedBank(\"12.114.2|12.115.2|12.116.2|12.117.1\")\n    let sb_mario_lost = feedBank(\"12.118.3|12.119.3|12.120.4|12.121.1\")\n    let sb_mario_hurry = feedBank(\"12.122.44\")\n    \n    let playlist_tutorial = makePlaylist(sb_music_tutorial)\n    let playlist_awaiting = makePlaylist(sb_music_awaiting)\n    let playlist_level = makePlaylist(sb_music_level)\n    let playlist_won = makePlaylist(sb_music_won)\n    let playlist_lost = makePlaylist(sb_music_lost)\n    let playlist_correct = makePlaylist(sb_sfx_correct)\n    let playlist_incorrect = makePlaylist(sb_sfx_incorrect)\n    let playlist_intro = makePlaylist(sb_music_intro)\n    let playlist_boom = makePlaylist(sb_sfx_boom)\n    let playlist_smash = makePlaylist(sb_sfx_smash)\n    let playlist_falling = makePlaylist(sb_sfx_falling)\n    let playlist_cannon = makePlaylist(sb_sfx_cannon)\n    let playlist_fire = makePlaylist(sb_sfx_fire)\n    let playlist_ghost = makePlaylist(sb_sfx_ghost)\n    let playlist_hit = makePlaylist(sb_sfx_hit)\n    let playlist_slash = makePlaylist(sb_sfx_slash)\n    let playlist_zap = makePlaylist(sb_sfx_zap)\n    let playlist_splash = makePlaylist(sb_sfx_splash)\n    let playlist_magician_left_easy = makePlaylist(sb_magician_left_easy)\n    let playlist_magician_left_medium = makePlaylist(sb_magician_left_medium)\n    let playlist_magician_left_hard = makePlaylist(sb_magician_left_hard)\n    let playlist_magician_right_easy = makePlaylist(sb_magician_right_easy)\n    let playlist_magician_right_medium = makePlaylist(sb_magician_right_medium)\n    let playlist_magician_right_hard = makePlaylist(sb_magician_right_hard)\n    let playlist_mario_name = makePlaylist(sb_mario_name)\n    let playlist_mario_intro = makePlaylist(sb_mario_intro)\n    let playlist_mario_ready = makePlaylist(sb_mario_ready)\n    let playlist_mario_yay = makePlaylist(sb_mario_yay)\n    let playlist_mario_success = makePlaylist(sb_mario_success)\n    let playlist_mario_won = makePlaylist(sb_mario_won)\n    let playlist_mario_ouch = makePlaylist(sb_mario_ouch)\n    let playlist_mario_nay = makePlaylist(sb_mario_nay)\n    let playlist_mario_failure = makePlaylist(sb_mario_failure)\n    let playlist_mario_lost = makePlaylist(sb_mario_lost)\n    let playlist_mario_hurry = makePlaylist(sb_mario_hurry)\n    let playtimeMusic = 0\n    let playtimePlayer = 0\n    let playtimeSfxVoice = 0\n\n    function takeRotate(PlaylistIn: number[]) {\n        let returnTrack = PlaylistIn.shift()\n        PlaylistIn.push(returnTrack)\n        return returnTrack\n    }\n    function feedBank(BankString: string) {\n        let returnBank: number[][] = []\n        let BankSplit = BankString.split(\"|\")\n        for (let soundString of BankSplit) {\n            returnBank.push([parseFloat(soundString.split(\".\")[0]), parseFloat(soundString.split(\".\")[1]), parseFloat(soundString.split(\".\")[2])])\n        }\n        return returnBank\n    }\n    function makePlaylist(SoundBank: any[]) {\n        let returnList: number[] = []\n        let orderedList: number[] = []\n        for (let soundNo = 0; soundNo <= SoundBank.length - 1; soundNo++) {\n            orderedList.push(soundNo)\n        }\n        while (orderedList.length > 0) {\n            let randTrack = randint(0, orderedList.length - 1)\n            returnList.push(orderedList.removeAt(randTrack))\n        }\n        return returnList\n    }\n    function bankPlay(mp3bit:mp3type, SoundBank: number[][], trackIndex: number) {\n        let theSong = SoundBank[trackIndex]\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimeMusic = theSong[2]\n        } else if (mp3bit == mp3type.player) {\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimePlayer = theSong[2]\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimeSfxVoice = theSong[2]\n        }\n        dataArr[3] = 15\n        dataArr[5] = theSong[0]\n        dataArr[6] = theSong[1]\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=NL_MP3_PlaytimeMusic\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of music\"\n    export function mp3durationMusic(): number{\n        return playtimeMusic\n    }\n\n    //% blockId=NL_MP3_PlaytimePlayer\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of player sound\"\n    export function mp3durationPlayer(): number {\n        return playtimePlayer\n    }\n\n    //% blockId=NL_MP3_PlaytimeSFX\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of sfx/voice\"\n    export function mp3durationSfxVoice(): number {\n        return playtimeSfxVoice\n    }\n\n\n\n    //% blockId=NL_MP3_MusicPlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %genre music\"\n    export function mp3musicPlay(genre: musicGenre): void {\n        if (genre == musicGenre.tutorial){\n            bankPlay(mp3type.music, sb_music_tutorial, takeRotate(playlist_tutorial))\n        } else if (genre == musicGenre.awaiting) {\n            bankPlay(mp3type.music, sb_music_awaiting, takeRotate(playlist_awaiting))\n        } else if (genre == musicGenre.intro){\n            bankPlay(mp3type.music, sb_music_intro, takeRotate(playlist_intro))\n        } else if (genre == musicGenre.level) {\n            bankPlay(mp3type.music, sb_music_level, takeRotate(playlist_level))\n        } else if (genre == musicGenre.won) {\n            bankPlay(mp3type.music, sb_music_won, takeRotate(playlist_won))\n        } else if (genre == musicGenre.lost) {\n            bankPlay(mp3type.music, sb_music_lost, takeRotate(playlist_lost))\n        }\n    }\n\n    //% blockId=NL_MP3_PlayerSay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %saying as player\"\n    export function mp3sayPlay(saying: playerSaying): void {\n        if(saying == playerSaying.ready){\n            bankPlay(mp3type.player, sb_mario_ready, takeRotate(playlist_mario_ready))\n        }else if (saying == playerSaying.yay){\n            bankPlay(mp3type.player, sb_mario_yay, takeRotate(playlist_mario_yay))\n        } else if (saying == playerSaying.intro) {\n            bankPlay(mp3type.player, sb_mario_intro, takeRotate(playlist_mario_intro))\n        } else if (saying == playerSaying.nay) {\n            bankPlay(mp3type.player, sb_mario_nay, takeRotate(playlist_mario_nay))\n        } else if (saying == playerSaying.ouch) {\n            bankPlay(mp3type.player, sb_mario_ouch, takeRotate(playlist_mario_ouch))\n        } else if (saying == playerSaying.success) {\n            bankPlay(mp3type.player, sb_mario_success, takeRotate(playlist_mario_success))\n        } else if (saying == playerSaying.failure) {\n            bankPlay(mp3type.player, sb_mario_failure, takeRotate(playlist_mario_failure))\n        } else if (saying == playerSaying.won) {\n            bankPlay(mp3type.player, sb_mario_won, takeRotate(playlist_mario_won))\n        } else if (saying == playerSaying.lost) {\n            bankPlay(mp3type.player, sb_mario_lost, takeRotate(playlist_mario_lost))\n        } else if (saying == playerSaying.hurry) {\n            bankPlay(mp3type.player, sb_mario_hurry, takeRotate(playlist_mario_hurry))\n        }\n    }\n\n    //% blockId=NL_MP3_VoicePlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %voice as voice\"\n    export function mp3voicePlay(voice: voiceSaying): void {\n        if (voice == voiceSaying.name) {\n\n        } else if (voice == voiceSaying.begin) {\n\n        } else if (voice == voiceSaying.retry) {\n\n        } else if (voice == voiceSaying.next) {\n\n        } else if (voice == voiceSaying.complete) {\n\n        } else if (voice == voiceSaying.gameover) {\n\n        } else if (voice == voiceSaying.welcome) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 0)\n        } else if (voice == voiceSaying.intro) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 1)\n        } else if (voice == voiceSaying.howto1) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 2)\n        } else if (voice == voiceSaying.howto2) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 3)\n        } else if (voice == voiceSaying.howto3) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 4)\n        } else if (voice == voiceSaying.howto4) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 5)\n        } else if (voice == voiceSaying.howto5) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 6)\n        } else if (voice == voiceSaying.howto6) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 7)\n        } else if (voice == voiceSaying.howto7) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 8)\n        } else if (voice == voiceSaying.howto8) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 9)\n        } else if (voice == voiceSaying.howto9) {\n\n        }\n    }\n\n    //% blockId=NL_MP3_MagicianSay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Magician says on the %side difficulty %difficulty\"\n    export function mp3magician(side: magicianSaysSide, difficulty: magicianDifficulty): void {\n        if (side == magicianSaysSide.left) {\n            if (difficulty == magicianDifficulty.easy) {\n\n            } else if (difficulty = magicianDifficulty.medium) {\n\n            } else if (difficulty = magicianDifficulty.hard) {\n\n            }\n        } else if (side = magicianSaysSide.right) {\n            if (difficulty == magicianDifficulty.easy) {\n\n            } else if (difficulty = magicianDifficulty.medium) {\n\n            } else if (difficulty = magicianDifficulty.hard) {\n\n            }\n        } \n    }\n\n    //% blockId=NL_MP3_SfxPlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %sfx sound effect\"\n    export function mp3sfxPlay(sfx: sfxType): void {\n        if(sfx == sfxType.correct){\n            bankPlay(mp3type.sfxvoice, sb_sfx_correct, takeRotate(playlist_correct))\n        }else if (sfx == sfxType.incorrect){\n            bankPlay(mp3type.sfxvoice, sb_sfx_incorrect, takeRotate(playlist_incorrect))\n        }else if (sfx == sfxType.ghost){\n            bankPlay(mp3type.sfxvoice, sb_sfx_ghost, takeRotate(playlist_ghost))\n        }else if (sfx == sfxType.fire){\n            bankPlay(mp3type.sfxvoice, sb_sfx_fire, takeRotate(playlist_fire))\n        }else if (sfx == sfxType.explosion){\n            bankPlay(mp3type.sfxvoice, sb_sfx_boom, takeRotate(playlist_boom))\n        }else if (sfx == sfxType.splash){\n            bankPlay(mp3type.sfxvoice, sb_sfx_splash, takeRotate(playlist_splash))\n        } else if (sfx == sfxType.spark) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_zap, takeRotate(playlist_zap))\n        } else if (sfx == sfxType.slash) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_slash, takeRotate(playlist_slash))\n        }\n    }\n/// END SOUND BANK ///\n\n/// BEGIN MOTOR & RELAY ///\n    const kong_address = 0x10\n    export enum MotorList { M1=1, M2=2 }\n    export enum motors{ redrack=16, shark=4, ghost=5, cannon=8, oarrack=7, shell=6, door=3, dragon=9, wheel=1, fan=2 }\n    export enum motorState { min, max, mid, off }\n    export enum fogLevels { none = 0, light = 1, medium = 2, heavy = 3 }\n    export enum sockState { dancing = 1, still = 0 }\n    let motor_wheel_max = 12; let motor_wheel_min = 0\n    let servo_redrack_max = 150; let servo_redrack_min = 100\n    let servo_cannon_min = 135; let servo_cannon_max = 65\n    let servo_shark_min = 20; let servo_shark_max = 85\n    let servo_oarrack_min = 60; let servo_oarrack_max = 110\n    let servo_ghost_min = 110; let servo_ghost_max = 40\n    let servo_shell_min = 170; let servo_shell_max = 100\n    let servo_door_min = 50; let servo_door_max = 140; let servo_door_mid = 100\n    let motor_fan_min = 0; let motor_fan_mid = 50; let motor_fan_max = 100\n    let servo_dragon_min = 90; let servo_dragon_max = 79\n\n    export function servoSet(servo: motors, angle: number): void {\n        let buf = pins.createBuffer(4);\n        buf[0] = servo;\n        buf[1] = angle;\n        buf[2] = 0;\n        buf[3] = 0;\n        pins.i2cWriteBuffer(kong_address, buf);\n    }\n\n    export function motorSpeed(motor: MotorList, speed: number): void {\n        let buf = pins.createBuffer(4);\n        buf[0] = motor\n        buf[1] = 1;\n        if (speed < 0) {\n            buf[1] = 2;\n            speed = speed * -1\n        }\n        buf[2] = speed;\n        buf[3] = 0;\n        pins.i2cWriteBuffer(kong_address, buf);\n    }\n\n    //% blockId=NL_MOTOR_Set \n    //% block=\"Set %motor to %state\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function motorSet(motor:motors, state:motorState):void{\n        if (motor == motors.redrack){\n            if (state == motorState.min){ servoSet(motor, servo_redrack_min) } \n            else if (state == motorState.max){ servoSet(motor, servo_redrack_max) }\n        } if (motor == motors.shark) {\n            if (state == motorState.min) { servoSet(motor, servo_shark_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_shark_max) }\n        } if (motor == motors.ghost) {\n            if (state == motorState.min) { servoSet(motor, servo_ghost_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_ghost_max) }\n        } if (motor == motors.cannon) {\n            if (state == motorState.min) { servoSet(motor, servo_cannon_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_cannon_max) }\n        } if (motor == motors.oarrack) {\n            if (state == motorState.min) { servoSet(motor, servo_oarrack_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_oarrack_max) }\n        } if (motor == motors.shell) {\n            if (state == motorState.min) { servoSet(motor, servo_shell_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_shell_max) }\n        } if (motor == motors.door) {\n            if (state == motorState.min) { servoSet(motor, servo_door_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_door_max) }\n            else if (state == motorState.mid) { servoSet(motor, servo_door_mid) }\n        } if (motor == motors.dragon) {\n            if (state == motorState.min) { servoSet(motor, servo_dragon_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_dragon_max) }\n        } if (motor == motors.wheel) {\n            if (state == motorState.min) { motorSpeed(MotorList.M1, motor_wheel_min) }\n            else if (state == motorState.max) { motorSpeed(MotorList.M1, motor_wheel_max) }\n            else if (state == motorState.off) { motorSpeed(MotorList.M1, 0) }\n        } if (motor == motors.fan) {\n            if (state == motorState.min) { motorSpeed(MotorList.M2, motor_fan_min) }\n            else if (state == motorState.mid) { motorSpeed(MotorList.M2, motor_fan_mid) }\n            else if (state == motorState.max) { motorSpeed(MotorList.M2, motor_fan_max) }\n            else if (state == motorState.off) { motorSpeed(MotorList.M2, 0) }\n        }\n    }\n\n    //% blockId=NL_RELAY_FogSet \n    //% block=\"set fog level to %level\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function setFog(fog:fogLevels):void{\n        if (fog == fogLevels.none){\n            pins.digitalWritePin(DigitalPin.P2, 1)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 1)\n        } else if (fog == fogLevels.light){\n            pins.digitalWritePin(DigitalPin.P2, 1)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        } else if (fog == fogLevels.medium) {\n            pins.digitalWritePin(DigitalPin.P2, 0)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        } else if (fog == fogLevels.heavy) {\n            pins.digitalWritePin(DigitalPin.P2, 0)\n            pins.digitalWritePin(DigitalPin.P8, 0)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        }\n    }\n\n    //% blockId=NL_RELAY_SockSet\n    //% block=\"set dancing sock to %sockState\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function setSock(state: sockState): void {\n        if(state==sockState.dancing){ pins.digitalWritePin(DigitalPin.P12, 0) }\n        else{ pins.digitalWritePin(DigitalPin.P12, 1) }\n    }\n\n/// END MOTOR & RELAY ///\n\n/// BEGIN OLED\n\n    let d1 = [0, 0, 0, 20, 36, 35, 54, 0, 28, 65, 8, 8, 160, 8, 96, 32, 62, 0, 98, 34, 24, 39, 60, 1, 54, 6, 0, 0, 8, 20, 65, 2, 50, 126, 127, 62, 127, 127, 127, 62, 127, 65, 32, 127, 127, 127, 127, 62, 127, 62, 127, 38, 1, 63, 31, 63, 99, 3, 97, 127, 2, 65, 4, 128, 1, 32, 127, 56, 56, 56, 8, 24, 127, 0, 128, 127, 65, 124, 124, 56, 252, 24, 0, 72, 4, 60, 28, 60, 68, 28, 68, 8, 0, 65, 2]\n    let d2 = [0, 95, 7, 127, 42, 19, 73, 5, 34, 34, 42, 8, 96, 8, 96, 16, 81, 66, 81, 65, 20, 69, 74, 113, 73, 73, 54, 172, 20, 20, 34, 1, 73, 9, 73, 65, 65, 73, 9, 65, 8, 127, 64, 8, 64, 2, 4, 65, 9, 65, 9, 73, 1, 64, 32, 64, 20, 4, 81, 65, 4, 65, 2, 128, 2, 84, 72, 68, 68, 84, 126, 164, 8, 125, 132, 16, 127, 4, 8, 68, 36, 36, 124, 84, 127, 64, 32, 64, 40, 160, 100, 54, 127, 54, 1]\n    let d3 = [0, 0, 0, 20, 127, 8, 85, 3, 65, 28, 28, 62, 0, 8, 0, 8, 73, 127, 73, 73, 18, 69, 73, 9, 73, 73, 54, 108, 34, 20, 20, 81, 121, 9, 73, 65, 65, 73, 9, 65, 8, 65, 65, 20, 64, 12, 8, 65, 9, 81, 25, 73, 127, 64, 64, 56, 8, 120, 73, 65, 8, 127, 1, 128, 4, 84, 68, 68, 68, 84, 9, 164, 4, 0, 125, 40, 64, 24, 4, 68, 36, 36, 8, 84, 68, 64, 64, 48, 16, 160, 84, 65, 0, 8, 1]\n    let d4 = [0, 0, 7, 127, 42, 100, 34, 0, 0, 0, 42, 8, 0, 8, 0, 4, 69, 64, 73, 73, 127, 69, 73, 5, 73, 41, 0, 0, 65, 20, 8, 9, 65, 9, 73, 65, 34, 73, 9, 81, 8, 0, 63, 34, 64, 2, 16, 65, 9, 33, 41, 73, 1, 64, 32, 64, 20, 4, 69, 0, 16, 0, 2, 128, 0, 84, 68, 40, 72, 84, 2, 164, 4, 0, 0, 68, 0, 4, 124, 56, 24, 252, 4, 36, 0, 124, 32, 64, 40, 124, 76, 0, 0, 0, 2]\n    let d5 = [0, 0, 0, 20, 18, 98, 80, 0, 0, 0, 8, 8, 0, 8, 0, 2, 62, 0, 70, 54, 16, 57, 48, 3, 54, 30, 0, 0, 0, 20, 0, 6, 62, 126, 54, 34, 28, 65, 1, 114, 127, 0, 1, 65, 64, 127, 127, 62, 6, 94, 70, 50, 1, 63, 31, 63, 99, 3, 67, 0, 32, 0, 4, 128, 0, 120, 56, 0, 127, 24, 0, 124, 120, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 28, 60, 68, 0, 68, 0, 0, 0, 1]\n\n    let display = [\" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\")]\n    let desired = [\" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\")]\n\n    //% blockId=NL_OLED_Update3\n    //% block=\"oled update from buffer\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function changeThree(): void{\n        let updated: string[][] = []\n        let count = 0\n        for (let row=0; row<8; row++){\n            for(let col=0; col<16; col++){\n                let refChar = desired[row][col]\n                if (refChar != display[row][col]){\n                    writeChar(refChar,row,col)\n                    display[row][col] = refChar\n                    count++\n                    if (count >= 3){\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    //% blockId=NL_OLED_PrintLine\n    //% block=\"print %text to oled buffer line %line\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function printLine(text:any, line:number): void{\n        let thisText = text + \"\"\n        for (let i = 0; i < 16; i++){\n            if (i < thisText.length){\n                desired[line][i]=thisText.charAt(i)\n            } else{\n                desired[line][i]=\" \"\n            }\n        }\n    }\n\n    function oledcmd(c: number) {\n        pins.i2cWriteNumber(0x3c, c, NumberFormat.UInt16BE);\n    }\n\n    function setText(row: number, column: number) {\n        oledcmd(0xB0 + row);            //set page address\n        oledcmd(0x00 + (8 * column & 0x0F));  //set column lower address\n        oledcmd(0x10 + ((8 * column >> 4) & 0x0F));   //set column higher address\n    }\n\n    //% blockId=NL_OLED_Init \n    //% block=\"initiate the oled screen\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function oledinit(): void {\n        oledcmd(0xAE);  // Set display OFF\n        oledcmd(0xD5);  // Set Display Clock Divide Ratio / OSC Frequency 0xD4\n        oledcmd(0x80);  // Display Clock Divide Ratio / OSC Frequency \n        oledcmd(0xA8);  // Set Multiplex Ratio\n        oledcmd(0x3F);  // Multiplex Ratio for 128x64 (64-1)\n        oledcmd(0xD3);  // Set Display Offset\n        oledcmd(0x00);  // Display Offset\n        oledcmd(0x40);  // Set Display Start Line\n        oledcmd(0x8D);  // Set Charge Pump\n        oledcmd(0x14);  // Charge Pump (0x10 External, 0x14 Internal DC/DC)\n        oledcmd(0xA1);  // Set Segment Re-Map\n        oledcmd(0xC8);  // Set Com Output Scan Direction\n        oledcmd(0xDA);  // Set COM Hardware Configuration\n        oledcmd(0x12);  // COM Hardware Configuration\n        oledcmd(0x81);  // Set Contrast\n        oledcmd(0xCF);  // Contrast\n        oledcmd(0xD9);  // Set Pre-Charge Period\n        oledcmd(0xF1);  // Set Pre-Charge Period (0x22 External, 0xF1 Internal)\n        oledcmd(0xDB);  // Set VCOMH Deselect Level\n        oledcmd(0x40);  // VCOMH Deselect Level\n        oledcmd(0xA4);  // Set all pixels OFF\n        oledcmd(0xA6);  // Set display not inverted\n        oledcmd(0xAF);  // Set display On\n        for (let j = 0; j < 8; j++) {\n            setText(j, 0);\n            {\n                for (let i = 0; i < 16; i++)  //clear all columns\n                {\n                    writeChar(\" \",j,i)\n                }\n            }\n        }\n    }\n\n    function writeChar(char: string, row: number, column: number) {\n        setText(row, column)\n        let i = char.charCodeAt(0) - 32\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d1[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d2[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d3[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d4[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d5[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n    }\n\n/// END OLED\n\n\n/// BEGIN DIGITS\n\n    let _SEGMENTS = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71];\n\n    //% blockId=nl_digits_create block=\"4-Digit cPin %cPin dPin %dPin\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function tm1637Create(cPin: DigitalPin, dPin: DigitalPin): TM1637LEDs {\n        let display = new TM1637LEDs();\n        display.clk = cPin\n        display.dio = dPin\n        display.brightness = 7;\n        display.init();\n        return display;\n    }\n    export class TM1637LEDs {\n        buf: Buffer;\n        clk: DigitalPin;\n        dio: DigitalPin;\n        _ON: number;\n        brightness: number;\n        init(): void {\n            pins.digitalWritePin(this.clk, 0);\n            pins.digitalWritePin(this.dio, 0);\n            this._ON = 8;\n            this.buf = pins.createBuffer(4);\n            this.clear();\n        }\n        _start() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _stop() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.dio, 1);\n        }\n        _write_data_cmd() {\n            this._start();\n            this._write_byte(0x40);\n            this._stop();\n        }\n        _write_dsp_ctrl() {\n            this._start();\n            this._write_byte(0x80 | this._ON | this.brightness);\n            this._stop();\n        }\n        _write_byte(b: number) {\n            for (let i = 0; i < 8; i++) {\n                pins.digitalWritePin(this.dio, (b >> i) & 1);\n                pins.digitalWritePin(this.clk, 1);\n                pins.digitalWritePin(this.clk, 0);\n            }\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _intensity(val: number = 7) {\n            this._ON = 8;\n            this.brightness = val - 1;\n            this._write_data_cmd();\n            this._write_dsp_ctrl();\n        }\n        _dat(bit: number, dat: number) {\n            this._write_data_cmd();\n            this._start();\n            this._write_byte(0xC0 | (bit % 4))\n            this._write_byte(dat);\n            this._stop();\n            this._write_dsp_ctrl();\n        }\n        \n        //% blockId=nl_digits_digit block=\"%display|show single number|%num|at digit|%bit\"\n        //% subcategory=\"Display\" group=\"Display\"\n        //% bit.defl=1 bit.min=0 bit.max=9\n        showbit(num: number = 5, bit: number = 0) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            this.buf[bit % 4] = _SEGMENTS[num % 16]\n            this._dat(bit, _SEGMENTS[num % 16])\n        }\n\n        //% blockId=nl_digits_number block=\"%display|show number|%num\"\n        //% subcategory=\"Display\" group=\"Display\"\n        showNumber(num: number) {\n            if (num < 0) {\n                num = -num\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n                this._dat(0, 0x40) // '-'\n                // this._dat(0, 0) // blank\n            }\n            else {\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n            }\n        }\n\n        //% blockId=\"nl_digits_clear\" block=\"clear display %display\"\n        //% subcategory=\"Display\" group=\"Display\"\n        clear() {\n            for (let i = 0; i < 4; i++) {\n                this._dat(i, 0)\n                this.buf[i] = 0\n            }\n        }\n    }\n\n/// END DIGITS\n\n}\n\n\n","pxt.json":"{\n    \"name\": \"NotLegosMaster\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"displaySendBuffer.asm\",\n        \"planetxbasic.ts\",\n        \"notlegos.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"7.0.42\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n","test.ts":""}},{"timestamp":1728788616581,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"NFHB?|vd].P(}_Y-C82U\">btToken</variable><variable id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</variable><variable id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</variable><variable id=\"Y|e4lM)*:N0Ca^S5-64i\">lastLaserR</variable><variable id=\"Uk9;F|_3qS]2aZyBH#]%\">lastLaserC</variable><variable id=\"}GOl3M4q[Bn4R~R!?]at\">lastLaserL</variable><variable id=\"JQUQT|8QeX)zSvZ?K@,i\">lastSonarRead</variable><variable id=\"=X]tI5AG]3|WfpT`9Jsr\">lastHue</variable><variable id=\"Bc7kXprAfc3]W%ILxbVV\">lastGesture</variable><variable id=\"#oq[[iBLthN][|]:S!n}\">lastHunt</variable><variable id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</variable><variable id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</variable><variable id=\"8GDUfe;)i@P.Do~T6|{[\">theName</variable><variable id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</variable><variable id=\"=9JavC*{GElF}/FS78a@\">iBegan</variable><variable id=\"e.[{0v-j0Tp(kJ9$~N@:\">isReady</variable></variables><block type=\"every_interval\" x=\"681\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">2000</field></shadow></value><statement name=\"HANDLER\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value></block></statement></block><block type=\"every_interval\" x=\"1327\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"every_interval\" x=\"1542\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">40</field></shadow></value><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"=9JavC*{GElF}/FS78a@\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time\"></block></value><next><block type=\"NL_PIXEL_CastleSayTick\"><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"e.[{0v-j0Tp(kJ9$~N@:\">isReady</field></block></value><next><block type=\"function_call\"><mutation name=\"ready_oled\" functionid=\"LSuKu]l*}Y2[|u.h3PJ%\"></mutation><next><block type=\"NL_OLED_Update3\"><next><block type=\"variables_set\"><field name=\"VAR\" id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"=9JavC*{GElF}/FS78a@\">iBegan</field></block></value></block></value></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"NL_OLED_Init\"><next><block type=\"NL_PIXEL_CastleSay\"><field name=\"sockPin\">DigitalPin.P3</field><field name=\"wheelPin\">DigitalPin.P0</field><field name=\"scorePin\">DigitalPin.P16</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"=9JavC*{GElF}/FS78a@\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time_micros\"></block></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.mine</field></block></next></block></next></block></next></block></statement></block><block type=\"function_definition\" x=\"4113\" y=\"-189\"><mutation name=\"buttonPress\" functionid=\"+$9AXp*X:[tcODdtL9m)\"><arg name=\"button\" id=\"mfdvbnfdsij7xy9ejk0nd\" type=\"string\"></arg></mutation><field name=\"function_name\">buttonPress</field><value name=\"mfdvbnfdsij7xy9ejk0nd\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">button</field></block></value><statement name=\"STACK\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">button: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">button</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></statement></block><block type=\"every_interval\" x=\"2136\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"input_logo_event\" x=\"2351\" y=\"-83\"><field name=\"action\">TouchButtonEvent.Touched</field><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_MP3_PlayerSay\"><field name=\"saying\">notLegos.playerSaying.ready</field><next><block type=\"NL_MP3_SfxPlay\"><field name=\"sfx\">notLegos.sfxType.fire</field><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.intro</field></block></next></block></next></block></statement></block></statement></block><block type=\"radio_on_value_drag\" x=\"2811\" y=\"122\"><value name=\"HANDLER_DRAG_PARAM_name\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">name</field></block></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">value</field></block></value><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_substr\"><value name=\"this\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value><value name=\"start\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"length\"><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_substr\"><value name=\"this\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value><value name=\"start\"><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value><value name=\"length\"><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text_length\"><value name=\"VALUE\"><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value></block></value></block></value><next><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"controls_if\"><mutation elseif=\"3\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wstar</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_start</field></block></value></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value><statement name=\"DO1\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.welcome</field></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.WheelAll</field><field name=\"effect\">notLegos.vfxEffect.fire</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.intro</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_reg</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">check</field></block></value></block></value><statement name=\"DO2\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">ready</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value></block></statement><statement name=\"ELSE\"><block type=\"controls_if\"><mutation elseif=\"3\" else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">ready</field></block></value></block></value><statement name=\"DO0\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">wstar</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.KongFront</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">boot</field></block></value></block></value><statement name=\"DO1\"><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1000</field></shadow></value></block></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">200</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.idle</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotH</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotI</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">0</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.BrickDragon</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotE</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">tutor</field></block></value></block></value><statement name=\"DO2\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotA</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotB</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value></block></statement><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">heard: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">6</field></shadow></value></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"55\" y=\"3705\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><field name=\"function_name\">radioSay</field><value name=\"vt0gv77qprcayj8xalbs\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">text5</field></block></value><value name=\"ok3p1i8gyn97mv69yabw\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">val</field></block></value><statement name=\"STACK\"><block type=\"radio_datagram_send_value\"><value name=\"name\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value></block></value><value name=\"value\"><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">said: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">7</field></shadow></value></block></next></block></statement></block><block type=\"function_definition\" x=\"745\" y=\"3814\"><mutation name=\"fogFlood\" functionid=\"VFMl!%hPr#$dm7#L!/;e\"></mutation><field name=\"function_name\">fogFlood</field><statement name=\"STACK\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</field></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">10000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">para</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.mid</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.off</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.dancing</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.still</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">8000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.min</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"1187\" y=\"3814\"><mutation name=\"runTutorial\" functionid=\"S6D~vG%3KsCIO0/OH*vo\"></mutation><field name=\"function_name\">runTutorial</field><statement name=\"STACK\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">tutor</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">80</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">20</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.tutorial</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto1</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5950</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto2</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto3</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7600</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto4</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6100</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto5</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">13000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto6</field><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"function_definition\" x=\"1543\" y=\"3814\"><mutation name=\"ready_oled\" functionid=\"LSuKu]l*}Y2[|u.h3PJ%\"></mutation><field name=\"function_name\">ready_oled</field><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Say //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"6\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Y|e4lM)*:N0Ca^S5-64i\">lastLaserR</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> C</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Uk9;F|_3qS]2aZyBH#]%\">lastLaserC</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"}GOl3M4q[Bn4R~R!?]at\">lastLaserL</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"8\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">S</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"JQUQT|8QeX)zSvZ?K@,i\">lastSonarRead</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> H</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_js_round\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"=X]tI5AG]3|WfpT`9Jsr\">lastHue</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> G</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Bc7kXprAfc3]W%ILxbVV\">lastGesture</field></block></value><value name=\"ADD6\"><shadow type=\"text\"><field name=\"TEXT\"> N</field></shadow></value><value name=\"ADD7\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"#oq[[iBLthN][|]:S!n}\">lastHunt</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">Mode: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M:</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"NL_MP3_PlaytimeMusic\"></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">4</field></shadow></value></block></next></block></next></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Do //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> T </field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement></block></statement></block></xml>","main.ts":"function radioSay (text5: string, val: number) {\n    radio.sendValue(\"\" + btToken + text5, val)\n    notLegos.printLine(\"said: \" + text5 + \"=\" + val, 7)\n}\nfunction buttonPress (button: string) {\n    notLegos.printLine(\"button: \" + button, 3)\n}\nfunction runTutorial () {\n    radioSay(\"tutor\", 1)\n    notLegos.setVolume(notLegos.mp3type.music, 80)\n    basic.pause(20)\n    notLegos.mp3musicPlay(notLegos.musicGenre.tutorial)\n    fogLevel = 3\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto1)\n    basic.pause(5950)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto2)\n    basic.pause(5000)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto3)\n    basic.pause(7600)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto4)\n    basic.pause(6100)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto5)\n    basic.pause(13000)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto6)\n    notLegos.setVolume(notLegos.mp3type.music, 100)\n    basic.pause(7000)\n    notLegos.mp3musicPlay(notLegos.musicGenre.awaiting)\n}\nfunction ready_oled () {\n    if (isCastleSay) {\n        let lastHunt = 0\n        let lastGesture = 0\n        let lastHue = 0\n        let lastSonarRead = 0\n        let lastLaserL = 0\n        let lastLaserC = 0\n        let lastLaserR = 0\n        notLegos.printLine(\"// Castle Say //\", 0)\n        notLegos.printLine(\"R\" + Math.constrain(lastLaserR, 0, 9) + \" C\" + Math.constrain(lastLaserC, 0, 9) + \" L\" + Math.constrain(lastLaserL, 0, 9), 1)\n        notLegos.printLine(\"S\" + lastSonarRead + \" H\" + Math.round(lastHue / 3) + \" G\" + lastGesture + \" N\" + lastHunt, 2)\n        notLegos.printLine(\"Mode: \" + castleMode, 3)\n        notLegos.printLine(\"M:\" + notLegos.mp3durationMusic(), 4)\n    } else {\n        notLegos.printLine(\"// Castle Do //\", 0)\n        notLegos.printLine(\"M: \" + castleMode + \" T \" + fogToggle, 1)\n    }\n}\nradio.onReceivedValue(function (name, value) {\n    if (name.substr(0, btToken.length) == btToken) {\n        theName = name.substr(btToken.length, name.length - btToken.length)\n        if (isCastleSay) {\n            if (theName == \"wstar\") {\n                castleMode = \"wait_start\"\n            } else if (theName == \"welco\") {\n                if (value == 1) {\n                    notLegos.vfxReset(notLegos.vfxEffect.glow)\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.glow)\n                    notLegos.mp3voicePlay(notLegos.voiceSaying.welcome)\n                } else if (value == 2) {\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                    notLegos.setEffect(notLegos.vfxRegion.WheelAll, notLegos.vfxEffect.fire)\n                    basic.pause(1200)\n                    notLegos.mp3voicePlay(notLegos.voiceSaying.intro)\n                    basic.pause(3000)\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                    basic.pause(4000)\n                    notLegos.mp3musicPlay(notLegos.musicGenre.awaiting)\n                    castleMode = \"wait_reg\"\n                }\n            } else if (theName == \"check\") {\n                notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                radioSay(\"ready\", 1)\n            } else if (false) {\n            \t\n            }\n        } else {\n            if (theName == \"ready\") {\n                radioSay(\"wstar\", 1)\n                notLegos.setEffect(notLegos.vfxRegion.KongFront, notLegos.vfxEffect.indicate)\n            } else if (theName == \"boot\") {\n                fogLevel = 3\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.parade)\n                notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.max)\n                basic.pause(value * 1000)\n                notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.min)\n                basic.pause(1000)\n                radioSay(\"welco\", 1)\n                basic.pause(200)\n                notLegos.vfxReset(notLegos.vfxEffect.glow)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.glow)\n                basic.pause(5000)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.idle)\n                notLegos.setEffect(notLegos.vfxRegion.SpotH, notLegos.vfxEffect.mine)\n                notLegos.setEffect(notLegos.vfxRegion.SpotI, notLegos.vfxEffect.mine)\n                basic.pause(0)\n                radioSay(\"welco\", 2)\n                basic.pause(4500)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.off)\n                basic.pause(500)\n                notLegos.setEffect(notLegos.vfxRegion.BrickDragon, notLegos.vfxEffect.indicate)\n                basic.pause(1200)\n                notLegos.setEffect(notLegos.vfxRegion.SpotC, notLegos.vfxEffect.indicate)\n                notLegos.setEffect(notLegos.vfxRegion.SpotE, notLegos.vfxEffect.indicate)\n                basic.pause(3000)\n                fogLevel = 1\n                notLegos.motorSet(notLegos.motors.door, notLegos.motorState.max)\n            } else if (theName == \"tutor\") {\n                if (value == 1) {\n                    notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.off)\n                    basic.pause(4000)\n                    notLegos.vfxReset(notLegos.vfxEffect.glow)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotA, notLegos.vfxEffect.glow)\n                    basic.pause(6000)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotB, notLegos.vfxEffect.indicate)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotC, notLegos.vfxEffect.indicate)\n                } else if (value == 2) {\n                \t\n                }\n            } else if (theName == \"welco\") {\n            \t\n            } else {\n            \t\n            }\n        }\n        notLegos.printLine(\"heard: \" + theName + \"=\" + value, 6)\n    }\n})\ninput.onLogoEvent(TouchButtonEvent.Touched, function () {\n    if (isCastleSay) {\n        notLegos.mp3sayPlay(notLegos.playerSaying.ready)\n        notLegos.mp3sfxPlay(notLegos.sfxType.fire)\n        notLegos.mp3musicPlay(notLegos.musicGenre.intro)\n    }\n})\nfunction fogFlood () {\n    if (fogToggle) {\n        fogLevel = 3\n        basic.pause(10000)\n        notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.parade)\n        radioSay(\"para\", 1)\n        fogLevel = 0\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.max)\n        notLegos.motorSet(notLegos.motors.door, notLegos.motorState.max)\n        basic.pause(1000)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.mid)\n        basic.pause(6000)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.min)\n        basic.pause(500)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.off)\n        notLegos.motorSet(notLegos.motors.door, notLegos.motorState.min)\n        fogLevel = 1\n        notLegos.setSock(notLegos.sockState.dancing)\n        basic.pause(6000)\n        notLegos.setSock(notLegos.sockState.still)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.max)\n        basic.pause(8000)\n        notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.redrack, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.redrack, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shark, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shark, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.ghost, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.ghost, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.cannon, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.cannon, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.oarrack, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.oarrack, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shell, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shell, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.dragon, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.dragon, notLegos.motorState.min)\n    }\n}\nlet iTook = 0\nlet theName = \"\"\nlet fogToggle = 0\nlet castleMode = \"\"\nlet isCastleSay = 0\nlet fogLevel = 0\nlet btToken = \"\"\nnotLegos.oledinit()\nnotLegos.castleSayLights(DigitalPin.P3, DigitalPin.P0, DigitalPin.P16)\nlet iBegan = input.runningTimeMicros()\nnotLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.mine)\nloops.everyInterval(500, function () {\n\t\n})\nloops.everyInterval(500, function () {\n\t\n})\nloops.everyInterval(2000, function () {\n    notLegos.printLine(\"\" + iTook + \"\", 5)\n})\nloops.everyInterval(40, function () {\n    let isReady = 0\n    iBegan = input.runningTime()\n    notLegos.castleSayTick()\n    if (isReady) {\n    \t\n    }\n    ready_oled()\n    notLegos.changeThree()\n    iTook = input.runningTime() - iBegan\n})\n","README.md":"\n> Open this page at [https://notlegos.github.io/castleresay/](https://notlegos.github.io/castleresay/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/castleresay** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/castleresay** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/soundbank/](https://notlegos.github.io/soundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/soundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/soundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/resoundbank/](https://notlegos.github.io/resoundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/resoundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/resoundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosext/](https://notlegos.github.io/notlegosext/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosext** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosext** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosmaster/](https://notlegos.github.io/notlegosmaster/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosmaster** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosmaster** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","displaySendBuffer.asm":"sendBufferAsm:\n\n    push {r4,r5,r6,r7,lr}\n    \n    mov r4, r0 ; save buff\n    mov r6, r1 ; save pin\n    \n    mov r0, r4\n    bl BufferMethods::length\n    mov r5, r0\n    \n    mov r0, r4\n    bl BufferMethods::getBytes\n    mov r4, r0\n    \n    ; setup pin as digital\n    mov r0, r6\n    movs r1, #0\n    bl pins::digitalWritePin\n    \n    ; load pin address\n    mov r0, r6\n    bl pins::getPinAddress\n\n    ldr r0, [r0, #8] ; get mbed DigitalOut from MicroBitPin\n    ldr r1, [r0, #4] ; r1-mask for this pin\n    ldr r2, [r0, #16] ; r2-clraddr\n    ldr r3, [r0, #12] ; r3-setaddr\n    \n    cpsid i ; disable irq\n    \n    b .start\n    \n.nextbit:               ;            C0\n    str r1, [r3, #0]    ; pin := hi  C2\n    tst r6, r0          ;            C3\n    bne .islate         ;            C4\n    str r1, [r2, #0]    ; pin := lo  C6\n.islate:\n    lsrs r6, r6, #1     ; r6 >>= 1   C7\n    bne .justbit        ;            C8\n    \n    ; not just a bit - need new byte\n    adds r4, #1         ; r4++       C9\n    subs r5, #1         ; r5--       C10\n    bcc .stop           ; if (r5<0) goto .stop  C11\n.start:\n    movs r6, #0x80      ; reset mask C12\n    nop                 ;            C13\n\n.common:               ;             C13\n    str r1, [r2, #0]   ; pin := lo   C15\n    ; always re-load byte - it just fits with the cycles better this way\n    ldrb r0, [r4, #0]  ; r0 := *r4   C17\n    b .nextbit         ;             C20\n\n.justbit: ; C10\n    ; no nops, branch taken is already 3 cycles\n    b .common ; C13\n\n.stop:    \n    str r1, [r2, #0]   ; pin := lo\n    cpsie i            ; enable irq\n\n    pop {r4,r5,r6,r7,pc}\n","planetxbasic.ts":"/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#00B1ED  icon=\"\\uf005\" block=\"Connected\" blockId=\"PlanetX_Connected\"\n//% groups='[\"Digital\", \"Analog\", \"IIC Port\"]'\nnamespace Connected {\n    \n    ////////////////////////paj7620//////////////////////\n    let gesture_first_init = true\n    const initRegisterArray: number[] = [\n        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17,\n        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F,\n        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14,\n        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27,\n        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01,\n        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00,\n        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20,\n        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37,\n        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A,\n        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F,\n        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30,\n        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19,\n        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04,\n        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00,\n        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00,\n        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F,\n        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07,\n        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01,\n        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F,\n        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01,\n        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40,\n        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E,\n        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00,\n        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08,\n        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00,\n        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01,\n        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01,\n        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01\n    ];\n    \n    /////////////////////////color/////////////////////////\n    const APDS9960_ADDR = 0x39\n    const APDS9960_ENABLE = 0x80\n    const APDS9960_ATIME = 0x81\n    const APDS9960_CONTROL = 0x8F\n    const APDS9960_STATUS = 0x93\n    const APDS9960_CDATAL = 0x94\n    const APDS9960_CDATAH = 0x95\n    const APDS9960_RDATAL = 0x96\n    const APDS9960_RDATAH = 0x97\n    const APDS9960_GDATAL = 0x98\n    const APDS9960_GDATAH = 0x99\n    const APDS9960_BDATAL = 0x9A\n    const APDS9960_BDATAH = 0x9B\n    const APDS9960_GCONF4 = 0xAB\n    const APDS9960_AICLEAR = 0xE7\n    let color_first_init = false\n\n    function i2cwrite_color(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n    function i2cread_color(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n    function rgb2hsl(color_r: number, color_g: number, color_b: number): number {\n        let Hue = 0\n        let R = color_r * 100 / 255;\n        let G = color_g * 100 / 255;\n        let B = color_b * 100 / 255;\n        let maxVal = Math.max(R, Math.max(G, B))\n        let minVal = Math.min(R, Math.min(G, B))\n        let Delta = maxVal - minVal;\n\n        if (Delta < 0) {\n            Hue = 0;\n        }\n        else if (maxVal == R && G >= B) {\n            Hue = (60 * ((G - B) * 100 / Delta)) / 100;\n        }\n        else if (maxVal == R && G < B) {\n            Hue = (60 * ((G - B) * 100 / Delta) + 360 * 100) / 100;\n        }\n        else if (maxVal == G) {\n            Hue = (60 * ((B - R) * 100 / Delta) + 120 * 100) / 100;\n        }\n        else if (maxVal == B) {\n            Hue = (60 * ((R - G) * 100 / Delta) + 240 * 100) / 100;\n        }\n        return Hue\n    }\n    function initModule(): void {\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ATIME, 252)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_CONTROL, 0x03)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_GCONF4, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_AICLEAR, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x01)\n        color_first_init = true\n    }\n    function colorMode(): void {\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_ENABLE) | 0x2;\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, tmp);\n    }\n\n    ///////////////////////////////////////////////////////MP3\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    /*\n    * Play status selection button list\n    */\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(100)\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,        \n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum Distance_Unit_List {\n        //% block=\"cm\" \n        Distance_Unit_cm,\n\n        //% block=\"foot\"\n        Distance_Unit_foot,\n    }\n    export enum ButtonStateList {\n        //% block=\"C\"\n        C,\n        //% block=\"D\"\n        D,\n        //% block=\"C+D\"\n        CD\n    }\n    export enum GestureType {\n        //% block=\"None\"\n        None = 0,\n        //% block=\"Right\"\n        Right = 1,\n        //% block=\"Left\"\n        Left = 2,\n        //% block=\"Up\"\n        Up = 3,\n        //% block=\"Down\"\n        Down = 4,\n        //% block=\"Forward\"\n        Forward = 5,\n        //% block=\"Backward\"\n        Backward = 6,\n        //% block=\"Clockwise\"\n        Clockwise = 7,\n        //% block=\"Anticlockwise\"\n        Anticlockwise = 8,\n        //% block=\"Wave\"\n        Wave = 9\n    }\n    export enum ColorList {\n        //% block=\"Red\"\n        red,\n        //% block=\"Green\"\n        green,\n        //% block=\"Blue\"\n        blue,\n        //% block=\"Cyan\"\n        cyan,\n        //% block=\"Magenta\"\n        magenta,\n        //% block=\"Yellow\"\n        yellow,\n        //% block=\"White\"\n        white\n    }\n\n    ///////////////////////////////////blocks/////////////////////////////\n\n    //% blockId=\"readwaterLevel\" block=\"Water level sensor %Rjpin value(0~100)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function waterLevel(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        let voltage = 0, waterlevel = 0;\n        voltage = pins.map(\n            pins.analogReadPin(pin),\n            50,\n            600,\n            0,\n            100\n        );\n        if (voltage < 0) {\n            voltage = 0\n        }\n        waterlevel = voltage;\n        return Math.round(waterlevel)\n    }\n\n    let distance_last = 0\n\n    //% blockId=sonarbit block=\"Ultrasonic sensor pinT %tPin pinE %ePin distance %distance_unit\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% distance_unit.fieldEditor=\"gridpicker\"\n    //% distance_unit.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    export function ultrasoundSensor(tPin: DigitalPin, ePin: DigitalPin, distance_unit: Distance_Unit_List): number {\n        let pinT = tPin\n        let pinE = ePin\n        pins.setPull(pinT, PinPullMode.PullNone)\n        pins.digitalWritePin(pinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(pinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(pinT, 0)\n\n        // read pulse\n        let d = pins.pulseIn(pinE, PulseValue.High, 25000)\n        let version = control.hardwareVersion()\n        let distance = d * 34 / 2 / 1000\n        if (version == \"1\") {\n            distance = distance * 3 / 2\n        }\n\n        if (distance > 430) {\n            distance = 0\n        }\n\n        if (distance == 0) {\n            distance = distance_last\n            distance_last = 0\n        }\n        else {\n            distance_last = distance\n        }\n\n        switch (distance_unit) {\n            case Distance_Unit_List.Distance_Unit_cm:\n                return Math.floor(distance)  //cm\n                break\n            case Distance_Unit_List.Distance_Unit_foot:\n                return Math.floor(distance / 30.48)   //foot\n                break\n            default:\n                return 0\n        }\n    }\n\n    export class PAJ7620 {\n        private paj7620WriteReg(addr: number, cmd: number) {\n            let buf: Buffer = pins.createBuffer(2);\n            buf[0] = addr;\n            buf[1] = cmd;\n            pins.i2cWriteBuffer(0x73, buf, false);\n        }\n        private paj7620ReadReg(addr: number): number {\n            let buf: Buffer = pins.createBuffer(1);\n            buf[0] = addr;\n            pins.i2cWriteBuffer(0x73, buf, false);\n            buf = pins.i2cReadBuffer(0x73, 1, false);\n            return buf[0];\n        }\n        private paj7620SelectBank(bank: number) {\n            if (bank == 0) this.paj7620WriteReg(0xEF, 0);\n            else if (bank == 1) this.paj7620WriteReg(0xEF, 1);\n        }\n        private paj7620Init() {\n            let temp = 0;\n            this.paj7620SelectBank(0);\n            temp = this.paj7620ReadReg(0);\n            if (temp == 0x20) {\n                for (let i = 0; i < 438; i += 2) {\n                    this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);\n                }\n            }\n            this.paj7620SelectBank(0);\n        }\n        init() {\n            this.paj7620Init();\n            basic.pause(200);\n        }\n        read(): number {\n            let data = 0, result = 0;\n            data = this.paj7620ReadReg(0x43);\n            switch (data) {\n                case 0x01:\n                    result = GestureType.Right;\n                    break;\n                case 0x02:\n                    result = GestureType.Left;\n                    break;\n                case 0x04:\n                    result = GestureType.Up;\n                    break;\n                case 0x08:\n                    result = GestureType.Down;\n                    break;\n                case 0x10:\n                    result = GestureType.Forward;\n                    break;\n                case 0x20:\n                    result = GestureType.Backward;\n                    break;\n                case 0x40:\n                    result = GestureType.Clockwise;\n                    break;\n                case 0x80:\n                    result = GestureType.Anticlockwise;\n                    break;\n                default:\n                    data = this.paj7620ReadReg(0x44);\n                    if (data == 0x01)\n                        result = GestureType.Wave;\n                    break;\n            }\n            return result;\n        }\n    }\n    const gestureEventId = 3100;\n    let lastGesture = GestureType.None;\n    let paj7620 = new PAJ7620();\n    //% blockId= gesture_create_event block=\"Gesture sensor IIC port is %gesture\"\n    //% gesture.fieldEditor=\"gridpicker\" gesture.fieldOptions.columns=3\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function onGesture(gesture: GestureType, handler: () => void) {\n        control.onEvent(gestureEventId, gesture, handler);\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        control.inBackground(() => {\n            while (true) {\n                const gesture = paj7620.read();\n                if (gesture != lastGesture) {\n                    lastGesture = gesture;\n                    control.raiseEvent(gestureEventId, lastGesture);\n                }\n                basic.pause(200);\n            }\n        })\n    }\n\n    //% blockId= gesture_get_event block=\"Gesture sensor IIC port detects\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function getGesture(): number {\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        const gesture = paj7620.read();\n        return gesture\n    }\n\n\n\n\n    //% blockId=apds9960_readcolor block=\"Color sensor IIC port color HUE(0~360)\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function readColor(): number {\n        if (color_first_init == false) {\n            initModule()\n            colorMode()\n        }\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        while (!tmp) {\n            basic.pause(5);\n            tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        }\n        let c = i2cread_color(APDS9960_ADDR, APDS9960_CDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_CDATAH) * 256;\n        let r = i2cread_color(APDS9960_ADDR, APDS9960_RDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_RDATAH) * 256;\n        let g = i2cread_color(APDS9960_ADDR, APDS9960_GDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_GDATAH) * 256;\n        let b = i2cread_color(APDS9960_ADDR, APDS9960_BDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_BDATAH) * 256;\n        // map to rgb based on clear channel\n        let avg = c / 3;\n        r = r * 255 / avg;\n        g = g * 255 / avg;\n        b = b * 255 / avg;\n        //let hue = rgb2hue(r, g, b);\n        let hue = rgb2hsl(r, g, b)\n        return hue\n    }\n    //% block=\"Color sensor IIC port detects %color\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% color.fieldEditor=\"gridpicker\" color.fieldOptions.columns=3\n    export function checkColor(color: ColorList): boolean {\n        let hue = readColor()\n        switch (color) {\n            case ColorList.red:\n                if (hue > 330 || hue < 20) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.green:\n                if (hue > 120 && 180 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.blue:\n                if (hue > 210 && 270 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.cyan:\n                if (hue > 190 && 210 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.magenta:\n                if (hue > 260 && 330 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.yellow:\n                if (hue > 30 && 120 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.white:\n                if (hue >= 180 && 190 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n        }\n    }\n\n    //% blockId=\"potentiometer\" block=\"Trimpot %Rjpin analog value\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Input color=#E2C438 group=\"Analog\"\n    export function trimpot(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        return pins.analogReadPin(pin)\n    }\n    //% blockId=buttonab block=\"Button %Rjpin %button is pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonCD(Rjpin: DigitalRJPin, button: ButtonStateList): boolean {\n        let pinC = DigitalPin.P1\n        let pinD = DigitalPin.P2\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pinC = DigitalPin.P1\n                pinD = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pinC = DigitalPin.P2\n                pinD = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pinC = DigitalPin.P13\n                pinD = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pinC = DigitalPin.P15\n                pinD = DigitalPin.P16\n                break;\n            case DigitalRJPin.P3:\n                pinC = DigitalPin.P3\n                pinD = DigitalPin.P4\n                break;\n        }\n        pins.setPull(pinC, PinPullMode.PullUp)\n        pins.setPull(pinD, PinPullMode.PullUp)\n        if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 0 && button == ButtonStateList.CD) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinC) == 0 && pins.digitalReadPin(pinD) == 1 && button == ButtonStateList.C) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 1 && button == ButtonStateList.D) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    export enum ButtonState {\n        //% block=\"on\"\n        on = 1,\n        //% block=\"off\"\n        off = 2\n    }\n\n    const buttonEventSource = 5000\n    const buttonEventValue = {\n        CD_pressed: ButtonState.on,\n        CD_unpressed: ButtonState.off\n    }\n\n    //% block=\"on button %Rjpin %button pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=4\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonEvent(Rjpin: DigitalRJPin, button: ButtonStateList, handler: () => void) {\n        let ButtonPin_C = DigitalPin.P1\n        let ButtonPin_D = DigitalPin.P2\n        let pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P0\n        let pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                ButtonPin_C = DigitalPin.P1\n                ButtonPin_D = DigitalPin.P8\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P1\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P8\n                break;\n            case DigitalRJPin.J2:\n                ButtonPin_C = DigitalPin.P2\n                ButtonPin_D = DigitalPin.P12\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P2\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P12\n                break;\n            case DigitalRJPin.J3:\n                ButtonPin_C = DigitalPin.P13\n                ButtonPin_D = DigitalPin.P14\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P13\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P14\n                break;\n            case DigitalRJPin.J4:\n                ButtonPin_C = DigitalPin.P15\n                ButtonPin_D = DigitalPin.P16\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P15\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P16\n                break;\n            case DigitalRJPin.P3:\n                ButtonPin_C = DigitalPin.P3\n                ButtonPin_D = DigitalPin.P4\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P3\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P4\n                break;\n        }\n        if (button == ButtonStateList.C) {\n            pins.setPull(ButtonPin_C, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_C, PinEventType.Edge)\n            control.onEvent(pinEventSource_C, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.D) {\n            pins.setPull(ButtonPin_D, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_D, PinEventType.Edge)\n            control.onEvent(pinEventSource_D, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.CD) {\n            loops.everyInterval(50, function () {\n                if (pins.digitalReadPin(ButtonPin_C) == 0 && pins.digitalReadPin(ButtonPin_D) == 0) {\n                    control.raiseEvent(buttonEventSource, buttonEventValue.CD_pressed)\n                }\n            })\n            control.onEvent(buttonEventSource, buttonEventValue.CD_pressed, handler)\n        }\n    }\n\n    //% blockId=fans block=\"Motor fan %Rjpin toggle to $fanstate || speed %speed \\\\%\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% fanstate.shadow=\"toggleOnOff\"\n    //% subcategory=Excute group=\"Digital\" color=#EA5532\n    //% speed.min=0 speed.max=100\n    //% expandableArgumentMode=\"toggle\"\n    export function motorFan(Rjpin: DigitalRJPin, fanstate: boolean, speed: number = 100): void {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case DigitalRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n            case DigitalRJPin.J3:\n                pin = AnalogPin.P13\n                break;\n            case DigitalRJPin.J4:\n                pin = AnalogPin.P15\n                break;\n        }\n        if (fanstate) {\n            pins.analogSetPeriod(pin, 100)\n            pins.analogWritePin(pin, Math.map(speed, 0, 100, 0, 1023))\n        }\n        else {\n            pins.analogWritePin(pin, 0)\n            speed = 0\n        }\n    }\n\n\n    //% blockId=\"setLoopFolder\" block=\"loop play all the MP3s in the folder:$folderNum\"\n    //% folderNum.defl=\"01\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setLoopFolder(folderNum: string): void {\n        CMD = 0x17\n        para1 = 0\n        para2 = parseInt(folderNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    //% blockId=\"folderPlay\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum || repeatList: $myAns\"\n    //% folderNum.defl=\"01\" fileNum.defl=\"001\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function folderPlay(folderNum: string, fileNum: string, myAns: boolean = false): void {\n        CMD = 0x0F\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        if (myAns)\n            execute(0x19)\n    }\n\n    //% blockId=\"playFolderFilePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFilePort(folderNum: string, fileNum: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFolderFileVolumePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum with volume:$theVolume usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" theVolume.defl=\"10\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFileVolumePort(folderNum: string, fileNum: string, theVolume: string, Rjpin: DigitalRJPin): void {\n        \n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        \n        let volume = parseInt(theVolume)\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(200)\n\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"volumePort\" \n    //% block=\"set MP3 volume:$theVolume usingPin:$Rjpin\"\n    //% theVolume.defl=\"10\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function volumePort(theVolume: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        let volume = parseInt(theVolume)\n        if (volume > 30) {\n            volume = 30\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(300)\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n\n\n    //% blockId=\"setTracking\" \n    //% block=\"play the mp3 in order of:%tracking || repeatList: $myAns\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% tracking.defl=1\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setTracking(tracking: number, myAns: boolean = false): void {\n        CMD = 0x03\n        para1 = 0x00\n        para2 = tracking\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        execute(0x0D)\n        if (myAns)\n            execute(0x19)\n    }\n    //% blockId=MP3execute block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=\"setVolume\" block=\"Set volume(0~25):%volume\"\n    //% volume.min=0 volume.max=25\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setVolume(volume: number): void {\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 0x06\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=MP3setPort block=\"Set the MP3 port to %Rjpin\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function MP3SetPort(Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        setVolume(25)\n    }\n}","notlegos.ts":"// NotLegos Blocks\n//% block=\"Not LEGOs\" color=#0031AF weight=1000 icon=\"\\uf3a5\"\n//% groups='[\"MP3\",\"Sensors\"]'\nnamespace notLegos {\n\n\n/// BEGIN NEOPIXEL ///\n    export enum hues { red = 0, orange = 15, yellow = 40, lime = 85, green = 110, cyan = 170, blue = 240, purple = 260, pink = 310 }\n    export enum vfxEffect { parade = 0, fire = 1, indicate = 2, idle = 3, glow = 4, mine = 5, off = 6 }\n    let NeoSock: Strip = null; let NeoScore: Strip = null; let NeoWheel: Strip = null; let NeoKong: Strip = null; let NeoStrip: Strip = null; let NeoBrick: Strip = null\n    let vfx_mine_tog: number[] = []; let vfx_mine_hue: number[] = []; let vfx_mine_sat: number[] = []; let vfx_mine_lum: number[] = []\n    let vfx_fire_tog: number[] = []; let vfx_fire_hue: number[] = []; let vfx_fire_sat: number[] = []; let vfx_fire_lum: number[] = []; let vfx_fire_colors: number[] = []\n    let vfx_indicate_tog: number[] = []; let vfx_indicate_hue: number[] = []; let vfx_indicate_sat: number[] = []; let vfx_indicate_lum: number[] = [];\n    let vfx_idle_tog: number[] = []; let vfx_idle_hue: number[] = []; let vfx_idle_sat: number[] = []; let vfx_idle_lum: number[] = []\n    let vfx_glow_tog: number[] = []; let vfx_glow_hue: number[] = []; let vfx_glow_sat: number[] = []; let vfx_glow_lum: number[] = []\n    let vfx_off_hue: number[] = []; let vfx_off_sat: number[] = []; let vfx_off_lum: number[] = []\n    let vfx_parade_tog: number[] = []; let vfx_parade_hue: number[] = []; let vfx_parade_sat: number[] = []; let vfx_parade_lum: number[] = []; let vfx_parade_colors: number[] = [];\n    let vfx_last_tog: number[] = []; let vfx_last_hue: number[] = []; let vfx_last_sat: number[] = []; let vfx_last_lum: number[] = []\n    let vfx_master_tog: number[] = []; let vfx_master_hue: number[] = []; let vfx_master_sat: number[] = []; let vfx_master_lum: number[] = []; let vfx_master_effect: number[] = [];\n    let vfx_light_count = 0\n\n    //% shim=sendBufferAsm\n    function sendBuffer(buf: Buffer, pin: DigitalPin) { }\n\n    export class Strip {\n        buf: Buffer;\n        pin: DigitalPin;\n        start: number; // start offset in LED strip\n        _length: number; // number of LEDs\n\n        setPixelHSLPrecise(pixeloffset: number, h: number, s: number, l: number): void {\n            if (pixeloffset < 0 || pixeloffset >= this._length)\n                return;\n            pixeloffset = (pixeloffset + this.start) * 3\n            h = Math.clamp(0,1,h/360)\n            s = Math.clamp(0,1,s/100)\n            l = Math.clamp(0,1,l/100)\n            let r, g, b;\n            if (s === 0) {\n                r = g = b = l; // achromatic\n            } else {\n                const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n                const p = 2 * l - q;\n                let t = h + 1/3\n                if (t < 0) { t += 1; }\n                else if (t > 1) {t -= 1; }\n                if (t < 1/6) {r = p + (q - p) * 6 * t;}\n                else if (t < 1/2) {r = q;}\n                else if (t < 2/3) { r = p + (q - p) * (2/3 - t) * 6; }\n                else { r = p; }\n                t = h\n                if (t < 0) { t += 1; }\n                else if (t > 1) { t -= 1; }\n                if (t < 1 / 6) { g = p + (q - p) * 6 * t; }\n                else if (t < 1 / 2) { g = q; }\n                else if (t < 2 / 3) { g = p + (q - p) * (2/3 - t) * 6; }\n                else { g = p; }\n                t = h - 1/3\n                if (t < 0) { t += 1; }\n                else if (t > 1) { t -= 1; }\n                if (t < 1 / 6) { b = p + (q - p) * 6 * t; }\n                else if (t < 1/2) { b = q; }\n                else if (t < 2/3) { b = p + (q - p) * (2/3 - t) * 6; }\n                else { b = p; }\n            }\n            this.buf[pixeloffset + 0] = Math.round(g * 255);\n            this.buf[pixeloffset + 1] = Math.round(r * 255);\n            this.buf[pixeloffset + 2] = Math.round(b * 255);\n        }\n\n        // show() { sendBuffer(this.buf, this.pin); }  //Send all the changes to the strip.\n\n        show() { \n            sendBuffer(this.buf, DigitalPin.P16); \n            sendBuffer(this.buf, DigitalPin.P15);\n            sendBuffer(this.buf, DigitalPin.P14);\n            sendBuffer(this.buf, DigitalPin.P13);\n            sendBuffer(this.buf, DigitalPin.P12);\n            sendBuffer(this.buf, DigitalPin.P8);\n            sendBuffer(this.buf, DigitalPin.P2);\n        }  //Send all the changes to the strip.\n\n        length() { return this._length; }   //Gets the number of pixels declared on the strip\n\n        shift(offset: number = 1): void { this.buf.shift(-offset * 3, this.start * 3, this._length * 3) }   //Shift LEDs forward and clear with zeros.\n\n        rotate(offset: number = 1): void { this.buf.rotate(-offset * 3, this.start * 3, this._length * 3) } //Rotate LEDs forward\n\n        setPin(pin: DigitalPin): void {\n            this.pin = pin;\n            pins.digitalWritePin(this.pin, 0);  // don't yield to avoid races on initialization\n        }\n    }\n\n    function create(thePin: DigitalPin, numleds: number): Strip {\n        let strip = new Strip();\n        strip.buf = pins.createBuffer(numleds * 3);\n        strip.start = 0;\n        strip._length = numleds;\n        strip.setPin(thePin)\n        return strip;\n    }\n\n    //% blockId=NL_PIXEL_CastleSay\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Sock Circle:%sockPin  Wheel Strip/Circle:%wheelPin  Score Circle:%scorePin \"\n    //% weight=100\n    export function castleSayLights(sockPin: DigitalPin, wheelPin: DigitalPin, scorePin: DigitalPin): void {\n        // NeoScore = create(scorePin, 8)\n        // NeoSock = create(sockPin, 8)\n        NeoWheel = create(wheelPin, 10)\n        vfx_light_count = 17\n        vfxInit()\n        // vfx_indicate_hue[30]=hues.green\n        // vfx_indicate_hue[31] = hues.yellow\n        // vfx_indicate_hue[32] = hues.orange\n        // vfx_indicate_hue[33] = hues.red\n        // vfx_indicate_hue[26] = hues.red\n        // vfx_indicate_hue[27] = hues.red\n        // vfx_indicate_hue[28] = hues.red\n        // vfx_indicate_hue[29] = hues.red\n        vfx_indicate_tog[1] = 1\n        // setEffect(vfxRegion.CastleSayAll, vfxEffect.parade)\n    }\n\n    //% blockId=NL_PIXEL_CastleDo\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Strips:%spotPin  Bricks:%brickPin Kong Lights:%kongPin\"\n    //% weight=100\n    export function castleDoLights(stripPin: DigitalPin, brickPin: DigitalPin, kongPin: DigitalPin): void {\n        NeoStrip = create(stripPin, 20)\n        NeoBrick = create(brickPin, 8)\n        NeoKong = create(kongPin, 4)\n        vfx_light_count = 20 + 8 + 4\n        vfxInit()\n        vfx_indicate_hue[0]=hues.cyan; vfx_indicate_hue[1]=hues.cyan   //spot h\n        vfx_indicate_hue[2] = hues.pink; vfx_indicate_hue[3] = hues.pink //spot f\n        vfx_indicate_hue[26] = hues.pink   //shell brick\n        vfx_indicate_hue[4] = hues.orange; vfx_indicate_hue[5] = hues.orange   //spot d\n        vfx_indicate_hue[21] = hues.orange   //cannon brick\n        vfx_indicate_hue[25] = hues.orange   //bomb brick\n        vfx_indicate_hue[6] = hues.yellow; vfx_indicate_hue[7] = hues.yellow   //spot b\n        vfx_indicate_hue[8] = hues.red; vfx_indicate_hue[9] = hues.red; vfx_indicate_hue[10] = hues.red; vfx_indicate_hue[11] = hues.red  //spot a\n        vfx_indicate_hue[20] = hues.red; vfx_indicate_hue[27] = hues.red  //wheel bricks\n        vfx_indicate_hue[12] = hues.blue; vfx_indicate_hue[13] = hues.blue    //spot c\n        vfx_indicate_hue[14] = hues.cyan; vfx_indicate_hue[15] = hues.cyan    //spot e\n        vfx_indicate_hue[16] = hues.purple; vfx_indicate_hue[17] = hues.purple  //spot g\n        vfx_indicate_hue[24] = hues.purple  //ghost brick\n        vfx_indicate_hue[18] = hues.green; vfx_indicate_hue[19] = hues.green   //spot i\n        vfx_indicate_hue[28] = hues.green; vfx_indicate_hue[29] = hues.green; vfx_indicate_hue[30] = hues.green; vfx_indicate_hue[31] = hues.green   //kong\n        vfx_indicate_hue[22] = hues.yellow; vfx_indicate_hue[23] = hues.yellow  //dragon brick\n        vfx_indicate_tog[0] = 1; vfx_indicate_tog[1] = 1 //spot h\n        // vfx_indicate_tog[2] = 1; vfx_indicate_tog[3] = 1 //spot f\n        // vfx_indicate_tog[4] = 1; vfx_indicate_tog[5] = 1 //spot d\n        // vfx_indicate_tog[6] = 1; vfx_indicate_tog[7] = 1 //spot b\n        // vfx_indicate_tog[8] = 1; vfx_indicate_tog[9] = 1 //spot a\n        // vfx_indicate_tog[22] = 1; vfx_indicate_tog[27] = 1    //wheel bricks\n        // vfx_indicate_tog[21] = 1    //cannon brick\n        // vfx_indicate_tog[25] = 1    //bomb brick\n        // vfx_indicate_tog[26] = 1    //shell brick\n        // vfx_indicate_tog[31] = 1; vfx_indicate_tog[30] = 1    //kong\n        \n        // setEffect(vfxRegion.CastleDoAll, vfxEffect.indicate)\n    }\n\n    function vfxInit(): void{\n        vfx_parade_colors = [hues.red, hues.orange, hues.yellow, hues.cyan, hues.blue, hues.purple]\n        vfx_fire_colors = [hues.red, hues.red, hues.red, hues.red, hues.orange, hues.orange, hues.orange, hues.orange, hues.orange, hues.yellow]\n        \n        for (let index = 0; index < 6; index++) {\n            vfx_parade_tog.push(randint(0, 1))\n            vfx_parade_hue.push(vfx_parade_colors[randint(0, vfx_parade_colors.length - 1)])\n            vfx_parade_sat.push(100)\n            vfx_parade_lum.push(randint(10, 65))\n        }\n        for (let index = 0; index < 1; index++) {\n            vfx_mine_tog.push(0)\n            vfx_mine_hue.push(hues.red)\n            vfx_mine_sat.push(100)\n            vfx_mine_lum.push(50)\n            vfx_glow_tog.push(0)\n            vfx_glow_hue.push(50)\n            vfx_glow_sat.push(0)\n            vfx_glow_lum.push(0)\n            vfx_off_hue.push(0)\n            vfx_off_sat.push(0)\n            vfx_off_lum.push(0)\n        }\n\n        for (let index = 0; index < 3; index++) {\n            vfx_fire_tog.push(randint(0, 1))\n            vfx_fire_hue.push(vfx_fire_colors[randint(0, vfx_fire_colors.length - 1)])\n            vfx_fire_sat.push(100)\n            vfx_fire_lum.push(randint(30, 80))\n        }\n        \n        for (let index = 0; index < 2; index++) {\n            vfx_indicate_tog.push(0)\n            vfx_indicate_lum.push(50)\n            vfx_indicate_hue.push(50)\n            vfx_indicate_sat.push(100)\n            vfx_idle_tog.push(1)\n            if (index % 2 == 0) { vfx_idle_tog[index] = 0; }\n            vfx_idle_hue.push(265)\n            if (index % 2 == 0) { vfx_idle_hue[index] = 2; }\n            vfx_idle_sat.push(100)\n            vfx_idle_lum.push(50)\n        }\n\n        for (let index = 0; index < vfx_light_count; index++) {\n            vfx_master_tog.push(0)\n            vfx_master_hue.push(0)\n            vfx_master_sat.push(100)\n            vfx_master_lum.push(50)\n            vfx_master_effect.push(vfxEffect.off)    //leave this be!\n        }\n    }\n\n    //% blockId=NL_PIXEL_ResetVFX\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Reset VFX %effect\"\n    //% weight=100\n    export function vfxReset(effect:vfxEffect):void{\n        if (effect == vfxEffect.idle){\n            for (let index = 0; index < vfx_light_count; index++) {\n                vfx_idle_tog[index]=1\n                if (index % 2 == 0) { vfx_idle_tog[index] = 0; }\n                vfx_idle_hue[index]=265\n                if (index % 2 == 0) { vfx_idle_hue[index] = 2; }\n                vfx_idle_sat[index]=100\n                vfx_idle_lum[index]=50\n            }\n        } else if (effect == vfxEffect.glow) {\n            for (let index = 0; index < vfx_light_count; index++) {\n                vfx_glow_tog[index] = 0\n                vfx_glow_hue[index] = 50\n                // vfx_glow_sat[index] = 100\n                vfx_glow_lum[index] = 0\n            }\n        } else if (effect == vfxEffect.mine) {\n            for (let index = 0; index < vfx_light_count; index++) {\n                vfx_mine_tog[index] = 0\n                vfx_mine_hue[index] = hues.red\n                vfx_mine_sat[index] = 100\n                vfx_mine_lum[index] = 50\n            }\n        } else if (effect == vfxEffect.indicate) {\n            for (let index = 0; index < vfx_light_count; index++) {\n                vfx_indicate_tog[index] = 0\n                vfx_indicate_sat[index] = 100\n                vfx_indicate_lum[index] = 50\n            }\n        }\n    }\n\n    //% blockId=NL_PIXEL_CastleSayTick\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Advance Castle Say lights\"\n    //% weight=100\n    export function castleSayTick(): void {\n        paradeTick()\n        fireTick()\n        glowTick()\n        castleSayWrite()\n        indicateTick()\n        idleTick()\n        mineTick()\n    }\n\n    //% blockId=NL_PIXEL_CastleDoTick\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Advance Castle Do lights\"\n    //% weight=100\n    export function castleDoTick(): void {\n        paradeTick()\n        fireTick()\n        glowTick()\n        castleDoWrite()\n        indicateTick()\n        idleTick()\n        mineTick()\n    }\n\n    function paradeTick(): void{\n        for (let index=0; index < 6; index++){\n            let thisLum = vfx_parade_lum[index]\n            let thisHue = vfx_parade_hue[index]\n            let thisTog = vfx_parade_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0){\n                if (thisLum < 65){\n                    vfx_parade_lum[index] = thisLum + 12\n                } else if (thisLum >= 65){\n                    vfx_parade_tog[index] = 1\n                }\n            } else if (thisTog == 1){\n                if (thisLum>10){\n                    vfx_parade_lum[index] = thisLum - 4\n                } else if (thisLum <= 10){\n                    vfx_parade_tog[index] = 0\n                    while (nextHue == thisHue){\n                        nextHue = vfx_parade_colors[randint(0, vfx_parade_colors.length - 1)]\n                    }\n                    vfx_parade_hue[index] = nextHue\n                    vfx_parade_lum[index] = thisLum - randint(0,10)\n                }\n            }\n        }\n    }\n\n    function mineTick(): void {\n        for (let index = 0; index < 1; index++) {\n            let thisLum = vfx_mine_lum[index]\n            let thisHue = vfx_mine_hue[index]\n            let thisTog = vfx_mine_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 200) {\n                    vfx_mine_lum[index] = thisLum + 30\n                } else if (thisLum >= 200) {\n                    vfx_mine_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 0) {\n                    vfx_mine_lum[index] = thisLum - 30\n                } else if (thisLum <= 0) {\n                    vfx_mine_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function idleTick(): void {\n        for (let index = 0; index < 2; index++) {\n            let thisLum = vfx_idle_lum[index]\n            let thisHue = vfx_idle_hue[index]\n            let thisTog = vfx_idle_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisHue < 265) {\n                    vfx_idle_hue[index] = thisHue + 1\n                } else if (thisHue >= 265) {\n                    vfx_idle_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisHue > 2) {\n                    vfx_idle_hue[index] = thisHue - 1\n                } else if (thisHue <= 2) {\n                    vfx_idle_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function indicateTick(): void {\n        for (let index = 0; index < 2; index++) {\n            let thisLum = vfx_indicate_lum[index]\n            let thisHue = vfx_indicate_hue[index]\n            let thisTog = vfx_indicate_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 80) {\n                    vfx_indicate_lum[index] = thisLum + 12\n                } else if (thisLum >= 80) {\n                    vfx_indicate_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 25) {\n                    vfx_indicate_lum[index] = thisLum - 4\n                } else if (thisLum <= 25) {\n                    vfx_indicate_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function fireTick(): void {\n        for (let index = 0; index < 3; index++) {\n            let thisLum = vfx_fire_lum[index]\n            let thisHue = vfx_fire_hue[index]\n            let thisTog = vfx_fire_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 80) {\n                    vfx_fire_lum[index] = thisLum + 15\n                } else if (thisLum >= 80) {\n                    vfx_fire_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 30) {\n                    vfx_fire_lum[index] = thisLum - 5\n                } else if (thisLum <= 30) {\n                    vfx_fire_tog[index] = 0\n                    while (nextHue == thisHue) {\n                        nextHue = vfx_fire_colors[randint(0, vfx_fire_colors.length - 1)]\n                    }\n                    vfx_fire_hue[index] = nextHue\n                    vfx_fire_lum[index] = thisLum - randint(0, 30)\n                }\n            }\n        }\n    }\n\n    function glowTick(): void {\n        for (let index = 0; index < 1; index++) {\n            let thisLum = vfx_glow_lum[index]\n            if (thisLum < 4){\n                vfx_glow_lum[index] = thisLum+.2\n            } else if (thisLum < 5) {\n                vfx_glow_lum[index] = thisLum+ + .3\n            } else if (thisLum < 10) {\n                vfx_glow_lum[index] = thisLum + .5\n            } else if (thisLum < 15) {\n                vfx_glow_lum[index] = thisLum + 1\n            }else if (thisLum < 30) {\n                vfx_glow_lum[index] = thisLum + 1.5\n            } else if (thisLum < 100) {\n                vfx_glow_lum[index] = thisLum + 4\n            } else{\n                vfx_glow_lum[index] = 0\n            }\n        }\n    }\n\n    function vfxPrepareMaster(): void{\n        vfx_master_hue[0] = vfx_glow_hue[0]\n        vfx_master_sat[0] = vfx_glow_sat[0]\n        vfx_master_lum[0] = Math.min(100, vfx_glow_lum[0])\n\n        vfx_master_hue[1] = vfx_mine_hue[0]\n        vfx_master_sat[1] = vfx_mine_sat[0]\n        vfx_master_lum[1] = Math.max(0, Math.min(50, vfx_mine_lum[0]))\n\n        vfx_master_hue[2] = vfx_idle_hue[0]\n        vfx_master_sat[2] = vfx_idle_sat[0]\n        vfx_master_lum[2] = Math.max(0, Math.min(50, vfx_idle_lum[0]))\n        vfx_master_hue[3] = vfx_idle_hue[1]\n        vfx_master_sat[3] = vfx_idle_sat[1]\n        vfx_master_lum[3] = Math.max(0, Math.min(50, vfx_idle_lum[1]))\n\n        vfx_master_hue[4] = vfx_indicate_hue[0]\n        vfx_master_sat[4] = vfx_indicate_sat[0]\n        vfx_master_lum[4] = Math.max(0, Math.min(50, vfx_indicate_lum[0]))\n        vfx_master_hue[5] = vfx_indicate_hue[1]\n        vfx_master_sat[5] = vfx_indicate_sat[1]\n        vfx_master_lum[5] = Math.max(0, Math.min(50, vfx_indicate_lum[1]))\n\n\n        for (let index = 0; index < vfx_light_count; index++) {\n            let thisEffect = vfx_master_effect[index]\n            if (thisEffect == vfxEffect.parade) {\n                vfx_master_hue[index] = vfx_parade_hue[index]\n                vfx_master_sat[index] = vfx_parade_sat[index]\n                vfx_master_lum[index] = Math.max(0,Math.min(50,vfx_parade_lum[index]))\n            } else if (thisEffect == vfxEffect.fire) {\n                vfx_master_hue[index] = vfx_fire_hue[index]\n                vfx_master_sat[index] = vfx_fire_sat[index]\n                vfx_master_lum[index] = Math.max(0, Math.min(50, vfx_fire_lum[index]))\n            } else if (thisEffect == vfxEffect.indicate) {\n\n            } else if (thisEffect == vfxEffect.idle) {\n\n            } else if (thisEffect == vfxEffect.glow) {\n\n            } else if (thisEffect == vfxEffect.mine) {\n\n            } else if (thisEffect == vfxEffect.off) {\n                vfx_master_hue[index] = vfx_mine_hue[index]\n                vfx_master_sat[index] = vfx_mine_sat[index]\n                vfx_master_lum[index] = 0\n            }\n        }\n    }\n    function castleSayWrite(): void{\n        vfxPrepareMaster()\n        let masterIndex = 0\n        // for (let index = 0; index < NeoSock.length(); index++){\n        //     NeoSock.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n        //     masterIndex++\n        // }\n        for (let index = 0; index < NeoWheel.length(); index++) {\n            NeoWheel.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        // for (let index = 0; index < NeoScore.length(); index++) {\n        //     NeoScore.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n        //     masterIndex++\n        // }\n        // NeoSock.show()\n        NeoWheel.show()\n        // NeoScore.show()\n    }\n\n    function castleDoWrite(): void {\n        vfxPrepareMaster()\n        let masterIndex = 0\n        for (let index = 0; index < NeoStrip.length(); index++) {\n            NeoStrip.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        for (let index = 0; index < NeoBrick.length(); index++) {\n            NeoBrick.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        for (let index = 0; index < NeoKong.length(); index++) {\n            NeoKong.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        NeoStrip.show()\n        NeoBrick.show()\n        NeoKong.show()\n    }\n\n    //% blockId=NL_PIXEL_SetEffect\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Set %region VFX to %effect\"\n    //% weight=100\n    export function setEffect(region:vfxRegion, effect:vfxEffect){\n        if (region == vfxRegion.Score1){\n            vfx_master_effect[30] = effect\n        } else if (region == vfxRegion.Score2) {\n            vfx_master_effect[31] = effect\n        } else if (region == vfxRegion.Score3) {\n            vfx_master_effect[32] = effect\n        } else if (region == vfxRegion.Score4) {\n            vfx_master_effect[33] = effect\n        } else if (region == vfxRegion.Score5) {\n            vfx_master_effect[26] = effect\n        } else if (region == vfxRegion.Score6) {\n            vfx_master_effect[27] = effect\n        } else if (region == vfxRegion.Score7) {\n            vfx_master_effect[28] = effect\n        } else if (region == vfxRegion.Score8) {\n            vfx_master_effect[29] = effect\n        } else if (region == vfxRegion.ScoreAll) {\n            for (let i = 26; i <= 33; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SockAll) {\n            for (let i = 0; i <= 7; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelInner) {\n            for (let i = 18; i <= 25; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelOuter) {\n            for (let i = 8; i <= 17; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelAll) {\n            for (let i=8; i <= 25; i++){ vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.CastleSayAll) {\n            for (let i = 0; i <= 33; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotA) {\n            for (let i = 8; i <= 11; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotB) {\n            for (let i = 6; i <= 7; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotC) {\n            for (let i = 12; i <= 13; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotD) {\n            for (let i = 4; i <= 5; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotE) {\n            for (let i = 14; i <= 15; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotF) {\n            for (let i = 2; i <= 3; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotG) {\n            for (let i = 16; i <= 17; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotH) {\n            for (let i = 0; i <= 1; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotI) {\n            for (let i = 18; i <= 19; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotAll) {\n            for (let i = 0; i <= 19; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.BrickWheel) {\n            vfx_master_effect[20] = effect\n            vfx_master_effect[27] = effect\n        } else if (region == vfxRegion.BrickBomb) {\n            vfx_master_effect[25] = effect\n        } else if (region == vfxRegion.BrickShell) {\n            vfx_master_effect[26] = effect\n        } else if (region == vfxRegion.BrickGhost) {\n            vfx_master_effect[24] = effect\n        } else if (region == vfxRegion.BrickDragon) {\n            for (let i = 22; i <= 23; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.BrickCannon) {\n            vfx_master_effect[21] = effect\n        } else if (region == vfxRegion.BrickAll) {\n            for (let i = 20; i <= 27; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongFront) {\n            for (let i = 28; i <= 29; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongBack) {\n            for (let i = 30; i <= 31; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongAll) {\n            for (let i = 28; i <=31; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.CastleDoAll) {\n            for (let i = 0; i < vfx_light_count; i++) { vfx_master_effect[i] = effect };\n        } \n    }\n\n    export enum vfxRegion{\n        Score1, Score2, Score3, Score4, Score5, Score6, Score7, Score8, ScoreAll,\n        SockAll,\n        WheelInner, WheelOuter, WheelAll,\n        KongFront, KongBack, KongAll,\n        BrickWheel, BrickBomb, BrickShell, BrickGhost, BrickDragon, BrickCannon, BrickAll,\n        SpotA, SpotB, SpotC, SpotD, SpotE, SpotF, SpotG, SpotH, SpotI, SpotAll,\n        CastleSayAll,\n        CastleDoAll\n    }\n\n/// END NEOPIXEL ///\n\n\n/// BEGIN SONAR ///\n\n    let sonarPinT = DigitalPin.P0\n    let sonarPinE = DigitalPin.P0\n\n    //% blockId=NL_SENSOR_SonarFirstRead\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"first distance from sonar at %pin1|%pin2\"\n    //% weight=101\n    export function SonarFirstRead(pin1: DigitalPin, pin2: DigitalPin): number {\n        sonarPinT = pin1\n        sonarPinE = pin2\n        pins.setPull(sonarPinT, PinPullMode.PullNone)\n        return SonarNextRead()\n    }\n\n    //% blockId=NL_SENSOR_SonarNextRead\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"next sonar distance\"\n    //% weight=100\n    export function SonarNextRead(): number {\n        pins.digitalWritePin(sonarPinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(sonarPinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(sonarPinT, 0)\n        return Math.floor(pins.pulseIn(sonarPinE, PulseValue.High, 25000) * 34 / 2000)\n    }\n\n/// END SONAR ///\n\n\n/// BEGIN MP3 ///\n\n    export enum playType { Play = 0x0D, Stop = 0x16, PlayNext = 0x01, PlayPrevious = 0x02, Pause = 0x0E }\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    let mp3musicPin: SerialPin\n    let mp3music = false\n    let mp3player = false\n    let mp3sfxPin: SerialPin\n    let mp3sfx = false\n    let mp3musicVol = 0\n    let mp3playerPin: SerialPin\n    let mp3playerVol = 0\n    let mp3sfxVol = 0\n    let isPot = false\n    let potPin = AnalogPin.P0\n    let masterVolume = 25\n\n    //% blockId=NL_SENSOR_TrimpotSet\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"set volume control pot at %aPin\"\n    export function potSet(aPin: AnalogPin): void {\n        potPin = aPin\n        isPot = true\n        masterVolume = potRead()\n    }\n\n    function potRead() {\n        if (isPot) { return Math.round(pins.map(pins.analogReadPin(potPin), 0, 1023, 0, 30)) }\n        else { return 5 }\n    }\n\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) { total += dataArr[i] }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) { myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i]) }\n        serial.writeBuffer(myBuff)\n        basic.pause(20) // Was 100; problematic at 10\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) { myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i]) }\n        serial.writeBuffer(myBuff)\n    }\n\n    //% blockId=NL_MP3_InitiateAs\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Ready MP3bit for %type at %sPin\"\n    //% dPin.fieldEditor=\"gridpicker\"\n    export function mp3setPorts(mp3bit: mp3type, sPin: SerialPin): void {\n        if (mp3bit == mp3type.music) {\n            mp3musicPin = sPin\n            mp3music = true\n            mp3musicVol = 100\n            setVolume(mp3type.music, mp3musicVol)\n        } else if (mp3bit == mp3type.player) {\n            mp3playerPin = sPin\n            mp3player = true\n            mp3playerVol = 100\n            setVolume(mp3type.player, mp3playerVol)\n        } else if (mp3bit == mp3type.sfxvoice) {\n            mp3sfxPin = sPin\n            mp3sfx = true\n            mp3sfxVol = 100\n            setVolume(mp3type.sfxvoice, mp3sfxVol)\n        }   \n    }\n\n    //% blockId=\"nl_playfilefolder\" \n    //% block=\"Play folder %folderNum file %fileNum on %sPin\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3fileFolder(folderNum: string, fileNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        dataArr[5] = parseInt(folderNum)\n        dataArr[6] = parseInt(fileNum)\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"NL_MP3_SendNumbers\" \n    //% block=\"Send numbers for folder %folderNum file %fileNum on %sPin\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3numbers(folderNum: number, fileNum: number, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        dataArr[3] = 15\n        dataArr[5] = folderNum\n        dataArr[6] = fileNum\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=NL_MP3_UpdateVolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Update volume for all\"\n    export function updateVolumeGlobal(): void {\n        let nowVol = potRead()\n        if (masterVolume != nowVol){\n            masterVolume = nowVol\n            setVolume(mp3type.music, mp3musicVol)\n            setVolume(mp3type.player, mp3playerVol)\n            setVolume(mp3type.sfxvoice, mp3sfxVol)\n        }\n    }\n\n    //% blockId=NL_MP3_SetVolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Set %mp3bit volume to %vol\"\n    export function setVolume(mp3bit:mp3type, vol:number): void {\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3musicVol = vol\n        } else if (mp3bit == mp3type.player) {\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3playerVol = vol\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3sfxVol = vol\n        }\n        dataArr[3] = 6\n        dataArr[5] = 0\n        dataArr[6] = Math.round(vol / 100 * masterVolume)\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=NL_MP3_GetVolumes\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Get current volumes\"\n    export function getVolumes() {\n        return \"m\" + mp3musicVol + \" p\" + mp3playerVol + \" s\" + mp3sfxVol + \" g\" + masterVolume\n    }\n\n    //% blockId=\"NL_MP3_StopPlayback\" \n    //% block=\"Stop playback on %mp3bit\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function stopPlayback(mp3bit:mp3type): void {\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        } else if (mp3bit == mp3type.player){\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        }\n        CMD = 0x16\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n/// END MP3 ///\n\n/// BEGIN SOUND BANK ///\n    export enum mp3type { music, player, sfxvoice }\n    export enum musicGenre { intro, tutorial, awaiting, level, won, lost }\n    export enum playerSaying { ready, yay, intro, nay, ouch, success, failure, won, lost, hurry }\n    export enum sfxType { correct, incorrect, ghost, fire, explosion, splash, spark, slash }\n    export enum voiceSaying { name, begin, retry, next, complete, gameover, welcome, intro, howto1, howto2, howto3, howto4, howto5, howto6, howto7, howto8, howto9 }\n    export enum magicianSaysSide { left, right }\n    export enum magicianDifficulty { easy, medium, hard }\n    export enum spotName { A, B, C, D, E, F, G, H, I }\n    export enum playerChar { mario, luigi, peach, daisy, toad, wario }\n\n    let sb_music_tutorial = feedBank(\"1.1.46|1.2.51|1.3.51|1.4.59|1.5.60|1.6.60|1.7.60|1.8.60|1.9.60|1.10.60|1.11.60|1.12.60|1.13.60|1.14.60|1.15.60|1.16.60|1.17.60|1.18.60|1.19.60|1.20.60|1.21.60\")\n    let sb_music_awaiting = feedBank(\"2.1.64|2.2.120|2.3.120|2.4.120|2.5.120|2.6.114|2.7.120|2.8.103|2.9.120|2.10.120|2.11.120|2.12.120|2.13.119|2.14.120|2.15.120|2.16.103|2.17.119|2.18.120|2.19.86|2.20.120\")\n    let sb_music_level = feedBank(\"3.1.120|3.2.120|3.3.120|3.4.120|3.5.120|3.6.120|3.7.120|3.8.120|3.9.120|3.10.92|3.11.120|3.12.120|3.13.111|3.14.116|3.15.98|3.16.120|3.17.120|3.18.82|3.19.120|3.20.120|3.21.120|3.22.120|3.23.120|3.24.120|3.25.120|3.26.120|3.27.91|3.28.120|3.29.120|3.30.41|3.31.120|3.32.120|3.33.120|3.34.94|3.35.120|3.36.120|3.37.120|3.38.120|3.39.120|3.40.120|3.41.78|3.42.120|3.43.120|3.44.120|3.45.120|3.46.120|3.47.120|3.48.120|3.49.120|3.50.120|3.51.120|3.52.113|3.53.120|3.54.120|3.55.42|3.56.120|3.57.120|3.58.120|3.59.114|3.60.120|3.61.120|3.62.118|3.63.120|3.64.120|3.65.120|3.66.120|3.67.120|3.68.59|3.69.120|3.70.120|3.71.118|3.72.120|3.73.120|3.74.70|3.75.120|3.76.120|3.77.120|3.78.120|3.79.120|3.80.120|3.81.120|3.82.120|3.83.80|3.84.120|3.85.120|3.86.120|3.87.120|3.88.107|3.89.120|3.90.120|3.91.120|3.92.120|3.93.36|3.94.120|3.95.120|3.96.120|3.97.120|3.98.120|3.99.120|3.100.63|3.101.120|3.102.120|3.103.112|3.104.105|3.105.120|3.106.110|3.107.120|3.108.120|3.109.120|3.110.120|3.111.120|3.112.120|3.113.120|3.114.120|3.115.120|3.116.119|3.117.120|3.118.120|3.119.120|3.120.120|3.121.120|3.122.120|3.123.120|3.124.120|3.125.120|3.126.104|3.127.120|3.128.87|3.129.120|3.130.118|3.131.120|3.132.120|3.133.50|3.134.109|3.135.120|3.136.120|3.137.120|3.138.91|3.139.120|3.140.120|3.141.120|3.142.120|3.143.120|3.144.120|3.145.104|3.146.112|3.147.120\")\n    let sb_music_won = feedBank(\"4.1.30|4.2.22|4.3.30|4.4.17|4.5.29|4.6.30|4.7.30|4.8.30|4.9.30|4.10.30|4.11.20|4.12.28|4.13.30|4.14.15|4.15.30|4.16.17|4.17.17|4.18.15|4.19.30|4.20.30|4.21.30|4.22.17|4.23.30|4.24.30|4.25.30\")\n    let sb_music_lost = feedBank(\"5.1.30|5.2.30|5.3.30|5.4.30|5.5.30|5.6.30|5.7.30|5.8.30|5.9.30|5.10.30|5.11.30\")\n    let sb_music_intro = feedBank(\"9.1.3|9.2.4|9.3.8|9.4.5|9.5.4|9.6.12|9.7.3|9.8.7|9.9.6|9.10.7|9.11.9|9.12.9|9.13.11|9.14.3|9.15.10|9.16.3|9.17.6|9.18.5|9.19.6|9.20.5|9.21.7|9.22.5|9.23.3|9.24.7|9.25.6|9.26.6|9.27.11|9.28.5|9.29.5|9.30.4|9.31.6|9.32.4|9.33.4|9.34.10|9.35.8|9.36.8|9.37.3|9.38.7|9.39.4|9.40.6|9.41.3|9.42.7|9.43.7|9.44.3|9.45.6|9.46.1|9.47.2|9.48.2|9.49.8|9.50.16|9.51.9|9.52.10|9.53.13|9.54.14|9.55.14|9.56.16|9.57.7|9.58.4|9.59.9|9.60.8|9.61.9|9.62.9|9.63.12|9.64.4|9.65.6|9.66.9|9.67.5|9.68.6|9.69.5|9.70.10|9.71.8|9.72.8|9.73.5|9.74.3\")\n    let sb_sfx_correct = feedBank(\"6.1.5|6.2.8|6.3.6|6.4.7|6.5.6|6.6.14|6.7.7|6.8.8|6.9.12|6.10.7|6.11.9|6.12.7|6.13.10|6.14.8|6.15.8|6.16.4|6.17.7|6.18.4|6.19.2|6.20.10|6.21.7|6.22.7|6.23.6|6.24.4|6.25.7|6.26.12|6.27.4|6.28.6|6.29.6|6.30.6|6.31.4|6.32.5|6.33.3|6.34.6|6.35.6|6.36.6|6.37.6|6.38.4|6.39.8|6.40.6|6.41.3|6.42.3|6.43.7|6.44.8|6.45.6|6.46.2|6.47.5|6.48.7|6.49.8|6.50.7|6.51.6|6.52.7|6.53.6|6.54.8|6.55.5|6.56.5|6.57.7|6.58.6|6.59.8|6.60.5|6.61.6|6.62.8|6.63.3|6.64.3|6.65.6|6.66.3|6.67.6|6.68.2|6.69.3|6.70.3|6.71.2|6.72.3|6.73.6|6.74.7|6.75.5|6.76.3|6.77.5|6.78.3|6.79.2|6.80.3|6.81.3|6.82.1|6.83.1|6.84.1|6.85.1|6.86.1|6.87.1|6.88.3|6.89.1|6.90.1|6.91.4|6.92.4\")\n    let sb_sfx_incorrect = feedBank(\"7.1.6|7.2.5|7.3.3|7.4.5|7.5.7|7.6.6|7.7.4|7.8.1|7.9.3|7.10.4|7.11.3|7.12.3|7.13.6|7.14.3|7.15.1|7.16.1|7.17.1|7.18.1|7.19.5|7.20.4|7.21.3|7.22.7\")\n    let sb_sfx_beep = feedBank(\"8.1.1|8.2.2|8.3.1\")\n    let sb_sfx_smash = feedBank(\"8.4.1|8.5.1|8.6.1|8.7.3\")\n    let sb_sfx_falling = feedBank(\"8.8.6\")\n    let sb_sfx_boom = feedBank(\"8.9.1|8.10.2|8.11.3|8.12.2\")\n    let sb_sfx_cannon = feedBank(\"8.13.2|8.14.1|8.15.1|8.16.2|8.17.2\")\n    let sb_sfx_fire = feedBank(\"8.18.2|8.19.2|8.20.5|8.21.2\")\n    let sb_sfx_ghost = feedBank(\"8.22.5|8.23.4|8.24.5|8.25.5\")\n    let sb_sfx_hit = feedBank(\"8.26.1|8.27.1|8.28.1|8.29.1|8.30.1\")\n    let sb_sfx_slash = feedBank(\"8.31.1|8.32.1|8.33.1|8.34.1|8.35.1|8.36.1|8.37.1|8.38.1|8.39.1|8.40.1|8.41.1|8.42.2\")\n    let sb_sfx_zap = feedBank(\"8.43.1|8.44.1|8.45.2|8.46.1|8.47.2|8.48.1\")\n    let sb_sfx_splash = feedBank(\"8.49.2|8.50.2|8.51.1|8.52.1|8.53.2|8.54.1|8.55.2|8.56.1|8.57.2\")\n    let sb_sfx_voice = feedBank(\"10.1.4|10.2.6|10.3.4|10.4.4|10.5.6|10.6.4|10.7.11|10.8.6|10.9.4|10.10.1\")\n    let sb_magician_left_easy = feedBank(\"11.1.3|11.2.6|11.3.7|11.4.6|11.5.6|11.6.7|11.7.6|11.8.6|11.9.6|11.10.7|11.11.6|11.12.6|11.13.7|11.14.6|11.15.6|11.16.6|11.17.6|11.18.6|11.19.6|11.20.6|11.21.6|11.22.7|11.23.6|11.24.6|11.25.6|11.26.6|11.27.7|11.28.7|11.29.7|11.30.6|11.31.6|11.32.8|11.33.7|11.34.6|11.35.7|11.36.5|11.37.6|11.38.8|11.39.6|11.40.6|11.41.6|11.42.6|11.43.6|11.44.7|11.45.6|11.46.7|11.47.7|11.48.8|11.49.6|11.50.7|11.51.6|11.52.6|11.53.7|11.54.8|11.55.7|11.56.6|11.57.7|11.58.6|11.59.6|11.60.6|11.61.6\")\n    let sb_magician_left_medium = feedBank(\"11.62.7|11.63.6|11.64.6|11.65.8|11.66.7|11.67.8|11.68.8|11.69.8|11.70.7|11.71.7|11.72.6|11.73.6|11.74.6|11.75.6|11.76.6|11.77.7|11.78.6|11.79.7|11.80.6|11.81.6|11.82.6|11.83.7|11.84.6|11.85.6|11.86.6|11.87.7|11.88.6|11.89.6|11.90.7|11.91.6|11.92.6|11.93.6|11.94.6|11.95.6|11.96.7|11.97.6|11.98.6|11.99.7|11.100.6|11.101.6|11.102.6|11.103.7|11.104.6|11.105.8|11.106.6|11.107.6|11.108.6|11.109.7|11.110.6|11.111.7|11.112.7|11.113.6|11.114.6|11.115.7|11.116.6|11.117.7|11.118.7|11.119.6|11.120.6|11.121.6|11.122.7|11.123.7|11.124.6|11.125.6|11.126.6|11.127.8|11.128.7|11.129.6|11.130.8|11.131.7|11.132.6|11.133.7|11.134.6|11.135.6|11.136.7|11.137.7\")\n    let sb_magician_left_hard = feedBank(\"11.219.7|11.220.6|11.221.6|11.222.6|11.223.6|11.224.6|11.225.7|11.226.7|11.227.6|11.228.6|11.229.6|11.230.8|11.231.7|11.232.7|11.233.6|11.234.6|11.235.6|11.236.8|11.237.7|11.238.7|11.239.6|11.240.6|11.241.8|11.242.7|11.243.7|11.244.6|11.245.6|11.246.7|11.247.7|11.248.7|11.249.7|11.250.6|11.251.6|11.252.6|11.253.6|11.254.6|11.255.6|11.256.6|11.257.6|11.258.7|11.259.7|11.260.7|11.261.6|11.262.6|11.263.6|11.264.6|11.265.6|11.266.6|11.267.7|11.268.6|11.269.6|11.270.6|11.271.6|11.272.6|11.273.6|11.274.6|11.275.7|11.276.6|11.277.6|11.278.7|11.279.7|11.280.7|11.281.6|11.282.6|11.283.7|11.284.9|11.285.7|11.286.6|11.287.6|11.288.6|11.289.7|11.290.7|11.291.6|11.292.6|11.293.7|11.294.7|11.295.6|11.296.7|11.297.6|11.298.6|11.299.6|11.300.6|11.301.6|11.302.6|11.303.7|11.304.6|11.305.6|11.306.7|11.307.6|\")\n    let sb_magician_right_easy = feedBank(\"11.159.6|11.160.6|11.161.7|11.162.6|11.163.7|11.164.7|11.165.6|11.166.6|11.167.7|11.168.7|11.169.6|11.170.8|11.171.7|11.172.7|11.173.6|11.174.6|11.175.6|11.176.6|11.177.7|11.178.6|11.179.6|11.180.6|11.181.6|11.182.7|11.183.6|11.184.6|11.185.6|11.186.6|11.187.8|11.188.7|11.189.6|11.190.6|11.191.6|11.192.6|11.193.6|11.194.6|11.195.5|11.196.6|11.197.6|11.198.6|11.199.7|11.200.6|11.201.6|11.202.6|11.203.6|11.204.6|11.205.6|11.206.6|11.207.6|11.208.6|11.209.6|11.210.7|11.211.7|11.212.7|11.213.6|11.214.7|11.215.7|11.216.6|11.217.7|11.218.6\")\n    let sb_magician_right_medium = feedBank(\"11.219.7|11.220.6|11.221.6|11.222.6|11.223.6|11.224.6|11.225.7|11.226.7|11.227.6|11.228.6|11.229.6|11.230.8|11.231.7|11.232.7|11.233.6|11.234.6|11.235.6|11.236.8|11.237.7|11.238.7|11.239.6|11.240.6|11.241.8|11.242.7|11.243.7|11.244.6|11.245.6|11.246.7|11.247.7|11.248.7|11.249.7|11.250.6|11.251.6|11.252.6|11.253.6|11.254.6|11.255.6|11.256.6|11.257.6|11.258.7|11.259.7|11.260.7|11.261.6|11.262.6|11.263.6|11.264.6|11.265.6|11.266.6|11.267.7|11.268.6|11.269.6|11.270.6|11.271.6|11.272.6|11.273.6|11.274.6|11.275.7|11.276.6|11.277.6|11.278.7|11.279.7|11.280.7|11.281.6|11.282.6|11.283.7|11.284.9|11.285.7|11.286.6|11.287.6\")\n    let sb_magician_right_hard = feedBank(\"11.288.6|11.289.7|11.290.7|11.291.6|11.292.6|11.293.7|11.294.7|11.295.6|11.296.7|11.297.6|11.298.6|11.299.6|11.300.6|11.301.6|11.302.6|11.303.7|11.304.6|11.305.6|11.306.7|11.307.6|11.308.7|11.309.6|11.310.6|11.311.6|11.312.7|11.313.7|11.314.6|11.315.7\")\n    let sb_mario_name = feedBank(\"12.1.2|12.2.1|12.4.2|12.5.3\")\n    let sb_mario_intro = feedBank(\"12.3.4|12.6.2|12.7.212.112.1|12.113.1|\")\n    let sb_mario_ready = feedBank(\"12.8.1|12.9.2|12.10.2|12.11.1|12.12.1|12.13.2|12.14.2|12.15.2|12.16.2|12.17.2|12.18.1\")\n    let sb_mario_yay = feedBank(\"12.19.1|12.20.1|12.21.1|12.22.1|12.23.1|12.24.1|12.25.1|12.26.1|12.27.1|12.28.1|12.29.1|12.30.1|12.31.1|12.32.1|12.33.1|12.34.1|12.35.1|12.36.1|12.37.1|12.38.1|12.39.1|12.40.1|12.41.1|12.42.1|12.43.1|12.44.1|12.45.1|12.46.1|12.47.1|12.48.1|12.49.1|12.50.1|12.51.2|12.52.2|12.53.2|12.54.2|12.55.2|12.56.2|12.57.2|12.58.2|12.59.2|12.60.2|12.61.2|12.62.2\")\n    let sb_mario_success = feedBank(\"12.63.1|12.64.2|12.65.2|12.66.2|12.67.2|12.68.3|12.69.3|12.70.3|12.71.3|12.72.3\")\n    let sb_mario_won = feedBank(\"12.73.2|12.74.2|12.75.3|12.76.3|12.77.3\")\n    let sb_mario_ouch = feedBank(\"12.78.1|12.79.1|12.80.1|12.81.1|12.82.1|12.83.1|12.84.1|12.85.1|12.86.1|12.87.1|12.88.1|12.89.1|12.90.1|12.91.1|12.92.1|12.93.1|12.94.1|12.95.1\")\n    let sb_mario_nay = feedBank(\"12.96.1|12.97.1|12.98.1|12.99.1|12.100.1|12.101.1|12.102.2|12.103.1|12.104.1|12.105.1|12.106.1|12.107.1|12.108.1|12.109.1|12.110.2|12.111.2\")\n    let sb_mario_failure = feedBank(\"12.114.2|12.115.2|12.116.2|12.117.1\")\n    let sb_mario_lost = feedBank(\"12.118.3|12.119.3|12.120.4|12.121.1\")\n    let sb_mario_hurry = feedBank(\"12.122.44\")\n    \n    let playlist_tutorial = makePlaylist(sb_music_tutorial)\n    let playlist_awaiting = makePlaylist(sb_music_awaiting)\n    let playlist_level = makePlaylist(sb_music_level)\n    let playlist_won = makePlaylist(sb_music_won)\n    let playlist_lost = makePlaylist(sb_music_lost)\n    let playlist_correct = makePlaylist(sb_sfx_correct)\n    let playlist_incorrect = makePlaylist(sb_sfx_incorrect)\n    let playlist_intro = makePlaylist(sb_music_intro)\n    let playlist_boom = makePlaylist(sb_sfx_boom)\n    let playlist_smash = makePlaylist(sb_sfx_smash)\n    let playlist_falling = makePlaylist(sb_sfx_falling)\n    let playlist_cannon = makePlaylist(sb_sfx_cannon)\n    let playlist_fire = makePlaylist(sb_sfx_fire)\n    let playlist_ghost = makePlaylist(sb_sfx_ghost)\n    let playlist_hit = makePlaylist(sb_sfx_hit)\n    let playlist_slash = makePlaylist(sb_sfx_slash)\n    let playlist_zap = makePlaylist(sb_sfx_zap)\n    let playlist_splash = makePlaylist(sb_sfx_splash)\n    let playlist_magician_left_easy = makePlaylist(sb_magician_left_easy)\n    let playlist_magician_left_medium = makePlaylist(sb_magician_left_medium)\n    let playlist_magician_left_hard = makePlaylist(sb_magician_left_hard)\n    let playlist_magician_right_easy = makePlaylist(sb_magician_right_easy)\n    let playlist_magician_right_medium = makePlaylist(sb_magician_right_medium)\n    let playlist_magician_right_hard = makePlaylist(sb_magician_right_hard)\n    let playlist_mario_name = makePlaylist(sb_mario_name)\n    let playlist_mario_intro = makePlaylist(sb_mario_intro)\n    let playlist_mario_ready = makePlaylist(sb_mario_ready)\n    let playlist_mario_yay = makePlaylist(sb_mario_yay)\n    let playlist_mario_success = makePlaylist(sb_mario_success)\n    let playlist_mario_won = makePlaylist(sb_mario_won)\n    let playlist_mario_ouch = makePlaylist(sb_mario_ouch)\n    let playlist_mario_nay = makePlaylist(sb_mario_nay)\n    let playlist_mario_failure = makePlaylist(sb_mario_failure)\n    let playlist_mario_lost = makePlaylist(sb_mario_lost)\n    let playlist_mario_hurry = makePlaylist(sb_mario_hurry)\n    let playtimeMusic = 0\n    let playtimePlayer = 0\n    let playtimeSfxVoice = 0\n\n    function takeRotate(PlaylistIn: number[]) {\n        let returnTrack = PlaylistIn.shift()\n        PlaylistIn.push(returnTrack)\n        return returnTrack\n    }\n    function feedBank(BankString: string) {\n        let returnBank: number[][] = []\n        let BankSplit = BankString.split(\"|\")\n        for (let soundString of BankSplit) {\n            returnBank.push([parseFloat(soundString.split(\".\")[0]), parseFloat(soundString.split(\".\")[1]), parseFloat(soundString.split(\".\")[2])])\n        }\n        return returnBank\n    }\n    function makePlaylist(SoundBank: any[]) {\n        let returnList: number[] = []\n        let orderedList: number[] = []\n        for (let soundNo = 0; soundNo <= SoundBank.length - 1; soundNo++) {\n            orderedList.push(soundNo)\n        }\n        while (orderedList.length > 0) {\n            let randTrack = randint(0, orderedList.length - 1)\n            returnList.push(orderedList.removeAt(randTrack))\n        }\n        return returnList\n    }\n    function bankPlay(mp3bit:mp3type, SoundBank: number[][], trackIndex: number) {\n        let theSong = SoundBank[trackIndex]\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimeMusic = theSong[2]\n        } else if (mp3bit == mp3type.player) {\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimePlayer = theSong[2]\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimeSfxVoice = theSong[2]\n        }\n        dataArr[3] = 15\n        dataArr[5] = theSong[0]\n        dataArr[6] = theSong[1]\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=NL_MP3_PlaytimeMusic\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of music\"\n    export function mp3durationMusic(): number{\n        return playtimeMusic\n    }\n\n    //% blockId=NL_MP3_PlaytimePlayer\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of player sound\"\n    export function mp3durationPlayer(): number {\n        return playtimePlayer\n    }\n\n    //% blockId=NL_MP3_PlaytimeSFX\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of sfx/voice\"\n    export function mp3durationSfxVoice(): number {\n        return playtimeSfxVoice\n    }\n\n\n\n    //% blockId=NL_MP3_MusicPlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %genre music\"\n    export function mp3musicPlay(genre: musicGenre): void {\n        if (genre == musicGenre.tutorial){\n            bankPlay(mp3type.music, sb_music_tutorial, takeRotate(playlist_tutorial))\n        } else if (genre == musicGenre.awaiting) {\n            bankPlay(mp3type.music, sb_music_awaiting, takeRotate(playlist_awaiting))\n        } else if (genre == musicGenre.intro){\n            bankPlay(mp3type.music, sb_music_intro, takeRotate(playlist_intro))\n        } else if (genre == musicGenre.level) {\n            bankPlay(mp3type.music, sb_music_level, takeRotate(playlist_level))\n        } else if (genre == musicGenre.won) {\n            bankPlay(mp3type.music, sb_music_won, takeRotate(playlist_won))\n        } else if (genre == musicGenre.lost) {\n            bankPlay(mp3type.music, sb_music_lost, takeRotate(playlist_lost))\n        }\n    }\n\n    //% blockId=NL_MP3_PlayerSay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %saying as player\"\n    export function mp3sayPlay(saying: playerSaying): void {\n        if(saying == playerSaying.ready){\n            bankPlay(mp3type.player, sb_mario_ready, takeRotate(playlist_mario_ready))\n        }else if (saying == playerSaying.yay){\n            bankPlay(mp3type.player, sb_mario_yay, takeRotate(playlist_mario_yay))\n        } else if (saying == playerSaying.intro) {\n            bankPlay(mp3type.player, sb_mario_intro, takeRotate(playlist_mario_intro))\n        } else if (saying == playerSaying.nay) {\n            bankPlay(mp3type.player, sb_mario_nay, takeRotate(playlist_mario_nay))\n        } else if (saying == playerSaying.ouch) {\n            bankPlay(mp3type.player, sb_mario_ouch, takeRotate(playlist_mario_ouch))\n        } else if (saying == playerSaying.success) {\n            bankPlay(mp3type.player, sb_mario_success, takeRotate(playlist_mario_success))\n        } else if (saying == playerSaying.failure) {\n            bankPlay(mp3type.player, sb_mario_failure, takeRotate(playlist_mario_failure))\n        } else if (saying == playerSaying.won) {\n            bankPlay(mp3type.player, sb_mario_won, takeRotate(playlist_mario_won))\n        } else if (saying == playerSaying.lost) {\n            bankPlay(mp3type.player, sb_mario_lost, takeRotate(playlist_mario_lost))\n        } else if (saying == playerSaying.hurry) {\n            bankPlay(mp3type.player, sb_mario_hurry, takeRotate(playlist_mario_hurry))\n        }\n    }\n\n    //% blockId=NL_MP3_VoicePlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %voice as voice\"\n    export function mp3voicePlay(voice: voiceSaying): void {\n        if (voice == voiceSaying.name) {\n\n        } else if (voice == voiceSaying.begin) {\n\n        } else if (voice == voiceSaying.retry) {\n\n        } else if (voice == voiceSaying.next) {\n\n        } else if (voice == voiceSaying.complete) {\n\n        } else if (voice == voiceSaying.gameover) {\n\n        } else if (voice == voiceSaying.welcome) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 0)\n        } else if (voice == voiceSaying.intro) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 1)\n        } else if (voice == voiceSaying.howto1) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 2)\n        } else if (voice == voiceSaying.howto2) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 3)\n        } else if (voice == voiceSaying.howto3) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 4)\n        } else if (voice == voiceSaying.howto4) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 5)\n        } else if (voice == voiceSaying.howto5) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 6)\n        } else if (voice == voiceSaying.howto6) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 7)\n        } else if (voice == voiceSaying.howto7) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 8)\n        } else if (voice == voiceSaying.howto8) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 9)\n        } else if (voice == voiceSaying.howto9) {\n\n        }\n    }\n\n    //% blockId=NL_MP3_MagicianSay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Magician says on the %side difficulty %difficulty\"\n    export function mp3magician(side: magicianSaysSide, difficulty: magicianDifficulty): void {\n        if (side == magicianSaysSide.left) {\n            if (difficulty == magicianDifficulty.easy) {\n\n            } else if (difficulty = magicianDifficulty.medium) {\n\n            } else if (difficulty = magicianDifficulty.hard) {\n\n            }\n        } else if (side = magicianSaysSide.right) {\n            if (difficulty == magicianDifficulty.easy) {\n\n            } else if (difficulty = magicianDifficulty.medium) {\n\n            } else if (difficulty = magicianDifficulty.hard) {\n\n            }\n        } \n    }\n\n    //% blockId=NL_MP3_SfxPlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %sfx sound effect\"\n    export function mp3sfxPlay(sfx: sfxType): void {\n        if(sfx == sfxType.correct){\n            bankPlay(mp3type.sfxvoice, sb_sfx_correct, takeRotate(playlist_correct))\n        }else if (sfx == sfxType.incorrect){\n            bankPlay(mp3type.sfxvoice, sb_sfx_incorrect, takeRotate(playlist_incorrect))\n        }else if (sfx == sfxType.ghost){\n            bankPlay(mp3type.sfxvoice, sb_sfx_ghost, takeRotate(playlist_ghost))\n        }else if (sfx == sfxType.fire){\n            bankPlay(mp3type.sfxvoice, sb_sfx_fire, takeRotate(playlist_fire))\n        }else if (sfx == sfxType.explosion){\n            bankPlay(mp3type.sfxvoice, sb_sfx_boom, takeRotate(playlist_boom))\n        }else if (sfx == sfxType.splash){\n            bankPlay(mp3type.sfxvoice, sb_sfx_splash, takeRotate(playlist_splash))\n        } else if (sfx == sfxType.spark) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_zap, takeRotate(playlist_zap))\n        } else if (sfx == sfxType.slash) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_slash, takeRotate(playlist_slash))\n        }\n    }\n/// END SOUND BANK ///\n\n/// BEGIN MOTOR & RELAY ///\n    const kong_address = 0x10\n    export enum MotorList { M1=1, M2=2 }\n    export enum motors{ redrack=16, shark=4, ghost=5, cannon=8, oarrack=7, shell=6, door=3, dragon=9, wheel=1, fan=2 }\n    export enum motorState { min, max, mid, off }\n    export enum fogLevels { none = 0, light = 1, medium = 2, heavy = 3 }\n    export enum sockState { dancing = 1, still = 0 }\n    let motor_wheel_max = 12; let motor_wheel_min = 0\n    let servo_redrack_max = 150; let servo_redrack_min = 100\n    let servo_cannon_min = 135; let servo_cannon_max = 65\n    let servo_shark_min = 20; let servo_shark_max = 85\n    let servo_oarrack_min = 60; let servo_oarrack_max = 110\n    let servo_ghost_min = 110; let servo_ghost_max = 40\n    let servo_shell_min = 170; let servo_shell_max = 100\n    let servo_door_min = 50; let servo_door_max = 140; let servo_door_mid = 100\n    let motor_fan_min = 0; let motor_fan_mid = 50; let motor_fan_max = 100\n    let servo_dragon_min = 90; let servo_dragon_max = 79\n\n    export function servoSet(servo: motors, angle: number): void {\n        let buf = pins.createBuffer(4);\n        buf[0] = servo;\n        buf[1] = angle;\n        buf[2] = 0;\n        buf[3] = 0;\n        pins.i2cWriteBuffer(kong_address, buf);\n    }\n\n    export function motorSpeed(motor: MotorList, speed: number): void {\n        let buf = pins.createBuffer(4);\n        buf[0] = motor\n        buf[1] = 1;\n        if (speed < 0) {\n            buf[1] = 2;\n            speed = speed * -1\n        }\n        buf[2] = speed;\n        buf[3] = 0;\n        pins.i2cWriteBuffer(kong_address, buf);\n    }\n\n    //% blockId=NL_MOTOR_Set \n    //% block=\"Set %motor to %state\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function motorSet(motor:motors, state:motorState):void{\n        if (motor == motors.redrack){\n            if (state == motorState.min){ servoSet(motor, servo_redrack_min) } \n            else if (state == motorState.max){ servoSet(motor, servo_redrack_max) }\n        } if (motor == motors.shark) {\n            if (state == motorState.min) { servoSet(motor, servo_shark_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_shark_max) }\n        } if (motor == motors.ghost) {\n            if (state == motorState.min) { servoSet(motor, servo_ghost_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_ghost_max) }\n        } if (motor == motors.cannon) {\n            if (state == motorState.min) { servoSet(motor, servo_cannon_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_cannon_max) }\n        } if (motor == motors.oarrack) {\n            if (state == motorState.min) { servoSet(motor, servo_oarrack_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_oarrack_max) }\n        } if (motor == motors.shell) {\n            if (state == motorState.min) { servoSet(motor, servo_shell_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_shell_max) }\n        } if (motor == motors.door) {\n            if (state == motorState.min) { servoSet(motor, servo_door_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_door_max) }\n            else if (state == motorState.mid) { servoSet(motor, servo_door_mid) }\n        } if (motor == motors.dragon) {\n            if (state == motorState.min) { servoSet(motor, servo_dragon_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_dragon_max) }\n        } if (motor == motors.wheel) {\n            if (state == motorState.min) { motorSpeed(MotorList.M1, motor_wheel_min) }\n            else if (state == motorState.max) { motorSpeed(MotorList.M1, motor_wheel_max) }\n            else if (state == motorState.off) { motorSpeed(MotorList.M1, 0) }\n        } if (motor == motors.fan) {\n            if (state == motorState.min) { motorSpeed(MotorList.M2, motor_fan_min) }\n            else if (state == motorState.mid) { motorSpeed(MotorList.M2, motor_fan_mid) }\n            else if (state == motorState.max) { motorSpeed(MotorList.M2, motor_fan_max) }\n            else if (state == motorState.off) { motorSpeed(MotorList.M2, 0) }\n        }\n    }\n\n    //% blockId=NL_RELAY_FogSet \n    //% block=\"set fog level to %level\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function setFog(fog:fogLevels):void{\n        if (fog == fogLevels.none){\n            pins.digitalWritePin(DigitalPin.P2, 1)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 1)\n        } else if (fog == fogLevels.light){\n            pins.digitalWritePin(DigitalPin.P2, 1)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        } else if (fog == fogLevels.medium) {\n            pins.digitalWritePin(DigitalPin.P2, 0)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        } else if (fog == fogLevels.heavy) {\n            pins.digitalWritePin(DigitalPin.P2, 0)\n            pins.digitalWritePin(DigitalPin.P8, 0)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        }\n    }\n\n    //% blockId=NL_RELAY_SockSet\n    //% block=\"set dancing sock to %sockState\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function setSock(state: sockState): void {\n        if(state==sockState.dancing){ pins.digitalWritePin(DigitalPin.P12, 0) }\n        else{ pins.digitalWritePin(DigitalPin.P12, 1) }\n    }\n\n/// END MOTOR & RELAY ///\n\n/// BEGIN OLED\n\n    let d1 = [0, 0, 0, 20, 36, 35, 54, 0, 28, 65, 8, 8, 160, 8, 96, 32, 62, 0, 98, 34, 24, 39, 60, 1, 54, 6, 0, 0, 8, 20, 65, 2, 50, 126, 127, 62, 127, 127, 127, 62, 127, 65, 32, 127, 127, 127, 127, 62, 127, 62, 127, 38, 1, 63, 31, 63, 99, 3, 97, 127, 2, 65, 4, 128, 1, 32, 127, 56, 56, 56, 8, 24, 127, 0, 128, 127, 65, 124, 124, 56, 252, 24, 0, 72, 4, 60, 28, 60, 68, 28, 68, 8, 0, 65, 2]\n    let d2 = [0, 95, 7, 127, 42, 19, 73, 5, 34, 34, 42, 8, 96, 8, 96, 16, 81, 66, 81, 65, 20, 69, 74, 113, 73, 73, 54, 172, 20, 20, 34, 1, 73, 9, 73, 65, 65, 73, 9, 65, 8, 127, 64, 8, 64, 2, 4, 65, 9, 65, 9, 73, 1, 64, 32, 64, 20, 4, 81, 65, 4, 65, 2, 128, 2, 84, 72, 68, 68, 84, 126, 164, 8, 125, 132, 16, 127, 4, 8, 68, 36, 36, 124, 84, 127, 64, 32, 64, 40, 160, 100, 54, 127, 54, 1]\n    let d3 = [0, 0, 0, 20, 127, 8, 85, 3, 65, 28, 28, 62, 0, 8, 0, 8, 73, 127, 73, 73, 18, 69, 73, 9, 73, 73, 54, 108, 34, 20, 20, 81, 121, 9, 73, 65, 65, 73, 9, 65, 8, 65, 65, 20, 64, 12, 8, 65, 9, 81, 25, 73, 127, 64, 64, 56, 8, 120, 73, 65, 8, 127, 1, 128, 4, 84, 68, 68, 68, 84, 9, 164, 4, 0, 125, 40, 64, 24, 4, 68, 36, 36, 8, 84, 68, 64, 64, 48, 16, 160, 84, 65, 0, 8, 1]\n    let d4 = [0, 0, 7, 127, 42, 100, 34, 0, 0, 0, 42, 8, 0, 8, 0, 4, 69, 64, 73, 73, 127, 69, 73, 5, 73, 41, 0, 0, 65, 20, 8, 9, 65, 9, 73, 65, 34, 73, 9, 81, 8, 0, 63, 34, 64, 2, 16, 65, 9, 33, 41, 73, 1, 64, 32, 64, 20, 4, 69, 0, 16, 0, 2, 128, 0, 84, 68, 40, 72, 84, 2, 164, 4, 0, 0, 68, 0, 4, 124, 56, 24, 252, 4, 36, 0, 124, 32, 64, 40, 124, 76, 0, 0, 0, 2]\n    let d5 = [0, 0, 0, 20, 18, 98, 80, 0, 0, 0, 8, 8, 0, 8, 0, 2, 62, 0, 70, 54, 16, 57, 48, 3, 54, 30, 0, 0, 0, 20, 0, 6, 62, 126, 54, 34, 28, 65, 1, 114, 127, 0, 1, 65, 64, 127, 127, 62, 6, 94, 70, 50, 1, 63, 31, 63, 99, 3, 67, 0, 32, 0, 4, 128, 0, 120, 56, 0, 127, 24, 0, 124, 120, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 28, 60, 68, 0, 68, 0, 0, 0, 1]\n\n    let display = [\" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\")]\n    let desired = [\" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\")]\n\n    //% blockId=NL_OLED_Update3\n    //% block=\"oled update from buffer\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function changeThree(): void{\n        let updated: string[][] = []\n        let count = 0\n        for (let row=0; row<8; row++){\n            for(let col=0; col<16; col++){\n                let refChar = desired[row][col]\n                if (refChar != display[row][col]){\n                    writeChar(refChar,row,col)\n                    display[row][col] = refChar\n                    count++\n                    if (count >= 3){\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    //% blockId=NL_OLED_PrintLine\n    //% block=\"print %text to oled buffer line %line\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function printLine(text:any, line:number): void{\n        let thisText = text + \"\"\n        for (let i = 0; i < 16; i++){\n            if (i < thisText.length){\n                desired[line][i]=thisText.charAt(i)\n            } else{\n                desired[line][i]=\" \"\n            }\n        }\n    }\n\n    function oledcmd(c: number) {\n        pins.i2cWriteNumber(0x3c, c, NumberFormat.UInt16BE);\n    }\n\n    function setText(row: number, column: number) {\n        oledcmd(0xB0 + row);            //set page address\n        oledcmd(0x00 + (8 * column & 0x0F));  //set column lower address\n        oledcmd(0x10 + ((8 * column >> 4) & 0x0F));   //set column higher address\n    }\n\n    //% blockId=NL_OLED_Init \n    //% block=\"initiate the oled screen\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function oledinit(): void {\n        oledcmd(0xAE);  // Set display OFF\n        oledcmd(0xD5);  // Set Display Clock Divide Ratio / OSC Frequency 0xD4\n        oledcmd(0x80);  // Display Clock Divide Ratio / OSC Frequency \n        oledcmd(0xA8);  // Set Multiplex Ratio\n        oledcmd(0x3F);  // Multiplex Ratio for 128x64 (64-1)\n        oledcmd(0xD3);  // Set Display Offset\n        oledcmd(0x00);  // Display Offset\n        oledcmd(0x40);  // Set Display Start Line\n        oledcmd(0x8D);  // Set Charge Pump\n        oledcmd(0x14);  // Charge Pump (0x10 External, 0x14 Internal DC/DC)\n        oledcmd(0xA1);  // Set Segment Re-Map\n        oledcmd(0xC8);  // Set Com Output Scan Direction\n        oledcmd(0xDA);  // Set COM Hardware Configuration\n        oledcmd(0x12);  // COM Hardware Configuration\n        oledcmd(0x81);  // Set Contrast\n        oledcmd(0xCF);  // Contrast\n        oledcmd(0xD9);  // Set Pre-Charge Period\n        oledcmd(0xF1);  // Set Pre-Charge Period (0x22 External, 0xF1 Internal)\n        oledcmd(0xDB);  // Set VCOMH Deselect Level\n        oledcmd(0x40);  // VCOMH Deselect Level\n        oledcmd(0xA4);  // Set all pixels OFF\n        oledcmd(0xA6);  // Set display not inverted\n        oledcmd(0xAF);  // Set display On\n        for (let j = 0; j < 8; j++) {\n            setText(j, 0);\n            {\n                for (let i = 0; i < 16; i++)  //clear all columns\n                {\n                    writeChar(\" \",j,i)\n                }\n            }\n        }\n    }\n\n    function writeChar(char: string, row: number, column: number) {\n        setText(row, column)\n        let i = char.charCodeAt(0) - 32\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d1[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d2[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d3[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d4[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d5[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n    }\n\n/// END OLED\n\n\n/// BEGIN DIGITS\n\n    let _SEGMENTS = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71];\n\n    //% blockId=nl_digits_create block=\"4-Digit cPin %cPin dPin %dPin\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function tm1637Create(cPin: DigitalPin, dPin: DigitalPin): TM1637LEDs {\n        let display = new TM1637LEDs();\n        display.clk = cPin\n        display.dio = dPin\n        display.brightness = 7;\n        display.init();\n        return display;\n    }\n    export class TM1637LEDs {\n        buf: Buffer;\n        clk: DigitalPin;\n        dio: DigitalPin;\n        _ON: number;\n        brightness: number;\n        init(): void {\n            pins.digitalWritePin(this.clk, 0);\n            pins.digitalWritePin(this.dio, 0);\n            this._ON = 8;\n            this.buf = pins.createBuffer(4);\n            this.clear();\n        }\n        _start() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _stop() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.dio, 1);\n        }\n        _write_data_cmd() {\n            this._start();\n            this._write_byte(0x40);\n            this._stop();\n        }\n        _write_dsp_ctrl() {\n            this._start();\n            this._write_byte(0x80 | this._ON | this.brightness);\n            this._stop();\n        }\n        _write_byte(b: number) {\n            for (let i = 0; i < 8; i++) {\n                pins.digitalWritePin(this.dio, (b >> i) & 1);\n                pins.digitalWritePin(this.clk, 1);\n                pins.digitalWritePin(this.clk, 0);\n            }\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _intensity(val: number = 7) {\n            this._ON = 8;\n            this.brightness = val - 1;\n            this._write_data_cmd();\n            this._write_dsp_ctrl();\n        }\n        _dat(bit: number, dat: number) {\n            this._write_data_cmd();\n            this._start();\n            this._write_byte(0xC0 | (bit % 4))\n            this._write_byte(dat);\n            this._stop();\n            this._write_dsp_ctrl();\n        }\n        \n        //% blockId=nl_digits_digit block=\"%display|show single number|%num|at digit|%bit\"\n        //% subcategory=\"Display\" group=\"Display\"\n        //% bit.defl=1 bit.min=0 bit.max=9\n        showbit(num: number = 5, bit: number = 0) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            this.buf[bit % 4] = _SEGMENTS[num % 16]\n            this._dat(bit, _SEGMENTS[num % 16])\n        }\n\n        //% blockId=nl_digits_number block=\"%display|show number|%num\"\n        //% subcategory=\"Display\" group=\"Display\"\n        showNumber(num: number) {\n            if (num < 0) {\n                num = -num\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n                this._dat(0, 0x40) // '-'\n                // this._dat(0, 0) // blank\n            }\n            else {\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n            }\n        }\n\n        //% blockId=\"nl_digits_clear\" block=\"clear display %display\"\n        //% subcategory=\"Display\" group=\"Display\"\n        clear() {\n            for (let i = 0; i < 4; i++) {\n                this._dat(i, 0)\n                this.buf[i] = 0\n            }\n        }\n    }\n\n/// END DIGITS\n\n}\n\n\n","pxt.json":"{\n    \"name\": \"NotLegosMaster\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"displaySendBuffer.asm\",\n        \"planetxbasic.ts\",\n        \"notlegos.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"7.0.42\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n","test.ts":""}},{"timestamp":1728790553568,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"NFHB?|vd].P(}_Y-C82U\">btToken</variable><variable id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</variable><variable id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</variable><variable id=\"Y|e4lM)*:N0Ca^S5-64i\">lastLaserR</variable><variable id=\"Uk9;F|_3qS]2aZyBH#]%\">lastLaserC</variable><variable id=\"}GOl3M4q[Bn4R~R!?]at\">lastLaserL</variable><variable id=\"JQUQT|8QeX)zSvZ?K@,i\">lastSonarRead</variable><variable id=\"=X]tI5AG]3|WfpT`9Jsr\">lastHue</variable><variable id=\"Bc7kXprAfc3]W%ILxbVV\">lastGesture</variable><variable id=\"#oq[[iBLthN][|]:S!n}\">lastHunt</variable><variable id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</variable><variable id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</variable><variable id=\"8GDUfe;)i@P.Do~T6|{[\">theName</variable><variable id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</variable><variable id=\"=9JavC*{GElF}/FS78a@\">iBegan</variable><variable id=\"e.[{0v-j0Tp(kJ9$~N@:\">isReady</variable></variables><block type=\"every_interval\" x=\"681\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">2000</field></shadow></value><statement name=\"HANDLER\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value></block></statement></block><block type=\"function_definition\" x=\"4169\" y=\"-242\"><mutation name=\"buttonPress\" functionid=\"+$9AXp*X:[tcODdtL9m)\"><arg name=\"button\" id=\"mfdvbnfdsij7xy9ejk0nd\" type=\"string\"></arg></mutation><field name=\"function_name\">buttonPress</field><value name=\"mfdvbnfdsij7xy9ejk0nd\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">button</field></block></value><statement name=\"STACK\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">button: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">button</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></statement></block><block type=\"every_interval\" x=\"1327\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"every_interval\" x=\"1542\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">40</field></shadow></value><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"=9JavC*{GElF}/FS78a@\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time\"></block></value><next><block type=\"NL_PIXEL_CastleSayTick\"><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"e.[{0v-j0Tp(kJ9$~N@:\">isReady</field></block></value><next><block type=\"function_call\"><mutation name=\"ready_oled\" functionid=\"LSuKu]l*}Y2[|u.h3PJ%\"></mutation><next><block type=\"NL_OLED_Update3\"><next><block type=\"variables_set\"><field name=\"VAR\" id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"=9JavC*{GElF}/FS78a@\">iBegan</field></block></value></block></value></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"NL_OLED_Init\"><next><block type=\"NL_PIXEL_CastleSay\"><field name=\"sockPin\">DigitalPin.P3</field><field name=\"wheelPin\">DigitalPin.P0</field><field name=\"scorePin\">DigitalPin.P16</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"=9JavC*{GElF}/FS78a@\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time_micros\"></block></value></block></next></block></next></block></statement></block><block type=\"every_interval\" x=\"2136\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"input_logo_event\" x=\"2351\" y=\"-83\"><field name=\"action\">TouchButtonEvent.Touched</field><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_MP3_PlayerSay\"><field name=\"saying\">notLegos.playerSaying.ready</field><next><block type=\"NL_MP3_SfxPlay\"><field name=\"sfx\">notLegos.sfxType.fire</field><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.intro</field></block></next></block></next></block></statement></block></statement></block><block type=\"radio_on_value_drag\" x=\"2868\" y=\"231\"><value name=\"HANDLER_DRAG_PARAM_name\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">name</field></block></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">value</field></block></value><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_substr\"><value name=\"this\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value><value name=\"start\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"length\"><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_substr\"><value name=\"this\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value><value name=\"start\"><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value><value name=\"length\"><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text_length\"><value name=\"VALUE\"><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value></block></value></block></value><next><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"controls_if\"><mutation elseif=\"3\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wstar</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_start</field></block></value></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value><statement name=\"DO1\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.welcome</field></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.WheelAll</field><field name=\"effect\">notLegos.vfxEffect.fire</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.intro</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_reg</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">check</field></block></value></block></value><statement name=\"DO2\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">ready</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value></block></statement><statement name=\"ELSE\"><block type=\"controls_if\"><mutation elseif=\"3\" else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">ready</field></block></value></block></value><statement name=\"DO0\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">wstar</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.KongFront</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">boot</field></block></value></block></value><statement name=\"DO1\"><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1000</field></shadow></value></block></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">200</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.idle</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotH</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotI</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">0</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.BrickDragon</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotE</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">tutor</field></block></value></block></value><statement name=\"DO2\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotA</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotB</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value></block></statement><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">heard: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">6</field></shadow></value></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"107\" y=\"3653\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><field name=\"function_name\">radioSay</field><value name=\"vt0gv77qprcayj8xalbs\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">text5</field></block></value><value name=\"ok3p1i8gyn97mv69yabw\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">val</field></block></value><statement name=\"STACK\"><block type=\"radio_datagram_send_value\"><value name=\"name\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value></block></value><value name=\"value\"><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">said: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">7</field></shadow></value></block></next></block></statement></block><block type=\"function_definition\" x=\"745\" y=\"3814\"><mutation name=\"fogFlood\" functionid=\"VFMl!%hPr#$dm7#L!/;e\"></mutation><field name=\"function_name\">fogFlood</field><statement name=\"STACK\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</field></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">10000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">para</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.mid</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.off</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.dancing</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.still</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">8000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.min</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"1187\" y=\"3814\"><mutation name=\"runTutorial\" functionid=\"S6D~vG%3KsCIO0/OH*vo\"></mutation><field name=\"function_name\">runTutorial</field><statement name=\"STACK\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">tutor</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">80</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">20</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.tutorial</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto1</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5950</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto2</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto3</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7600</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto4</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6100</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto5</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">13000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto6</field><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"function_definition\" x=\"1543\" y=\"3814\"><mutation name=\"ready_oled\" functionid=\"LSuKu]l*}Y2[|u.h3PJ%\"></mutation><field name=\"function_name\">ready_oled</field><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Say //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"6\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Y|e4lM)*:N0Ca^S5-64i\">lastLaserR</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> C</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Uk9;F|_3qS]2aZyBH#]%\">lastLaserC</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"}GOl3M4q[Bn4R~R!?]at\">lastLaserL</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"8\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">S</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"JQUQT|8QeX)zSvZ?K@,i\">lastSonarRead</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> H</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_js_round\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"=X]tI5AG]3|WfpT`9Jsr\">lastHue</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> G</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Bc7kXprAfc3]W%ILxbVV\">lastGesture</field></block></value><value name=\"ADD6\"><shadow type=\"text\"><field name=\"TEXT\"> N</field></shadow></value><value name=\"ADD7\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"#oq[[iBLthN][|]:S!n}\">lastHunt</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">Mode: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M:</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"NL_MP3_PlaytimeMusic\"></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">4</field></shadow></value></block></next></block></next></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Do //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> T </field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement></block></statement></block></xml>","main.ts":"function radioSay (text5: string, val: number) {\n    radio.sendValue(\"\" + btToken + text5, val)\n    notLegos.printLine(\"said: \" + text5 + \"=\" + val, 7)\n}\nfunction buttonPress (button: string) {\n    notLegos.printLine(\"button: \" + button, 3)\n}\nfunction runTutorial () {\n    radioSay(\"tutor\", 1)\n    notLegos.setVolume(notLegos.mp3type.music, 80)\n    basic.pause(20)\n    notLegos.mp3musicPlay(notLegos.musicGenre.tutorial)\n    fogLevel = 3\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto1)\n    basic.pause(5950)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto2)\n    basic.pause(5000)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto3)\n    basic.pause(7600)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto4)\n    basic.pause(6100)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto5)\n    basic.pause(13000)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto6)\n    notLegos.setVolume(notLegos.mp3type.music, 100)\n    basic.pause(7000)\n    notLegos.mp3musicPlay(notLegos.musicGenre.awaiting)\n}\nfunction ready_oled () {\n    if (isCastleSay) {\n        let lastHunt = 0\n        let lastGesture = 0\n        let lastHue = 0\n        let lastSonarRead = 0\n        let lastLaserL = 0\n        let lastLaserC = 0\n        let lastLaserR = 0\n        notLegos.printLine(\"// Castle Say //\", 0)\n        notLegos.printLine(\"R\" + Math.constrain(lastLaserR, 0, 9) + \" C\" + Math.constrain(lastLaserC, 0, 9) + \" L\" + Math.constrain(lastLaserL, 0, 9), 1)\n        notLegos.printLine(\"S\" + lastSonarRead + \" H\" + Math.round(lastHue / 3) + \" G\" + lastGesture + \" N\" + lastHunt, 2)\n        notLegos.printLine(\"Mode: \" + castleMode, 3)\n        notLegos.printLine(\"M:\" + notLegos.mp3durationMusic(), 4)\n    } else {\n        notLegos.printLine(\"// Castle Do //\", 0)\n        notLegos.printLine(\"M: \" + castleMode + \" T \" + fogToggle, 1)\n    }\n}\nradio.onReceivedValue(function (name, value) {\n    if (name.substr(0, btToken.length) == btToken) {\n        theName = name.substr(btToken.length, name.length - btToken.length)\n        if (isCastleSay) {\n            if (theName == \"wstar\") {\n                castleMode = \"wait_start\"\n            } else if (theName == \"welco\") {\n                if (value == 1) {\n                    notLegos.vfxReset(notLegos.vfxEffect.glow)\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.glow)\n                    notLegos.mp3voicePlay(notLegos.voiceSaying.welcome)\n                } else if (value == 2) {\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                    notLegos.setEffect(notLegos.vfxRegion.WheelAll, notLegos.vfxEffect.fire)\n                    basic.pause(1200)\n                    notLegos.mp3voicePlay(notLegos.voiceSaying.intro)\n                    basic.pause(3000)\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                    basic.pause(4000)\n                    notLegos.mp3musicPlay(notLegos.musicGenre.awaiting)\n                    castleMode = \"wait_reg\"\n                }\n            } else if (theName == \"check\") {\n                notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                radioSay(\"ready\", 1)\n            } else if (false) {\n            \t\n            }\n        } else {\n            if (theName == \"ready\") {\n                radioSay(\"wstar\", 1)\n                notLegos.setEffect(notLegos.vfxRegion.KongFront, notLegos.vfxEffect.indicate)\n            } else if (theName == \"boot\") {\n                fogLevel = 3\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.parade)\n                notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.max)\n                basic.pause(value * 1000)\n                notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.min)\n                basic.pause(1000)\n                radioSay(\"welco\", 1)\n                basic.pause(200)\n                notLegos.vfxReset(notLegos.vfxEffect.glow)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.glow)\n                basic.pause(5000)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.idle)\n                notLegos.setEffect(notLegos.vfxRegion.SpotH, notLegos.vfxEffect.mine)\n                notLegos.setEffect(notLegos.vfxRegion.SpotI, notLegos.vfxEffect.mine)\n                basic.pause(0)\n                radioSay(\"welco\", 2)\n                basic.pause(4500)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.off)\n                basic.pause(500)\n                notLegos.setEffect(notLegos.vfxRegion.BrickDragon, notLegos.vfxEffect.indicate)\n                basic.pause(1200)\n                notLegos.setEffect(notLegos.vfxRegion.SpotC, notLegos.vfxEffect.indicate)\n                notLegos.setEffect(notLegos.vfxRegion.SpotE, notLegos.vfxEffect.indicate)\n                basic.pause(3000)\n                fogLevel = 1\n                notLegos.motorSet(notLegos.motors.door, notLegos.motorState.max)\n            } else if (theName == \"tutor\") {\n                if (value == 1) {\n                    notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.off)\n                    basic.pause(4000)\n                    notLegos.vfxReset(notLegos.vfxEffect.glow)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotA, notLegos.vfxEffect.glow)\n                    basic.pause(6000)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotB, notLegos.vfxEffect.indicate)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotC, notLegos.vfxEffect.indicate)\n                } else if (value == 2) {\n                \t\n                }\n            } else if (theName == \"welco\") {\n            \t\n            } else {\n            \t\n            }\n        }\n        notLegos.printLine(\"heard: \" + theName + \"=\" + value, 6)\n    }\n})\ninput.onLogoEvent(TouchButtonEvent.Touched, function () {\n    if (isCastleSay) {\n        notLegos.mp3sayPlay(notLegos.playerSaying.ready)\n        notLegos.mp3sfxPlay(notLegos.sfxType.fire)\n        notLegos.mp3musicPlay(notLegos.musicGenre.intro)\n    }\n})\nfunction fogFlood () {\n    if (fogToggle) {\n        fogLevel = 3\n        basic.pause(10000)\n        notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.parade)\n        radioSay(\"para\", 1)\n        fogLevel = 0\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.max)\n        notLegos.motorSet(notLegos.motors.door, notLegos.motorState.max)\n        basic.pause(1000)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.mid)\n        basic.pause(6000)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.min)\n        basic.pause(500)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.off)\n        notLegos.motorSet(notLegos.motors.door, notLegos.motorState.min)\n        fogLevel = 1\n        notLegos.setSock(notLegos.sockState.dancing)\n        basic.pause(6000)\n        notLegos.setSock(notLegos.sockState.still)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.max)\n        basic.pause(8000)\n        notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.redrack, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.redrack, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shark, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shark, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.ghost, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.ghost, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.cannon, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.cannon, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.oarrack, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.oarrack, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shell, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shell, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.dragon, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.dragon, notLegos.motorState.min)\n    }\n}\nlet iTook = 0\nlet theName = \"\"\nlet fogToggle = 0\nlet castleMode = \"\"\nlet isCastleSay = 0\nlet fogLevel = 0\nlet btToken = \"\"\nnotLegos.oledinit()\nnotLegos.castleSayLights(DigitalPin.P3, DigitalPin.P0, DigitalPin.P16)\nlet iBegan = input.runningTimeMicros()\nloops.everyInterval(500, function () {\n\t\n})\nloops.everyInterval(500, function () {\n\t\n})\nloops.everyInterval(2000, function () {\n    notLegos.printLine(\"\" + iTook + \"\", 5)\n})\nloops.everyInterval(40, function () {\n    let isReady = 0\n    iBegan = input.runningTime()\n    notLegos.castleSayTick()\n    if (isReady) {\n    \t\n    }\n    ready_oled()\n    notLegos.changeThree()\n    iTook = input.runningTime() - iBegan\n})\n","README.md":"\n> Open this page at [https://notlegos.github.io/castleresay/](https://notlegos.github.io/castleresay/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/castleresay** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/castleresay** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/soundbank/](https://notlegos.github.io/soundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/soundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/soundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/resoundbank/](https://notlegos.github.io/resoundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/resoundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/resoundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosext/](https://notlegos.github.io/notlegosext/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosext** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosext** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosmaster/](https://notlegos.github.io/notlegosmaster/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosmaster** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosmaster** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","displaySendBuffer.asm":"sendBufferAsm:\n\n    push {r4,r5,r6,r7,lr}\n    \n    mov r4, r0 ; save buff\n    mov r6, r1 ; save pin\n    \n    mov r0, r4\n    bl BufferMethods::length\n    mov r5, r0\n    \n    mov r0, r4\n    bl BufferMethods::getBytes\n    mov r4, r0\n    \n    ; setup pin as digital\n    mov r0, r6\n    movs r1, #0\n    bl pins::digitalWritePin\n    \n    ; load pin address\n    mov r0, r6\n    bl pins::getPinAddress\n\n    ldr r0, [r0, #8] ; get mbed DigitalOut from MicroBitPin\n    ldr r1, [r0, #4] ; r1-mask for this pin\n    ldr r2, [r0, #16] ; r2-clraddr\n    ldr r3, [r0, #12] ; r3-setaddr\n    \n    cpsid i ; disable irq\n    \n    b .start\n    \n.nextbit:               ;            C0\n    str r1, [r3, #0]    ; pin := hi  C2\n    tst r6, r0          ;            C3\n    bne .islate         ;            C4\n    str r1, [r2, #0]    ; pin := lo  C6\n.islate:\n    lsrs r6, r6, #1     ; r6 >>= 1   C7\n    bne .justbit        ;            C8\n    \n    ; not just a bit - need new byte\n    adds r4, #1         ; r4++       C9\n    subs r5, #1         ; r5--       C10\n    bcc .stop           ; if (r5<0) goto .stop  C11\n.start:\n    movs r6, #0x80      ; reset mask C12\n    nop                 ;            C13\n\n.common:               ;             C13\n    str r1, [r2, #0]   ; pin := lo   C15\n    ; always re-load byte - it just fits with the cycles better this way\n    ldrb r0, [r4, #0]  ; r0 := *r4   C17\n    b .nextbit         ;             C20\n\n.justbit: ; C10\n    ; no nops, branch taken is already 3 cycles\n    b .common ; C13\n\n.stop:    \n    str r1, [r2, #0]   ; pin := lo\n    cpsie i            ; enable irq\n\n    pop {r4,r5,r6,r7,pc}\n","planetxbasic.ts":"/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#00B1ED  icon=\"\\uf005\" block=\"Connected\" blockId=\"PlanetX_Connected\"\n//% groups='[\"Digital\", \"Analog\", \"IIC Port\"]'\nnamespace Connected {\n    \n    ////////////////////////paj7620//////////////////////\n    let gesture_first_init = true\n    const initRegisterArray: number[] = [\n        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17,\n        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F,\n        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14,\n        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27,\n        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01,\n        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00,\n        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20,\n        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37,\n        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A,\n        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F,\n        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30,\n        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19,\n        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04,\n        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00,\n        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00,\n        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F,\n        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07,\n        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01,\n        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F,\n        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01,\n        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40,\n        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E,\n        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00,\n        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08,\n        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00,\n        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01,\n        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01,\n        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01\n    ];\n    \n    /////////////////////////color/////////////////////////\n    const APDS9960_ADDR = 0x39\n    const APDS9960_ENABLE = 0x80\n    const APDS9960_ATIME = 0x81\n    const APDS9960_CONTROL = 0x8F\n    const APDS9960_STATUS = 0x93\n    const APDS9960_CDATAL = 0x94\n    const APDS9960_CDATAH = 0x95\n    const APDS9960_RDATAL = 0x96\n    const APDS9960_RDATAH = 0x97\n    const APDS9960_GDATAL = 0x98\n    const APDS9960_GDATAH = 0x99\n    const APDS9960_BDATAL = 0x9A\n    const APDS9960_BDATAH = 0x9B\n    const APDS9960_GCONF4 = 0xAB\n    const APDS9960_AICLEAR = 0xE7\n    let color_first_init = false\n\n    function i2cwrite_color(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n    function i2cread_color(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n    function rgb2hsl(color_r: number, color_g: number, color_b: number): number {\n        let Hue = 0\n        let R = color_r * 100 / 255;\n        let G = color_g * 100 / 255;\n        let B = color_b * 100 / 255;\n        let maxVal = Math.max(R, Math.max(G, B))\n        let minVal = Math.min(R, Math.min(G, B))\n        let Delta = maxVal - minVal;\n\n        if (Delta < 0) {\n            Hue = 0;\n        }\n        else if (maxVal == R && G >= B) {\n            Hue = (60 * ((G - B) * 100 / Delta)) / 100;\n        }\n        else if (maxVal == R && G < B) {\n            Hue = (60 * ((G - B) * 100 / Delta) + 360 * 100) / 100;\n        }\n        else if (maxVal == G) {\n            Hue = (60 * ((B - R) * 100 / Delta) + 120 * 100) / 100;\n        }\n        else if (maxVal == B) {\n            Hue = (60 * ((R - G) * 100 / Delta) + 240 * 100) / 100;\n        }\n        return Hue\n    }\n    function initModule(): void {\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ATIME, 252)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_CONTROL, 0x03)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_GCONF4, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_AICLEAR, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x01)\n        color_first_init = true\n    }\n    function colorMode(): void {\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_ENABLE) | 0x2;\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, tmp);\n    }\n\n    ///////////////////////////////////////////////////////MP3\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    /*\n    * Play status selection button list\n    */\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(100)\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,        \n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum Distance_Unit_List {\n        //% block=\"cm\" \n        Distance_Unit_cm,\n\n        //% block=\"foot\"\n        Distance_Unit_foot,\n    }\n    export enum ButtonStateList {\n        //% block=\"C\"\n        C,\n        //% block=\"D\"\n        D,\n        //% block=\"C+D\"\n        CD\n    }\n    export enum GestureType {\n        //% block=\"None\"\n        None = 0,\n        //% block=\"Right\"\n        Right = 1,\n        //% block=\"Left\"\n        Left = 2,\n        //% block=\"Up\"\n        Up = 3,\n        //% block=\"Down\"\n        Down = 4,\n        //% block=\"Forward\"\n        Forward = 5,\n        //% block=\"Backward\"\n        Backward = 6,\n        //% block=\"Clockwise\"\n        Clockwise = 7,\n        //% block=\"Anticlockwise\"\n        Anticlockwise = 8,\n        //% block=\"Wave\"\n        Wave = 9\n    }\n    export enum ColorList {\n        //% block=\"Red\"\n        red,\n        //% block=\"Green\"\n        green,\n        //% block=\"Blue\"\n        blue,\n        //% block=\"Cyan\"\n        cyan,\n        //% block=\"Magenta\"\n        magenta,\n        //% block=\"Yellow\"\n        yellow,\n        //% block=\"White\"\n        white\n    }\n\n    ///////////////////////////////////blocks/////////////////////////////\n\n    //% blockId=\"readwaterLevel\" block=\"Water level sensor %Rjpin value(0~100)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function waterLevel(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        let voltage = 0, waterlevel = 0;\n        voltage = pins.map(\n            pins.analogReadPin(pin),\n            50,\n            600,\n            0,\n            100\n        );\n        if (voltage < 0) {\n            voltage = 0\n        }\n        waterlevel = voltage;\n        return Math.round(waterlevel)\n    }\n\n    let distance_last = 0\n\n    //% blockId=sonarbit block=\"Ultrasonic sensor pinT %tPin pinE %ePin distance %distance_unit\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% distance_unit.fieldEditor=\"gridpicker\"\n    //% distance_unit.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    export function ultrasoundSensor(tPin: DigitalPin, ePin: DigitalPin, distance_unit: Distance_Unit_List): number {\n        let pinT = tPin\n        let pinE = ePin\n        pins.setPull(pinT, PinPullMode.PullNone)\n        pins.digitalWritePin(pinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(pinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(pinT, 0)\n\n        // read pulse\n        let d = pins.pulseIn(pinE, PulseValue.High, 25000)\n        let version = control.hardwareVersion()\n        let distance = d * 34 / 2 / 1000\n        if (version == \"1\") {\n            distance = distance * 3 / 2\n        }\n\n        if (distance > 430) {\n            distance = 0\n        }\n\n        if (distance == 0) {\n            distance = distance_last\n            distance_last = 0\n        }\n        else {\n            distance_last = distance\n        }\n\n        switch (distance_unit) {\n            case Distance_Unit_List.Distance_Unit_cm:\n                return Math.floor(distance)  //cm\n                break\n            case Distance_Unit_List.Distance_Unit_foot:\n                return Math.floor(distance / 30.48)   //foot\n                break\n            default:\n                return 0\n        }\n    }\n\n    export class PAJ7620 {\n        private paj7620WriteReg(addr: number, cmd: number) {\n            let buf: Buffer = pins.createBuffer(2);\n            buf[0] = addr;\n            buf[1] = cmd;\n            pins.i2cWriteBuffer(0x73, buf, false);\n        }\n        private paj7620ReadReg(addr: number): number {\n            let buf: Buffer = pins.createBuffer(1);\n            buf[0] = addr;\n            pins.i2cWriteBuffer(0x73, buf, false);\n            buf = pins.i2cReadBuffer(0x73, 1, false);\n            return buf[0];\n        }\n        private paj7620SelectBank(bank: number) {\n            if (bank == 0) this.paj7620WriteReg(0xEF, 0);\n            else if (bank == 1) this.paj7620WriteReg(0xEF, 1);\n        }\n        private paj7620Init() {\n            let temp = 0;\n            this.paj7620SelectBank(0);\n            temp = this.paj7620ReadReg(0);\n            if (temp == 0x20) {\n                for (let i = 0; i < 438; i += 2) {\n                    this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);\n                }\n            }\n            this.paj7620SelectBank(0);\n        }\n        init() {\n            this.paj7620Init();\n            basic.pause(200);\n        }\n        read(): number {\n            let data = 0, result = 0;\n            data = this.paj7620ReadReg(0x43);\n            switch (data) {\n                case 0x01:\n                    result = GestureType.Right;\n                    break;\n                case 0x02:\n                    result = GestureType.Left;\n                    break;\n                case 0x04:\n                    result = GestureType.Up;\n                    break;\n                case 0x08:\n                    result = GestureType.Down;\n                    break;\n                case 0x10:\n                    result = GestureType.Forward;\n                    break;\n                case 0x20:\n                    result = GestureType.Backward;\n                    break;\n                case 0x40:\n                    result = GestureType.Clockwise;\n                    break;\n                case 0x80:\n                    result = GestureType.Anticlockwise;\n                    break;\n                default:\n                    data = this.paj7620ReadReg(0x44);\n                    if (data == 0x01)\n                        result = GestureType.Wave;\n                    break;\n            }\n            return result;\n        }\n    }\n    const gestureEventId = 3100;\n    let lastGesture = GestureType.None;\n    let paj7620 = new PAJ7620();\n    //% blockId= gesture_create_event block=\"Gesture sensor IIC port is %gesture\"\n    //% gesture.fieldEditor=\"gridpicker\" gesture.fieldOptions.columns=3\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function onGesture(gesture: GestureType, handler: () => void) {\n        control.onEvent(gestureEventId, gesture, handler);\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        control.inBackground(() => {\n            while (true) {\n                const gesture = paj7620.read();\n                if (gesture != lastGesture) {\n                    lastGesture = gesture;\n                    control.raiseEvent(gestureEventId, lastGesture);\n                }\n                basic.pause(200);\n            }\n        })\n    }\n\n    //% blockId= gesture_get_event block=\"Gesture sensor IIC port detects\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function getGesture(): number {\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        const gesture = paj7620.read();\n        return gesture\n    }\n\n\n\n\n    //% blockId=apds9960_readcolor block=\"Color sensor IIC port color HUE(0~360)\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function readColor(): number {\n        if (color_first_init == false) {\n            initModule()\n            colorMode()\n        }\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        while (!tmp) {\n            basic.pause(5);\n            tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        }\n        let c = i2cread_color(APDS9960_ADDR, APDS9960_CDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_CDATAH) * 256;\n        let r = i2cread_color(APDS9960_ADDR, APDS9960_RDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_RDATAH) * 256;\n        let g = i2cread_color(APDS9960_ADDR, APDS9960_GDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_GDATAH) * 256;\n        let b = i2cread_color(APDS9960_ADDR, APDS9960_BDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_BDATAH) * 256;\n        // map to rgb based on clear channel\n        let avg = c / 3;\n        r = r * 255 / avg;\n        g = g * 255 / avg;\n        b = b * 255 / avg;\n        //let hue = rgb2hue(r, g, b);\n        let hue = rgb2hsl(r, g, b)\n        return hue\n    }\n    //% block=\"Color sensor IIC port detects %color\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% color.fieldEditor=\"gridpicker\" color.fieldOptions.columns=3\n    export function checkColor(color: ColorList): boolean {\n        let hue = readColor()\n        switch (color) {\n            case ColorList.red:\n                if (hue > 330 || hue < 20) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.green:\n                if (hue > 120 && 180 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.blue:\n                if (hue > 210 && 270 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.cyan:\n                if (hue > 190 && 210 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.magenta:\n                if (hue > 260 && 330 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.yellow:\n                if (hue > 30 && 120 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.white:\n                if (hue >= 180 && 190 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n        }\n    }\n\n    //% blockId=\"potentiometer\" block=\"Trimpot %Rjpin analog value\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Input color=#E2C438 group=\"Analog\"\n    export function trimpot(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        return pins.analogReadPin(pin)\n    }\n    //% blockId=buttonab block=\"Button %Rjpin %button is pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonCD(Rjpin: DigitalRJPin, button: ButtonStateList): boolean {\n        let pinC = DigitalPin.P1\n        let pinD = DigitalPin.P2\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pinC = DigitalPin.P1\n                pinD = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pinC = DigitalPin.P2\n                pinD = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pinC = DigitalPin.P13\n                pinD = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pinC = DigitalPin.P15\n                pinD = DigitalPin.P16\n                break;\n            case DigitalRJPin.P3:\n                pinC = DigitalPin.P3\n                pinD = DigitalPin.P4\n                break;\n        }\n        pins.setPull(pinC, PinPullMode.PullUp)\n        pins.setPull(pinD, PinPullMode.PullUp)\n        if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 0 && button == ButtonStateList.CD) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinC) == 0 && pins.digitalReadPin(pinD) == 1 && button == ButtonStateList.C) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 1 && button == ButtonStateList.D) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    export enum ButtonState {\n        //% block=\"on\"\n        on = 1,\n        //% block=\"off\"\n        off = 2\n    }\n\n    const buttonEventSource = 5000\n    const buttonEventValue = {\n        CD_pressed: ButtonState.on,\n        CD_unpressed: ButtonState.off\n    }\n\n    //% block=\"on button %Rjpin %button pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=4\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonEvent(Rjpin: DigitalRJPin, button: ButtonStateList, handler: () => void) {\n        let ButtonPin_C = DigitalPin.P1\n        let ButtonPin_D = DigitalPin.P2\n        let pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P0\n        let pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                ButtonPin_C = DigitalPin.P1\n                ButtonPin_D = DigitalPin.P8\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P1\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P8\n                break;\n            case DigitalRJPin.J2:\n                ButtonPin_C = DigitalPin.P2\n                ButtonPin_D = DigitalPin.P12\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P2\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P12\n                break;\n            case DigitalRJPin.J3:\n                ButtonPin_C = DigitalPin.P13\n                ButtonPin_D = DigitalPin.P14\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P13\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P14\n                break;\n            case DigitalRJPin.J4:\n                ButtonPin_C = DigitalPin.P15\n                ButtonPin_D = DigitalPin.P16\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P15\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P16\n                break;\n            case DigitalRJPin.P3:\n                ButtonPin_C = DigitalPin.P3\n                ButtonPin_D = DigitalPin.P4\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P3\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P4\n                break;\n        }\n        if (button == ButtonStateList.C) {\n            pins.setPull(ButtonPin_C, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_C, PinEventType.Edge)\n            control.onEvent(pinEventSource_C, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.D) {\n            pins.setPull(ButtonPin_D, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_D, PinEventType.Edge)\n            control.onEvent(pinEventSource_D, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.CD) {\n            loops.everyInterval(50, function () {\n                if (pins.digitalReadPin(ButtonPin_C) == 0 && pins.digitalReadPin(ButtonPin_D) == 0) {\n                    control.raiseEvent(buttonEventSource, buttonEventValue.CD_pressed)\n                }\n            })\n            control.onEvent(buttonEventSource, buttonEventValue.CD_pressed, handler)\n        }\n    }\n\n    //% blockId=fans block=\"Motor fan %Rjpin toggle to $fanstate || speed %speed \\\\%\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% fanstate.shadow=\"toggleOnOff\"\n    //% subcategory=Excute group=\"Digital\" color=#EA5532\n    //% speed.min=0 speed.max=100\n    //% expandableArgumentMode=\"toggle\"\n    export function motorFan(Rjpin: DigitalRJPin, fanstate: boolean, speed: number = 100): void {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case DigitalRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n            case DigitalRJPin.J3:\n                pin = AnalogPin.P13\n                break;\n            case DigitalRJPin.J4:\n                pin = AnalogPin.P15\n                break;\n        }\n        if (fanstate) {\n            pins.analogSetPeriod(pin, 100)\n            pins.analogWritePin(pin, Math.map(speed, 0, 100, 0, 1023))\n        }\n        else {\n            pins.analogWritePin(pin, 0)\n            speed = 0\n        }\n    }\n\n\n    //% blockId=\"setLoopFolder\" block=\"loop play all the MP3s in the folder:$folderNum\"\n    //% folderNum.defl=\"01\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setLoopFolder(folderNum: string): void {\n        CMD = 0x17\n        para1 = 0\n        para2 = parseInt(folderNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    //% blockId=\"folderPlay\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum || repeatList: $myAns\"\n    //% folderNum.defl=\"01\" fileNum.defl=\"001\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function folderPlay(folderNum: string, fileNum: string, myAns: boolean = false): void {\n        CMD = 0x0F\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        if (myAns)\n            execute(0x19)\n    }\n\n    //% blockId=\"playFolderFilePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFilePort(folderNum: string, fileNum: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFolderFileVolumePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum with volume:$theVolume usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" theVolume.defl=\"10\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFileVolumePort(folderNum: string, fileNum: string, theVolume: string, Rjpin: DigitalRJPin): void {\n        \n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        \n        let volume = parseInt(theVolume)\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(200)\n\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"volumePort\" \n    //% block=\"set MP3 volume:$theVolume usingPin:$Rjpin\"\n    //% theVolume.defl=\"10\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function volumePort(theVolume: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        let volume = parseInt(theVolume)\n        if (volume > 30) {\n            volume = 30\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(300)\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n\n\n    //% blockId=\"setTracking\" \n    //% block=\"play the mp3 in order of:%tracking || repeatList: $myAns\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% tracking.defl=1\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setTracking(tracking: number, myAns: boolean = false): void {\n        CMD = 0x03\n        para1 = 0x00\n        para2 = tracking\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        execute(0x0D)\n        if (myAns)\n            execute(0x19)\n    }\n    //% blockId=MP3execute block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=\"setVolume\" block=\"Set volume(0~25):%volume\"\n    //% volume.min=0 volume.max=25\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setVolume(volume: number): void {\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 0x06\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=MP3setPort block=\"Set the MP3 port to %Rjpin\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function MP3SetPort(Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        setVolume(25)\n    }\n}","notlegos.ts":"// NotLegos Blocks\n//% block=\"Not LEGOs\" color=#0031AF weight=1000 icon=\"\\uf3a5\"\n//% groups='[\"MP3\",\"Sensors\"]'\nnamespace notLegos {\n\n\n/// BEGIN NEOPIXEL ///\n    export enum hues { red = 0, orange = 15, yellow = 40, lime = 85, green = 110, cyan = 170, blue = 240, purple = 260, pink = 310 }\n    export enum vfxEffect { parade = 0, fire = 1, indicate = 2, idle = 3, glow = 4, mine = 5, off = 6 }\n    let NeoSock: Strip = null; let NeoScore: Strip = null; let NeoWheel: Strip = null; let NeoKong: Strip = null; let NeoStrip: Strip = null; let NeoBrick: Strip = null\n    let vfx_mine_tog: number[] = []; let vfx_mine_hue: number[] = []; let vfx_mine_sat: number[] = []; let vfx_mine_lum: number[] = []\n    let vfx_fire_tog: number[] = []; let vfx_fire_hue: number[] = []; let vfx_fire_sat: number[] = []; let vfx_fire_lum: number[] = []; let vfx_fire_colors: number[] = []\n    let vfx_indicate_tog: number[] = []; let vfx_indicate_hue: number[] = []; let vfx_indicate_sat: number[] = []; let vfx_indicate_lum: number[] = [];\n    let vfx_idle_tog: number[] = []; let vfx_idle_hue: number[] = []; let vfx_idle_sat: number[] = []; let vfx_idle_lum: number[] = []\n    let vfx_glow_tog: number[] = []; let vfx_glow_hue: number[] = []; let vfx_glow_sat: number[] = []; let vfx_glow_lum: number[] = []\n    let vfx_active_tog: number[] = []; let vfx_active_hue: number[] = []; let vfx_active_sat: number[] = []; let vfx_active_lum: number[] = []\n    let vfx_off_hue: number[] = []; let vfx_off_sat: number[] = []; let vfx_off_lum: number[] = []\n    let vfx_parade_tog: number[] = []; let vfx_parade_hue: number[] = []; let vfx_parade_sat: number[] = []; let vfx_parade_lum: number[] = []; let vfx_parade_colors: number[] = [];\n    let vfx_last_tog: number[] = []; let vfx_last_hue: number[] = []; let vfx_last_sat: number[] = []; let vfx_last_lum: number[] = []\n    let vfx_master_tog: number[] = []; let vfx_master_hue: number[] = []; let vfx_master_sat: number[] = []; let vfx_master_lum: number[] = []; let vfx_master_effect: number[] = [];\n    let vfx_light_count = 0\n\n    //% shim=sendBufferAsm\n    function sendBuffer(buf: Buffer, pin: DigitalPin) { }\n\n    export class Strip {\n        buf: Buffer;\n        pin: DigitalPin;\n        start: number; // start offset in LED strip\n        _length: number; // number of LEDs\n\n        setPixelHSLPrecise(pixeloffset: number, h: number, s: number, l: number): void {\n            if (pixeloffset < 0 || pixeloffset >= this._length)\n                return;\n            pixeloffset = (pixeloffset + this.start) * 3\n            h = Math.clamp(0,1,h/360)\n            s = Math.clamp(0,1,s/100)\n            l = Math.clamp(0,1,l/100)\n            let r, g, b;\n            if (s === 0) {\n                r = g = b = l; // achromatic\n            } else {\n                const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n                const p = 2 * l - q;\n                let t = h + 1/3\n                if (t < 0) { t += 1; }\n                else if (t > 1) {t -= 1; }\n                if (t < 1/6) {r = p + (q - p) * 6 * t;}\n                else if (t < 1/2) {r = q;}\n                else if (t < 2/3) { r = p + (q - p) * (2/3 - t) * 6; }\n                else { r = p; }\n                t = h\n                if (t < 0) { t += 1; }\n                else if (t > 1) { t -= 1; }\n                if (t < 1 / 6) { g = p + (q - p) * 6 * t; }\n                else if (t < 1 / 2) { g = q; }\n                else if (t < 2 / 3) { g = p + (q - p) * (2/3 - t) * 6; }\n                else { g = p; }\n                t = h - 1/3\n                if (t < 0) { t += 1; }\n                else if (t > 1) { t -= 1; }\n                if (t < 1 / 6) { b = p + (q - p) * 6 * t; }\n                else if (t < 1/2) { b = q; }\n                else if (t < 2/3) { b = p + (q - p) * (2/3 - t) * 6; }\n                else { b = p; }\n            }\n            this.buf[pixeloffset + 0] = Math.round(g * 255);\n            this.buf[pixeloffset + 1] = Math.round(r * 255);\n            this.buf[pixeloffset + 2] = Math.round(b * 255);\n        }\n\n        // show() { sendBuffer(this.buf, this.pin); }  //Send all the changes to the strip.\n\n        show() { \n            sendBuffer(this.buf, DigitalPin.P16); \n            sendBuffer(this.buf, DigitalPin.P15);\n            sendBuffer(this.buf, DigitalPin.P14);\n            sendBuffer(this.buf, DigitalPin.P13);\n            sendBuffer(this.buf, DigitalPin.P12);\n            sendBuffer(this.buf, DigitalPin.P8);\n            sendBuffer(this.buf, DigitalPin.P2);\n        }  //Send all the changes to the strip.\n\n        length() { return this._length; }   //Gets the number of pixels declared on the strip\n\n        shift(offset: number = 1): void { this.buf.shift(-offset * 3, this.start * 3, this._length * 3) }   //Shift LEDs forward and clear with zeros.\n\n        rotate(offset: number = 1): void { this.buf.rotate(-offset * 3, this.start * 3, this._length * 3) } //Rotate LEDs forward\n\n        setPin(pin: DigitalPin): void {\n            this.pin = pin;\n            pins.digitalWritePin(this.pin, 0);  // don't yield to avoid races on initialization\n        }\n    }\n\n    function create(thePin: DigitalPin, numleds: number): Strip {\n        let strip = new Strip();\n        strip.buf = pins.createBuffer(numleds * 3);\n        strip.start = 0;\n        strip._length = numleds;\n        strip.setPin(thePin)\n        return strip;\n    }\n\n    //% blockId=NL_PIXEL_CastleSay\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Sock Circle:%sockPin  Wheel Strip/Circle:%wheelPin  Score Circle:%scorePin \"\n    //% weight=100\n    export function castleSayLights(sockPin: DigitalPin, wheelPin: DigitalPin, scorePin: DigitalPin): void {\n        NeoWheel = create(wheelPin, 17)\n        vfx_light_count = 17\n        vfxInit()\n        // vfx_indicate_hue[31] = hues.yellow\n        vfx_indicate_tog[1] = 1\n    }\n\n\n    function vfxInit(): void{\n        vfx_parade_colors = [hues.red, hues.orange, hues.yellow, hues.cyan, hues.blue, hues.purple]\n        vfx_fire_colors = [hues.red, hues.red, hues.red, hues.red, hues.orange, hues.orange, hues.orange, hues.orange, hues.orange, hues.yellow]\n        for (let index = 0; index < 6; index++) {\n            vfx_parade_tog.push(randint(0, 1))\n            vfx_parade_hue.push(vfx_parade_colors[randint(0, vfx_parade_colors.length - 1)])\n            vfx_parade_sat.push(100)\n            vfx_parade_lum.push(randint(10, 65))\n        }\n        for (let index = 0; index < 1; index++) {\n            vfx_mine_tog.push(0)\n            vfx_mine_hue.push(hues.red)\n            vfx_mine_sat.push(100)\n            vfx_mine_lum.push(50)\n            vfx_glow_tog.push(0)\n            vfx_glow_hue.push(50)\n            vfx_glow_sat.push(0)\n            vfx_glow_lum.push(0)\n            vfx_active_tog.push(0)\n            vfx_active_hue.push(50)\n            vfx_active_sat.push(0)\n            vfx_glow_lum.push(0)\n            vfx_off_hue.push(0)\n            vfx_off_sat.push(0)\n            vfx_off_lum.push(0)\n        }\n        for (let index = 0; index < 3; index++) {\n            vfx_fire_tog.push(randint(0, 1))\n            vfx_fire_hue.push(vfx_fire_colors[randint(0, vfx_fire_colors.length - 1)])\n            vfx_fire_sat.push(100)\n            vfx_fire_lum.push(randint(30, 80))\n        }\n        for (let index = 0; index < 2; index++) {\n            vfx_indicate_tog.push(0)\n            vfx_indicate_lum.push(50)\n            vfx_indicate_hue.push(50)\n            vfx_indicate_sat.push(100)\n            vfx_idle_tog.push(1)\n            if (index % 2 == 0) { vfx_idle_tog[index] = 0; }\n            vfx_idle_hue.push(265)\n            if (index % 2 == 0) { vfx_idle_hue[index] = 2; }\n            vfx_idle_sat.push(100)\n            vfx_idle_lum.push(50)\n        }\n        for (let index = 0; index < vfx_light_count; index++) {\n            vfx_master_tog.push(0)\n            vfx_master_hue.push(0)\n            vfx_master_sat.push(100)\n            vfx_master_lum.push(50)\n            vfx_master_effect.push(vfxEffect.off)    //leave this be!\n        }\n    }\n\n    //% blockId=NL_PIXEL_ResetVFX\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Reset VFX %effect\"\n    //% weight=100\n    export function vfxReset(effect:vfxEffect):void{\n        if (effect == vfxEffect.idle){\n            for (let index = 0; index < 2; index++) {\n                vfx_idle_tog[index]=1\n                if (index % 2 == 0) { vfx_idle_tog[index] = 0; }\n                vfx_idle_hue[index]=265\n                if (index % 2 == 0) { vfx_idle_hue[index] = 2; }\n                vfx_idle_sat[index]=100\n                vfx_idle_lum[index]=50\n            }\n        } else if (effect == vfxEffect.glow) {\n            for (let index = 0; index < 1; index++) {\n                vfx_glow_tog[index] = 0\n                vfx_glow_hue[index] = 50\n                // vfx_glow_sat[index] = 100\n                vfx_glow_lum[index] = 0\n            }\n        } else if (effect == vfxEffect.mine) {\n            for (let index = 0; index < 1; index++) {\n                vfx_mine_tog[index] = 0\n                vfx_mine_hue[index] = hues.red\n                vfx_mine_sat[index] = 100\n                vfx_mine_lum[index] = 50\n            }\n        } else if (effect == vfxEffect.indicate) {\n            for (let index = 0; index < 2; index++) {\n                vfx_indicate_tog[index] = 0\n                vfx_indicate_sat[index] = 100\n                vfx_indicate_lum[index] = 50\n            }\n        }\n    }\n\n    //% blockId=NL_PIXEL_CastleSayTick\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Advance Castle Say lights\"\n    //% weight=100\n    export function castleSayTick(): void {\n        paradeTick()\n        fireTick()\n        glowTick()\n        activeTick()\n        castleSayWrite()\n        indicateTick()\n        idleTick()\n        mineTick()\n    }\n\n    function paradeTick(): void{\n        for (let index=0; index < 6; index++){\n            let thisLum = vfx_parade_lum[index]\n            let thisHue = vfx_parade_hue[index]\n            let thisTog = vfx_parade_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0){\n                if (thisLum < 65){\n                    vfx_parade_lum[index] = thisLum + 12\n                } else if (thisLum >= 65){\n                    vfx_parade_tog[index] = 1\n                }\n            } else if (thisTog == 1){\n                if (thisLum>10){\n                    vfx_parade_lum[index] = thisLum - 4\n                } else if (thisLum <= 10){\n                    vfx_parade_tog[index] = 0\n                    while (nextHue == thisHue){\n                        nextHue = vfx_parade_colors[randint(0, vfx_parade_colors.length - 1)]\n                    }\n                    vfx_parade_hue[index] = nextHue\n                    vfx_parade_lum[index] = thisLum - randint(0,10)\n                }\n            }\n        }\n    }\n\n    function mineTick(): void {\n        for (let index = 0; index < 1; index++) {\n            let thisLum = vfx_mine_lum[index]\n            let thisHue = vfx_mine_hue[index]\n            let thisTog = vfx_mine_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 200) {\n                    vfx_mine_lum[index] = thisLum + 30\n                } else if (thisLum >= 200) {\n                    vfx_mine_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 0) {\n                    vfx_mine_lum[index] = thisLum - 30\n                } else if (thisLum <= 0) {\n                    vfx_mine_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function idleTick(): void {\n        for (let index = 0; index < 2; index++) {\n            let thisLum = vfx_idle_lum[index]\n            let thisHue = vfx_idle_hue[index]\n            let thisTog = vfx_idle_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisHue < 265) {\n                    vfx_idle_hue[index] = thisHue + 1\n                } else if (thisHue >= 265) {\n                    vfx_idle_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisHue > 2) {\n                    vfx_idle_hue[index] = thisHue - 1\n                } else if (thisHue <= 2) {\n                    vfx_idle_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function indicateTick(): void {\n        for (let index = 0; index < 2; index++) {\n            let thisLum = vfx_indicate_lum[index]\n            let thisHue = vfx_indicate_hue[index]\n            let thisTog = vfx_indicate_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 80) {\n                    vfx_indicate_lum[index] = thisLum + 12\n                } else if (thisLum >= 80) {\n                    vfx_indicate_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 25) {\n                    vfx_indicate_lum[index] = thisLum - 4\n                } else if (thisLum <= 25) {\n                    vfx_indicate_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function fireTick(): void {\n        for (let index = 0; index < 3; index++) {\n            let thisLum = vfx_fire_lum[index]\n            let thisHue = vfx_fire_hue[index]\n            let thisTog = vfx_fire_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 80) {\n                    vfx_fire_lum[index] = thisLum + 15\n                } else if (thisLum >= 80) {\n                    vfx_fire_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 30) {\n                    vfx_fire_lum[index] = thisLum - 5\n                } else if (thisLum <= 30) {\n                    vfx_fire_tog[index] = 0\n                    while (nextHue == thisHue) {\n                        nextHue = vfx_fire_colors[randint(0, vfx_fire_colors.length - 1)]\n                    }\n                    vfx_fire_hue[index] = nextHue\n                    vfx_fire_lum[index] = thisLum - randint(0, 30)\n                }\n            }\n        }\n    }\n\n    function glowTick(): void {\n        for (let index = 0; index < 1; index++) {\n            let thisLum = vfx_glow_lum[index]\n            if (thisLum < 4){\n                vfx_glow_lum[index] = thisLum+.2\n            } else if (thisLum < 5) {\n                vfx_glow_lum[index] = thisLum+ + .3\n            } else if (thisLum < 10) {\n                vfx_glow_lum[index] = thisLum + .5\n            } else if (thisLum < 15) {\n                vfx_glow_lum[index] = thisLum + 1\n            }else if (thisLum < 30) {\n                vfx_glow_lum[index] = thisLum + 1.5\n            } else if (thisLum < 100) {\n                vfx_glow_lum[index] = thisLum + 4\n            } else{\n                vfx_glow_lum[index] = 0\n            }\n        }\n    }\n\n    function activeTick(): void {\n        for (let index = 0; index < 1; index++) {\n            let thisLum = vfx_active_lum[index]\n            if (thisLum < 4) {\n                vfx_active_lum[index] = thisLum + .2\n            } else if (thisLum < 5) {\n                vfx_active_lum[index] = thisLum + + .3\n            } else if (thisLum < 10) {\n                vfx_active_lum[index] = thisLum + .5\n            } else if (thisLum < 15) {\n                vfx_active_lum[index] = thisLum + 1\n            } else if (thisLum < 30) {\n                vfx_active_lum[index] = thisLum + 1.5\n            } else if (thisLum < 100) {\n                vfx_active_lum[index] = thisLum + 4\n            } else {\n                vfx_active_lum[index] = 0\n            }\n        }\n    }\n\n    function vfxPrepareMaster(): void{\n        vfx_master_hue[0] = vfx_glow_hue[0]\n        vfx_master_sat[0] = vfx_glow_sat[0]\n        vfx_master_lum[0] = Math.min(100, vfx_glow_lum[0])\n        vfx_master_hue[1] = vfx_mine_hue[0]\n        vfx_master_sat[1] = vfx_mine_sat[0]\n        vfx_master_lum[1] = Math.max(0, Math.min(50, vfx_mine_lum[0]))\n        vfx_master_hue[2] = vfx_idle_hue[0]\n        vfx_master_sat[2] = vfx_idle_sat[0]\n        vfx_master_lum[2] = Math.max(0, Math.min(50, vfx_idle_lum[0]))\n        vfx_master_hue[3] = vfx_idle_hue[1]\n        vfx_master_sat[3] = vfx_idle_sat[1]\n        vfx_master_lum[3] = Math.max(0, Math.min(50, vfx_idle_lum[1]))\n        vfx_master_hue[4] = vfx_indicate_hue[0]\n        vfx_master_sat[4] = vfx_indicate_sat[0]\n        vfx_master_lum[4] = Math.max(0, Math.min(50, vfx_indicate_lum[0]))\n        vfx_master_hue[5] = vfx_indicate_hue[1]\n        vfx_master_sat[5] = vfx_indicate_sat[1]\n        vfx_master_lum[5] = Math.max(0, Math.min(50, vfx_indicate_lum[1]))\n        vfx_master_hue[6] = vfx_parade_hue[0]\n        vfx_master_sat[6] = vfx_parade_sat[0]\n        vfx_master_lum[6] = Math.max(0, Math.min(50, vfx_parade_lum[0]))\n        vfx_master_hue[7] = vfx_parade_hue[1]\n        vfx_master_sat[7] = vfx_parade_sat[1]\n        vfx_master_lum[7] = Math.max(0, Math.min(50, vfx_parade_lum[1]))\n        vfx_master_hue[8] = vfx_parade_hue[2]\n        vfx_master_sat[8] = vfx_parade_sat[2]\n        vfx_master_lum[8] = Math.max(0, Math.min(50, vfx_parade_lum[2]))\n        vfx_master_hue[9] = vfx_parade_hue[3]\n        vfx_master_sat[9] = vfx_parade_sat[3]\n        vfx_master_lum[9] = Math.max(0, Math.min(50, vfx_parade_lum[3]))\n        vfx_master_hue[10] = vfx_parade_hue[4]\n        vfx_master_sat[10] = vfx_parade_sat[4]\n        vfx_master_lum[10] = Math.max(0, Math.min(50, vfx_parade_lum[4]))\n        vfx_master_hue[11] = vfx_parade_hue[5]\n        vfx_master_sat[11] = vfx_parade_sat[5]\n        vfx_master_lum[11] = Math.max(0, Math.min(50, vfx_parade_lum[5]))\n        vfx_master_hue[12] = vfx_fire_hue[0]\n        vfx_master_sat[12] = vfx_fire_sat[0]\n        vfx_master_lum[12] = Math.max(0, Math.min(50, vfx_fire_lum[0]))\n        vfx_master_hue[13] = vfx_fire_hue[1]\n        vfx_master_sat[13] = vfx_fire_sat[1]\n        vfx_master_lum[13] = Math.max(0, Math.min(50, vfx_fire_lum[1]))\n        vfx_master_hue[14] = vfx_fire_hue[2]\n        vfx_master_sat[14] = vfx_fire_sat[2]\n        vfx_master_lum[14] = Math.max(0, Math.min(50, vfx_fire_lum[2]))\n        vfx_master_hue[15] = vfx_off_hue[0]\n        vfx_master_sat[15] = vfx_off_sat[0]\n        vfx_master_lum[15] = 0\n        vfx_master_hue[16] = vfx_active_hue[0]\n        vfx_master_sat[16] = vfx_active_sat[0]\n        vfx_master_lum[16] = Math.min(100, vfx_active_lum[0])\n    }\n\n    function castleSayWrite(): void{\n        vfxPrepareMaster()\n        let masterIndex = 0\n        for (let index = 0; index < NeoWheel.length(); index++) {\n            NeoWheel.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        NeoWheel.show()\n    }\n\n    //% blockId=NL_PIXEL_SetEffect\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Set %region VFX to %effect\"\n    //% weight=100\n    export function setEffect(region:vfxRegion, effect:vfxEffect){\n        if (region == vfxRegion.Score1){\n            vfx_master_effect[30] = effect\n        } else if (region == vfxRegion.Score2) {\n            vfx_master_effect[31] = effect\n        } else if (region == vfxRegion.Score3) {\n            vfx_master_effect[32] = effect\n        } else if (region == vfxRegion.Score4) {\n            vfx_master_effect[33] = effect\n        } else if (region == vfxRegion.Score5) {\n            vfx_master_effect[26] = effect\n        } else if (region == vfxRegion.Score6) {\n            vfx_master_effect[27] = effect\n        } else if (region == vfxRegion.Score7) {\n            vfx_master_effect[28] = effect\n        } else if (region == vfxRegion.Score8) {\n            vfx_master_effect[29] = effect\n        } else if (region == vfxRegion.ScoreAll) {\n            for (let i = 26; i <= 33; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SockAll) {\n            for (let i = 0; i <= 7; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelInner) {\n            for (let i = 18; i <= 25; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelOuter) {\n            for (let i = 8; i <= 17; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelAll) {\n            for (let i=8; i <= 25; i++){ vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.CastleSayAll) {\n            for (let i = 0; i <= 33; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotA) {\n            for (let i = 8; i <= 11; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotB) {\n            for (let i = 6; i <= 7; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotC) {\n            for (let i = 12; i <= 13; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotD) {\n            for (let i = 4; i <= 5; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotE) {\n            for (let i = 14; i <= 15; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotF) {\n            for (let i = 2; i <= 3; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotG) {\n            for (let i = 16; i <= 17; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotH) {\n            for (let i = 0; i <= 1; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotI) {\n            for (let i = 18; i <= 19; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotAll) {\n            for (let i = 0; i <= 19; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.BrickWheel) {\n            vfx_master_effect[20] = effect\n            vfx_master_effect[27] = effect\n        } else if (region == vfxRegion.BrickBomb) {\n            vfx_master_effect[25] = effect\n        } else if (region == vfxRegion.BrickShell) {\n            vfx_master_effect[26] = effect\n        } else if (region == vfxRegion.BrickGhost) {\n            vfx_master_effect[24] = effect\n        } else if (region == vfxRegion.BrickDragon) {\n            for (let i = 22; i <= 23; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.BrickCannon) {\n            vfx_master_effect[21] = effect\n        } else if (region == vfxRegion.BrickAll) {\n            for (let i = 20; i <= 27; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongFront) {\n            for (let i = 28; i <= 29; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongBack) {\n            for (let i = 30; i <= 31; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongAll) {\n            for (let i = 28; i <=31; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.CastleDoAll) {\n            for (let i = 0; i < vfx_light_count; i++) { vfx_master_effect[i] = effect };\n        } \n    }\n\n    export enum vfxRegion{\n        Score1, Score2, Score3, Score4, Score5, Score6, Score7, Score8, ScoreAll,\n        SockAll,\n        WheelInner, WheelOuter, WheelAll,\n        KongFront, KongBack, KongAll,\n        BrickWheel, BrickBomb, BrickShell, BrickGhost, BrickDragon, BrickCannon, BrickAll,\n        SpotA, SpotB, SpotC, SpotD, SpotE, SpotF, SpotG, SpotH, SpotI, SpotAll,\n        CastleSayAll,\n        CastleDoAll\n    }\n\n/// END NEOPIXEL ///\n\n\n/// BEGIN SONAR ///\n\n    let sonarPinT = DigitalPin.P0\n    let sonarPinE = DigitalPin.P0\n\n    //% blockId=NL_SENSOR_SonarFirstRead\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"first distance from sonar at %pin1|%pin2\"\n    //% weight=101\n    export function SonarFirstRead(pin1: DigitalPin, pin2: DigitalPin): number {\n        sonarPinT = pin1\n        sonarPinE = pin2\n        pins.setPull(sonarPinT, PinPullMode.PullNone)\n        return SonarNextRead()\n    }\n\n    //% blockId=NL_SENSOR_SonarNextRead\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"next sonar distance\"\n    //% weight=100\n    export function SonarNextRead(): number {\n        pins.digitalWritePin(sonarPinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(sonarPinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(sonarPinT, 0)\n        return Math.floor(pins.pulseIn(sonarPinE, PulseValue.High, 25000) * 34 / 2000)\n    }\n\n/// END SONAR ///\n\n\n/// BEGIN MP3 ///\n\n    export enum playType { Play = 0x0D, Stop = 0x16, PlayNext = 0x01, PlayPrevious = 0x02, Pause = 0x0E }\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    let mp3musicPin: SerialPin\n    let mp3music = false\n    let mp3player = false\n    let mp3sfxPin: SerialPin\n    let mp3sfx = false\n    let mp3musicVol = 0\n    let mp3playerPin: SerialPin\n    let mp3playerVol = 0\n    let mp3sfxVol = 0\n    let isPot = false\n    let potPin = AnalogPin.P0\n    let masterVolume = 25\n\n    //% blockId=NL_SENSOR_TrimpotSet\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"set volume control pot at %aPin\"\n    export function potSet(aPin: AnalogPin): void {\n        potPin = aPin\n        isPot = true\n        masterVolume = potRead()\n    }\n\n    function potRead() {\n        if (isPot) { return Math.round(pins.map(pins.analogReadPin(potPin), 0, 1023, 0, 30)) }\n        else { return 5 }\n    }\n\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) { total += dataArr[i] }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) { myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i]) }\n        serial.writeBuffer(myBuff)\n        basic.pause(20) // Was 100; problematic at 10\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) { myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i]) }\n        serial.writeBuffer(myBuff)\n    }\n\n    //% blockId=NL_MP3_InitiateAs\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Ready MP3bit for %type at %sPin\"\n    //% dPin.fieldEditor=\"gridpicker\"\n    export function mp3setPorts(mp3bit: mp3type, sPin: SerialPin): void {\n        if (mp3bit == mp3type.music) {\n            mp3musicPin = sPin\n            mp3music = true\n            mp3musicVol = 100\n            setVolume(mp3type.music, mp3musicVol)\n        } else if (mp3bit == mp3type.player) {\n            mp3playerPin = sPin\n            mp3player = true\n            mp3playerVol = 100\n            setVolume(mp3type.player, mp3playerVol)\n        } else if (mp3bit == mp3type.sfxvoice) {\n            mp3sfxPin = sPin\n            mp3sfx = true\n            mp3sfxVol = 100\n            setVolume(mp3type.sfxvoice, mp3sfxVol)\n        }   \n    }\n\n    //% blockId=\"nl_playfilefolder\" \n    //% block=\"Play folder %folderNum file %fileNum on %sPin\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3fileFolder(folderNum: string, fileNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        dataArr[5] = parseInt(folderNum)\n        dataArr[6] = parseInt(fileNum)\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"NL_MP3_SendNumbers\" \n    //% block=\"Send numbers for folder %folderNum file %fileNum on %sPin\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3numbers(folderNum: number, fileNum: number, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        dataArr[3] = 15\n        dataArr[5] = folderNum\n        dataArr[6] = fileNum\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=NL_MP3_UpdateVolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Update volume for all\"\n    export function updateVolumeGlobal(): void {\n        let nowVol = potRead()\n        if (masterVolume != nowVol){\n            masterVolume = nowVol\n            setVolume(mp3type.music, mp3musicVol)\n            setVolume(mp3type.player, mp3playerVol)\n            setVolume(mp3type.sfxvoice, mp3sfxVol)\n        }\n    }\n\n    //% blockId=NL_MP3_SetVolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Set %mp3bit volume to %vol\"\n    export function setVolume(mp3bit:mp3type, vol:number): void {\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3musicVol = vol\n        } else if (mp3bit == mp3type.player) {\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3playerVol = vol\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3sfxVol = vol\n        }\n        dataArr[3] = 6\n        dataArr[5] = 0\n        dataArr[6] = Math.round(vol / 100 * masterVolume)\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=NL_MP3_GetVolumes\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Get current volumes\"\n    export function getVolumes() {\n        return \"m\" + mp3musicVol + \" p\" + mp3playerVol + \" s\" + mp3sfxVol + \" g\" + masterVolume\n    }\n\n    //% blockId=\"NL_MP3_StopPlayback\" \n    //% block=\"Stop playback on %mp3bit\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function stopPlayback(mp3bit:mp3type): void {\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        } else if (mp3bit == mp3type.player){\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        }\n        CMD = 0x16\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n/// END MP3 ///\n\n/// BEGIN SOUND BANK ///\n    export enum mp3type { music, player, sfxvoice }\n    export enum musicGenre { intro, tutorial, awaiting, level, won, lost }\n    export enum playerSaying { ready, yay, intro, nay, ouch, success, failure, won, lost, hurry }\n    export enum sfxType { correct, incorrect, ghost, fire, explosion, splash, spark, slash }\n    export enum voiceSaying { name, begin, retry, next, complete, gameover, welcome, intro, howto1, howto2, howto3, howto4, howto5, howto6, howto7, howto8, howto9 }\n    export enum magicianSaysSide { left, right }\n    export enum magicianDifficulty { easy, medium, hard }\n    export enum spotName { A, B, C, D, E, F, G, H, I }\n    export enum playerChar { mario, luigi, peach, daisy, toad, wario }\n\n    let sb_music_tutorial = feedBank(\"1.1.46|1.2.51|1.3.51|1.4.59|1.5.60|1.6.60|1.7.60|1.8.60|1.9.60|1.10.60|1.11.60|1.12.60|1.13.60|1.14.60|1.15.60|1.16.60|1.17.60|1.18.60|1.19.60|1.20.60|1.21.60\")\n    let sb_music_awaiting = feedBank(\"2.1.64|2.2.120|2.3.120|2.4.120|2.5.120|2.6.114|2.7.120|2.8.103|2.9.120|2.10.120|2.11.120|2.12.120|2.13.119|2.14.120|2.15.120|2.16.103|2.17.119|2.18.120|2.19.86|2.20.120\")\n    let sb_music_level = feedBank(\"3.1.120|3.2.120|3.3.120|3.4.120|3.5.120|3.6.120|3.7.120|3.8.120|3.9.120|3.10.92|3.11.120|3.12.120|3.13.111|3.14.116|3.15.98|3.16.120|3.17.120|3.18.82|3.19.120|3.20.120|3.21.120|3.22.120|3.23.120|3.24.120|3.25.120|3.26.120|3.27.91|3.28.120|3.29.120|3.30.41|3.31.120|3.32.120|3.33.120|3.34.94|3.35.120|3.36.120|3.37.120|3.38.120|3.39.120|3.40.120|3.41.78|3.42.120|3.43.120|3.44.120|3.45.120|3.46.120|3.47.120|3.48.120|3.49.120|3.50.120|3.51.120|3.52.113|3.53.120|3.54.120|3.55.42|3.56.120|3.57.120|3.58.120|3.59.114|3.60.120|3.61.120|3.62.118|3.63.120|3.64.120|3.65.120|3.66.120|3.67.120|3.68.59|3.69.120|3.70.120|3.71.118|3.72.120|3.73.120|3.74.70|3.75.120|3.76.120|3.77.120|3.78.120|3.79.120|3.80.120|3.81.120|3.82.120|3.83.80|3.84.120|3.85.120|3.86.120|3.87.120|3.88.107|3.89.120|3.90.120|3.91.120|3.92.120|3.93.36|3.94.120|3.95.120|3.96.120|3.97.120|3.98.120|3.99.120|3.100.63|3.101.120|3.102.120|3.103.112|3.104.105|3.105.120|3.106.110|3.107.120|3.108.120|3.109.120|3.110.120|3.111.120|3.112.120|3.113.120|3.114.120|3.115.120|3.116.119|3.117.120|3.118.120|3.119.120|3.120.120|3.121.120|3.122.120|3.123.120|3.124.120|3.125.120|3.126.104|3.127.120|3.128.87|3.129.120|3.130.118|3.131.120|3.132.120|3.133.50|3.134.109|3.135.120|3.136.120|3.137.120|3.138.91|3.139.120|3.140.120|3.141.120|3.142.120|3.143.120|3.144.120|3.145.104|3.146.112|3.147.120\")\n    let sb_music_won = feedBank(\"4.1.30|4.2.22|4.3.30|4.4.17|4.5.29|4.6.30|4.7.30|4.8.30|4.9.30|4.10.30|4.11.20|4.12.28|4.13.30|4.14.15|4.15.30|4.16.17|4.17.17|4.18.15|4.19.30|4.20.30|4.21.30|4.22.17|4.23.30|4.24.30|4.25.30\")\n    let sb_music_lost = feedBank(\"5.1.30|5.2.30|5.3.30|5.4.30|5.5.30|5.6.30|5.7.30|5.8.30|5.9.30|5.10.30|5.11.30\")\n    let sb_music_intro = feedBank(\"9.1.3|9.2.4|9.3.8|9.4.5|9.5.4|9.6.12|9.7.3|9.8.7|9.9.6|9.10.7|9.11.9|9.12.9|9.13.11|9.14.3|9.15.10|9.16.3|9.17.6|9.18.5|9.19.6|9.20.5|9.21.7|9.22.5|9.23.3|9.24.7|9.25.6|9.26.6|9.27.11|9.28.5|9.29.5|9.30.4|9.31.6|9.32.4|9.33.4|9.34.10|9.35.8|9.36.8|9.37.3|9.38.7|9.39.4|9.40.6|9.41.3|9.42.7|9.43.7|9.44.3|9.45.6|9.46.1|9.47.2|9.48.2|9.49.8|9.50.16|9.51.9|9.52.10|9.53.13|9.54.14|9.55.14|9.56.16|9.57.7|9.58.4|9.59.9|9.60.8|9.61.9|9.62.9|9.63.12|9.64.4|9.65.6|9.66.9|9.67.5|9.68.6|9.69.5|9.70.10|9.71.8|9.72.8|9.73.5|9.74.3\")\n    let sb_sfx_correct = feedBank(\"6.1.5|6.2.8|6.3.6|6.4.7|6.5.6|6.6.14|6.7.7|6.8.8|6.9.12|6.10.7|6.11.9|6.12.7|6.13.10|6.14.8|6.15.8|6.16.4|6.17.7|6.18.4|6.19.2|6.20.10|6.21.7|6.22.7|6.23.6|6.24.4|6.25.7|6.26.12|6.27.4|6.28.6|6.29.6|6.30.6|6.31.4|6.32.5|6.33.3|6.34.6|6.35.6|6.36.6|6.37.6|6.38.4|6.39.8|6.40.6|6.41.3|6.42.3|6.43.7|6.44.8|6.45.6|6.46.2|6.47.5|6.48.7|6.49.8|6.50.7|6.51.6|6.52.7|6.53.6|6.54.8|6.55.5|6.56.5|6.57.7|6.58.6|6.59.8|6.60.5|6.61.6|6.62.8|6.63.3|6.64.3|6.65.6|6.66.3|6.67.6|6.68.2|6.69.3|6.70.3|6.71.2|6.72.3|6.73.6|6.74.7|6.75.5|6.76.3|6.77.5|6.78.3|6.79.2|6.80.3|6.81.3|6.82.1|6.83.1|6.84.1|6.85.1|6.86.1|6.87.1|6.88.3|6.89.1|6.90.1|6.91.4|6.92.4\")\n    let sb_sfx_incorrect = feedBank(\"7.1.6|7.2.5|7.3.3|7.4.5|7.5.7|7.6.6|7.7.4|7.8.1|7.9.3|7.10.4|7.11.3|7.12.3|7.13.6|7.14.3|7.15.1|7.16.1|7.17.1|7.18.1|7.19.5|7.20.4|7.21.3|7.22.7\")\n    let sb_sfx_beep = feedBank(\"8.1.1|8.2.2|8.3.1\")\n    let sb_sfx_smash = feedBank(\"8.4.1|8.5.1|8.6.1|8.7.3\")\n    let sb_sfx_falling = feedBank(\"8.8.6\")\n    let sb_sfx_boom = feedBank(\"8.9.1|8.10.2|8.11.3|8.12.2\")\n    let sb_sfx_cannon = feedBank(\"8.13.2|8.14.1|8.15.1|8.16.2|8.17.2\")\n    let sb_sfx_fire = feedBank(\"8.18.2|8.19.2|8.20.5|8.21.2\")\n    let sb_sfx_ghost = feedBank(\"8.22.5|8.23.4|8.24.5|8.25.5\")\n    let sb_sfx_hit = feedBank(\"8.26.1|8.27.1|8.28.1|8.29.1|8.30.1\")\n    let sb_sfx_slash = feedBank(\"8.31.1|8.32.1|8.33.1|8.34.1|8.35.1|8.36.1|8.37.1|8.38.1|8.39.1|8.40.1|8.41.1|8.42.2\")\n    let sb_sfx_zap = feedBank(\"8.43.1|8.44.1|8.45.2|8.46.1|8.47.2|8.48.1\")\n    let sb_sfx_splash = feedBank(\"8.49.2|8.50.2|8.51.1|8.52.1|8.53.2|8.54.1|8.55.2|8.56.1|8.57.2\")\n    let sb_sfx_voice = feedBank(\"10.1.4|10.2.6|10.3.4|10.4.4|10.5.6|10.6.4|10.7.11|10.8.6|10.9.4|10.10.1\")\n    let sb_magician_left_easy = feedBank(\"11.1.3|11.2.6|11.3.7|11.4.6|11.5.6|11.6.7|11.7.6|11.8.6|11.9.6|11.10.7|11.11.6|11.12.6|11.13.7|11.14.6|11.15.6|11.16.6|11.17.6|11.18.6|11.19.6|11.20.6|11.21.6|11.22.7|11.23.6|11.24.6|11.25.6|11.26.6|11.27.7|11.28.7|11.29.7|11.30.6|11.31.6|11.32.8|11.33.7|11.34.6|11.35.7|11.36.5|11.37.6|11.38.8|11.39.6|11.40.6|11.41.6|11.42.6|11.43.6|11.44.7|11.45.6|11.46.7|11.47.7|11.48.8|11.49.6|11.50.7|11.51.6|11.52.6|11.53.7|11.54.8|11.55.7|11.56.6|11.57.7|11.58.6|11.59.6|11.60.6|11.61.6\")\n    let sb_magician_left_medium = feedBank(\"11.62.7|11.63.6|11.64.6|11.65.8|11.66.7|11.67.8|11.68.8|11.69.8|11.70.7|11.71.7|11.72.6|11.73.6|11.74.6|11.75.6|11.76.6|11.77.7|11.78.6|11.79.7|11.80.6|11.81.6|11.82.6|11.83.7|11.84.6|11.85.6|11.86.6|11.87.7|11.88.6|11.89.6|11.90.7|11.91.6|11.92.6|11.93.6|11.94.6|11.95.6|11.96.7|11.97.6|11.98.6|11.99.7|11.100.6|11.101.6|11.102.6|11.103.7|11.104.6|11.105.8|11.106.6|11.107.6|11.108.6|11.109.7|11.110.6|11.111.7|11.112.7|11.113.6|11.114.6|11.115.7|11.116.6|11.117.7|11.118.7|11.119.6|11.120.6|11.121.6|11.122.7|11.123.7|11.124.6|11.125.6|11.126.6|11.127.8|11.128.7|11.129.6|11.130.8|11.131.7|11.132.6|11.133.7|11.134.6|11.135.6|11.136.7|11.137.7\")\n    let sb_magician_left_hard = feedBank(\"11.219.7|11.220.6|11.221.6|11.222.6|11.223.6|11.224.6|11.225.7|11.226.7|11.227.6|11.228.6|11.229.6|11.230.8|11.231.7|11.232.7|11.233.6|11.234.6|11.235.6|11.236.8|11.237.7|11.238.7|11.239.6|11.240.6|11.241.8|11.242.7|11.243.7|11.244.6|11.245.6|11.246.7|11.247.7|11.248.7|11.249.7|11.250.6|11.251.6|11.252.6|11.253.6|11.254.6|11.255.6|11.256.6|11.257.6|11.258.7|11.259.7|11.260.7|11.261.6|11.262.6|11.263.6|11.264.6|11.265.6|11.266.6|11.267.7|11.268.6|11.269.6|11.270.6|11.271.6|11.272.6|11.273.6|11.274.6|11.275.7|11.276.6|11.277.6|11.278.7|11.279.7|11.280.7|11.281.6|11.282.6|11.283.7|11.284.9|11.285.7|11.286.6|11.287.6|11.288.6|11.289.7|11.290.7|11.291.6|11.292.6|11.293.7|11.294.7|11.295.6|11.296.7|11.297.6|11.298.6|11.299.6|11.300.6|11.301.6|11.302.6|11.303.7|11.304.6|11.305.6|11.306.7|11.307.6|\")\n    let sb_magician_right_easy = feedBank(\"11.159.6|11.160.6|11.161.7|11.162.6|11.163.7|11.164.7|11.165.6|11.166.6|11.167.7|11.168.7|11.169.6|11.170.8|11.171.7|11.172.7|11.173.6|11.174.6|11.175.6|11.176.6|11.177.7|11.178.6|11.179.6|11.180.6|11.181.6|11.182.7|11.183.6|11.184.6|11.185.6|11.186.6|11.187.8|11.188.7|11.189.6|11.190.6|11.191.6|11.192.6|11.193.6|11.194.6|11.195.5|11.196.6|11.197.6|11.198.6|11.199.7|11.200.6|11.201.6|11.202.6|11.203.6|11.204.6|11.205.6|11.206.6|11.207.6|11.208.6|11.209.6|11.210.7|11.211.7|11.212.7|11.213.6|11.214.7|11.215.7|11.216.6|11.217.7|11.218.6\")\n    let sb_magician_right_medium = feedBank(\"11.219.7|11.220.6|11.221.6|11.222.6|11.223.6|11.224.6|11.225.7|11.226.7|11.227.6|11.228.6|11.229.6|11.230.8|11.231.7|11.232.7|11.233.6|11.234.6|11.235.6|11.236.8|11.237.7|11.238.7|11.239.6|11.240.6|11.241.8|11.242.7|11.243.7|11.244.6|11.245.6|11.246.7|11.247.7|11.248.7|11.249.7|11.250.6|11.251.6|11.252.6|11.253.6|11.254.6|11.255.6|11.256.6|11.257.6|11.258.7|11.259.7|11.260.7|11.261.6|11.262.6|11.263.6|11.264.6|11.265.6|11.266.6|11.267.7|11.268.6|11.269.6|11.270.6|11.271.6|11.272.6|11.273.6|11.274.6|11.275.7|11.276.6|11.277.6|11.278.7|11.279.7|11.280.7|11.281.6|11.282.6|11.283.7|11.284.9|11.285.7|11.286.6|11.287.6\")\n    let sb_magician_right_hard = feedBank(\"11.288.6|11.289.7|11.290.7|11.291.6|11.292.6|11.293.7|11.294.7|11.295.6|11.296.7|11.297.6|11.298.6|11.299.6|11.300.6|11.301.6|11.302.6|11.303.7|11.304.6|11.305.6|11.306.7|11.307.6|11.308.7|11.309.6|11.310.6|11.311.6|11.312.7|11.313.7|11.314.6|11.315.7\")\n    let sb_mario_name = feedBank(\"12.1.2|12.2.1|12.4.2|12.5.3\")\n    let sb_mario_intro = feedBank(\"12.3.4|12.6.2|12.7.212.112.1|12.113.1|\")\n    let sb_mario_ready = feedBank(\"12.8.1|12.9.2|12.10.2|12.11.1|12.12.1|12.13.2|12.14.2|12.15.2|12.16.2|12.17.2|12.18.1\")\n    let sb_mario_yay = feedBank(\"12.19.1|12.20.1|12.21.1|12.22.1|12.23.1|12.24.1|12.25.1|12.26.1|12.27.1|12.28.1|12.29.1|12.30.1|12.31.1|12.32.1|12.33.1|12.34.1|12.35.1|12.36.1|12.37.1|12.38.1|12.39.1|12.40.1|12.41.1|12.42.1|12.43.1|12.44.1|12.45.1|12.46.1|12.47.1|12.48.1|12.49.1|12.50.1|12.51.2|12.52.2|12.53.2|12.54.2|12.55.2|12.56.2|12.57.2|12.58.2|12.59.2|12.60.2|12.61.2|12.62.2\")\n    let sb_mario_success = feedBank(\"12.63.1|12.64.2|12.65.2|12.66.2|12.67.2|12.68.3|12.69.3|12.70.3|12.71.3|12.72.3\")\n    let sb_mario_won = feedBank(\"12.73.2|12.74.2|12.75.3|12.76.3|12.77.3\")\n    let sb_mario_ouch = feedBank(\"12.78.1|12.79.1|12.80.1|12.81.1|12.82.1|12.83.1|12.84.1|12.85.1|12.86.1|12.87.1|12.88.1|12.89.1|12.90.1|12.91.1|12.92.1|12.93.1|12.94.1|12.95.1\")\n    let sb_mario_nay = feedBank(\"12.96.1|12.97.1|12.98.1|12.99.1|12.100.1|12.101.1|12.102.2|12.103.1|12.104.1|12.105.1|12.106.1|12.107.1|12.108.1|12.109.1|12.110.2|12.111.2\")\n    let sb_mario_failure = feedBank(\"12.114.2|12.115.2|12.116.2|12.117.1\")\n    let sb_mario_lost = feedBank(\"12.118.3|12.119.3|12.120.4|12.121.1\")\n    let sb_mario_hurry = feedBank(\"12.122.44\")\n    \n    let playlist_tutorial = makePlaylist(sb_music_tutorial)\n    let playlist_awaiting = makePlaylist(sb_music_awaiting)\n    let playlist_level = makePlaylist(sb_music_level)\n    let playlist_won = makePlaylist(sb_music_won)\n    let playlist_lost = makePlaylist(sb_music_lost)\n    let playlist_correct = makePlaylist(sb_sfx_correct)\n    let playlist_incorrect = makePlaylist(sb_sfx_incorrect)\n    let playlist_intro = makePlaylist(sb_music_intro)\n    let playlist_boom = makePlaylist(sb_sfx_boom)\n    let playlist_smash = makePlaylist(sb_sfx_smash)\n    let playlist_falling = makePlaylist(sb_sfx_falling)\n    let playlist_cannon = makePlaylist(sb_sfx_cannon)\n    let playlist_fire = makePlaylist(sb_sfx_fire)\n    let playlist_ghost = makePlaylist(sb_sfx_ghost)\n    let playlist_hit = makePlaylist(sb_sfx_hit)\n    let playlist_slash = makePlaylist(sb_sfx_slash)\n    let playlist_zap = makePlaylist(sb_sfx_zap)\n    let playlist_splash = makePlaylist(sb_sfx_splash)\n    let playlist_magician_left_easy = makePlaylist(sb_magician_left_easy)\n    let playlist_magician_left_medium = makePlaylist(sb_magician_left_medium)\n    let playlist_magician_left_hard = makePlaylist(sb_magician_left_hard)\n    let playlist_magician_right_easy = makePlaylist(sb_magician_right_easy)\n    let playlist_magician_right_medium = makePlaylist(sb_magician_right_medium)\n    let playlist_magician_right_hard = makePlaylist(sb_magician_right_hard)\n    let playlist_mario_name = makePlaylist(sb_mario_name)\n    let playlist_mario_intro = makePlaylist(sb_mario_intro)\n    let playlist_mario_ready = makePlaylist(sb_mario_ready)\n    let playlist_mario_yay = makePlaylist(sb_mario_yay)\n    let playlist_mario_success = makePlaylist(sb_mario_success)\n    let playlist_mario_won = makePlaylist(sb_mario_won)\n    let playlist_mario_ouch = makePlaylist(sb_mario_ouch)\n    let playlist_mario_nay = makePlaylist(sb_mario_nay)\n    let playlist_mario_failure = makePlaylist(sb_mario_failure)\n    let playlist_mario_lost = makePlaylist(sb_mario_lost)\n    let playlist_mario_hurry = makePlaylist(sb_mario_hurry)\n    let playtimeMusic = 0\n    let playtimePlayer = 0\n    let playtimeSfxVoice = 0\n\n    function takeRotate(PlaylistIn: number[]) {\n        let returnTrack = PlaylistIn.shift()\n        PlaylistIn.push(returnTrack)\n        return returnTrack\n    }\n    function feedBank(BankString: string) {\n        let returnBank: number[][] = []\n        let BankSplit = BankString.split(\"|\")\n        for (let soundString of BankSplit) {\n            returnBank.push([parseFloat(soundString.split(\".\")[0]), parseFloat(soundString.split(\".\")[1]), parseFloat(soundString.split(\".\")[2])])\n        }\n        return returnBank\n    }\n    function makePlaylist(SoundBank: any[]) {\n        let returnList: number[] = []\n        let orderedList: number[] = []\n        for (let soundNo = 0; soundNo <= SoundBank.length - 1; soundNo++) {\n            orderedList.push(soundNo)\n        }\n        while (orderedList.length > 0) {\n            let randTrack = randint(0, orderedList.length - 1)\n            returnList.push(orderedList.removeAt(randTrack))\n        }\n        return returnList\n    }\n    function bankPlay(mp3bit:mp3type, SoundBank: number[][], trackIndex: number) {\n        let theSong = SoundBank[trackIndex]\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimeMusic = theSong[2]\n        } else if (mp3bit == mp3type.player) {\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimePlayer = theSong[2]\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimeSfxVoice = theSong[2]\n        }\n        dataArr[3] = 15\n        dataArr[5] = theSong[0]\n        dataArr[6] = theSong[1]\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=NL_MP3_PlaytimeMusic\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of music\"\n    export function mp3durationMusic(): number{\n        return playtimeMusic\n    }\n\n    //% blockId=NL_MP3_PlaytimePlayer\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of player sound\"\n    export function mp3durationPlayer(): number {\n        return playtimePlayer\n    }\n\n    //% blockId=NL_MP3_PlaytimeSFX\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of sfx/voice\"\n    export function mp3durationSfxVoice(): number {\n        return playtimeSfxVoice\n    }\n\n\n\n    //% blockId=NL_MP3_MusicPlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %genre music\"\n    export function mp3musicPlay(genre: musicGenre): void {\n        if (genre == musicGenre.tutorial){\n            bankPlay(mp3type.music, sb_music_tutorial, takeRotate(playlist_tutorial))\n        } else if (genre == musicGenre.awaiting) {\n            bankPlay(mp3type.music, sb_music_awaiting, takeRotate(playlist_awaiting))\n        } else if (genre == musicGenre.intro){\n            bankPlay(mp3type.music, sb_music_intro, takeRotate(playlist_intro))\n        } else if (genre == musicGenre.level) {\n            bankPlay(mp3type.music, sb_music_level, takeRotate(playlist_level))\n        } else if (genre == musicGenre.won) {\n            bankPlay(mp3type.music, sb_music_won, takeRotate(playlist_won))\n        } else if (genre == musicGenre.lost) {\n            bankPlay(mp3type.music, sb_music_lost, takeRotate(playlist_lost))\n        }\n    }\n\n    //% blockId=NL_MP3_PlayerSay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %saying as player\"\n    export function mp3sayPlay(saying: playerSaying): void {\n        if(saying == playerSaying.ready){\n            bankPlay(mp3type.player, sb_mario_ready, takeRotate(playlist_mario_ready))\n        }else if (saying == playerSaying.yay){\n            bankPlay(mp3type.player, sb_mario_yay, takeRotate(playlist_mario_yay))\n        } else if (saying == playerSaying.intro) {\n            bankPlay(mp3type.player, sb_mario_intro, takeRotate(playlist_mario_intro))\n        } else if (saying == playerSaying.nay) {\n            bankPlay(mp3type.player, sb_mario_nay, takeRotate(playlist_mario_nay))\n        } else if (saying == playerSaying.ouch) {\n            bankPlay(mp3type.player, sb_mario_ouch, takeRotate(playlist_mario_ouch))\n        } else if (saying == playerSaying.success) {\n            bankPlay(mp3type.player, sb_mario_success, takeRotate(playlist_mario_success))\n        } else if (saying == playerSaying.failure) {\n            bankPlay(mp3type.player, sb_mario_failure, takeRotate(playlist_mario_failure))\n        } else if (saying == playerSaying.won) {\n            bankPlay(mp3type.player, sb_mario_won, takeRotate(playlist_mario_won))\n        } else if (saying == playerSaying.lost) {\n            bankPlay(mp3type.player, sb_mario_lost, takeRotate(playlist_mario_lost))\n        } else if (saying == playerSaying.hurry) {\n            bankPlay(mp3type.player, sb_mario_hurry, takeRotate(playlist_mario_hurry))\n        }\n    }\n\n    //% blockId=NL_MP3_VoicePlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %voice as voice\"\n    export function mp3voicePlay(voice: voiceSaying): void {\n        if (voice == voiceSaying.name) {\n\n        } else if (voice == voiceSaying.begin) {\n\n        } else if (voice == voiceSaying.retry) {\n\n        } else if (voice == voiceSaying.next) {\n\n        } else if (voice == voiceSaying.complete) {\n\n        } else if (voice == voiceSaying.gameover) {\n\n        } else if (voice == voiceSaying.welcome) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 0)\n        } else if (voice == voiceSaying.intro) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 1)\n        } else if (voice == voiceSaying.howto1) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 2)\n        } else if (voice == voiceSaying.howto2) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 3)\n        } else if (voice == voiceSaying.howto3) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 4)\n        } else if (voice == voiceSaying.howto4) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 5)\n        } else if (voice == voiceSaying.howto5) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 6)\n        } else if (voice == voiceSaying.howto6) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 7)\n        } else if (voice == voiceSaying.howto7) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 8)\n        } else if (voice == voiceSaying.howto8) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 9)\n        } else if (voice == voiceSaying.howto9) {\n\n        }\n    }\n\n    //% blockId=NL_MP3_MagicianSay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Magician says on the %side difficulty %difficulty\"\n    export function mp3magician(side: magicianSaysSide, difficulty: magicianDifficulty): void {\n        if (side == magicianSaysSide.left) {\n            if (difficulty == magicianDifficulty.easy) {\n\n            } else if (difficulty = magicianDifficulty.medium) {\n\n            } else if (difficulty = magicianDifficulty.hard) {\n\n            }\n        } else if (side = magicianSaysSide.right) {\n            if (difficulty == magicianDifficulty.easy) {\n\n            } else if (difficulty = magicianDifficulty.medium) {\n\n            } else if (difficulty = magicianDifficulty.hard) {\n\n            }\n        } \n    }\n\n    //% blockId=NL_MP3_SfxPlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %sfx sound effect\"\n    export function mp3sfxPlay(sfx: sfxType): void {\n        if(sfx == sfxType.correct){\n            bankPlay(mp3type.sfxvoice, sb_sfx_correct, takeRotate(playlist_correct))\n        }else if (sfx == sfxType.incorrect){\n            bankPlay(mp3type.sfxvoice, sb_sfx_incorrect, takeRotate(playlist_incorrect))\n        }else if (sfx == sfxType.ghost){\n            bankPlay(mp3type.sfxvoice, sb_sfx_ghost, takeRotate(playlist_ghost))\n        }else if (sfx == sfxType.fire){\n            bankPlay(mp3type.sfxvoice, sb_sfx_fire, takeRotate(playlist_fire))\n        }else if (sfx == sfxType.explosion){\n            bankPlay(mp3type.sfxvoice, sb_sfx_boom, takeRotate(playlist_boom))\n        }else if (sfx == sfxType.splash){\n            bankPlay(mp3type.sfxvoice, sb_sfx_splash, takeRotate(playlist_splash))\n        } else if (sfx == sfxType.spark) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_zap, takeRotate(playlist_zap))\n        } else if (sfx == sfxType.slash) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_slash, takeRotate(playlist_slash))\n        }\n    }\n/// END SOUND BANK ///\n\n/// BEGIN MOTOR & RELAY ///\n    const kong_address = 0x10\n    export enum MotorList { M1=1, M2=2 }\n    export enum motors{ redrack=16, shark=4, ghost=5, cannon=8, oarrack=7, shell=6, door=3, dragon=9, wheel=1, fan=2 }\n    export enum motorState { min, max, mid, off }\n    export enum fogLevels { none = 0, light = 1, medium = 2, heavy = 3 }\n    export enum sockState { dancing = 1, still = 0 }\n    let motor_wheel_max = 12; let motor_wheel_min = 0\n    let servo_redrack_max = 150; let servo_redrack_min = 100\n    let servo_cannon_min = 135; let servo_cannon_max = 65\n    let servo_shark_min = 20; let servo_shark_max = 85\n    let servo_oarrack_min = 60; let servo_oarrack_max = 110\n    let servo_ghost_min = 110; let servo_ghost_max = 40\n    let servo_shell_min = 170; let servo_shell_max = 100\n    let servo_door_min = 50; let servo_door_max = 140; let servo_door_mid = 100\n    let motor_fan_min = 0; let motor_fan_mid = 50; let motor_fan_max = 100\n    let servo_dragon_min = 90; let servo_dragon_max = 79\n\n    export function servoSet(servo: motors, angle: number): void {\n        let buf = pins.createBuffer(4);\n        buf[0] = servo;\n        buf[1] = angle;\n        buf[2] = 0;\n        buf[3] = 0;\n        pins.i2cWriteBuffer(kong_address, buf);\n    }\n\n    export function motorSpeed(motor: MotorList, speed: number): void {\n        let buf = pins.createBuffer(4);\n        buf[0] = motor\n        buf[1] = 1;\n        if (speed < 0) {\n            buf[1] = 2;\n            speed = speed * -1\n        }\n        buf[2] = speed;\n        buf[3] = 0;\n        pins.i2cWriteBuffer(kong_address, buf);\n    }\n\n    //% blockId=NL_MOTOR_Set \n    //% block=\"Set %motor to %state\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function motorSet(motor:motors, state:motorState):void{\n        if (motor == motors.redrack){\n            if (state == motorState.min){ servoSet(motor, servo_redrack_min) } \n            else if (state == motorState.max){ servoSet(motor, servo_redrack_max) }\n        } if (motor == motors.shark) {\n            if (state == motorState.min) { servoSet(motor, servo_shark_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_shark_max) }\n        } if (motor == motors.ghost) {\n            if (state == motorState.min) { servoSet(motor, servo_ghost_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_ghost_max) }\n        } if (motor == motors.cannon) {\n            if (state == motorState.min) { servoSet(motor, servo_cannon_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_cannon_max) }\n        } if (motor == motors.oarrack) {\n            if (state == motorState.min) { servoSet(motor, servo_oarrack_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_oarrack_max) }\n        } if (motor == motors.shell) {\n            if (state == motorState.min) { servoSet(motor, servo_shell_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_shell_max) }\n        } if (motor == motors.door) {\n            if (state == motorState.min) { servoSet(motor, servo_door_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_door_max) }\n            else if (state == motorState.mid) { servoSet(motor, servo_door_mid) }\n        } if (motor == motors.dragon) {\n            if (state == motorState.min) { servoSet(motor, servo_dragon_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_dragon_max) }\n        } if (motor == motors.wheel) {\n            if (state == motorState.min) { motorSpeed(MotorList.M1, motor_wheel_min) }\n            else if (state == motorState.max) { motorSpeed(MotorList.M1, motor_wheel_max) }\n            else if (state == motorState.off) { motorSpeed(MotorList.M1, 0) }\n        } if (motor == motors.fan) {\n            if (state == motorState.min) { motorSpeed(MotorList.M2, motor_fan_min) }\n            else if (state == motorState.mid) { motorSpeed(MotorList.M2, motor_fan_mid) }\n            else if (state == motorState.max) { motorSpeed(MotorList.M2, motor_fan_max) }\n            else if (state == motorState.off) { motorSpeed(MotorList.M2, 0) }\n        }\n    }\n\n    //% blockId=NL_RELAY_FogSet \n    //% block=\"set fog level to %level\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function setFog(fog:fogLevels):void{\n        if (fog == fogLevels.none){\n            pins.digitalWritePin(DigitalPin.P2, 1)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 1)\n        } else if (fog == fogLevels.light){\n            pins.digitalWritePin(DigitalPin.P2, 1)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        } else if (fog == fogLevels.medium) {\n            pins.digitalWritePin(DigitalPin.P2, 0)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        } else if (fog == fogLevels.heavy) {\n            pins.digitalWritePin(DigitalPin.P2, 0)\n            pins.digitalWritePin(DigitalPin.P8, 0)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        }\n    }\n\n    //% blockId=NL_RELAY_SockSet\n    //% block=\"set dancing sock to %sockState\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function setSock(state: sockState): void {\n        if(state==sockState.dancing){ pins.digitalWritePin(DigitalPin.P12, 0) }\n        else{ pins.digitalWritePin(DigitalPin.P12, 1) }\n    }\n\n/// END MOTOR & RELAY ///\n\n/// BEGIN OLED\n\n    let d1 = [0, 0, 0, 20, 36, 35, 54, 0, 28, 65, 8, 8, 160, 8, 96, 32, 62, 0, 98, 34, 24, 39, 60, 1, 54, 6, 0, 0, 8, 20, 65, 2, 50, 126, 127, 62, 127, 127, 127, 62, 127, 65, 32, 127, 127, 127, 127, 62, 127, 62, 127, 38, 1, 63, 31, 63, 99, 3, 97, 127, 2, 65, 4, 128, 1, 32, 127, 56, 56, 56, 8, 24, 127, 0, 128, 127, 65, 124, 124, 56, 252, 24, 0, 72, 4, 60, 28, 60, 68, 28, 68, 8, 0, 65, 2]\n    let d2 = [0, 95, 7, 127, 42, 19, 73, 5, 34, 34, 42, 8, 96, 8, 96, 16, 81, 66, 81, 65, 20, 69, 74, 113, 73, 73, 54, 172, 20, 20, 34, 1, 73, 9, 73, 65, 65, 73, 9, 65, 8, 127, 64, 8, 64, 2, 4, 65, 9, 65, 9, 73, 1, 64, 32, 64, 20, 4, 81, 65, 4, 65, 2, 128, 2, 84, 72, 68, 68, 84, 126, 164, 8, 125, 132, 16, 127, 4, 8, 68, 36, 36, 124, 84, 127, 64, 32, 64, 40, 160, 100, 54, 127, 54, 1]\n    let d3 = [0, 0, 0, 20, 127, 8, 85, 3, 65, 28, 28, 62, 0, 8, 0, 8, 73, 127, 73, 73, 18, 69, 73, 9, 73, 73, 54, 108, 34, 20, 20, 81, 121, 9, 73, 65, 65, 73, 9, 65, 8, 65, 65, 20, 64, 12, 8, 65, 9, 81, 25, 73, 127, 64, 64, 56, 8, 120, 73, 65, 8, 127, 1, 128, 4, 84, 68, 68, 68, 84, 9, 164, 4, 0, 125, 40, 64, 24, 4, 68, 36, 36, 8, 84, 68, 64, 64, 48, 16, 160, 84, 65, 0, 8, 1]\n    let d4 = [0, 0, 7, 127, 42, 100, 34, 0, 0, 0, 42, 8, 0, 8, 0, 4, 69, 64, 73, 73, 127, 69, 73, 5, 73, 41, 0, 0, 65, 20, 8, 9, 65, 9, 73, 65, 34, 73, 9, 81, 8, 0, 63, 34, 64, 2, 16, 65, 9, 33, 41, 73, 1, 64, 32, 64, 20, 4, 69, 0, 16, 0, 2, 128, 0, 84, 68, 40, 72, 84, 2, 164, 4, 0, 0, 68, 0, 4, 124, 56, 24, 252, 4, 36, 0, 124, 32, 64, 40, 124, 76, 0, 0, 0, 2]\n    let d5 = [0, 0, 0, 20, 18, 98, 80, 0, 0, 0, 8, 8, 0, 8, 0, 2, 62, 0, 70, 54, 16, 57, 48, 3, 54, 30, 0, 0, 0, 20, 0, 6, 62, 126, 54, 34, 28, 65, 1, 114, 127, 0, 1, 65, 64, 127, 127, 62, 6, 94, 70, 50, 1, 63, 31, 63, 99, 3, 67, 0, 32, 0, 4, 128, 0, 120, 56, 0, 127, 24, 0, 124, 120, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 28, 60, 68, 0, 68, 0, 0, 0, 1]\n\n    let display = [\" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\")]\n    let desired = [\" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\")]\n\n    //% blockId=NL_OLED_Update3\n    //% block=\"oled update from buffer\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function changeThree(): void{\n        let updated: string[][] = []\n        let count = 0\n        for (let row=0; row<8; row++){\n            for(let col=0; col<16; col++){\n                let refChar = desired[row][col]\n                if (refChar != display[row][col]){\n                    writeChar(refChar,row,col)\n                    display[row][col] = refChar\n                    count++\n                    if (count >= 3){\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    //% blockId=NL_OLED_PrintLine\n    //% block=\"print %text to oled buffer line %line\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function printLine(text:any, line:number): void{\n        let thisText = text + \"\"\n        for (let i = 0; i < 16; i++){\n            if (i < thisText.length){\n                desired[line][i]=thisText.charAt(i)\n            } else{\n                desired[line][i]=\" \"\n            }\n        }\n    }\n\n    function oledcmd(c: number) {\n        pins.i2cWriteNumber(0x3c, c, NumberFormat.UInt16BE);\n    }\n\n    function setText(row: number, column: number) {\n        oledcmd(0xB0 + row);            //set page address\n        oledcmd(0x00 + (8 * column & 0x0F));  //set column lower address\n        oledcmd(0x10 + ((8 * column >> 4) & 0x0F));   //set column higher address\n    }\n\n    //% blockId=NL_OLED_Init \n    //% block=\"initiate the oled screen\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function oledinit(): void {\n        oledcmd(0xAE);  // Set display OFF\n        oledcmd(0xD5);  // Set Display Clock Divide Ratio / OSC Frequency 0xD4\n        oledcmd(0x80);  // Display Clock Divide Ratio / OSC Frequency \n        oledcmd(0xA8);  // Set Multiplex Ratio\n        oledcmd(0x3F);  // Multiplex Ratio for 128x64 (64-1)\n        oledcmd(0xD3);  // Set Display Offset\n        oledcmd(0x00);  // Display Offset\n        oledcmd(0x40);  // Set Display Start Line\n        oledcmd(0x8D);  // Set Charge Pump\n        oledcmd(0x14);  // Charge Pump (0x10 External, 0x14 Internal DC/DC)\n        oledcmd(0xA1);  // Set Segment Re-Map\n        oledcmd(0xC8);  // Set Com Output Scan Direction\n        oledcmd(0xDA);  // Set COM Hardware Configuration\n        oledcmd(0x12);  // COM Hardware Configuration\n        oledcmd(0x81);  // Set Contrast\n        oledcmd(0xCF);  // Contrast\n        oledcmd(0xD9);  // Set Pre-Charge Period\n        oledcmd(0xF1);  // Set Pre-Charge Period (0x22 External, 0xF1 Internal)\n        oledcmd(0xDB);  // Set VCOMH Deselect Level\n        oledcmd(0x40);  // VCOMH Deselect Level\n        oledcmd(0xA4);  // Set all pixels OFF\n        oledcmd(0xA6);  // Set display not inverted\n        oledcmd(0xAF);  // Set display On\n        for (let j = 0; j < 8; j++) {\n            setText(j, 0);\n            {\n                for (let i = 0; i < 16; i++)  //clear all columns\n                {\n                    writeChar(\" \",j,i)\n                }\n            }\n        }\n    }\n\n    function writeChar(char: string, row: number, column: number) {\n        setText(row, column)\n        let i = char.charCodeAt(0) - 32\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d1[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d2[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d3[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d4[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d5[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n    }\n\n/// END OLED\n\n\n/// BEGIN DIGITS\n\n    let _SEGMENTS = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71];\n\n    //% blockId=nl_digits_create block=\"4-Digit cPin %cPin dPin %dPin\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function tm1637Create(cPin: DigitalPin, dPin: DigitalPin): TM1637LEDs {\n        let display = new TM1637LEDs();\n        display.clk = cPin\n        display.dio = dPin\n        display.brightness = 7;\n        display.init();\n        return display;\n    }\n    export class TM1637LEDs {\n        buf: Buffer;\n        clk: DigitalPin;\n        dio: DigitalPin;\n        _ON: number;\n        brightness: number;\n        init(): void {\n            pins.digitalWritePin(this.clk, 0);\n            pins.digitalWritePin(this.dio, 0);\n            this._ON = 8;\n            this.buf = pins.createBuffer(4);\n            this.clear();\n        }\n        _start() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _stop() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.dio, 1);\n        }\n        _write_data_cmd() {\n            this._start();\n            this._write_byte(0x40);\n            this._stop();\n        }\n        _write_dsp_ctrl() {\n            this._start();\n            this._write_byte(0x80 | this._ON | this.brightness);\n            this._stop();\n        }\n        _write_byte(b: number) {\n            for (let i = 0; i < 8; i++) {\n                pins.digitalWritePin(this.dio, (b >> i) & 1);\n                pins.digitalWritePin(this.clk, 1);\n                pins.digitalWritePin(this.clk, 0);\n            }\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _intensity(val: number = 7) {\n            this._ON = 8;\n            this.brightness = val - 1;\n            this._write_data_cmd();\n            this._write_dsp_ctrl();\n        }\n        _dat(bit: number, dat: number) {\n            this._write_data_cmd();\n            this._start();\n            this._write_byte(0xC0 | (bit % 4))\n            this._write_byte(dat);\n            this._stop();\n            this._write_dsp_ctrl();\n        }\n        \n        //% blockId=nl_digits_digit block=\"%display|show single number|%num|at digit|%bit\"\n        //% subcategory=\"Display\" group=\"Display\"\n        //% bit.defl=1 bit.min=0 bit.max=9\n        showbit(num: number = 5, bit: number = 0) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            this.buf[bit % 4] = _SEGMENTS[num % 16]\n            this._dat(bit, _SEGMENTS[num % 16])\n        }\n\n        //% blockId=nl_digits_number block=\"%display|show number|%num\"\n        //% subcategory=\"Display\" group=\"Display\"\n        showNumber(num: number) {\n            if (num < 0) {\n                num = -num\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n                this._dat(0, 0x40) // '-'\n                // this._dat(0, 0) // blank\n            }\n            else {\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n            }\n        }\n\n        //% blockId=\"nl_digits_clear\" block=\"clear display %display\"\n        //% subcategory=\"Display\" group=\"Display\"\n        clear() {\n            for (let i = 0; i < 4; i++) {\n                this._dat(i, 0)\n                this.buf[i] = 0\n            }\n        }\n    }\n\n/// END DIGITS\n\n}\n\n\n","pxt.json":"{\n    \"name\": \"NotLegosMaster\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"displaySendBuffer.asm\",\n        \"planetxbasic.ts\",\n        \"notlegos.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"7.0.42\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n","test.ts":""}},{"timestamp":1728792374456,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"NFHB?|vd].P(}_Y-C82U\">btToken</variable><variable id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</variable><variable id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</variable><variable id=\"Y|e4lM)*:N0Ca^S5-64i\">lastLaserR</variable><variable id=\"Uk9;F|_3qS]2aZyBH#]%\">lastLaserC</variable><variable id=\"}GOl3M4q[Bn4R~R!?]at\">lastLaserL</variable><variable id=\"JQUQT|8QeX)zSvZ?K@,i\">lastSonarRead</variable><variable id=\"=X]tI5AG]3|WfpT`9Jsr\">lastHue</variable><variable id=\"Bc7kXprAfc3]W%ILxbVV\">lastGesture</variable><variable id=\"#oq[[iBLthN][|]:S!n}\">lastHunt</variable><variable id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</variable><variable id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</variable><variable id=\"8GDUfe;)i@P.Do~T6|{[\">theName</variable><variable id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</variable><variable id=\"=9JavC*{GElF}/FS78a@\">iBegan</variable><variable id=\"e.[{0v-j0Tp(kJ9$~N@:\">isReady</variable></variables><block type=\"function_definition\" x=\"4217\" y=\"-292\"><mutation name=\"buttonPress\" functionid=\"+$9AXp*X:[tcODdtL9m)\"><arg name=\"button\" id=\"mfdvbnfdsij7xy9ejk0nd\" type=\"string\"></arg></mutation><field name=\"function_name\">buttonPress</field><value name=\"mfdvbnfdsij7xy9ejk0nd\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">button</field></block></value><statement name=\"STACK\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">button: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">button</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></statement></block><block type=\"every_interval\" x=\"681\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">2000</field></shadow></value><statement name=\"HANDLER\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value></block></statement></block><block type=\"every_interval\" x=\"1327\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"every_interval\" x=\"1542\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">40</field></shadow></value><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"=9JavC*{GElF}/FS78a@\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time\"></block></value><next><block type=\"NL_PIXEL_CastleSayTick\"><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"e.[{0v-j0Tp(kJ9$~N@:\">isReady</field></block></value><next><block type=\"function_call\"><mutation name=\"ready_oled\" functionid=\"LSuKu]l*}Y2[|u.h3PJ%\"></mutation><next><block type=\"NL_OLED_Update3\"><next><block type=\"variables_set\"><field name=\"VAR\" id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"=9JavC*{GElF}/FS78a@\">iBegan</field></block></value></block></value></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"NL_OLED_Init\"><next><block type=\"NL_PIXEL_CastleSay\"><field name=\"sockPin\">DigitalPin.P3</field><field name=\"wheelPin\">DigitalPin.P0</field><field name=\"scorePin\">DigitalPin.P16</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"=9JavC*{GElF}/FS78a@\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time_micros\"></block></value></block></next></block></next></block></statement></block><block type=\"every_interval\" x=\"2136\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"input_logo_event\" x=\"2351\" y=\"-83\"><field name=\"action\">TouchButtonEvent.Touched</field><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_MP3_PlayerSay\"><field name=\"saying\">notLegos.playerSaying.ready</field><next><block type=\"NL_MP3_SfxPlay\"><field name=\"sfx\">notLegos.sfxType.fire</field><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.intro</field></block></next></block></next></block></statement></block></statement></block><block type=\"radio_on_value_drag\" x=\"2934\" y=\"328\"><value name=\"HANDLER_DRAG_PARAM_name\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">name</field></block></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">value</field></block></value><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_substr\"><value name=\"this\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value><value name=\"start\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"length\"><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_substr\"><value name=\"this\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value><value name=\"start\"><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value><value name=\"length\"><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text_length\"><value name=\"VALUE\"><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value></block></value></block></value><next><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"controls_if\"><mutation elseif=\"3\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wstar</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_start</field></block></value></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value><statement name=\"DO1\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.welcome</field></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.WheelAll</field><field name=\"effect\">notLegos.vfxEffect.fire</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.intro</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_reg</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">check</field></block></value></block></value><statement name=\"DO2\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">ready</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value></block></statement><statement name=\"ELSE\"><block type=\"controls_if\"><mutation elseif=\"3\" else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">ready</field></block></value></block></value><statement name=\"DO0\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">wstar</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.KongFront</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">boot</field></block></value></block></value><statement name=\"DO1\"><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1000</field></shadow></value></block></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">200</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.idle</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotH</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotI</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">0</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.BrickDragon</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotE</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">tutor</field></block></value></block></value><statement name=\"DO2\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotA</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotB</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value></block></statement><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">heard: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">6</field></shadow></value></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"164\" y=\"3601\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><field name=\"function_name\">radioSay</field><value name=\"vt0gv77qprcayj8xalbs\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">text5</field></block></value><value name=\"ok3p1i8gyn97mv69yabw\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">val</field></block></value><statement name=\"STACK\"><block type=\"radio_datagram_send_value\"><value name=\"name\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value></block></value><value name=\"value\"><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">said: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">7</field></shadow></value></block></next></block></statement></block><block type=\"function_definition\" x=\"745\" y=\"3814\"><mutation name=\"fogFlood\" functionid=\"VFMl!%hPr#$dm7#L!/;e\"></mutation><field name=\"function_name\">fogFlood</field><statement name=\"STACK\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</field></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">10000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">para</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.mid</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.off</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.dancing</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.still</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">8000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.min</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"1187\" y=\"3814\"><mutation name=\"runTutorial\" functionid=\"S6D~vG%3KsCIO0/OH*vo\"></mutation><field name=\"function_name\">runTutorial</field><statement name=\"STACK\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">tutor</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">80</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">20</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.tutorial</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto1</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5950</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto2</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto3</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7600</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto4</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6100</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto5</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">13000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto6</field><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"function_definition\" x=\"1543\" y=\"3814\"><mutation name=\"ready_oled\" functionid=\"LSuKu]l*}Y2[|u.h3PJ%\"></mutation><field name=\"function_name\">ready_oled</field><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Say //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"6\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Y|e4lM)*:N0Ca^S5-64i\">lastLaserR</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> C</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Uk9;F|_3qS]2aZyBH#]%\">lastLaserC</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"}GOl3M4q[Bn4R~R!?]at\">lastLaserL</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"8\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">S</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"JQUQT|8QeX)zSvZ?K@,i\">lastSonarRead</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> H</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_js_round\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"=X]tI5AG]3|WfpT`9Jsr\">lastHue</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> G</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Bc7kXprAfc3]W%ILxbVV\">lastGesture</field></block></value><value name=\"ADD6\"><shadow type=\"text\"><field name=\"TEXT\"> N</field></shadow></value><value name=\"ADD7\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"#oq[[iBLthN][|]:S!n}\">lastHunt</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">Mode: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M:</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"NL_MP3_PlaytimeMusic\"></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">4</field></shadow></value></block></next></block></next></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Do //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> T </field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement></block></statement></block></xml>","main.ts":"function radioSay (text5: string, val: number) {\n    radio.sendValue(\"\" + btToken + text5, val)\n    notLegos.printLine(\"said: \" + text5 + \"=\" + val, 7)\n}\nfunction buttonPress (button: string) {\n    notLegos.printLine(\"button: \" + button, 3)\n}\nfunction runTutorial () {\n    radioSay(\"tutor\", 1)\n    notLegos.setVolume(notLegos.mp3type.music, 80)\n    basic.pause(20)\n    notLegos.mp3musicPlay(notLegos.musicGenre.tutorial)\n    fogLevel = 3\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto1)\n    basic.pause(5950)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto2)\n    basic.pause(5000)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto3)\n    basic.pause(7600)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto4)\n    basic.pause(6100)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto5)\n    basic.pause(13000)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto6)\n    notLegos.setVolume(notLegos.mp3type.music, 100)\n    basic.pause(7000)\n    notLegos.mp3musicPlay(notLegos.musicGenre.awaiting)\n}\nfunction ready_oled () {\n    if (isCastleSay) {\n        let lastHunt = 0\n        let lastGesture = 0\n        let lastHue = 0\n        let lastSonarRead = 0\n        let lastLaserL = 0\n        let lastLaserC = 0\n        let lastLaserR = 0\n        notLegos.printLine(\"// Castle Say //\", 0)\n        notLegos.printLine(\"R\" + Math.constrain(lastLaserR, 0, 9) + \" C\" + Math.constrain(lastLaserC, 0, 9) + \" L\" + Math.constrain(lastLaserL, 0, 9), 1)\n        notLegos.printLine(\"S\" + lastSonarRead + \" H\" + Math.round(lastHue / 3) + \" G\" + lastGesture + \" N\" + lastHunt, 2)\n        notLegos.printLine(\"Mode: \" + castleMode, 3)\n        notLegos.printLine(\"M:\" + notLegos.mp3durationMusic(), 4)\n    } else {\n        notLegos.printLine(\"// Castle Do //\", 0)\n        notLegos.printLine(\"M: \" + castleMode + \" T \" + fogToggle, 1)\n    }\n}\nradio.onReceivedValue(function (name, value) {\n    if (name.substr(0, btToken.length) == btToken) {\n        theName = name.substr(btToken.length, name.length - btToken.length)\n        if (isCastleSay) {\n            if (theName == \"wstar\") {\n                castleMode = \"wait_start\"\n            } else if (theName == \"welco\") {\n                if (value == 1) {\n                    notLegos.vfxReset(notLegos.vfxEffect.glow)\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.glow)\n                    notLegos.mp3voicePlay(notLegos.voiceSaying.welcome)\n                } else if (value == 2) {\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                    notLegos.setEffect(notLegos.vfxRegion.WheelAll, notLegos.vfxEffect.fire)\n                    basic.pause(1200)\n                    notLegos.mp3voicePlay(notLegos.voiceSaying.intro)\n                    basic.pause(3000)\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                    basic.pause(4000)\n                    notLegos.mp3musicPlay(notLegos.musicGenre.awaiting)\n                    castleMode = \"wait_reg\"\n                }\n            } else if (theName == \"check\") {\n                notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                radioSay(\"ready\", 1)\n            } else if (false) {\n            \t\n            }\n        } else {\n            if (theName == \"ready\") {\n                radioSay(\"wstar\", 1)\n                notLegos.setEffect(notLegos.vfxRegion.KongFront, notLegos.vfxEffect.indicate)\n            } else if (theName == \"boot\") {\n                fogLevel = 3\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.parade)\n                notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.max)\n                basic.pause(value * 1000)\n                notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.min)\n                basic.pause(1000)\n                radioSay(\"welco\", 1)\n                basic.pause(200)\n                notLegos.vfxReset(notLegos.vfxEffect.glow)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.glow)\n                basic.pause(5000)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.idle)\n                notLegos.setEffect(notLegos.vfxRegion.SpotH, notLegos.vfxEffect.mine)\n                notLegos.setEffect(notLegos.vfxRegion.SpotI, notLegos.vfxEffect.mine)\n                basic.pause(0)\n                radioSay(\"welco\", 2)\n                basic.pause(4500)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.off)\n                basic.pause(500)\n                notLegos.setEffect(notLegos.vfxRegion.BrickDragon, notLegos.vfxEffect.indicate)\n                basic.pause(1200)\n                notLegos.setEffect(notLegos.vfxRegion.SpotC, notLegos.vfxEffect.indicate)\n                notLegos.setEffect(notLegos.vfxRegion.SpotE, notLegos.vfxEffect.indicate)\n                basic.pause(3000)\n                fogLevel = 1\n                notLegos.motorSet(notLegos.motors.door, notLegos.motorState.max)\n            } else if (theName == \"tutor\") {\n                if (value == 1) {\n                    notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.off)\n                    basic.pause(4000)\n                    notLegos.vfxReset(notLegos.vfxEffect.glow)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotA, notLegos.vfxEffect.glow)\n                    basic.pause(6000)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotB, notLegos.vfxEffect.indicate)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotC, notLegos.vfxEffect.indicate)\n                } else if (value == 2) {\n                \t\n                }\n            } else if (theName == \"welco\") {\n            \t\n            } else {\n            \t\n            }\n        }\n        notLegos.printLine(\"heard: \" + theName + \"=\" + value, 6)\n    }\n})\ninput.onLogoEvent(TouchButtonEvent.Touched, function () {\n    if (isCastleSay) {\n        notLegos.mp3sayPlay(notLegos.playerSaying.ready)\n        notLegos.mp3sfxPlay(notLegos.sfxType.fire)\n        notLegos.mp3musicPlay(notLegos.musicGenre.intro)\n    }\n})\nfunction fogFlood () {\n    if (fogToggle) {\n        fogLevel = 3\n        basic.pause(10000)\n        notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.parade)\n        radioSay(\"para\", 1)\n        fogLevel = 0\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.max)\n        notLegos.motorSet(notLegos.motors.door, notLegos.motorState.max)\n        basic.pause(1000)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.mid)\n        basic.pause(6000)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.min)\n        basic.pause(500)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.off)\n        notLegos.motorSet(notLegos.motors.door, notLegos.motorState.min)\n        fogLevel = 1\n        notLegos.setSock(notLegos.sockState.dancing)\n        basic.pause(6000)\n        notLegos.setSock(notLegos.sockState.still)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.max)\n        basic.pause(8000)\n        notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.redrack, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.redrack, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shark, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shark, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.ghost, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.ghost, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.cannon, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.cannon, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.oarrack, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.oarrack, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shell, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shell, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.dragon, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.dragon, notLegos.motorState.min)\n    }\n}\nlet iTook = 0\nlet theName = \"\"\nlet fogToggle = 0\nlet castleMode = \"\"\nlet isCastleSay = 0\nlet fogLevel = 0\nlet btToken = \"\"\nnotLegos.oledinit()\nnotLegos.castleSayLights(DigitalPin.P3, DigitalPin.P0, DigitalPin.P16)\nlet iBegan = input.runningTimeMicros()\nloops.everyInterval(500, function () {\n\t\n})\nloops.everyInterval(500, function () {\n\t\n})\nloops.everyInterval(2000, function () {\n    notLegos.printLine(\"\" + iTook + \"\", 5)\n})\nloops.everyInterval(40, function () {\n    let isReady = 0\n    iBegan = input.runningTime()\n    notLegos.castleSayTick()\n    if (isReady) {\n    \t\n    }\n    ready_oled()\n    notLegos.changeThree()\n    iTook = input.runningTime() - iBegan\n})\n","README.md":"\n> Open this page at [https://notlegos.github.io/castleresay/](https://notlegos.github.io/castleresay/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/castleresay** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/castleresay** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/soundbank/](https://notlegos.github.io/soundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/soundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/soundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/resoundbank/](https://notlegos.github.io/resoundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/resoundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/resoundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosext/](https://notlegos.github.io/notlegosext/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosext** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosext** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosmaster/](https://notlegos.github.io/notlegosmaster/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosmaster** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosmaster** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","displaySendBuffer.asm":"sendBufferAsm:\n\n    push {r4,r5,r6,r7,lr}\n    \n    mov r4, r0 ; save buff\n    mov r6, r1 ; save pin\n    \n    mov r0, r4\n    bl BufferMethods::length\n    mov r5, r0\n    \n    mov r0, r4\n    bl BufferMethods::getBytes\n    mov r4, r0\n    \n    ; setup pin as digital\n    mov r0, r6\n    movs r1, #0\n    bl pins::digitalWritePin\n    \n    ; load pin address\n    mov r0, r6\n    bl pins::getPinAddress\n\n    ldr r0, [r0, #8] ; get mbed DigitalOut from MicroBitPin\n    ldr r1, [r0, #4] ; r1-mask for this pin\n    ldr r2, [r0, #16] ; r2-clraddr\n    ldr r3, [r0, #12] ; r3-setaddr\n    \n    cpsid i ; disable irq\n    \n    b .start\n    \n.nextbit:               ;            C0\n    str r1, [r3, #0]    ; pin := hi  C2\n    tst r6, r0          ;            C3\n    bne .islate         ;            C4\n    str r1, [r2, #0]    ; pin := lo  C6\n.islate:\n    lsrs r6, r6, #1     ; r6 >>= 1   C7\n    bne .justbit        ;            C8\n    \n    ; not just a bit - need new byte\n    adds r4, #1         ; r4++       C9\n    subs r5, #1         ; r5--       C10\n    bcc .stop           ; if (r5<0) goto .stop  C11\n.start:\n    movs r6, #0x80      ; reset mask C12\n    nop                 ;            C13\n\n.common:               ;             C13\n    str r1, [r2, #0]   ; pin := lo   C15\n    ; always re-load byte - it just fits with the cycles better this way\n    ldrb r0, [r4, #0]  ; r0 := *r4   C17\n    b .nextbit         ;             C20\n\n.justbit: ; C10\n    ; no nops, branch taken is already 3 cycles\n    b .common ; C13\n\n.stop:    \n    str r1, [r2, #0]   ; pin := lo\n    cpsie i            ; enable irq\n\n    pop {r4,r5,r6,r7,pc}\n","planetxbasic.ts":"/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#00B1ED  icon=\"\\uf005\" block=\"Connected\" blockId=\"PlanetX_Connected\"\n//% groups='[\"Digital\", \"Analog\", \"IIC Port\"]'\nnamespace Connected {\n    \n    ////////////////////////paj7620//////////////////////\n    let gesture_first_init = true\n    const initRegisterArray: number[] = [\n        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17,\n        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F,\n        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14,\n        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27,\n        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01,\n        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00,\n        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20,\n        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37,\n        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A,\n        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F,\n        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30,\n        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19,\n        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04,\n        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00,\n        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00,\n        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F,\n        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07,\n        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01,\n        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F,\n        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01,\n        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40,\n        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E,\n        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00,\n        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08,\n        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00,\n        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01,\n        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01,\n        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01\n    ];\n    \n    /////////////////////////color/////////////////////////\n    const APDS9960_ADDR = 0x39\n    const APDS9960_ENABLE = 0x80\n    const APDS9960_ATIME = 0x81\n    const APDS9960_CONTROL = 0x8F\n    const APDS9960_STATUS = 0x93\n    const APDS9960_CDATAL = 0x94\n    const APDS9960_CDATAH = 0x95\n    const APDS9960_RDATAL = 0x96\n    const APDS9960_RDATAH = 0x97\n    const APDS9960_GDATAL = 0x98\n    const APDS9960_GDATAH = 0x99\n    const APDS9960_BDATAL = 0x9A\n    const APDS9960_BDATAH = 0x9B\n    const APDS9960_GCONF4 = 0xAB\n    const APDS9960_AICLEAR = 0xE7\n    let color_first_init = false\n\n    function i2cwrite_color(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n    function i2cread_color(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n    function rgb2hsl(color_r: number, color_g: number, color_b: number): number {\n        let Hue = 0\n        let R = color_r * 100 / 255;\n        let G = color_g * 100 / 255;\n        let B = color_b * 100 / 255;\n        let maxVal = Math.max(R, Math.max(G, B))\n        let minVal = Math.min(R, Math.min(G, B))\n        let Delta = maxVal - minVal;\n\n        if (Delta < 0) {\n            Hue = 0;\n        }\n        else if (maxVal == R && G >= B) {\n            Hue = (60 * ((G - B) * 100 / Delta)) / 100;\n        }\n        else if (maxVal == R && G < B) {\n            Hue = (60 * ((G - B) * 100 / Delta) + 360 * 100) / 100;\n        }\n        else if (maxVal == G) {\n            Hue = (60 * ((B - R) * 100 / Delta) + 120 * 100) / 100;\n        }\n        else if (maxVal == B) {\n            Hue = (60 * ((R - G) * 100 / Delta) + 240 * 100) / 100;\n        }\n        return Hue\n    }\n    function initModule(): void {\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ATIME, 252)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_CONTROL, 0x03)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_GCONF4, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_AICLEAR, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x01)\n        color_first_init = true\n    }\n    function colorMode(): void {\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_ENABLE) | 0x2;\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, tmp);\n    }\n\n    ///////////////////////////////////////////////////////MP3\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    /*\n    * Play status selection button list\n    */\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(100)\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,        \n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum Distance_Unit_List {\n        //% block=\"cm\" \n        Distance_Unit_cm,\n\n        //% block=\"foot\"\n        Distance_Unit_foot,\n    }\n    export enum ButtonStateList {\n        //% block=\"C\"\n        C,\n        //% block=\"D\"\n        D,\n        //% block=\"C+D\"\n        CD\n    }\n    export enum GestureType {\n        //% block=\"None\"\n        None = 0,\n        //% block=\"Right\"\n        Right = 1,\n        //% block=\"Left\"\n        Left = 2,\n        //% block=\"Up\"\n        Up = 3,\n        //% block=\"Down\"\n        Down = 4,\n        //% block=\"Forward\"\n        Forward = 5,\n        //% block=\"Backward\"\n        Backward = 6,\n        //% block=\"Clockwise\"\n        Clockwise = 7,\n        //% block=\"Anticlockwise\"\n        Anticlockwise = 8,\n        //% block=\"Wave\"\n        Wave = 9\n    }\n    export enum ColorList {\n        //% block=\"Red\"\n        red,\n        //% block=\"Green\"\n        green,\n        //% block=\"Blue\"\n        blue,\n        //% block=\"Cyan\"\n        cyan,\n        //% block=\"Magenta\"\n        magenta,\n        //% block=\"Yellow\"\n        yellow,\n        //% block=\"White\"\n        white\n    }\n\n    ///////////////////////////////////blocks/////////////////////////////\n\n    //% blockId=\"readwaterLevel\" block=\"Water level sensor %Rjpin value(0~100)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function waterLevel(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        let voltage = 0, waterlevel = 0;\n        voltage = pins.map(\n            pins.analogReadPin(pin),\n            50,\n            600,\n            0,\n            100\n        );\n        if (voltage < 0) {\n            voltage = 0\n        }\n        waterlevel = voltage;\n        return Math.round(waterlevel)\n    }\n\n    let distance_last = 0\n\n    //% blockId=sonarbit block=\"Ultrasonic sensor pinT %tPin pinE %ePin distance %distance_unit\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% distance_unit.fieldEditor=\"gridpicker\"\n    //% distance_unit.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    export function ultrasoundSensor(tPin: DigitalPin, ePin: DigitalPin, distance_unit: Distance_Unit_List): number {\n        let pinT = tPin\n        let pinE = ePin\n        pins.setPull(pinT, PinPullMode.PullNone)\n        pins.digitalWritePin(pinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(pinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(pinT, 0)\n\n        // read pulse\n        let d = pins.pulseIn(pinE, PulseValue.High, 25000)\n        let version = control.hardwareVersion()\n        let distance = d * 34 / 2 / 1000\n        if (version == \"1\") {\n            distance = distance * 3 / 2\n        }\n\n        if (distance > 430) {\n            distance = 0\n        }\n\n        if (distance == 0) {\n            distance = distance_last\n            distance_last = 0\n        }\n        else {\n            distance_last = distance\n        }\n\n        switch (distance_unit) {\n            case Distance_Unit_List.Distance_Unit_cm:\n                return Math.floor(distance)  //cm\n                break\n            case Distance_Unit_List.Distance_Unit_foot:\n                return Math.floor(distance / 30.48)   //foot\n                break\n            default:\n                return 0\n        }\n    }\n\n    export class PAJ7620 {\n        private paj7620WriteReg(addr: number, cmd: number) {\n            let buf: Buffer = pins.createBuffer(2);\n            buf[0] = addr;\n            buf[1] = cmd;\n            pins.i2cWriteBuffer(0x73, buf, false);\n        }\n        private paj7620ReadReg(addr: number): number {\n            let buf: Buffer = pins.createBuffer(1);\n            buf[0] = addr;\n            pins.i2cWriteBuffer(0x73, buf, false);\n            buf = pins.i2cReadBuffer(0x73, 1, false);\n            return buf[0];\n        }\n        private paj7620SelectBank(bank: number) {\n            if (bank == 0) this.paj7620WriteReg(0xEF, 0);\n            else if (bank == 1) this.paj7620WriteReg(0xEF, 1);\n        }\n        private paj7620Init() {\n            let temp = 0;\n            this.paj7620SelectBank(0);\n            temp = this.paj7620ReadReg(0);\n            if (temp == 0x20) {\n                for (let i = 0; i < 438; i += 2) {\n                    this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);\n                }\n            }\n            this.paj7620SelectBank(0);\n        }\n        init() {\n            this.paj7620Init();\n            basic.pause(200);\n        }\n        read(): number {\n            let data = 0, result = 0;\n            data = this.paj7620ReadReg(0x43);\n            switch (data) {\n                case 0x01:\n                    result = GestureType.Right;\n                    break;\n                case 0x02:\n                    result = GestureType.Left;\n                    break;\n                case 0x04:\n                    result = GestureType.Up;\n                    break;\n                case 0x08:\n                    result = GestureType.Down;\n                    break;\n                case 0x10:\n                    result = GestureType.Forward;\n                    break;\n                case 0x20:\n                    result = GestureType.Backward;\n                    break;\n                case 0x40:\n                    result = GestureType.Clockwise;\n                    break;\n                case 0x80:\n                    result = GestureType.Anticlockwise;\n                    break;\n                default:\n                    data = this.paj7620ReadReg(0x44);\n                    if (data == 0x01)\n                        result = GestureType.Wave;\n                    break;\n            }\n            return result;\n        }\n    }\n    const gestureEventId = 3100;\n    let lastGesture = GestureType.None;\n    let paj7620 = new PAJ7620();\n    //% blockId= gesture_create_event block=\"Gesture sensor IIC port is %gesture\"\n    //% gesture.fieldEditor=\"gridpicker\" gesture.fieldOptions.columns=3\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function onGesture(gesture: GestureType, handler: () => void) {\n        control.onEvent(gestureEventId, gesture, handler);\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        control.inBackground(() => {\n            while (true) {\n                const gesture = paj7620.read();\n                if (gesture != lastGesture) {\n                    lastGesture = gesture;\n                    control.raiseEvent(gestureEventId, lastGesture);\n                }\n                basic.pause(200);\n            }\n        })\n    }\n\n    //% blockId= gesture_get_event block=\"Gesture sensor IIC port detects\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function getGesture(): number {\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        const gesture = paj7620.read();\n        return gesture\n    }\n\n\n\n\n    //% blockId=apds9960_readcolor block=\"Color sensor IIC port color HUE(0~360)\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function readColor(): number {\n        if (color_first_init == false) {\n            initModule()\n            colorMode()\n        }\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        while (!tmp) {\n            basic.pause(5);\n            tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        }\n        let c = i2cread_color(APDS9960_ADDR, APDS9960_CDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_CDATAH) * 256;\n        let r = i2cread_color(APDS9960_ADDR, APDS9960_RDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_RDATAH) * 256;\n        let g = i2cread_color(APDS9960_ADDR, APDS9960_GDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_GDATAH) * 256;\n        let b = i2cread_color(APDS9960_ADDR, APDS9960_BDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_BDATAH) * 256;\n        // map to rgb based on clear channel\n        let avg = c / 3;\n        r = r * 255 / avg;\n        g = g * 255 / avg;\n        b = b * 255 / avg;\n        //let hue = rgb2hue(r, g, b);\n        let hue = rgb2hsl(r, g, b)\n        return hue\n    }\n    //% block=\"Color sensor IIC port detects %color\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% color.fieldEditor=\"gridpicker\" color.fieldOptions.columns=3\n    export function checkColor(color: ColorList): boolean {\n        let hue = readColor()\n        switch (color) {\n            case ColorList.red:\n                if (hue > 330 || hue < 20) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.green:\n                if (hue > 120 && 180 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.blue:\n                if (hue > 210 && 270 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.cyan:\n                if (hue > 190 && 210 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.magenta:\n                if (hue > 260 && 330 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.yellow:\n                if (hue > 30 && 120 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.white:\n                if (hue >= 180 && 190 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n        }\n    }\n\n    //% blockId=\"potentiometer\" block=\"Trimpot %Rjpin analog value\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Input color=#E2C438 group=\"Analog\"\n    export function trimpot(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        return pins.analogReadPin(pin)\n    }\n    //% blockId=buttonab block=\"Button %Rjpin %button is pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonCD(Rjpin: DigitalRJPin, button: ButtonStateList): boolean {\n        let pinC = DigitalPin.P1\n        let pinD = DigitalPin.P2\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pinC = DigitalPin.P1\n                pinD = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pinC = DigitalPin.P2\n                pinD = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pinC = DigitalPin.P13\n                pinD = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pinC = DigitalPin.P15\n                pinD = DigitalPin.P16\n                break;\n            case DigitalRJPin.P3:\n                pinC = DigitalPin.P3\n                pinD = DigitalPin.P4\n                break;\n        }\n        pins.setPull(pinC, PinPullMode.PullUp)\n        pins.setPull(pinD, PinPullMode.PullUp)\n        if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 0 && button == ButtonStateList.CD) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinC) == 0 && pins.digitalReadPin(pinD) == 1 && button == ButtonStateList.C) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 1 && button == ButtonStateList.D) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    export enum ButtonState {\n        //% block=\"on\"\n        on = 1,\n        //% block=\"off\"\n        off = 2\n    }\n\n    const buttonEventSource = 5000\n    const buttonEventValue = {\n        CD_pressed: ButtonState.on,\n        CD_unpressed: ButtonState.off\n    }\n\n    //% block=\"on button %Rjpin %button pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=4\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonEvent(Rjpin: DigitalRJPin, button: ButtonStateList, handler: () => void) {\n        let ButtonPin_C = DigitalPin.P1\n        let ButtonPin_D = DigitalPin.P2\n        let pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P0\n        let pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                ButtonPin_C = DigitalPin.P1\n                ButtonPin_D = DigitalPin.P8\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P1\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P8\n                break;\n            case DigitalRJPin.J2:\n                ButtonPin_C = DigitalPin.P2\n                ButtonPin_D = DigitalPin.P12\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P2\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P12\n                break;\n            case DigitalRJPin.J3:\n                ButtonPin_C = DigitalPin.P13\n                ButtonPin_D = DigitalPin.P14\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P13\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P14\n                break;\n            case DigitalRJPin.J4:\n                ButtonPin_C = DigitalPin.P15\n                ButtonPin_D = DigitalPin.P16\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P15\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P16\n                break;\n            case DigitalRJPin.P3:\n                ButtonPin_C = DigitalPin.P3\n                ButtonPin_D = DigitalPin.P4\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P3\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P4\n                break;\n        }\n        if (button == ButtonStateList.C) {\n            pins.setPull(ButtonPin_C, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_C, PinEventType.Edge)\n            control.onEvent(pinEventSource_C, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.D) {\n            pins.setPull(ButtonPin_D, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_D, PinEventType.Edge)\n            control.onEvent(pinEventSource_D, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.CD) {\n            loops.everyInterval(50, function () {\n                if (pins.digitalReadPin(ButtonPin_C) == 0 && pins.digitalReadPin(ButtonPin_D) == 0) {\n                    control.raiseEvent(buttonEventSource, buttonEventValue.CD_pressed)\n                }\n            })\n            control.onEvent(buttonEventSource, buttonEventValue.CD_pressed, handler)\n        }\n    }\n\n    //% blockId=fans block=\"Motor fan %Rjpin toggle to $fanstate || speed %speed \\\\%\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% fanstate.shadow=\"toggleOnOff\"\n    //% subcategory=Excute group=\"Digital\" color=#EA5532\n    //% speed.min=0 speed.max=100\n    //% expandableArgumentMode=\"toggle\"\n    export function motorFan(Rjpin: DigitalRJPin, fanstate: boolean, speed: number = 100): void {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case DigitalRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n            case DigitalRJPin.J3:\n                pin = AnalogPin.P13\n                break;\n            case DigitalRJPin.J4:\n                pin = AnalogPin.P15\n                break;\n        }\n        if (fanstate) {\n            pins.analogSetPeriod(pin, 100)\n            pins.analogWritePin(pin, Math.map(speed, 0, 100, 0, 1023))\n        }\n        else {\n            pins.analogWritePin(pin, 0)\n            speed = 0\n        }\n    }\n\n\n    //% blockId=\"setLoopFolder\" block=\"loop play all the MP3s in the folder:$folderNum\"\n    //% folderNum.defl=\"01\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setLoopFolder(folderNum: string): void {\n        CMD = 0x17\n        para1 = 0\n        para2 = parseInt(folderNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    //% blockId=\"folderPlay\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum || repeatList: $myAns\"\n    //% folderNum.defl=\"01\" fileNum.defl=\"001\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function folderPlay(folderNum: string, fileNum: string, myAns: boolean = false): void {\n        CMD = 0x0F\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        if (myAns)\n            execute(0x19)\n    }\n\n    //% blockId=\"playFolderFilePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFilePort(folderNum: string, fileNum: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFolderFileVolumePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum with volume:$theVolume usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" theVolume.defl=\"10\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFileVolumePort(folderNum: string, fileNum: string, theVolume: string, Rjpin: DigitalRJPin): void {\n        \n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        \n        let volume = parseInt(theVolume)\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(200)\n\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"volumePort\" \n    //% block=\"set MP3 volume:$theVolume usingPin:$Rjpin\"\n    //% theVolume.defl=\"10\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function volumePort(theVolume: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        let volume = parseInt(theVolume)\n        if (volume > 30) {\n            volume = 30\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(300)\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n\n\n    //% blockId=\"setTracking\" \n    //% block=\"play the mp3 in order of:%tracking || repeatList: $myAns\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% tracking.defl=1\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setTracking(tracking: number, myAns: boolean = false): void {\n        CMD = 0x03\n        para1 = 0x00\n        para2 = tracking\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        execute(0x0D)\n        if (myAns)\n            execute(0x19)\n    }\n    //% blockId=MP3execute block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=\"setVolume\" block=\"Set volume(0~25):%volume\"\n    //% volume.min=0 volume.max=25\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setVolume(volume: number): void {\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 0x06\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=MP3setPort block=\"Set the MP3 port to %Rjpin\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function MP3SetPort(Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        setVolume(25)\n    }\n}","notlegos.ts":"// NotLegos Blocks\n//% block=\"Not LEGOs\" color=#0031AF weight=1000 icon=\"\\uf3a5\"\n//% groups='[\"MP3\",\"Sensors\"]'\nnamespace notLegos {\n\n\n/// BEGIN NEOPIXEL ///\n    export enum hues { red = 0, orange = 15, yellow = 40, lime = 85, green = 110, cyan = 170, blue = 240, purple = 260, pink = 310 }\n    export enum vfxEffect { parade = 0, fire = 1, indicate = 2, idle = 3, glow = 4, mine = 5, off = 6 }\n    let NeoSock: Strip = null; let NeoScore: Strip = null; let NeoWheel: Strip = null; let NeoKong: Strip = null; let NeoStrip: Strip = null; let NeoBrick: Strip = null\n    let vfx_mine_tog: number[] = []; let vfx_mine_hue: number[] = []; let vfx_mine_sat: number[] = []; let vfx_mine_lum: number[] = []\n    let vfx_fire_tog: number[] = []; let vfx_fire_hue: number[] = []; let vfx_fire_sat: number[] = []; let vfx_fire_lum: number[] = []; let vfx_fire_colors: number[] = []\n    let vfx_indicate_tog: number[] = []; let vfx_indicate_hue: number[] = []; let vfx_indicate_sat: number[] = []; let vfx_indicate_lum: number[] = [];\n    let vfx_idle_tog: number[] = []; let vfx_idle_hue: number[] = []; let vfx_idle_sat: number[] = []; let vfx_idle_lum: number[] = []\n    let vfx_glow_tog: number[] = []; let vfx_glow_hue: number[] = []; let vfx_glow_sat: number[] = []; let vfx_glow_lum: number[] = []\n    let vfx_active_tog: number[] = []; let vfx_active_hue: number[] = []; let vfx_active_sat: number[] = []; let vfx_active_lum: number[] = []\n    let vfx_off_hue: number[] = []; let vfx_off_sat: number[] = []; let vfx_off_lum: number[] = []\n    let vfx_parade_tog: number[] = []; let vfx_parade_hue: number[] = []; let vfx_parade_sat: number[] = []; let vfx_parade_lum: number[] = []; let vfx_parade_colors: number[] = [];\n    let vfx_last_tog: number[] = []; let vfx_last_hue: number[] = []; let vfx_last_sat: number[] = []; let vfx_last_lum: number[] = []\n    let vfx_master_tog: number[] = []; let vfx_master_hue: number[] = []; let vfx_master_sat: number[] = []; let vfx_master_lum: number[] = []; let vfx_master_effect: number[] = [];\n    let vfx_master_r: number[] = []; let vfx_master_g: number[] = []; let vfx_master_b: number[] = [];\n    let vfx_light_count = 0\n\n    //% shim=sendBufferAsm\n    function sendBuffer(buf: Buffer, pin: DigitalPin) { }\n\n    export class Strip {\n        buf: Buffer;\n        pin: DigitalPin;\n        start: number; // start offset in LED strip\n        _length: number; // number of LEDs\n\n        setPixelHSLPrecise(pixeloffset: number, h: number, s: number, l: number): void {\n            if (pixeloffset < 0 || pixeloffset >= this._length)\n                return;\n            pixeloffset = (pixeloffset + this.start) * 3\n            h = Math.clamp(0,1,h/360)\n            s = Math.clamp(0,1,s/100)\n            l = Math.clamp(0,1,l/100)\n            let r, g, b;\n            if (s === 0) {\n                r = g = b = l; // achromatic\n            } else {\n                const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n                const p = 2 * l - q;\n                let t = h + 1/3\n                if (t < 0) { t += 1; }\n                else if (t > 1) {t -= 1; }\n                if (t < 1/6) {r = p + (q - p) * 6 * t;}\n                else if (t < 1/2) {r = q;}\n                else if (t < 2/3) { r = p + (q - p) * (2/3 - t) * 6; }\n                else { r = p; }\n                t = h\n                if (t < 0) { t += 1; }\n                else if (t > 1) { t -= 1; }\n                if (t < 1 / 6) { g = p + (q - p) * 6 * t; }\n                else if (t < 1 / 2) { g = q; }\n                else if (t < 2 / 3) { g = p + (q - p) * (2/3 - t) * 6; }\n                else { g = p; }\n                t = h - 1/3\n                if (t < 0) { t += 1; }\n                else if (t > 1) { t -= 1; }\n                if (t < 1 / 6) { b = p + (q - p) * 6 * t; }\n                else if (t < 1/2) { b = q; }\n                else if (t < 2/3) { b = p + (q - p) * (2/3 - t) * 6; }\n                else { b = p; }\n            }\n            vfx_master_g[pixeloffset] = Math.round(g * 255);\n            vfx_master_r[pixeloffset] = Math.round(r * 255);\n            vfx_master_b[pixeloffset] = Math.round(b * 255);\n        }\n\n\n        // setPixelHSLPrecise(pixeloffset: number, h: number, s: number, l: number): void {\n        //     if (pixeloffset < 0 || pixeloffset >= this._length)\n        //         return;\n        //     pixeloffset = (pixeloffset + this.start) * 3\n        //     h = Math.clamp(0, 1, h / 360)\n        //     s = Math.clamp(0, 1, s / 100)\n        //     l = Math.clamp(0, 1, l / 100)\n        //     let r, g, b;\n        //     if (s === 0) {\n        //         r = g = b = l; // achromatic\n        //     } else {\n        //         const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        //         const p = 2 * l - q;\n        //         let t = h + 1 / 3\n        //         if (t < 0) { t += 1; }\n        //         else if (t > 1) { t -= 1; }\n        //         if (t < 1 / 6) { r = p + (q - p) * 6 * t; }\n        //         else if (t < 1 / 2) { r = q; }\n        //         else if (t < 2 / 3) { r = p + (q - p) * (2 / 3 - t) * 6; }\n        //         else { r = p; }\n        //         t = h\n        //         if (t < 0) { t += 1; }\n        //         else if (t > 1) { t -= 1; }\n        //         if (t < 1 / 6) { g = p + (q - p) * 6 * t; }\n        //         else if (t < 1 / 2) { g = q; }\n        //         else if (t < 2 / 3) { g = p + (q - p) * (2 / 3 - t) * 6; }\n        //         else { g = p; }\n        //         t = h - 1 / 3\n        //         if (t < 0) { t += 1; }\n        //         else if (t > 1) { t -= 1; }\n        //         if (t < 1 / 6) { b = p + (q - p) * 6 * t; }\n        //         else if (t < 1 / 2) { b = q; }\n        //         else if (t < 2 / 3) { b = p + (q - p) * (2 / 3 - t) * 6; }\n        //         else { b = p; }\n        //     }\n        //     this.buf[pixeloffset + 0] = Math.round(g * 255);\n        //     this.buf[pixeloffset + 1] = Math.round(r * 255);\n        //     this.buf[pixeloffset + 2] = Math.round(b * 255);\n        // }\n\n        // show() { sendBuffer(this.buf, this.pin); }  //Send all the changes to the strip.\n\n        show() { \n            let newBuffer: Buffer;\n            newBuffer[0] = vfx_master_g[0]\n            newBuffer[1] = vfx_master_r[0]\n            newBuffer[2] = vfx_master_b[0]\n            // sendBuffer(this.buf.slice(0, 12), DigitalPin.P16);\n            sendBuffer(newBuffer, DigitalPin.P16);\n            sendBuffer(this.buf, DigitalPin.P15);\n            sendBuffer(this.buf, DigitalPin.P14);\n            sendBuffer(this.buf, DigitalPin.P13);\n            sendBuffer(this.buf, DigitalPin.P12);\n            sendBuffer(this.buf, DigitalPin.P8);\n            sendBuffer(this.buf, DigitalPin.P2);\n        }  //Send all the changes to the strip.\n\n        length() { return this._length; }   //Gets the number of pixels declared on the strip\n\n        shift(offset: number = 1): void { this.buf.shift(-offset * 3, this.start * 3, this._length * 3) }   //Shift LEDs forward and clear with zeros.\n\n        rotate(offset: number = 1): void { this.buf.rotate(-offset * 3, this.start * 3, this._length * 3) } //Rotate LEDs forward\n\n        setPin(pin: DigitalPin): void {\n            this.pin = pin;\n            pins.digitalWritePin(this.pin, 0);  // don't yield to avoid races on initialization\n        }\n    }\n\n    function create(thePin: DigitalPin, numleds: number): Strip {\n        let strip = new Strip();\n        strip.buf = pins.createBuffer(numleds * 3);\n        strip.start = 0;\n        strip._length = numleds;\n        strip.setPin(thePin)\n        return strip;\n    }\n\n    //% blockId=NL_PIXEL_CastleSay\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Sock Circle:%sockPin  Wheel Strip/Circle:%wheelPin  Score Circle:%scorePin \"\n    //% weight=100\n    export function castleSayLights(sockPin: DigitalPin, wheelPin: DigitalPin, scorePin: DigitalPin): void {\n        NeoWheel = create(wheelPin, 17)\n        vfx_light_count = 17\n        vfxInit()\n        // vfx_indicate_hue[31] = hues.yellow\n        vfx_indicate_tog[1] = 1\n    }\n\n\n    function vfxInit(): void{\n        vfx_parade_colors = [hues.red, hues.orange, hues.yellow, hues.cyan, hues.blue, hues.purple]\n        vfx_fire_colors = [hues.red, hues.red, hues.red, hues.red, hues.orange, hues.orange, hues.orange, hues.orange, hues.orange, hues.yellow]\n        for (let index = 0; index < 6; index++) {\n            vfx_parade_tog.push(randint(0, 1))\n            vfx_parade_hue.push(vfx_parade_colors[randint(0, vfx_parade_colors.length - 1)])\n            vfx_parade_sat.push(100)\n            vfx_parade_lum.push(randint(10, 65))\n        }\n        for (let index = 0; index < 1; index++) {\n            vfx_mine_tog.push(0)\n            vfx_mine_hue.push(hues.red)\n            vfx_mine_sat.push(100)\n            vfx_mine_lum.push(50)\n            vfx_glow_tog.push(0)\n            vfx_glow_hue.push(50)\n            vfx_glow_sat.push(0)\n            vfx_glow_lum.push(0)\n            vfx_active_tog.push(0)\n            vfx_active_hue.push(50)\n            vfx_active_sat.push(0)\n            vfx_glow_lum.push(0)\n            vfx_off_hue.push(0)\n            vfx_off_sat.push(0)\n            vfx_off_lum.push(0)\n        }\n        for (let index = 0; index < 3; index++) {\n            vfx_fire_tog.push(randint(0, 1))\n            vfx_fire_hue.push(vfx_fire_colors[randint(0, vfx_fire_colors.length - 1)])\n            vfx_fire_sat.push(100)\n            vfx_fire_lum.push(randint(30, 80))\n        }\n        for (let index = 0; index < 2; index++) {\n            vfx_indicate_tog.push(0)\n            vfx_indicate_lum.push(50)\n            vfx_indicate_hue.push(50)\n            vfx_indicate_sat.push(100)\n            vfx_idle_tog.push(1)\n            if (index % 2 == 0) { vfx_idle_tog[index] = 0; }\n            vfx_idle_hue.push(265)\n            if (index % 2 == 0) { vfx_idle_hue[index] = 2; }\n            vfx_idle_sat.push(100)\n            vfx_idle_lum.push(50)\n        }\n        for (let index = 0; index < vfx_light_count; index++) {\n            vfx_master_tog.push(0)\n            vfx_master_hue.push(0)\n            vfx_master_sat.push(100)\n            vfx_master_lum.push(50)\n            vfx_master_effect.push(vfxEffect.off)    //leave this be!\n        }\n    }\n\n    //% blockId=NL_PIXEL_ResetVFX\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Reset VFX %effect\"\n    //% weight=100\n    export function vfxReset(effect:vfxEffect):void{\n        if (effect == vfxEffect.idle){\n            for (let index = 0; index < 2; index++) {\n                vfx_idle_tog[index]=1\n                if (index % 2 == 0) { vfx_idle_tog[index] = 0; }\n                vfx_idle_hue[index]=265\n                if (index % 2 == 0) { vfx_idle_hue[index] = 2; }\n                vfx_idle_sat[index]=100\n                vfx_idle_lum[index]=50\n            }\n        } else if (effect == vfxEffect.glow) {\n            for (let index = 0; index < 1; index++) {\n                vfx_glow_tog[index] = 0\n                vfx_glow_hue[index] = 50\n                // vfx_glow_sat[index] = 100\n                vfx_glow_lum[index] = 0\n            }\n        } else if (effect == vfxEffect.mine) {\n            for (let index = 0; index < 1; index++) {\n                vfx_mine_tog[index] = 0\n                vfx_mine_hue[index] = hues.red\n                vfx_mine_sat[index] = 100\n                vfx_mine_lum[index] = 50\n            }\n        } else if (effect == vfxEffect.indicate) {\n            for (let index = 0; index < 2; index++) {\n                vfx_indicate_tog[index] = 0\n                vfx_indicate_sat[index] = 100\n                vfx_indicate_lum[index] = 50\n            }\n        }\n    }\n\n    //% blockId=NL_PIXEL_CastleSayTick\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Advance Castle Say lights\"\n    //% weight=100\n    export function castleSayTick(): void {\n        paradeTick()\n        fireTick()\n        glowTick()\n        activeTick()\n        castleSayWrite()\n        indicateTick()\n        idleTick()\n        mineTick()\n    }\n\n    function paradeTick(): void{\n        for (let index=0; index < 6; index++){\n            let thisLum = vfx_parade_lum[index]\n            let thisHue = vfx_parade_hue[index]\n            let thisTog = vfx_parade_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0){\n                if (thisLum < 65){\n                    vfx_parade_lum[index] = thisLum + 12\n                } else if (thisLum >= 65){\n                    vfx_parade_tog[index] = 1\n                }\n            } else if (thisTog == 1){\n                if (thisLum>10){\n                    vfx_parade_lum[index] = thisLum - 4\n                } else if (thisLum <= 10){\n                    vfx_parade_tog[index] = 0\n                    while (nextHue == thisHue){\n                        nextHue = vfx_parade_colors[randint(0, vfx_parade_colors.length - 1)]\n                    }\n                    vfx_parade_hue[index] = nextHue\n                    vfx_parade_lum[index] = thisLum - randint(0,10)\n                }\n            }\n        }\n    }\n\n    function mineTick(): void {\n        for (let index = 0; index < 1; index++) {\n            let thisLum = vfx_mine_lum[index]\n            let thisHue = vfx_mine_hue[index]\n            let thisTog = vfx_mine_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 200) {\n                    vfx_mine_lum[index] = thisLum + 30\n                } else if (thisLum >= 200) {\n                    vfx_mine_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 0) {\n                    vfx_mine_lum[index] = thisLum - 30\n                } else if (thisLum <= 0) {\n                    vfx_mine_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function idleTick(): void {\n        for (let index = 0; index < 2; index++) {\n            let thisLum = vfx_idle_lum[index]\n            let thisHue = vfx_idle_hue[index]\n            let thisTog = vfx_idle_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisHue < 265) {\n                    vfx_idle_hue[index] = thisHue + 1\n                } else if (thisHue >= 265) {\n                    vfx_idle_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisHue > 2) {\n                    vfx_idle_hue[index] = thisHue - 1\n                } else if (thisHue <= 2) {\n                    vfx_idle_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function indicateTick(): void {\n        for (let index = 0; index < 2; index++) {\n            let thisLum = vfx_indicate_lum[index]\n            let thisHue = vfx_indicate_hue[index]\n            let thisTog = vfx_indicate_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 80) {\n                    vfx_indicate_lum[index] = thisLum + 12\n                } else if (thisLum >= 80) {\n                    vfx_indicate_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 25) {\n                    vfx_indicate_lum[index] = thisLum - 4\n                } else if (thisLum <= 25) {\n                    vfx_indicate_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function fireTick(): void {\n        for (let index = 0; index < 3; index++) {\n            let thisLum = vfx_fire_lum[index]\n            let thisHue = vfx_fire_hue[index]\n            let thisTog = vfx_fire_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 80) {\n                    vfx_fire_lum[index] = thisLum + 15\n                } else if (thisLum >= 80) {\n                    vfx_fire_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 30) {\n                    vfx_fire_lum[index] = thisLum - 5\n                } else if (thisLum <= 30) {\n                    vfx_fire_tog[index] = 0\n                    while (nextHue == thisHue) {\n                        nextHue = vfx_fire_colors[randint(0, vfx_fire_colors.length - 1)]\n                    }\n                    vfx_fire_hue[index] = nextHue\n                    vfx_fire_lum[index] = thisLum - randint(0, 30)\n                }\n            }\n        }\n    }\n\n    function glowTick(): void {\n        for (let index = 0; index < 1; index++) {\n            let thisLum = vfx_glow_lum[index]\n            if (thisLum < 4){\n                vfx_glow_lum[index] = thisLum+.2\n            } else if (thisLum < 5) {\n                vfx_glow_lum[index] = thisLum+ + .3\n            } else if (thisLum < 10) {\n                vfx_glow_lum[index] = thisLum + .5\n            } else if (thisLum < 15) {\n                vfx_glow_lum[index] = thisLum + 1\n            }else if (thisLum < 30) {\n                vfx_glow_lum[index] = thisLum + 1.5\n            } else if (thisLum < 100) {\n                vfx_glow_lum[index] = thisLum + 4\n            } else{\n                vfx_glow_lum[index] = 0\n            }\n        }\n    }\n\n    function activeTick(): void {\n        for (let index = 0; index < 1; index++) {\n            let thisLum = vfx_active_lum[index]\n            if (thisLum < 4) {\n                vfx_active_lum[index] = thisLum + .2\n            } else if (thisLum < 5) {\n                vfx_active_lum[index] = thisLum + + .3\n            } else if (thisLum < 10) {\n                vfx_active_lum[index] = thisLum + .5\n            } else if (thisLum < 15) {\n                vfx_active_lum[index] = thisLum + 1\n            } else if (thisLum < 30) {\n                vfx_active_lum[index] = thisLum + 1.5\n            } else if (thisLum < 100) {\n                vfx_active_lum[index] = thisLum + 4\n            } else {\n                vfx_active_lum[index] = 0\n            }\n        }\n    }\n\n    function vfxPrepareMaster(): void{\n        vfx_master_hue[0] = vfx_glow_hue[0]\n        vfx_master_sat[0] = vfx_glow_sat[0]\n        vfx_master_lum[0] = Math.min(100, vfx_glow_lum[0])\n        vfx_master_hue[1] = vfx_mine_hue[0]\n        vfx_master_sat[1] = vfx_mine_sat[0]\n        vfx_master_lum[1] = Math.max(0, Math.min(50, vfx_mine_lum[0]))\n        vfx_master_hue[2] = vfx_idle_hue[0]\n        vfx_master_sat[2] = vfx_idle_sat[0]\n        vfx_master_lum[2] = Math.max(0, Math.min(50, vfx_idle_lum[0]))\n        vfx_master_hue[3] = vfx_idle_hue[1]\n        vfx_master_sat[3] = vfx_idle_sat[1]\n        vfx_master_lum[3] = Math.max(0, Math.min(50, vfx_idle_lum[1]))\n        vfx_master_hue[4] = vfx_indicate_hue[0]\n        vfx_master_sat[4] = vfx_indicate_sat[0]\n        vfx_master_lum[4] = Math.max(0, Math.min(50, vfx_indicate_lum[0]))\n        vfx_master_hue[5] = vfx_indicate_hue[1]\n        vfx_master_sat[5] = vfx_indicate_sat[1]\n        vfx_master_lum[5] = Math.max(0, Math.min(50, vfx_indicate_lum[1]))\n        vfx_master_hue[6] = vfx_parade_hue[0]\n        vfx_master_sat[6] = vfx_parade_sat[0]\n        vfx_master_lum[6] = Math.max(0, Math.min(50, vfx_parade_lum[0]))\n        vfx_master_hue[7] = vfx_parade_hue[1]\n        vfx_master_sat[7] = vfx_parade_sat[1]\n        vfx_master_lum[7] = Math.max(0, Math.min(50, vfx_parade_lum[1]))\n        vfx_master_hue[8] = vfx_parade_hue[2]\n        vfx_master_sat[8] = vfx_parade_sat[2]\n        vfx_master_lum[8] = Math.max(0, Math.min(50, vfx_parade_lum[2]))\n        vfx_master_hue[9] = vfx_parade_hue[3]\n        vfx_master_sat[9] = vfx_parade_sat[3]\n        vfx_master_lum[9] = Math.max(0, Math.min(50, vfx_parade_lum[3]))\n        vfx_master_hue[10] = vfx_parade_hue[4]\n        vfx_master_sat[10] = vfx_parade_sat[4]\n        vfx_master_lum[10] = Math.max(0, Math.min(50, vfx_parade_lum[4]))\n        vfx_master_hue[11] = vfx_parade_hue[5]\n        vfx_master_sat[11] = vfx_parade_sat[5]\n        vfx_master_lum[11] = Math.max(0, Math.min(50, vfx_parade_lum[5]))\n        vfx_master_hue[12] = vfx_fire_hue[0]\n        vfx_master_sat[12] = vfx_fire_sat[0]\n        vfx_master_lum[12] = Math.max(0, Math.min(50, vfx_fire_lum[0]))\n        vfx_master_hue[13] = vfx_fire_hue[1]\n        vfx_master_sat[13] = vfx_fire_sat[1]\n        vfx_master_lum[13] = Math.max(0, Math.min(50, vfx_fire_lum[1]))\n        vfx_master_hue[14] = vfx_fire_hue[2]\n        vfx_master_sat[14] = vfx_fire_sat[2]\n        vfx_master_lum[14] = Math.max(0, Math.min(50, vfx_fire_lum[2]))\n        vfx_master_hue[15] = vfx_off_hue[0]\n        vfx_master_sat[15] = vfx_off_sat[0]\n        vfx_master_lum[15] = 0\n        vfx_master_hue[16] = vfx_active_hue[0]\n        vfx_master_sat[16] = vfx_active_sat[0]\n        vfx_master_lum[16] = Math.min(100, vfx_active_lum[0])\n        for (let index=0; index < NeoWheel.length(); index++){\n\n        }\n        // NeoWheel.buf.getNumber(0)\n\n    }\n\n    function castleSayWrite(): void{\n        vfxPrepareMaster()\n        let masterIndex = 0\n        for (let index = 0; index < NeoWheel.length(); index++) {\n            NeoWheel.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        NeoWheel.show()\n    }\n\n    //% blockId=NL_PIXEL_SetEffect\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Set %region VFX to %effect\"\n    //% weight=100\n    export function setEffect(region:vfxRegion, effect:vfxEffect){\n        if (region == vfxRegion.Score1){\n            vfx_master_effect[30] = effect\n        } else if (region == vfxRegion.Score2) {\n            vfx_master_effect[31] = effect\n        } else if (region == vfxRegion.Score3) {\n            vfx_master_effect[32] = effect\n        } else if (region == vfxRegion.Score4) {\n            vfx_master_effect[33] = effect\n        } else if (region == vfxRegion.Score5) {\n            vfx_master_effect[26] = effect\n        } else if (region == vfxRegion.Score6) {\n            vfx_master_effect[27] = effect\n        } else if (region == vfxRegion.Score7) {\n            vfx_master_effect[28] = effect\n        } else if (region == vfxRegion.Score8) {\n            vfx_master_effect[29] = effect\n        } else if (region == vfxRegion.ScoreAll) {\n            for (let i = 26; i <= 33; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SockAll) {\n            for (let i = 0; i <= 7; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelInner) {\n            for (let i = 18; i <= 25; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelOuter) {\n            for (let i = 8; i <= 17; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelAll) {\n            for (let i=8; i <= 25; i++){ vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.CastleSayAll) {\n            for (let i = 0; i <= 33; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotA) {\n            for (let i = 8; i <= 11; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotB) {\n            for (let i = 6; i <= 7; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotC) {\n            for (let i = 12; i <= 13; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotD) {\n            for (let i = 4; i <= 5; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotE) {\n            for (let i = 14; i <= 15; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotF) {\n            for (let i = 2; i <= 3; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotG) {\n            for (let i = 16; i <= 17; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotH) {\n            for (let i = 0; i <= 1; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotI) {\n            for (let i = 18; i <= 19; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotAll) {\n            for (let i = 0; i <= 19; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.BrickWheel) {\n            vfx_master_effect[20] = effect\n            vfx_master_effect[27] = effect\n        } else if (region == vfxRegion.BrickBomb) {\n            vfx_master_effect[25] = effect\n        } else if (region == vfxRegion.BrickShell) {\n            vfx_master_effect[26] = effect\n        } else if (region == vfxRegion.BrickGhost) {\n            vfx_master_effect[24] = effect\n        } else if (region == vfxRegion.BrickDragon) {\n            for (let i = 22; i <= 23; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.BrickCannon) {\n            vfx_master_effect[21] = effect\n        } else if (region == vfxRegion.BrickAll) {\n            for (let i = 20; i <= 27; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongFront) {\n            for (let i = 28; i <= 29; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongBack) {\n            for (let i = 30; i <= 31; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongAll) {\n            for (let i = 28; i <=31; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.CastleDoAll) {\n            for (let i = 0; i < vfx_light_count; i++) { vfx_master_effect[i] = effect };\n        } \n    }\n\n    export enum vfxRegion{\n        Score1, Score2, Score3, Score4, Score5, Score6, Score7, Score8, ScoreAll,\n        SockAll,\n        WheelInner, WheelOuter, WheelAll,\n        KongFront, KongBack, KongAll,\n        BrickWheel, BrickBomb, BrickShell, BrickGhost, BrickDragon, BrickCannon, BrickAll,\n        SpotA, SpotB, SpotC, SpotD, SpotE, SpotF, SpotG, SpotH, SpotI, SpotAll,\n        CastleSayAll,\n        CastleDoAll\n    }\n\n/// END NEOPIXEL ///\n\n\n/// BEGIN SONAR ///\n\n    let sonarPinT = DigitalPin.P0\n    let sonarPinE = DigitalPin.P0\n\n    //% blockId=NL_SENSOR_SonarFirstRead\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"first distance from sonar at %pin1|%pin2\"\n    //% weight=101\n    export function SonarFirstRead(pin1: DigitalPin, pin2: DigitalPin): number {\n        sonarPinT = pin1\n        sonarPinE = pin2\n        pins.setPull(sonarPinT, PinPullMode.PullNone)\n        return SonarNextRead()\n    }\n\n    //% blockId=NL_SENSOR_SonarNextRead\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"next sonar distance\"\n    //% weight=100\n    export function SonarNextRead(): number {\n        pins.digitalWritePin(sonarPinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(sonarPinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(sonarPinT, 0)\n        return Math.floor(pins.pulseIn(sonarPinE, PulseValue.High, 25000) * 34 / 2000)\n    }\n\n/// END SONAR ///\n\n\n/// BEGIN MP3 ///\n\n    export enum playType { Play = 0x0D, Stop = 0x16, PlayNext = 0x01, PlayPrevious = 0x02, Pause = 0x0E }\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    let mp3musicPin: SerialPin\n    let mp3music = false\n    let mp3player = false\n    let mp3sfxPin: SerialPin\n    let mp3sfx = false\n    let mp3musicVol = 0\n    let mp3playerPin: SerialPin\n    let mp3playerVol = 0\n    let mp3sfxVol = 0\n    let isPot = false\n    let potPin = AnalogPin.P0\n    let masterVolume = 25\n\n    //% blockId=NL_SENSOR_TrimpotSet\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"set volume control pot at %aPin\"\n    export function potSet(aPin: AnalogPin): void {\n        potPin = aPin\n        isPot = true\n        masterVolume = potRead()\n    }\n\n    function potRead() {\n        if (isPot) { return Math.round(pins.map(pins.analogReadPin(potPin), 0, 1023, 0, 30)) }\n        else { return 5 }\n    }\n\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) { total += dataArr[i] }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) { myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i]) }\n        serial.writeBuffer(myBuff)\n        basic.pause(20) // Was 100; problematic at 10\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) { myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i]) }\n        serial.writeBuffer(myBuff)\n    }\n\n    //% blockId=NL_MP3_InitiateAs\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Ready MP3bit for %type at %sPin\"\n    //% dPin.fieldEditor=\"gridpicker\"\n    export function mp3setPorts(mp3bit: mp3type, sPin: SerialPin): void {\n        if (mp3bit == mp3type.music) {\n            mp3musicPin = sPin\n            mp3music = true\n            mp3musicVol = 100\n            setVolume(mp3type.music, mp3musicVol)\n        } else if (mp3bit == mp3type.player) {\n            mp3playerPin = sPin\n            mp3player = true\n            mp3playerVol = 100\n            setVolume(mp3type.player, mp3playerVol)\n        } else if (mp3bit == mp3type.sfxvoice) {\n            mp3sfxPin = sPin\n            mp3sfx = true\n            mp3sfxVol = 100\n            setVolume(mp3type.sfxvoice, mp3sfxVol)\n        }   \n    }\n\n    //% blockId=\"nl_playfilefolder\" \n    //% block=\"Play folder %folderNum file %fileNum on %sPin\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3fileFolder(folderNum: string, fileNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        dataArr[5] = parseInt(folderNum)\n        dataArr[6] = parseInt(fileNum)\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"NL_MP3_SendNumbers\" \n    //% block=\"Send numbers for folder %folderNum file %fileNum on %sPin\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3numbers(folderNum: number, fileNum: number, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        dataArr[3] = 15\n        dataArr[5] = folderNum\n        dataArr[6] = fileNum\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=NL_MP3_UpdateVolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Update volume for all\"\n    export function updateVolumeGlobal(): void {\n        let nowVol = potRead()\n        if (masterVolume != nowVol){\n            masterVolume = nowVol\n            setVolume(mp3type.music, mp3musicVol)\n            setVolume(mp3type.player, mp3playerVol)\n            setVolume(mp3type.sfxvoice, mp3sfxVol)\n        }\n    }\n\n    //% blockId=NL_MP3_SetVolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Set %mp3bit volume to %vol\"\n    export function setVolume(mp3bit:mp3type, vol:number): void {\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3musicVol = vol\n        } else if (mp3bit == mp3type.player) {\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3playerVol = vol\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3sfxVol = vol\n        }\n        dataArr[3] = 6\n        dataArr[5] = 0\n        dataArr[6] = Math.round(vol / 100 * masterVolume)\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=NL_MP3_GetVolumes\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Get current volumes\"\n    export function getVolumes() {\n        return \"m\" + mp3musicVol + \" p\" + mp3playerVol + \" s\" + mp3sfxVol + \" g\" + masterVolume\n    }\n\n    //% blockId=\"NL_MP3_StopPlayback\" \n    //% block=\"Stop playback on %mp3bit\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function stopPlayback(mp3bit:mp3type): void {\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        } else if (mp3bit == mp3type.player){\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        }\n        CMD = 0x16\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n/// END MP3 ///\n\n/// BEGIN SOUND BANK ///\n    export enum mp3type { music, player, sfxvoice }\n    export enum musicGenre { intro, tutorial, awaiting, level, won, lost }\n    export enum playerSaying { ready, yay, intro, nay, ouch, success, failure, won, lost, hurry }\n    export enum sfxType { correct, incorrect, ghost, fire, explosion, splash, spark, slash }\n    export enum voiceSaying { name, begin, retry, next, complete, gameover, welcome, intro, howto1, howto2, howto3, howto4, howto5, howto6, howto7, howto8, howto9 }\n    export enum magicianSaysSide { left, right }\n    export enum magicianDifficulty { easy, medium, hard }\n    export enum spotName { A, B, C, D, E, F, G, H, I }\n    export enum playerChar { mario, luigi, peach, daisy, toad, wario }\n\n    let sb_music_tutorial = feedBank(\"1.1.46|1.2.51|1.3.51|1.4.59|1.5.60|1.6.60|1.7.60|1.8.60|1.9.60|1.10.60|1.11.60|1.12.60|1.13.60|1.14.60|1.15.60|1.16.60|1.17.60|1.18.60|1.19.60|1.20.60|1.21.60\")\n    let sb_music_awaiting = feedBank(\"2.1.64|2.2.120|2.3.120|2.4.120|2.5.120|2.6.114|2.7.120|2.8.103|2.9.120|2.10.120|2.11.120|2.12.120|2.13.119|2.14.120|2.15.120|2.16.103|2.17.119|2.18.120|2.19.86|2.20.120\")\n    let sb_music_level = feedBank(\"3.1.120|3.2.120|3.3.120|3.4.120|3.5.120|3.6.120|3.7.120|3.8.120|3.9.120|3.10.92|3.11.120|3.12.120|3.13.111|3.14.116|3.15.98|3.16.120|3.17.120|3.18.82|3.19.120|3.20.120|3.21.120|3.22.120|3.23.120|3.24.120|3.25.120|3.26.120|3.27.91|3.28.120|3.29.120|3.30.41|3.31.120|3.32.120|3.33.120|3.34.94|3.35.120|3.36.120|3.37.120|3.38.120|3.39.120|3.40.120|3.41.78|3.42.120|3.43.120|3.44.120|3.45.120|3.46.120|3.47.120|3.48.120|3.49.120|3.50.120|3.51.120|3.52.113|3.53.120|3.54.120|3.55.42|3.56.120|3.57.120|3.58.120|3.59.114|3.60.120|3.61.120|3.62.118|3.63.120|3.64.120|3.65.120|3.66.120|3.67.120|3.68.59|3.69.120|3.70.120|3.71.118|3.72.120|3.73.120|3.74.70|3.75.120|3.76.120|3.77.120|3.78.120|3.79.120|3.80.120|3.81.120|3.82.120|3.83.80|3.84.120|3.85.120|3.86.120|3.87.120|3.88.107|3.89.120|3.90.120|3.91.120|3.92.120|3.93.36|3.94.120|3.95.120|3.96.120|3.97.120|3.98.120|3.99.120|3.100.63|3.101.120|3.102.120|3.103.112|3.104.105|3.105.120|3.106.110|3.107.120|3.108.120|3.109.120|3.110.120|3.111.120|3.112.120|3.113.120|3.114.120|3.115.120|3.116.119|3.117.120|3.118.120|3.119.120|3.120.120|3.121.120|3.122.120|3.123.120|3.124.120|3.125.120|3.126.104|3.127.120|3.128.87|3.129.120|3.130.118|3.131.120|3.132.120|3.133.50|3.134.109|3.135.120|3.136.120|3.137.120|3.138.91|3.139.120|3.140.120|3.141.120|3.142.120|3.143.120|3.144.120|3.145.104|3.146.112|3.147.120\")\n    let sb_music_won = feedBank(\"4.1.30|4.2.22|4.3.30|4.4.17|4.5.29|4.6.30|4.7.30|4.8.30|4.9.30|4.10.30|4.11.20|4.12.28|4.13.30|4.14.15|4.15.30|4.16.17|4.17.17|4.18.15|4.19.30|4.20.30|4.21.30|4.22.17|4.23.30|4.24.30|4.25.30\")\n    let sb_music_lost = feedBank(\"5.1.30|5.2.30|5.3.30|5.4.30|5.5.30|5.6.30|5.7.30|5.8.30|5.9.30|5.10.30|5.11.30\")\n    let sb_music_intro = feedBank(\"9.1.3|9.2.4|9.3.8|9.4.5|9.5.4|9.6.12|9.7.3|9.8.7|9.9.6|9.10.7|9.11.9|9.12.9|9.13.11|9.14.3|9.15.10|9.16.3|9.17.6|9.18.5|9.19.6|9.20.5|9.21.7|9.22.5|9.23.3|9.24.7|9.25.6|9.26.6|9.27.11|9.28.5|9.29.5|9.30.4|9.31.6|9.32.4|9.33.4|9.34.10|9.35.8|9.36.8|9.37.3|9.38.7|9.39.4|9.40.6|9.41.3|9.42.7|9.43.7|9.44.3|9.45.6|9.46.1|9.47.2|9.48.2|9.49.8|9.50.16|9.51.9|9.52.10|9.53.13|9.54.14|9.55.14|9.56.16|9.57.7|9.58.4|9.59.9|9.60.8|9.61.9|9.62.9|9.63.12|9.64.4|9.65.6|9.66.9|9.67.5|9.68.6|9.69.5|9.70.10|9.71.8|9.72.8|9.73.5|9.74.3\")\n    let sb_sfx_correct = feedBank(\"6.1.5|6.2.8|6.3.6|6.4.7|6.5.6|6.6.14|6.7.7|6.8.8|6.9.12|6.10.7|6.11.9|6.12.7|6.13.10|6.14.8|6.15.8|6.16.4|6.17.7|6.18.4|6.19.2|6.20.10|6.21.7|6.22.7|6.23.6|6.24.4|6.25.7|6.26.12|6.27.4|6.28.6|6.29.6|6.30.6|6.31.4|6.32.5|6.33.3|6.34.6|6.35.6|6.36.6|6.37.6|6.38.4|6.39.8|6.40.6|6.41.3|6.42.3|6.43.7|6.44.8|6.45.6|6.46.2|6.47.5|6.48.7|6.49.8|6.50.7|6.51.6|6.52.7|6.53.6|6.54.8|6.55.5|6.56.5|6.57.7|6.58.6|6.59.8|6.60.5|6.61.6|6.62.8|6.63.3|6.64.3|6.65.6|6.66.3|6.67.6|6.68.2|6.69.3|6.70.3|6.71.2|6.72.3|6.73.6|6.74.7|6.75.5|6.76.3|6.77.5|6.78.3|6.79.2|6.80.3|6.81.3|6.82.1|6.83.1|6.84.1|6.85.1|6.86.1|6.87.1|6.88.3|6.89.1|6.90.1|6.91.4|6.92.4\")\n    let sb_sfx_incorrect = feedBank(\"7.1.6|7.2.5|7.3.3|7.4.5|7.5.7|7.6.6|7.7.4|7.8.1|7.9.3|7.10.4|7.11.3|7.12.3|7.13.6|7.14.3|7.15.1|7.16.1|7.17.1|7.18.1|7.19.5|7.20.4|7.21.3|7.22.7\")\n    let sb_sfx_beep = feedBank(\"8.1.1|8.2.2|8.3.1\")\n    let sb_sfx_smash = feedBank(\"8.4.1|8.5.1|8.6.1|8.7.3\")\n    let sb_sfx_falling = feedBank(\"8.8.6\")\n    let sb_sfx_boom = feedBank(\"8.9.1|8.10.2|8.11.3|8.12.2\")\n    let sb_sfx_cannon = feedBank(\"8.13.2|8.14.1|8.15.1|8.16.2|8.17.2\")\n    let sb_sfx_fire = feedBank(\"8.18.2|8.19.2|8.20.5|8.21.2\")\n    let sb_sfx_ghost = feedBank(\"8.22.5|8.23.4|8.24.5|8.25.5\")\n    let sb_sfx_hit = feedBank(\"8.26.1|8.27.1|8.28.1|8.29.1|8.30.1\")\n    let sb_sfx_slash = feedBank(\"8.31.1|8.32.1|8.33.1|8.34.1|8.35.1|8.36.1|8.37.1|8.38.1|8.39.1|8.40.1|8.41.1|8.42.2\")\n    let sb_sfx_zap = feedBank(\"8.43.1|8.44.1|8.45.2|8.46.1|8.47.2|8.48.1\")\n    let sb_sfx_splash = feedBank(\"8.49.2|8.50.2|8.51.1|8.52.1|8.53.2|8.54.1|8.55.2|8.56.1|8.57.2\")\n    let sb_sfx_voice = feedBank(\"10.1.4|10.2.6|10.3.4|10.4.4|10.5.6|10.6.4|10.7.11|10.8.6|10.9.4|10.10.1\")\n    let sb_magician_left_easy = feedBank(\"11.1.3|11.2.6|11.3.7|11.4.6|11.5.6|11.6.7|11.7.6|11.8.6|11.9.6|11.10.7|11.11.6|11.12.6|11.13.7|11.14.6|11.15.6|11.16.6|11.17.6|11.18.6|11.19.6|11.20.6|11.21.6|11.22.7|11.23.6|11.24.6|11.25.6|11.26.6|11.27.7|11.28.7|11.29.7|11.30.6|11.31.6|11.32.8|11.33.7|11.34.6|11.35.7|11.36.5|11.37.6|11.38.8|11.39.6|11.40.6|11.41.6|11.42.6|11.43.6|11.44.7|11.45.6|11.46.7|11.47.7|11.48.8|11.49.6|11.50.7|11.51.6|11.52.6|11.53.7|11.54.8|11.55.7|11.56.6|11.57.7|11.58.6|11.59.6|11.60.6|11.61.6\")\n    let sb_magician_left_medium = feedBank(\"11.62.7|11.63.6|11.64.6|11.65.8|11.66.7|11.67.8|11.68.8|11.69.8|11.70.7|11.71.7|11.72.6|11.73.6|11.74.6|11.75.6|11.76.6|11.77.7|11.78.6|11.79.7|11.80.6|11.81.6|11.82.6|11.83.7|11.84.6|11.85.6|11.86.6|11.87.7|11.88.6|11.89.6|11.90.7|11.91.6|11.92.6|11.93.6|11.94.6|11.95.6|11.96.7|11.97.6|11.98.6|11.99.7|11.100.6|11.101.6|11.102.6|11.103.7|11.104.6|11.105.8|11.106.6|11.107.6|11.108.6|11.109.7|11.110.6|11.111.7|11.112.7|11.113.6|11.114.6|11.115.7|11.116.6|11.117.7|11.118.7|11.119.6|11.120.6|11.121.6|11.122.7|11.123.7|11.124.6|11.125.6|11.126.6|11.127.8|11.128.7|11.129.6|11.130.8|11.131.7|11.132.6|11.133.7|11.134.6|11.135.6|11.136.7|11.137.7\")\n    let sb_magician_left_hard = feedBank(\"11.219.7|11.220.6|11.221.6|11.222.6|11.223.6|11.224.6|11.225.7|11.226.7|11.227.6|11.228.6|11.229.6|11.230.8|11.231.7|11.232.7|11.233.6|11.234.6|11.235.6|11.236.8|11.237.7|11.238.7|11.239.6|11.240.6|11.241.8|11.242.7|11.243.7|11.244.6|11.245.6|11.246.7|11.247.7|11.248.7|11.249.7|11.250.6|11.251.6|11.252.6|11.253.6|11.254.6|11.255.6|11.256.6|11.257.6|11.258.7|11.259.7|11.260.7|11.261.6|11.262.6|11.263.6|11.264.6|11.265.6|11.266.6|11.267.7|11.268.6|11.269.6|11.270.6|11.271.6|11.272.6|11.273.6|11.274.6|11.275.7|11.276.6|11.277.6|11.278.7|11.279.7|11.280.7|11.281.6|11.282.6|11.283.7|11.284.9|11.285.7|11.286.6|11.287.6|11.288.6|11.289.7|11.290.7|11.291.6|11.292.6|11.293.7|11.294.7|11.295.6|11.296.7|11.297.6|11.298.6|11.299.6|11.300.6|11.301.6|11.302.6|11.303.7|11.304.6|11.305.6|11.306.7|11.307.6|\")\n    let sb_magician_right_easy = feedBank(\"11.159.6|11.160.6|11.161.7|11.162.6|11.163.7|11.164.7|11.165.6|11.166.6|11.167.7|11.168.7|11.169.6|11.170.8|11.171.7|11.172.7|11.173.6|11.174.6|11.175.6|11.176.6|11.177.7|11.178.6|11.179.6|11.180.6|11.181.6|11.182.7|11.183.6|11.184.6|11.185.6|11.186.6|11.187.8|11.188.7|11.189.6|11.190.6|11.191.6|11.192.6|11.193.6|11.194.6|11.195.5|11.196.6|11.197.6|11.198.6|11.199.7|11.200.6|11.201.6|11.202.6|11.203.6|11.204.6|11.205.6|11.206.6|11.207.6|11.208.6|11.209.6|11.210.7|11.211.7|11.212.7|11.213.6|11.214.7|11.215.7|11.216.6|11.217.7|11.218.6\")\n    let sb_magician_right_medium = feedBank(\"11.219.7|11.220.6|11.221.6|11.222.6|11.223.6|11.224.6|11.225.7|11.226.7|11.227.6|11.228.6|11.229.6|11.230.8|11.231.7|11.232.7|11.233.6|11.234.6|11.235.6|11.236.8|11.237.7|11.238.7|11.239.6|11.240.6|11.241.8|11.242.7|11.243.7|11.244.6|11.245.6|11.246.7|11.247.7|11.248.7|11.249.7|11.250.6|11.251.6|11.252.6|11.253.6|11.254.6|11.255.6|11.256.6|11.257.6|11.258.7|11.259.7|11.260.7|11.261.6|11.262.6|11.263.6|11.264.6|11.265.6|11.266.6|11.267.7|11.268.6|11.269.6|11.270.6|11.271.6|11.272.6|11.273.6|11.274.6|11.275.7|11.276.6|11.277.6|11.278.7|11.279.7|11.280.7|11.281.6|11.282.6|11.283.7|11.284.9|11.285.7|11.286.6|11.287.6\")\n    let sb_magician_right_hard = feedBank(\"11.288.6|11.289.7|11.290.7|11.291.6|11.292.6|11.293.7|11.294.7|11.295.6|11.296.7|11.297.6|11.298.6|11.299.6|11.300.6|11.301.6|11.302.6|11.303.7|11.304.6|11.305.6|11.306.7|11.307.6|11.308.7|11.309.6|11.310.6|11.311.6|11.312.7|11.313.7|11.314.6|11.315.7\")\n    let sb_mario_name = feedBank(\"12.1.2|12.2.1|12.4.2|12.5.3\")\n    let sb_mario_intro = feedBank(\"12.3.4|12.6.2|12.7.212.112.1|12.113.1|\")\n    let sb_mario_ready = feedBank(\"12.8.1|12.9.2|12.10.2|12.11.1|12.12.1|12.13.2|12.14.2|12.15.2|12.16.2|12.17.2|12.18.1\")\n    let sb_mario_yay = feedBank(\"12.19.1|12.20.1|12.21.1|12.22.1|12.23.1|12.24.1|12.25.1|12.26.1|12.27.1|12.28.1|12.29.1|12.30.1|12.31.1|12.32.1|12.33.1|12.34.1|12.35.1|12.36.1|12.37.1|12.38.1|12.39.1|12.40.1|12.41.1|12.42.1|12.43.1|12.44.1|12.45.1|12.46.1|12.47.1|12.48.1|12.49.1|12.50.1|12.51.2|12.52.2|12.53.2|12.54.2|12.55.2|12.56.2|12.57.2|12.58.2|12.59.2|12.60.2|12.61.2|12.62.2\")\n    let sb_mario_success = feedBank(\"12.63.1|12.64.2|12.65.2|12.66.2|12.67.2|12.68.3|12.69.3|12.70.3|12.71.3|12.72.3\")\n    let sb_mario_won = feedBank(\"12.73.2|12.74.2|12.75.3|12.76.3|12.77.3\")\n    let sb_mario_ouch = feedBank(\"12.78.1|12.79.1|12.80.1|12.81.1|12.82.1|12.83.1|12.84.1|12.85.1|12.86.1|12.87.1|12.88.1|12.89.1|12.90.1|12.91.1|12.92.1|12.93.1|12.94.1|12.95.1\")\n    let sb_mario_nay = feedBank(\"12.96.1|12.97.1|12.98.1|12.99.1|12.100.1|12.101.1|12.102.2|12.103.1|12.104.1|12.105.1|12.106.1|12.107.1|12.108.1|12.109.1|12.110.2|12.111.2\")\n    let sb_mario_failure = feedBank(\"12.114.2|12.115.2|12.116.2|12.117.1\")\n    let sb_mario_lost = feedBank(\"12.118.3|12.119.3|12.120.4|12.121.1\")\n    let sb_mario_hurry = feedBank(\"12.122.44\")\n    \n    let playlist_tutorial = makePlaylist(sb_music_tutorial)\n    let playlist_awaiting = makePlaylist(sb_music_awaiting)\n    let playlist_level = makePlaylist(sb_music_level)\n    let playlist_won = makePlaylist(sb_music_won)\n    let playlist_lost = makePlaylist(sb_music_lost)\n    let playlist_correct = makePlaylist(sb_sfx_correct)\n    let playlist_incorrect = makePlaylist(sb_sfx_incorrect)\n    let playlist_intro = makePlaylist(sb_music_intro)\n    let playlist_boom = makePlaylist(sb_sfx_boom)\n    let playlist_smash = makePlaylist(sb_sfx_smash)\n    let playlist_falling = makePlaylist(sb_sfx_falling)\n    let playlist_cannon = makePlaylist(sb_sfx_cannon)\n    let playlist_fire = makePlaylist(sb_sfx_fire)\n    let playlist_ghost = makePlaylist(sb_sfx_ghost)\n    let playlist_hit = makePlaylist(sb_sfx_hit)\n    let playlist_slash = makePlaylist(sb_sfx_slash)\n    let playlist_zap = makePlaylist(sb_sfx_zap)\n    let playlist_splash = makePlaylist(sb_sfx_splash)\n    let playlist_magician_left_easy = makePlaylist(sb_magician_left_easy)\n    let playlist_magician_left_medium = makePlaylist(sb_magician_left_medium)\n    let playlist_magician_left_hard = makePlaylist(sb_magician_left_hard)\n    let playlist_magician_right_easy = makePlaylist(sb_magician_right_easy)\n    let playlist_magician_right_medium = makePlaylist(sb_magician_right_medium)\n    let playlist_magician_right_hard = makePlaylist(sb_magician_right_hard)\n    let playlist_mario_name = makePlaylist(sb_mario_name)\n    let playlist_mario_intro = makePlaylist(sb_mario_intro)\n    let playlist_mario_ready = makePlaylist(sb_mario_ready)\n    let playlist_mario_yay = makePlaylist(sb_mario_yay)\n    let playlist_mario_success = makePlaylist(sb_mario_success)\n    let playlist_mario_won = makePlaylist(sb_mario_won)\n    let playlist_mario_ouch = makePlaylist(sb_mario_ouch)\n    let playlist_mario_nay = makePlaylist(sb_mario_nay)\n    let playlist_mario_failure = makePlaylist(sb_mario_failure)\n    let playlist_mario_lost = makePlaylist(sb_mario_lost)\n    let playlist_mario_hurry = makePlaylist(sb_mario_hurry)\n    let playtimeMusic = 0\n    let playtimePlayer = 0\n    let playtimeSfxVoice = 0\n\n    function takeRotate(PlaylistIn: number[]) {\n        let returnTrack = PlaylistIn.shift()\n        PlaylistIn.push(returnTrack)\n        return returnTrack\n    }\n    function feedBank(BankString: string) {\n        let returnBank: number[][] = []\n        let BankSplit = BankString.split(\"|\")\n        for (let soundString of BankSplit) {\n            returnBank.push([parseFloat(soundString.split(\".\")[0]), parseFloat(soundString.split(\".\")[1]), parseFloat(soundString.split(\".\")[2])])\n        }\n        return returnBank\n    }\n    function makePlaylist(SoundBank: any[]) {\n        let returnList: number[] = []\n        let orderedList: number[] = []\n        for (let soundNo = 0; soundNo <= SoundBank.length - 1; soundNo++) {\n            orderedList.push(soundNo)\n        }\n        while (orderedList.length > 0) {\n            let randTrack = randint(0, orderedList.length - 1)\n            returnList.push(orderedList.removeAt(randTrack))\n        }\n        return returnList\n    }\n    function bankPlay(mp3bit:mp3type, SoundBank: number[][], trackIndex: number) {\n        let theSong = SoundBank[trackIndex]\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimeMusic = theSong[2]\n        } else if (mp3bit == mp3type.player) {\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimePlayer = theSong[2]\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimeSfxVoice = theSong[2]\n        }\n        dataArr[3] = 15\n        dataArr[5] = theSong[0]\n        dataArr[6] = theSong[1]\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=NL_MP3_PlaytimeMusic\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of music\"\n    export function mp3durationMusic(): number{\n        return playtimeMusic\n    }\n\n    //% blockId=NL_MP3_PlaytimePlayer\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of player sound\"\n    export function mp3durationPlayer(): number {\n        return playtimePlayer\n    }\n\n    //% blockId=NL_MP3_PlaytimeSFX\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of sfx/voice\"\n    export function mp3durationSfxVoice(): number {\n        return playtimeSfxVoice\n    }\n\n\n\n    //% blockId=NL_MP3_MusicPlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %genre music\"\n    export function mp3musicPlay(genre: musicGenre): void {\n        if (genre == musicGenre.tutorial){\n            bankPlay(mp3type.music, sb_music_tutorial, takeRotate(playlist_tutorial))\n        } else if (genre == musicGenre.awaiting) {\n            bankPlay(mp3type.music, sb_music_awaiting, takeRotate(playlist_awaiting))\n        } else if (genre == musicGenre.intro){\n            bankPlay(mp3type.music, sb_music_intro, takeRotate(playlist_intro))\n        } else if (genre == musicGenre.level) {\n            bankPlay(mp3type.music, sb_music_level, takeRotate(playlist_level))\n        } else if (genre == musicGenre.won) {\n            bankPlay(mp3type.music, sb_music_won, takeRotate(playlist_won))\n        } else if (genre == musicGenre.lost) {\n            bankPlay(mp3type.music, sb_music_lost, takeRotate(playlist_lost))\n        }\n    }\n\n    //% blockId=NL_MP3_PlayerSay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %saying as player\"\n    export function mp3sayPlay(saying: playerSaying): void {\n        if(saying == playerSaying.ready){\n            bankPlay(mp3type.player, sb_mario_ready, takeRotate(playlist_mario_ready))\n        }else if (saying == playerSaying.yay){\n            bankPlay(mp3type.player, sb_mario_yay, takeRotate(playlist_mario_yay))\n        } else if (saying == playerSaying.intro) {\n            bankPlay(mp3type.player, sb_mario_intro, takeRotate(playlist_mario_intro))\n        } else if (saying == playerSaying.nay) {\n            bankPlay(mp3type.player, sb_mario_nay, takeRotate(playlist_mario_nay))\n        } else if (saying == playerSaying.ouch) {\n            bankPlay(mp3type.player, sb_mario_ouch, takeRotate(playlist_mario_ouch))\n        } else if (saying == playerSaying.success) {\n            bankPlay(mp3type.player, sb_mario_success, takeRotate(playlist_mario_success))\n        } else if (saying == playerSaying.failure) {\n            bankPlay(mp3type.player, sb_mario_failure, takeRotate(playlist_mario_failure))\n        } else if (saying == playerSaying.won) {\n            bankPlay(mp3type.player, sb_mario_won, takeRotate(playlist_mario_won))\n        } else if (saying == playerSaying.lost) {\n            bankPlay(mp3type.player, sb_mario_lost, takeRotate(playlist_mario_lost))\n        } else if (saying == playerSaying.hurry) {\n            bankPlay(mp3type.player, sb_mario_hurry, takeRotate(playlist_mario_hurry))\n        }\n    }\n\n    //% blockId=NL_MP3_VoicePlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %voice as voice\"\n    export function mp3voicePlay(voice: voiceSaying): void {\n        if (voice == voiceSaying.name) {\n\n        } else if (voice == voiceSaying.begin) {\n\n        } else if (voice == voiceSaying.retry) {\n\n        } else if (voice == voiceSaying.next) {\n\n        } else if (voice == voiceSaying.complete) {\n\n        } else if (voice == voiceSaying.gameover) {\n\n        } else if (voice == voiceSaying.welcome) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 0)\n        } else if (voice == voiceSaying.intro) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 1)\n        } else if (voice == voiceSaying.howto1) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 2)\n        } else if (voice == voiceSaying.howto2) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 3)\n        } else if (voice == voiceSaying.howto3) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 4)\n        } else if (voice == voiceSaying.howto4) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 5)\n        } else if (voice == voiceSaying.howto5) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 6)\n        } else if (voice == voiceSaying.howto6) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 7)\n        } else if (voice == voiceSaying.howto7) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 8)\n        } else if (voice == voiceSaying.howto8) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 9)\n        } else if (voice == voiceSaying.howto9) {\n\n        }\n    }\n\n    //% blockId=NL_MP3_MagicianSay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Magician says on the %side difficulty %difficulty\"\n    export function mp3magician(side: magicianSaysSide, difficulty: magicianDifficulty): void {\n        if (side == magicianSaysSide.left) {\n            if (difficulty == magicianDifficulty.easy) {\n\n            } else if (difficulty = magicianDifficulty.medium) {\n\n            } else if (difficulty = magicianDifficulty.hard) {\n\n            }\n        } else if (side = magicianSaysSide.right) {\n            if (difficulty == magicianDifficulty.easy) {\n\n            } else if (difficulty = magicianDifficulty.medium) {\n\n            } else if (difficulty = magicianDifficulty.hard) {\n\n            }\n        } \n    }\n\n    //% blockId=NL_MP3_SfxPlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %sfx sound effect\"\n    export function mp3sfxPlay(sfx: sfxType): void {\n        if(sfx == sfxType.correct){\n            bankPlay(mp3type.sfxvoice, sb_sfx_correct, takeRotate(playlist_correct))\n        }else if (sfx == sfxType.incorrect){\n            bankPlay(mp3type.sfxvoice, sb_sfx_incorrect, takeRotate(playlist_incorrect))\n        }else if (sfx == sfxType.ghost){\n            bankPlay(mp3type.sfxvoice, sb_sfx_ghost, takeRotate(playlist_ghost))\n        }else if (sfx == sfxType.fire){\n            bankPlay(mp3type.sfxvoice, sb_sfx_fire, takeRotate(playlist_fire))\n        }else if (sfx == sfxType.explosion){\n            bankPlay(mp3type.sfxvoice, sb_sfx_boom, takeRotate(playlist_boom))\n        }else if (sfx == sfxType.splash){\n            bankPlay(mp3type.sfxvoice, sb_sfx_splash, takeRotate(playlist_splash))\n        } else if (sfx == sfxType.spark) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_zap, takeRotate(playlist_zap))\n        } else if (sfx == sfxType.slash) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_slash, takeRotate(playlist_slash))\n        }\n    }\n/// END SOUND BANK ///\n\n/// BEGIN MOTOR & RELAY ///\n    const kong_address = 0x10\n    export enum MotorList { M1=1, M2=2 }\n    export enum motors{ redrack=16, shark=4, ghost=5, cannon=8, oarrack=7, shell=6, door=3, dragon=9, wheel=1, fan=2 }\n    export enum motorState { min, max, mid, off }\n    export enum fogLevels { none = 0, light = 1, medium = 2, heavy = 3 }\n    export enum sockState { dancing = 1, still = 0 }\n    let motor_wheel_max = 12; let motor_wheel_min = 0\n    let servo_redrack_max = 150; let servo_redrack_min = 100\n    let servo_cannon_min = 135; let servo_cannon_max = 65\n    let servo_shark_min = 20; let servo_shark_max = 85\n    let servo_oarrack_min = 60; let servo_oarrack_max = 110\n    let servo_ghost_min = 110; let servo_ghost_max = 40\n    let servo_shell_min = 170; let servo_shell_max = 100\n    let servo_door_min = 50; let servo_door_max = 140; let servo_door_mid = 100\n    let motor_fan_min = 0; let motor_fan_mid = 50; let motor_fan_max = 100\n    let servo_dragon_min = 90; let servo_dragon_max = 79\n\n    export function servoSet(servo: motors, angle: number): void {\n        let buf = pins.createBuffer(4);\n        buf[0] = servo;\n        buf[1] = angle;\n        buf[2] = 0;\n        buf[3] = 0;\n        pins.i2cWriteBuffer(kong_address, buf);\n    }\n\n    export function motorSpeed(motor: MotorList, speed: number): void {\n        let buf = pins.createBuffer(4);\n        buf[0] = motor\n        buf[1] = 1;\n        if (speed < 0) {\n            buf[1] = 2;\n            speed = speed * -1\n        }\n        buf[2] = speed;\n        buf[3] = 0;\n        pins.i2cWriteBuffer(kong_address, buf);\n    }\n\n    //% blockId=NL_MOTOR_Set \n    //% block=\"Set %motor to %state\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function motorSet(motor:motors, state:motorState):void{\n        if (motor == motors.redrack){\n            if (state == motorState.min){ servoSet(motor, servo_redrack_min) } \n            else if (state == motorState.max){ servoSet(motor, servo_redrack_max) }\n        } if (motor == motors.shark) {\n            if (state == motorState.min) { servoSet(motor, servo_shark_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_shark_max) }\n        } if (motor == motors.ghost) {\n            if (state == motorState.min) { servoSet(motor, servo_ghost_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_ghost_max) }\n        } if (motor == motors.cannon) {\n            if (state == motorState.min) { servoSet(motor, servo_cannon_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_cannon_max) }\n        } if (motor == motors.oarrack) {\n            if (state == motorState.min) { servoSet(motor, servo_oarrack_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_oarrack_max) }\n        } if (motor == motors.shell) {\n            if (state == motorState.min) { servoSet(motor, servo_shell_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_shell_max) }\n        } if (motor == motors.door) {\n            if (state == motorState.min) { servoSet(motor, servo_door_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_door_max) }\n            else if (state == motorState.mid) { servoSet(motor, servo_door_mid) }\n        } if (motor == motors.dragon) {\n            if (state == motorState.min) { servoSet(motor, servo_dragon_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_dragon_max) }\n        } if (motor == motors.wheel) {\n            if (state == motorState.min) { motorSpeed(MotorList.M1, motor_wheel_min) }\n            else if (state == motorState.max) { motorSpeed(MotorList.M1, motor_wheel_max) }\n            else if (state == motorState.off) { motorSpeed(MotorList.M1, 0) }\n        } if (motor == motors.fan) {\n            if (state == motorState.min) { motorSpeed(MotorList.M2, motor_fan_min) }\n            else if (state == motorState.mid) { motorSpeed(MotorList.M2, motor_fan_mid) }\n            else if (state == motorState.max) { motorSpeed(MotorList.M2, motor_fan_max) }\n            else if (state == motorState.off) { motorSpeed(MotorList.M2, 0) }\n        }\n    }\n\n    //% blockId=NL_RELAY_FogSet \n    //% block=\"set fog level to %level\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function setFog(fog:fogLevels):void{\n        if (fog == fogLevels.none){\n            pins.digitalWritePin(DigitalPin.P2, 1)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 1)\n        } else if (fog == fogLevels.light){\n            pins.digitalWritePin(DigitalPin.P2, 1)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        } else if (fog == fogLevels.medium) {\n            pins.digitalWritePin(DigitalPin.P2, 0)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        } else if (fog == fogLevels.heavy) {\n            pins.digitalWritePin(DigitalPin.P2, 0)\n            pins.digitalWritePin(DigitalPin.P8, 0)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        }\n    }\n\n    //% blockId=NL_RELAY_SockSet\n    //% block=\"set dancing sock to %sockState\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function setSock(state: sockState): void {\n        if(state==sockState.dancing){ pins.digitalWritePin(DigitalPin.P12, 0) }\n        else{ pins.digitalWritePin(DigitalPin.P12, 1) }\n    }\n\n/// END MOTOR & RELAY ///\n\n/// BEGIN OLED\n\n    let d1 = [0, 0, 0, 20, 36, 35, 54, 0, 28, 65, 8, 8, 160, 8, 96, 32, 62, 0, 98, 34, 24, 39, 60, 1, 54, 6, 0, 0, 8, 20, 65, 2, 50, 126, 127, 62, 127, 127, 127, 62, 127, 65, 32, 127, 127, 127, 127, 62, 127, 62, 127, 38, 1, 63, 31, 63, 99, 3, 97, 127, 2, 65, 4, 128, 1, 32, 127, 56, 56, 56, 8, 24, 127, 0, 128, 127, 65, 124, 124, 56, 252, 24, 0, 72, 4, 60, 28, 60, 68, 28, 68, 8, 0, 65, 2]\n    let d2 = [0, 95, 7, 127, 42, 19, 73, 5, 34, 34, 42, 8, 96, 8, 96, 16, 81, 66, 81, 65, 20, 69, 74, 113, 73, 73, 54, 172, 20, 20, 34, 1, 73, 9, 73, 65, 65, 73, 9, 65, 8, 127, 64, 8, 64, 2, 4, 65, 9, 65, 9, 73, 1, 64, 32, 64, 20, 4, 81, 65, 4, 65, 2, 128, 2, 84, 72, 68, 68, 84, 126, 164, 8, 125, 132, 16, 127, 4, 8, 68, 36, 36, 124, 84, 127, 64, 32, 64, 40, 160, 100, 54, 127, 54, 1]\n    let d3 = [0, 0, 0, 20, 127, 8, 85, 3, 65, 28, 28, 62, 0, 8, 0, 8, 73, 127, 73, 73, 18, 69, 73, 9, 73, 73, 54, 108, 34, 20, 20, 81, 121, 9, 73, 65, 65, 73, 9, 65, 8, 65, 65, 20, 64, 12, 8, 65, 9, 81, 25, 73, 127, 64, 64, 56, 8, 120, 73, 65, 8, 127, 1, 128, 4, 84, 68, 68, 68, 84, 9, 164, 4, 0, 125, 40, 64, 24, 4, 68, 36, 36, 8, 84, 68, 64, 64, 48, 16, 160, 84, 65, 0, 8, 1]\n    let d4 = [0, 0, 7, 127, 42, 100, 34, 0, 0, 0, 42, 8, 0, 8, 0, 4, 69, 64, 73, 73, 127, 69, 73, 5, 73, 41, 0, 0, 65, 20, 8, 9, 65, 9, 73, 65, 34, 73, 9, 81, 8, 0, 63, 34, 64, 2, 16, 65, 9, 33, 41, 73, 1, 64, 32, 64, 20, 4, 69, 0, 16, 0, 2, 128, 0, 84, 68, 40, 72, 84, 2, 164, 4, 0, 0, 68, 0, 4, 124, 56, 24, 252, 4, 36, 0, 124, 32, 64, 40, 124, 76, 0, 0, 0, 2]\n    let d5 = [0, 0, 0, 20, 18, 98, 80, 0, 0, 0, 8, 8, 0, 8, 0, 2, 62, 0, 70, 54, 16, 57, 48, 3, 54, 30, 0, 0, 0, 20, 0, 6, 62, 126, 54, 34, 28, 65, 1, 114, 127, 0, 1, 65, 64, 127, 127, 62, 6, 94, 70, 50, 1, 63, 31, 63, 99, 3, 67, 0, 32, 0, 4, 128, 0, 120, 56, 0, 127, 24, 0, 124, 120, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 28, 60, 68, 0, 68, 0, 0, 0, 1]\n\n    let display = [\" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\")]\n    let desired = [\" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\")]\n\n    //% blockId=NL_OLED_Update3\n    //% block=\"oled update from buffer\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function changeThree(): void{\n        let updated: string[][] = []\n        let count = 0\n        for (let row=0; row<8; row++){\n            for(let col=0; col<16; col++){\n                let refChar = desired[row][col]\n                if (refChar != display[row][col]){\n                    writeChar(refChar,row,col)\n                    display[row][col] = refChar\n                    count++\n                    if (count >= 3){\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    //% blockId=NL_OLED_PrintLine\n    //% block=\"print %text to oled buffer line %line\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function printLine(text:any, line:number): void{\n        let thisText = text + \"\"\n        for (let i = 0; i < 16; i++){\n            if (i < thisText.length){\n                desired[line][i]=thisText.charAt(i)\n            } else{\n                desired[line][i]=\" \"\n            }\n        }\n    }\n\n    function oledcmd(c: number) {\n        pins.i2cWriteNumber(0x3c, c, NumberFormat.UInt16BE);\n    }\n\n    function setText(row: number, column: number) {\n        oledcmd(0xB0 + row);            //set page address\n        oledcmd(0x00 + (8 * column & 0x0F));  //set column lower address\n        oledcmd(0x10 + ((8 * column >> 4) & 0x0F));   //set column higher address\n    }\n\n    //% blockId=NL_OLED_Init \n    //% block=\"initiate the oled screen\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function oledinit(): void {\n        oledcmd(0xAE);  // Set display OFF\n        oledcmd(0xD5);  // Set Display Clock Divide Ratio / OSC Frequency 0xD4\n        oledcmd(0x80);  // Display Clock Divide Ratio / OSC Frequency \n        oledcmd(0xA8);  // Set Multiplex Ratio\n        oledcmd(0x3F);  // Multiplex Ratio for 128x64 (64-1)\n        oledcmd(0xD3);  // Set Display Offset\n        oledcmd(0x00);  // Display Offset\n        oledcmd(0x40);  // Set Display Start Line\n        oledcmd(0x8D);  // Set Charge Pump\n        oledcmd(0x14);  // Charge Pump (0x10 External, 0x14 Internal DC/DC)\n        oledcmd(0xA1);  // Set Segment Re-Map\n        oledcmd(0xC8);  // Set Com Output Scan Direction\n        oledcmd(0xDA);  // Set COM Hardware Configuration\n        oledcmd(0x12);  // COM Hardware Configuration\n        oledcmd(0x81);  // Set Contrast\n        oledcmd(0xCF);  // Contrast\n        oledcmd(0xD9);  // Set Pre-Charge Period\n        oledcmd(0xF1);  // Set Pre-Charge Period (0x22 External, 0xF1 Internal)\n        oledcmd(0xDB);  // Set VCOMH Deselect Level\n        oledcmd(0x40);  // VCOMH Deselect Level\n        oledcmd(0xA4);  // Set all pixels OFF\n        oledcmd(0xA6);  // Set display not inverted\n        oledcmd(0xAF);  // Set display On\n        for (let j = 0; j < 8; j++) {\n            setText(j, 0);\n            {\n                for (let i = 0; i < 16; i++)  //clear all columns\n                {\n                    writeChar(\" \",j,i)\n                }\n            }\n        }\n    }\n\n    function writeChar(char: string, row: number, column: number) {\n        setText(row, column)\n        let i = char.charCodeAt(0) - 32\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d1[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d2[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d3[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d4[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d5[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n    }\n\n/// END OLED\n\n\n/// BEGIN DIGITS\n\n    let _SEGMENTS = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71];\n\n    //% blockId=nl_digits_create block=\"4-Digit cPin %cPin dPin %dPin\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function tm1637Create(cPin: DigitalPin, dPin: DigitalPin): TM1637LEDs {\n        let display = new TM1637LEDs();\n        display.clk = cPin\n        display.dio = dPin\n        display.brightness = 7;\n        display.init();\n        return display;\n    }\n    export class TM1637LEDs {\n        buf: Buffer;\n        clk: DigitalPin;\n        dio: DigitalPin;\n        _ON: number;\n        brightness: number;\n        init(): void {\n            pins.digitalWritePin(this.clk, 0);\n            pins.digitalWritePin(this.dio, 0);\n            this._ON = 8;\n            this.buf = pins.createBuffer(4);\n            this.clear();\n        }\n        _start() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _stop() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.dio, 1);\n        }\n        _write_data_cmd() {\n            this._start();\n            this._write_byte(0x40);\n            this._stop();\n        }\n        _write_dsp_ctrl() {\n            this._start();\n            this._write_byte(0x80 | this._ON | this.brightness);\n            this._stop();\n        }\n        _write_byte(b: number) {\n            for (let i = 0; i < 8; i++) {\n                pins.digitalWritePin(this.dio, (b >> i) & 1);\n                pins.digitalWritePin(this.clk, 1);\n                pins.digitalWritePin(this.clk, 0);\n            }\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _intensity(val: number = 7) {\n            this._ON = 8;\n            this.brightness = val - 1;\n            this._write_data_cmd();\n            this._write_dsp_ctrl();\n        }\n        _dat(bit: number, dat: number) {\n            this._write_data_cmd();\n            this._start();\n            this._write_byte(0xC0 | (bit % 4))\n            this._write_byte(dat);\n            this._stop();\n            this._write_dsp_ctrl();\n        }\n        \n        //% blockId=nl_digits_digit block=\"%display|show single number|%num|at digit|%bit\"\n        //% subcategory=\"Display\" group=\"Display\"\n        //% bit.defl=1 bit.min=0 bit.max=9\n        showbit(num: number = 5, bit: number = 0) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            this.buf[bit % 4] = _SEGMENTS[num % 16]\n            this._dat(bit, _SEGMENTS[num % 16])\n        }\n\n        //% blockId=nl_digits_number block=\"%display|show number|%num\"\n        //% subcategory=\"Display\" group=\"Display\"\n        showNumber(num: number) {\n            if (num < 0) {\n                num = -num\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n                this._dat(0, 0x40) // '-'\n                // this._dat(0, 0) // blank\n            }\n            else {\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n            }\n        }\n\n        //% blockId=\"nl_digits_clear\" block=\"clear display %display\"\n        //% subcategory=\"Display\" group=\"Display\"\n        clear() {\n            for (let i = 0; i < 4; i++) {\n                this._dat(i, 0)\n                this.buf[i] = 0\n            }\n        }\n    }\n\n/// END DIGITS\n\n}\n\n\n","pxt.json":"{\n    \"name\": \"NotLegosMaster\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"displaySendBuffer.asm\",\n        \"planetxbasic.ts\",\n        \"notlegos.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"7.0.42\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n","test.ts":""}},{"timestamp":1728839320961,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"NFHB?|vd].P(}_Y-C82U\">btToken</variable><variable id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</variable><variable id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</variable><variable id=\"Y|e4lM)*:N0Ca^S5-64i\">lastLaserR</variable><variable id=\"Uk9;F|_3qS]2aZyBH#]%\">lastLaserC</variable><variable id=\"}GOl3M4q[Bn4R~R!?]at\">lastLaserL</variable><variable id=\"JQUQT|8QeX)zSvZ?K@,i\">lastSonarRead</variable><variable id=\"=X]tI5AG]3|WfpT`9Jsr\">lastHue</variable><variable id=\"Bc7kXprAfc3]W%ILxbVV\">lastGesture</variable><variable id=\"#oq[[iBLthN][|]:S!n}\">lastHunt</variable><variable id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</variable><variable id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</variable><variable id=\"8GDUfe;)i@P.Do~T6|{[\">theName</variable><variable id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</variable><variable id=\"=9JavC*{GElF}/FS78a@\">iBegan</variable><variable id=\"e.[{0v-j0Tp(kJ9$~N@:\">isReady</variable></variables><block type=\"function_definition\" x=\"4217\" y=\"-292\"><mutation name=\"buttonPress\" functionid=\"+$9AXp*X:[tcODdtL9m)\"><arg name=\"button\" id=\"mfdvbnfdsij7xy9ejk0nd\" type=\"string\"></arg></mutation><field name=\"function_name\">buttonPress</field><value name=\"mfdvbnfdsij7xy9ejk0nd\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">button</field></block></value><statement name=\"STACK\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">button: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">button</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></statement></block><block type=\"every_interval\" x=\"681\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">2000</field></shadow></value><statement name=\"HANDLER\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value></block></statement></block><block type=\"every_interval\" x=\"1327\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"every_interval\" x=\"1542\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">40</field></shadow></value><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"=9JavC*{GElF}/FS78a@\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time\"></block></value><next><block type=\"NL_PIXEL_CastleSayTick\"><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"e.[{0v-j0Tp(kJ9$~N@:\">isReady</field></block></value><next><block type=\"function_call\"><mutation name=\"ready_oled\" functionid=\"LSuKu]l*}Y2[|u.h3PJ%\"></mutation><next><block type=\"NL_OLED_Update3\"><next><block type=\"variables_set\"><field name=\"VAR\" id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"=9JavC*{GElF}/FS78a@\">iBegan</field></block></value></block></value></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"NL_OLED_Init\"><next><block type=\"NL_PIXEL_CastleSay\"><field name=\"sockPin\">DigitalPin.P3</field><field name=\"wheelPin\">DigitalPin.P0</field><field name=\"scorePin\">DigitalPin.P16</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"=9JavC*{GElF}/FS78a@\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time_micros\"></block></value></block></next></block></next></block></statement></block><block type=\"every_interval\" x=\"2136\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"input_logo_event\" x=\"2351\" y=\"-83\"><field name=\"action\">TouchButtonEvent.Touched</field><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_MP3_PlayerSay\"><field name=\"saying\">notLegos.playerSaying.ready</field><next><block type=\"NL_MP3_SfxPlay\"><field name=\"sfx\">notLegos.sfxType.fire</field><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.intro</field></block></next></block></next></block></statement></block></statement></block><block type=\"radio_on_value_drag\" x=\"2934\" y=\"328\"><value name=\"HANDLER_DRAG_PARAM_name\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">name</field></block></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">value</field></block></value><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_substr\"><value name=\"this\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value><value name=\"start\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"length\"><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_substr\"><value name=\"this\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value><value name=\"start\"><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value><value name=\"length\"><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text_length\"><value name=\"VALUE\"><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value></block></value></block></value><next><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"controls_if\"><mutation elseif=\"3\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wstar</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_start</field></block></value></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value><statement name=\"DO1\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.welcome</field></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.WheelAll</field><field name=\"effect\">notLegos.vfxEffect.fire</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.intro</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_reg</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">check</field></block></value></block></value><statement name=\"DO2\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">ready</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value></block></statement><statement name=\"ELSE\"><block type=\"controls_if\"><mutation elseif=\"3\" else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">ready</field></block></value></block></value><statement name=\"DO0\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">wstar</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.KongFront</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">boot</field></block></value></block></value><statement name=\"DO1\"><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1000</field></shadow></value></block></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">200</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.idle</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotH</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotI</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">0</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.BrickDragon</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotE</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">tutor</field></block></value></block></value><statement name=\"DO2\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotA</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotB</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value></block></statement><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">heard: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">6</field></shadow></value></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"164\" y=\"3601\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><field name=\"function_name\">radioSay</field><value name=\"vt0gv77qprcayj8xalbs\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">text5</field></block></value><value name=\"ok3p1i8gyn97mv69yabw\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">val</field></block></value><statement name=\"STACK\"><block type=\"radio_datagram_send_value\"><value name=\"name\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value></block></value><value name=\"value\"><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">said: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">7</field></shadow></value></block></next></block></statement></block><block type=\"function_definition\" x=\"745\" y=\"3814\"><mutation name=\"fogFlood\" functionid=\"VFMl!%hPr#$dm7#L!/;e\"></mutation><field name=\"function_name\">fogFlood</field><statement name=\"STACK\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</field></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">10000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">para</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.mid</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.off</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.dancing</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.still</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">8000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.min</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"1187\" y=\"3814\"><mutation name=\"runTutorial\" functionid=\"S6D~vG%3KsCIO0/OH*vo\"></mutation><field name=\"function_name\">runTutorial</field><statement name=\"STACK\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">tutor</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">80</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">20</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.tutorial</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto1</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5950</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto2</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto3</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7600</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto4</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6100</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto5</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">13000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto6</field><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"function_definition\" x=\"1543\" y=\"3814\"><mutation name=\"ready_oled\" functionid=\"LSuKu]l*}Y2[|u.h3PJ%\"></mutation><field name=\"function_name\">ready_oled</field><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Say //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"6\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Y|e4lM)*:N0Ca^S5-64i\">lastLaserR</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> C</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Uk9;F|_3qS]2aZyBH#]%\">lastLaserC</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"}GOl3M4q[Bn4R~R!?]at\">lastLaserL</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"8\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">S</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"JQUQT|8QeX)zSvZ?K@,i\">lastSonarRead</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> H</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_js_round\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"=X]tI5AG]3|WfpT`9Jsr\">lastHue</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> G</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Bc7kXprAfc3]W%ILxbVV\">lastGesture</field></block></value><value name=\"ADD6\"><shadow type=\"text\"><field name=\"TEXT\"> N</field></shadow></value><value name=\"ADD7\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"#oq[[iBLthN][|]:S!n}\">lastHunt</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">Mode: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M:</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"NL_MP3_PlaytimeMusic\"></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">4</field></shadow></value></block></next></block></next></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Do //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> T </field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement></block></statement></block></xml>","main.ts":"function radioSay (text5: string, val: number) {\n    radio.sendValue(\"\" + btToken + text5, val)\n    notLegos.printLine(\"said: \" + text5 + \"=\" + val, 7)\n}\nfunction buttonPress (button: string) {\n    notLegos.printLine(\"button: \" + button, 3)\n}\nfunction runTutorial () {\n    radioSay(\"tutor\", 1)\n    notLegos.setVolume(notLegos.mp3type.music, 80)\n    basic.pause(20)\n    notLegos.mp3musicPlay(notLegos.musicGenre.tutorial)\n    fogLevel = 3\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto1)\n    basic.pause(5950)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto2)\n    basic.pause(5000)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto3)\n    basic.pause(7600)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto4)\n    basic.pause(6100)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto5)\n    basic.pause(13000)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto6)\n    notLegos.setVolume(notLegos.mp3type.music, 100)\n    basic.pause(7000)\n    notLegos.mp3musicPlay(notLegos.musicGenre.awaiting)\n}\nfunction ready_oled () {\n    if (isCastleSay) {\n        let lastHunt = 0\n        let lastGesture = 0\n        let lastHue = 0\n        let lastSonarRead = 0\n        let lastLaserL = 0\n        let lastLaserC = 0\n        let lastLaserR = 0\n        notLegos.printLine(\"// Castle Say //\", 0)\n        notLegos.printLine(\"R\" + Math.constrain(lastLaserR, 0, 9) + \" C\" + Math.constrain(lastLaserC, 0, 9) + \" L\" + Math.constrain(lastLaserL, 0, 9), 1)\n        notLegos.printLine(\"S\" + lastSonarRead + \" H\" + Math.round(lastHue / 3) + \" G\" + lastGesture + \" N\" + lastHunt, 2)\n        notLegos.printLine(\"Mode: \" + castleMode, 3)\n        notLegos.printLine(\"M:\" + notLegos.mp3durationMusic(), 4)\n    } else {\n        notLegos.printLine(\"// Castle Do //\", 0)\n        notLegos.printLine(\"M: \" + castleMode + \" T \" + fogToggle, 1)\n    }\n}\nradio.onReceivedValue(function (name, value) {\n    if (name.substr(0, btToken.length) == btToken) {\n        theName = name.substr(btToken.length, name.length - btToken.length)\n        if (isCastleSay) {\n            if (theName == \"wstar\") {\n                castleMode = \"wait_start\"\n            } else if (theName == \"welco\") {\n                if (value == 1) {\n                    notLegos.vfxReset(notLegos.vfxEffect.glow)\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.glow)\n                    notLegos.mp3voicePlay(notLegos.voiceSaying.welcome)\n                } else if (value == 2) {\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                    notLegos.setEffect(notLegos.vfxRegion.WheelAll, notLegos.vfxEffect.fire)\n                    basic.pause(1200)\n                    notLegos.mp3voicePlay(notLegos.voiceSaying.intro)\n                    basic.pause(3000)\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                    basic.pause(4000)\n                    notLegos.mp3musicPlay(notLegos.musicGenre.awaiting)\n                    castleMode = \"wait_reg\"\n                }\n            } else if (theName == \"check\") {\n                notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                radioSay(\"ready\", 1)\n            } else if (false) {\n            \t\n            }\n        } else {\n            if (theName == \"ready\") {\n                radioSay(\"wstar\", 1)\n                notLegos.setEffect(notLegos.vfxRegion.KongFront, notLegos.vfxEffect.indicate)\n            } else if (theName == \"boot\") {\n                fogLevel = 3\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.parade)\n                notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.max)\n                basic.pause(value * 1000)\n                notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.min)\n                basic.pause(1000)\n                radioSay(\"welco\", 1)\n                basic.pause(200)\n                notLegos.vfxReset(notLegos.vfxEffect.glow)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.glow)\n                basic.pause(5000)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.idle)\n                notLegos.setEffect(notLegos.vfxRegion.SpotH, notLegos.vfxEffect.mine)\n                notLegos.setEffect(notLegos.vfxRegion.SpotI, notLegos.vfxEffect.mine)\n                basic.pause(0)\n                radioSay(\"welco\", 2)\n                basic.pause(4500)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.off)\n                basic.pause(500)\n                notLegos.setEffect(notLegos.vfxRegion.BrickDragon, notLegos.vfxEffect.indicate)\n                basic.pause(1200)\n                notLegos.setEffect(notLegos.vfxRegion.SpotC, notLegos.vfxEffect.indicate)\n                notLegos.setEffect(notLegos.vfxRegion.SpotE, notLegos.vfxEffect.indicate)\n                basic.pause(3000)\n                fogLevel = 1\n                notLegos.motorSet(notLegos.motors.door, notLegos.motorState.max)\n            } else if (theName == \"tutor\") {\n                if (value == 1) {\n                    notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.off)\n                    basic.pause(4000)\n                    notLegos.vfxReset(notLegos.vfxEffect.glow)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotA, notLegos.vfxEffect.glow)\n                    basic.pause(6000)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotB, notLegos.vfxEffect.indicate)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotC, notLegos.vfxEffect.indicate)\n                } else if (value == 2) {\n                \t\n                }\n            } else if (theName == \"welco\") {\n            \t\n            } else {\n            \t\n            }\n        }\n        notLegos.printLine(\"heard: \" + theName + \"=\" + value, 6)\n    }\n})\ninput.onLogoEvent(TouchButtonEvent.Touched, function () {\n    if (isCastleSay) {\n        notLegos.mp3sayPlay(notLegos.playerSaying.ready)\n        notLegos.mp3sfxPlay(notLegos.sfxType.fire)\n        notLegos.mp3musicPlay(notLegos.musicGenre.intro)\n    }\n})\nfunction fogFlood () {\n    if (fogToggle) {\n        fogLevel = 3\n        basic.pause(10000)\n        notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.parade)\n        radioSay(\"para\", 1)\n        fogLevel = 0\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.max)\n        notLegos.motorSet(notLegos.motors.door, notLegos.motorState.max)\n        basic.pause(1000)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.mid)\n        basic.pause(6000)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.min)\n        basic.pause(500)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.off)\n        notLegos.motorSet(notLegos.motors.door, notLegos.motorState.min)\n        fogLevel = 1\n        notLegos.setSock(notLegos.sockState.dancing)\n        basic.pause(6000)\n        notLegos.setSock(notLegos.sockState.still)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.max)\n        basic.pause(8000)\n        notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.redrack, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.redrack, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shark, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shark, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.ghost, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.ghost, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.cannon, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.cannon, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.oarrack, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.oarrack, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shell, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shell, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.dragon, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.dragon, notLegos.motorState.min)\n    }\n}\nlet iTook = 0\nlet theName = \"\"\nlet fogToggle = 0\nlet castleMode = \"\"\nlet isCastleSay = 0\nlet fogLevel = 0\nlet btToken = \"\"\nnotLegos.oledinit()\nnotLegos.castleSayLights(DigitalPin.P3, DigitalPin.P0, DigitalPin.P16)\nlet iBegan = input.runningTimeMicros()\nloops.everyInterval(500, function () {\n\t\n})\nloops.everyInterval(500, function () {\n\t\n})\nloops.everyInterval(2000, function () {\n    notLegos.printLine(\"\" + iTook + \"\", 5)\n})\nloops.everyInterval(40, function () {\n    let isReady = 0\n    iBegan = input.runningTime()\n    notLegos.castleSayTick()\n    if (isReady) {\n    \t\n    }\n    ready_oled()\n    notLegos.changeThree()\n    iTook = input.runningTime() - iBegan\n})\n","README.md":"\n> Open this page at [https://notlegos.github.io/castleresay/](https://notlegos.github.io/castleresay/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/castleresay** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/castleresay** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/soundbank/](https://notlegos.github.io/soundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/soundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/soundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/resoundbank/](https://notlegos.github.io/resoundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/resoundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/resoundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosext/](https://notlegos.github.io/notlegosext/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosext** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosext** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosmaster/](https://notlegos.github.io/notlegosmaster/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosmaster** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosmaster** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","displaySendBuffer.asm":"sendBufferAsm:\n\n    push {r4,r5,r6,r7,lr}\n    \n    mov r4, r0 ; save buff\n    mov r6, r1 ; save pin\n    \n    mov r0, r4\n    bl BufferMethods::length\n    mov r5, r0\n    \n    mov r0, r4\n    bl BufferMethods::getBytes\n    mov r4, r0\n    \n    ; setup pin as digital\n    mov r0, r6\n    movs r1, #0\n    bl pins::digitalWritePin\n    \n    ; load pin address\n    mov r0, r6\n    bl pins::getPinAddress\n\n    ldr r0, [r0, #8] ; get mbed DigitalOut from MicroBitPin\n    ldr r1, [r0, #4] ; r1-mask for this pin\n    ldr r2, [r0, #16] ; r2-clraddr\n    ldr r3, [r0, #12] ; r3-setaddr\n    \n    cpsid i ; disable irq\n    \n    b .start\n    \n.nextbit:               ;            C0\n    str r1, [r3, #0]    ; pin := hi  C2\n    tst r6, r0          ;            C3\n    bne .islate         ;            C4\n    str r1, [r2, #0]    ; pin := lo  C6\n.islate:\n    lsrs r6, r6, #1     ; r6 >>= 1   C7\n    bne .justbit        ;            C8\n    \n    ; not just a bit - need new byte\n    adds r4, #1         ; r4++       C9\n    subs r5, #1         ; r5--       C10\n    bcc .stop           ; if (r5<0) goto .stop  C11\n.start:\n    movs r6, #0x80      ; reset mask C12\n    nop                 ;            C13\n\n.common:               ;             C13\n    str r1, [r2, #0]   ; pin := lo   C15\n    ; always re-load byte - it just fits with the cycles better this way\n    ldrb r0, [r4, #0]  ; r0 := *r4   C17\n    b .nextbit         ;             C20\n\n.justbit: ; C10\n    ; no nops, branch taken is already 3 cycles\n    b .common ; C13\n\n.stop:    \n    str r1, [r2, #0]   ; pin := lo\n    cpsie i            ; enable irq\n\n    pop {r4,r5,r6,r7,pc}\n","planetxbasic.ts":"/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#00B1ED  icon=\"\\uf005\" block=\"Connected\" blockId=\"PlanetX_Connected\"\n//% groups='[\"Digital\", \"Analog\", \"IIC Port\"]'\nnamespace Connected {\n    \n    ////////////////////////paj7620//////////////////////\n    let gesture_first_init = true\n    const initRegisterArray: number[] = [\n        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17,\n        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F,\n        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14,\n        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27,\n        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01,\n        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00,\n        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20,\n        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37,\n        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A,\n        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F,\n        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30,\n        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19,\n        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04,\n        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00,\n        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00,\n        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F,\n        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07,\n        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01,\n        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F,\n        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01,\n        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40,\n        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E,\n        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00,\n        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08,\n        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00,\n        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01,\n        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01,\n        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01\n    ];\n    \n    /////////////////////////color/////////////////////////\n    const APDS9960_ADDR = 0x39\n    const APDS9960_ENABLE = 0x80\n    const APDS9960_ATIME = 0x81\n    const APDS9960_CONTROL = 0x8F\n    const APDS9960_STATUS = 0x93\n    const APDS9960_CDATAL = 0x94\n    const APDS9960_CDATAH = 0x95\n    const APDS9960_RDATAL = 0x96\n    const APDS9960_RDATAH = 0x97\n    const APDS9960_GDATAL = 0x98\n    const APDS9960_GDATAH = 0x99\n    const APDS9960_BDATAL = 0x9A\n    const APDS9960_BDATAH = 0x9B\n    const APDS9960_GCONF4 = 0xAB\n    const APDS9960_AICLEAR = 0xE7\n    let color_first_init = false\n\n    function i2cwrite_color(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n    function i2cread_color(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n    function rgb2hsl(color_r: number, color_g: number, color_b: number): number {\n        let Hue = 0\n        let R = color_r * 100 / 255;\n        let G = color_g * 100 / 255;\n        let B = color_b * 100 / 255;\n        let maxVal = Math.max(R, Math.max(G, B))\n        let minVal = Math.min(R, Math.min(G, B))\n        let Delta = maxVal - minVal;\n\n        if (Delta < 0) {\n            Hue = 0;\n        }\n        else if (maxVal == R && G >= B) {\n            Hue = (60 * ((G - B) * 100 / Delta)) / 100;\n        }\n        else if (maxVal == R && G < B) {\n            Hue = (60 * ((G - B) * 100 / Delta) + 360 * 100) / 100;\n        }\n        else if (maxVal == G) {\n            Hue = (60 * ((B - R) * 100 / Delta) + 120 * 100) / 100;\n        }\n        else if (maxVal == B) {\n            Hue = (60 * ((R - G) * 100 / Delta) + 240 * 100) / 100;\n        }\n        return Hue\n    }\n    function initModule(): void {\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ATIME, 252)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_CONTROL, 0x03)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_GCONF4, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_AICLEAR, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x01)\n        color_first_init = true\n    }\n    function colorMode(): void {\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_ENABLE) | 0x2;\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, tmp);\n    }\n\n    ///////////////////////////////////////////////////////MP3\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    /*\n    * Play status selection button list\n    */\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(100)\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,        \n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum Distance_Unit_List {\n        //% block=\"cm\" \n        Distance_Unit_cm,\n\n        //% block=\"foot\"\n        Distance_Unit_foot,\n    }\n    export enum ButtonStateList {\n        //% block=\"C\"\n        C,\n        //% block=\"D\"\n        D,\n        //% block=\"C+D\"\n        CD\n    }\n    export enum GestureType {\n        //% block=\"None\"\n        None = 0,\n        //% block=\"Right\"\n        Right = 1,\n        //% block=\"Left\"\n        Left = 2,\n        //% block=\"Up\"\n        Up = 3,\n        //% block=\"Down\"\n        Down = 4,\n        //% block=\"Forward\"\n        Forward = 5,\n        //% block=\"Backward\"\n        Backward = 6,\n        //% block=\"Clockwise\"\n        Clockwise = 7,\n        //% block=\"Anticlockwise\"\n        Anticlockwise = 8,\n        //% block=\"Wave\"\n        Wave = 9\n    }\n    export enum ColorList {\n        //% block=\"Red\"\n        red,\n        //% block=\"Green\"\n        green,\n        //% block=\"Blue\"\n        blue,\n        //% block=\"Cyan\"\n        cyan,\n        //% block=\"Magenta\"\n        magenta,\n        //% block=\"Yellow\"\n        yellow,\n        //% block=\"White\"\n        white\n    }\n\n    ///////////////////////////////////blocks/////////////////////////////\n\n    //% blockId=\"readwaterLevel\" block=\"Water level sensor %Rjpin value(0~100)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function waterLevel(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        let voltage = 0, waterlevel = 0;\n        voltage = pins.map(\n            pins.analogReadPin(pin),\n            50,\n            600,\n            0,\n            100\n        );\n        if (voltage < 0) {\n            voltage = 0\n        }\n        waterlevel = voltage;\n        return Math.round(waterlevel)\n    }\n\n    let distance_last = 0\n\n    //% blockId=sonarbit block=\"Ultrasonic sensor pinT %tPin pinE %ePin distance %distance_unit\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% distance_unit.fieldEditor=\"gridpicker\"\n    //% distance_unit.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    export function ultrasoundSensor(tPin: DigitalPin, ePin: DigitalPin, distance_unit: Distance_Unit_List): number {\n        let pinT = tPin\n        let pinE = ePin\n        pins.setPull(pinT, PinPullMode.PullNone)\n        pins.digitalWritePin(pinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(pinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(pinT, 0)\n\n        // read pulse\n        let d = pins.pulseIn(pinE, PulseValue.High, 25000)\n        let version = control.hardwareVersion()\n        let distance = d * 34 / 2 / 1000\n        if (version == \"1\") {\n            distance = distance * 3 / 2\n        }\n\n        if (distance > 430) {\n            distance = 0\n        }\n\n        if (distance == 0) {\n            distance = distance_last\n            distance_last = 0\n        }\n        else {\n            distance_last = distance\n        }\n\n        switch (distance_unit) {\n            case Distance_Unit_List.Distance_Unit_cm:\n                return Math.floor(distance)  //cm\n                break\n            case Distance_Unit_List.Distance_Unit_foot:\n                return Math.floor(distance / 30.48)   //foot\n                break\n            default:\n                return 0\n        }\n    }\n\n    export class PAJ7620 {\n        private paj7620WriteReg(addr: number, cmd: number) {\n            let buf: Buffer = pins.createBuffer(2);\n            buf[0] = addr;\n            buf[1] = cmd;\n            pins.i2cWriteBuffer(0x73, buf, false);\n        }\n        private paj7620ReadReg(addr: number): number {\n            let buf: Buffer = pins.createBuffer(1);\n            buf[0] = addr;\n            pins.i2cWriteBuffer(0x73, buf, false);\n            buf = pins.i2cReadBuffer(0x73, 1, false);\n            return buf[0];\n        }\n        private paj7620SelectBank(bank: number) {\n            if (bank == 0) this.paj7620WriteReg(0xEF, 0);\n            else if (bank == 1) this.paj7620WriteReg(0xEF, 1);\n        }\n        private paj7620Init() {\n            let temp = 0;\n            this.paj7620SelectBank(0);\n            temp = this.paj7620ReadReg(0);\n            if (temp == 0x20) {\n                for (let i = 0; i < 438; i += 2) {\n                    this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);\n                }\n            }\n            this.paj7620SelectBank(0);\n        }\n        init() {\n            this.paj7620Init();\n            basic.pause(200);\n        }\n        read(): number {\n            let data = 0, result = 0;\n            data = this.paj7620ReadReg(0x43);\n            switch (data) {\n                case 0x01:\n                    result = GestureType.Right;\n                    break;\n                case 0x02:\n                    result = GestureType.Left;\n                    break;\n                case 0x04:\n                    result = GestureType.Up;\n                    break;\n                case 0x08:\n                    result = GestureType.Down;\n                    break;\n                case 0x10:\n                    result = GestureType.Forward;\n                    break;\n                case 0x20:\n                    result = GestureType.Backward;\n                    break;\n                case 0x40:\n                    result = GestureType.Clockwise;\n                    break;\n                case 0x80:\n                    result = GestureType.Anticlockwise;\n                    break;\n                default:\n                    data = this.paj7620ReadReg(0x44);\n                    if (data == 0x01)\n                        result = GestureType.Wave;\n                    break;\n            }\n            return result;\n        }\n    }\n    const gestureEventId = 3100;\n    let lastGesture = GestureType.None;\n    let paj7620 = new PAJ7620();\n    //% blockId= gesture_create_event block=\"Gesture sensor IIC port is %gesture\"\n    //% gesture.fieldEditor=\"gridpicker\" gesture.fieldOptions.columns=3\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function onGesture(gesture: GestureType, handler: () => void) {\n        control.onEvent(gestureEventId, gesture, handler);\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        control.inBackground(() => {\n            while (true) {\n                const gesture = paj7620.read();\n                if (gesture != lastGesture) {\n                    lastGesture = gesture;\n                    control.raiseEvent(gestureEventId, lastGesture);\n                }\n                basic.pause(200);\n            }\n        })\n    }\n\n    //% blockId= gesture_get_event block=\"Gesture sensor IIC port detects\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function getGesture(): number {\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        const gesture = paj7620.read();\n        return gesture\n    }\n\n\n\n\n    //% blockId=apds9960_readcolor block=\"Color sensor IIC port color HUE(0~360)\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function readColor(): number {\n        if (color_first_init == false) {\n            initModule()\n            colorMode()\n        }\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        while (!tmp) {\n            basic.pause(5);\n            tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        }\n        let c = i2cread_color(APDS9960_ADDR, APDS9960_CDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_CDATAH) * 256;\n        let r = i2cread_color(APDS9960_ADDR, APDS9960_RDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_RDATAH) * 256;\n        let g = i2cread_color(APDS9960_ADDR, APDS9960_GDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_GDATAH) * 256;\n        let b = i2cread_color(APDS9960_ADDR, APDS9960_BDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_BDATAH) * 256;\n        // map to rgb based on clear channel\n        let avg = c / 3;\n        r = r * 255 / avg;\n        g = g * 255 / avg;\n        b = b * 255 / avg;\n        //let hue = rgb2hue(r, g, b);\n        let hue = rgb2hsl(r, g, b)\n        return hue\n    }\n    //% block=\"Color sensor IIC port detects %color\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% color.fieldEditor=\"gridpicker\" color.fieldOptions.columns=3\n    export function checkColor(color: ColorList): boolean {\n        let hue = readColor()\n        switch (color) {\n            case ColorList.red:\n                if (hue > 330 || hue < 20) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.green:\n                if (hue > 120 && 180 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.blue:\n                if (hue > 210 && 270 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.cyan:\n                if (hue > 190 && 210 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.magenta:\n                if (hue > 260 && 330 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.yellow:\n                if (hue > 30 && 120 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.white:\n                if (hue >= 180 && 190 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n        }\n    }\n\n    //% blockId=\"potentiometer\" block=\"Trimpot %Rjpin analog value\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Input color=#E2C438 group=\"Analog\"\n    export function trimpot(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        return pins.analogReadPin(pin)\n    }\n    //% blockId=buttonab block=\"Button %Rjpin %button is pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonCD(Rjpin: DigitalRJPin, button: ButtonStateList): boolean {\n        let pinC = DigitalPin.P1\n        let pinD = DigitalPin.P2\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pinC = DigitalPin.P1\n                pinD = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pinC = DigitalPin.P2\n                pinD = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pinC = DigitalPin.P13\n                pinD = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pinC = DigitalPin.P15\n                pinD = DigitalPin.P16\n                break;\n            case DigitalRJPin.P3:\n                pinC = DigitalPin.P3\n                pinD = DigitalPin.P4\n                break;\n        }\n        pins.setPull(pinC, PinPullMode.PullUp)\n        pins.setPull(pinD, PinPullMode.PullUp)\n        if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 0 && button == ButtonStateList.CD) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinC) == 0 && pins.digitalReadPin(pinD) == 1 && button == ButtonStateList.C) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 1 && button == ButtonStateList.D) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    export enum ButtonState {\n        //% block=\"on\"\n        on = 1,\n        //% block=\"off\"\n        off = 2\n    }\n\n    const buttonEventSource = 5000\n    const buttonEventValue = {\n        CD_pressed: ButtonState.on,\n        CD_unpressed: ButtonState.off\n    }\n\n    //% block=\"on button %Rjpin %button pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=4\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonEvent(Rjpin: DigitalRJPin, button: ButtonStateList, handler: () => void) {\n        let ButtonPin_C = DigitalPin.P1\n        let ButtonPin_D = DigitalPin.P2\n        let pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P0\n        let pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                ButtonPin_C = DigitalPin.P1\n                ButtonPin_D = DigitalPin.P8\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P1\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P8\n                break;\n            case DigitalRJPin.J2:\n                ButtonPin_C = DigitalPin.P2\n                ButtonPin_D = DigitalPin.P12\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P2\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P12\n                break;\n            case DigitalRJPin.J3:\n                ButtonPin_C = DigitalPin.P13\n                ButtonPin_D = DigitalPin.P14\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P13\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P14\n                break;\n            case DigitalRJPin.J4:\n                ButtonPin_C = DigitalPin.P15\n                ButtonPin_D = DigitalPin.P16\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P15\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P16\n                break;\n            case DigitalRJPin.P3:\n                ButtonPin_C = DigitalPin.P3\n                ButtonPin_D = DigitalPin.P4\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P3\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P4\n                break;\n        }\n        if (button == ButtonStateList.C) {\n            pins.setPull(ButtonPin_C, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_C, PinEventType.Edge)\n            control.onEvent(pinEventSource_C, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.D) {\n            pins.setPull(ButtonPin_D, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_D, PinEventType.Edge)\n            control.onEvent(pinEventSource_D, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.CD) {\n            loops.everyInterval(50, function () {\n                if (pins.digitalReadPin(ButtonPin_C) == 0 && pins.digitalReadPin(ButtonPin_D) == 0) {\n                    control.raiseEvent(buttonEventSource, buttonEventValue.CD_pressed)\n                }\n            })\n            control.onEvent(buttonEventSource, buttonEventValue.CD_pressed, handler)\n        }\n    }\n\n    //% blockId=fans block=\"Motor fan %Rjpin toggle to $fanstate || speed %speed \\\\%\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% fanstate.shadow=\"toggleOnOff\"\n    //% subcategory=Excute group=\"Digital\" color=#EA5532\n    //% speed.min=0 speed.max=100\n    //% expandableArgumentMode=\"toggle\"\n    export function motorFan(Rjpin: DigitalRJPin, fanstate: boolean, speed: number = 100): void {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case DigitalRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n            case DigitalRJPin.J3:\n                pin = AnalogPin.P13\n                break;\n            case DigitalRJPin.J4:\n                pin = AnalogPin.P15\n                break;\n        }\n        if (fanstate) {\n            pins.analogSetPeriod(pin, 100)\n            pins.analogWritePin(pin, Math.map(speed, 0, 100, 0, 1023))\n        }\n        else {\n            pins.analogWritePin(pin, 0)\n            speed = 0\n        }\n    }\n\n\n    //% blockId=\"setLoopFolder\" block=\"loop play all the MP3s in the folder:$folderNum\"\n    //% folderNum.defl=\"01\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setLoopFolder(folderNum: string): void {\n        CMD = 0x17\n        para1 = 0\n        para2 = parseInt(folderNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    //% blockId=\"folderPlay\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum || repeatList: $myAns\"\n    //% folderNum.defl=\"01\" fileNum.defl=\"001\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function folderPlay(folderNum: string, fileNum: string, myAns: boolean = false): void {\n        CMD = 0x0F\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        if (myAns)\n            execute(0x19)\n    }\n\n    //% blockId=\"playFolderFilePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFilePort(folderNum: string, fileNum: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFolderFileVolumePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum with volume:$theVolume usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" theVolume.defl=\"10\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFileVolumePort(folderNum: string, fileNum: string, theVolume: string, Rjpin: DigitalRJPin): void {\n        \n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        \n        let volume = parseInt(theVolume)\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(200)\n\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"volumePort\" \n    //% block=\"set MP3 volume:$theVolume usingPin:$Rjpin\"\n    //% theVolume.defl=\"10\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function volumePort(theVolume: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        let volume = parseInt(theVolume)\n        if (volume > 30) {\n            volume = 30\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(300)\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n\n\n    //% blockId=\"setTracking\" \n    //% block=\"play the mp3 in order of:%tracking || repeatList: $myAns\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% tracking.defl=1\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setTracking(tracking: number, myAns: boolean = false): void {\n        CMD = 0x03\n        para1 = 0x00\n        para2 = tracking\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        execute(0x0D)\n        if (myAns)\n            execute(0x19)\n    }\n    //% blockId=MP3execute block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=\"setVolume\" block=\"Set volume(0~25):%volume\"\n    //% volume.min=0 volume.max=25\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setVolume(volume: number): void {\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 0x06\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=MP3setPort block=\"Set the MP3 port to %Rjpin\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function MP3SetPort(Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        setVolume(25)\n    }\n}","notlegos.ts":"// NotLegos Blocks\n//% block=\"Not LEGOs\" color=#0031AF weight=1000 icon=\"\\uf3a5\"\n//% groups='[\"MP3\",\"Sensors\"]'\nnamespace notLegos {\n\n\n/// BEGIN NEOPIXEL ///\n    export enum hues { red = 0, orange = 15, yellow = 40, lime = 85, green = 110, cyan = 170, blue = 240, purple = 260, pink = 310 }\n    export enum vfxEffect { parade = 0, fire = 1, indicate = 2, idle = 3, glow = 4, mine = 5, off = 6 }\n    let NeoSock: Strip = null; let NeoScore: Strip = null; let NeoWheel: Strip = null; let NeoKong: Strip = null; let NeoStrip: Strip = null; let NeoBrick: Strip = null\n    let vfx_mine_tog: number[] = []; let vfx_mine_hue: number[] = []; let vfx_mine_sat: number[] = []; let vfx_mine_lum: number[] = []\n    let vfx_fire_tog: number[] = []; let vfx_fire_hue: number[] = []; let vfx_fire_sat: number[] = []; let vfx_fire_lum: number[] = []; let vfx_fire_colors: number[] = []\n    let vfx_indicate_tog: number[] = []; let vfx_indicate_hue: number[] = []; let vfx_indicate_sat: number[] = []; let vfx_indicate_lum: number[] = [];\n    let vfx_idle_tog: number[] = []; let vfx_idle_hue: number[] = []; let vfx_idle_sat: number[] = []; let vfx_idle_lum: number[] = []\n    let vfx_glow_tog: number[] = []; let vfx_glow_hue: number[] = []; let vfx_glow_sat: number[] = []; let vfx_glow_lum: number[] = []\n    let vfx_active_tog: number[] = []; let vfx_active_hue: number[] = []; let vfx_active_sat: number[] = []; let vfx_active_lum: number[] = []\n    let vfx_off_hue: number[] = []; let vfx_off_sat: number[] = []; let vfx_off_lum: number[] = []\n    let vfx_parade_tog: number[] = []; let vfx_parade_hue: number[] = []; let vfx_parade_sat: number[] = []; let vfx_parade_lum: number[] = []; let vfx_parade_colors: number[] = [];\n    let vfx_last_tog: number[] = []; let vfx_last_hue: number[] = []; let vfx_last_sat: number[] = []; let vfx_last_lum: number[] = []\n    let vfx_master_tog: number[] = []; let vfx_master_hue: number[] = []; let vfx_master_sat: number[] = []; let vfx_master_lum: number[] = []; let vfx_master_effect: number[] = [];\n    let vfx_master_r: number[] = []; let vfx_master_g: number[] = []; let vfx_master_b: number[] = [];\n    let vfx_light_count = 0\n\n    //% shim=sendBufferAsm\n    function sendBuffer(buf: Buffer, pin: DigitalPin) { }\n\n    export class Strip {\n        buf: Buffer;\n        pin: DigitalPin;\n        start: number; // start offset in LED strip\n        _length: number; // number of LEDs\n\n        setPixelHSLPrecise(pixeloffset: number, h: number, s: number, l: number): void {\n            if (pixeloffset < 0 || pixeloffset >= this._length)\n                return;\n            pixeloffset = (pixeloffset + this.start) * 3\n            h = Math.clamp(0,1,h/360)\n            s = Math.clamp(0,1,s/100)\n            l = Math.clamp(0,1,l/100)\n            let r, g, b;\n            if (s === 0) {\n                r = g = b = l; // achromatic\n            } else {\n                const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n                const p = 2 * l - q;\n                let t = h + 1/3\n                if (t < 0) { t += 1; }\n                else if (t > 1) {t -= 1; }\n                if (t < 1/6) {r = p + (q - p) * 6 * t;}\n                else if (t < 1/2) {r = q;}\n                else if (t < 2/3) { r = p + (q - p) * (2/3 - t) * 6; }\n                else { r = p; }\n                t = h\n                if (t < 0) { t += 1; }\n                else if (t > 1) { t -= 1; }\n                if (t < 1 / 6) { g = p + (q - p) * 6 * t; }\n                else if (t < 1 / 2) { g = q; }\n                else if (t < 2 / 3) { g = p + (q - p) * (2/3 - t) * 6; }\n                else { g = p; }\n                t = h - 1/3\n                if (t < 0) { t += 1; }\n                else if (t > 1) { t -= 1; }\n                if (t < 1 / 6) { b = p + (q - p) * 6 * t; }\n                else if (t < 1/2) { b = q; }\n                else if (t < 2/3) { b = p + (q - p) * (2/3 - t) * 6; }\n                else { b = p; }\n            }\n            vfx_master_g[pixeloffset/3] = Math.round(g * 255);\n            vfx_master_r[pixeloffset/3] = Math.round(r * 255);\n            vfx_master_b[pixeloffset/3] = Math.round(b * 255);\n            this.buf[pixeloffset + 0] = Math.round(g * 255);\n            this.buf[pixeloffset + 1] = Math.round(r * 255);\n            this.buf[pixeloffset + 2] = Math.round(b * 255);\n        }\n\n\n        // setPixelHSLPrecise(pixeloffset: number, h: number, s: number, l: number): void {\n        //     if (pixeloffset < 0 || pixeloffset >= this._length)\n        //         return;\n        //     pixeloffset = (pixeloffset + this.start) * 3\n        //     h = Math.clamp(0, 1, h / 360)\n        //     s = Math.clamp(0, 1, s / 100)\n        //     l = Math.clamp(0, 1, l / 100)\n        //     let r, g, b;\n        //     if (s === 0) {\n        //         r = g = b = l; // achromatic\n        //     } else {\n        //         const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        //         const p = 2 * l - q;\n        //         let t = h + 1 / 3\n        //         if (t < 0) { t += 1; }\n        //         else if (t > 1) { t -= 1; }\n        //         if (t < 1 / 6) { r = p + (q - p) * 6 * t; }\n        //         else if (t < 1 / 2) { r = q; }\n        //         else if (t < 2 / 3) { r = p + (q - p) * (2 / 3 - t) * 6; }\n        //         else { r = p; }\n        //         t = h\n        //         if (t < 0) { t += 1; }\n        //         else if (t > 1) { t -= 1; }\n        //         if (t < 1 / 6) { g = p + (q - p) * 6 * t; }\n        //         else if (t < 1 / 2) { g = q; }\n        //         else if (t < 2 / 3) { g = p + (q - p) * (2 / 3 - t) * 6; }\n        //         else { g = p; }\n        //         t = h - 1 / 3\n        //         if (t < 0) { t += 1; }\n        //         else if (t > 1) { t -= 1; }\n        //         if (t < 1 / 6) { b = p + (q - p) * 6 * t; }\n        //         else if (t < 1 / 2) { b = q; }\n        //         else if (t < 2 / 3) { b = p + (q - p) * (2 / 3 - t) * 6; }\n        //         else { b = p; }\n        //     }\n        //     this.buf[pixeloffset + 0] = Math.round(g * 255);\n        //     this.buf[pixeloffset + 1] = Math.round(r * 255);\n        //     this.buf[pixeloffset + 2] = Math.round(b * 255);\n        // }\n\n        // show() { sendBuffer(this.buf, this.pin); }  //Send all the changes to the strip.\n\n        show() { \n            // let newBuffer: Buffer;\n            // newBuffer[0] = vfx_master_g[0]\n            // newBuffer[1] = vfx_master_r[0]\n            // newBuffer[2] = vfx_master_b[0]\n            this.buf[0] = vfx_master_g[3]\n            this.buf[1] = vfx_master_r[3]\n            this.buf[2] = vfx_master_b[3]\n            sendBuffer(this.buf.slice(0, 12), DigitalPin.P16);\n            // sendBuffer(newBuffer, DigitalPin.P16);\n            // sendBuffer(this.buf, DigitalPin.P15);\n            // sendBuffer(this.buf, DigitalPin.P14);\n            // sendBuffer(this.buf, DigitalPin.P13);\n            // sendBuffer(this.buf, DigitalPin.P12);\n            // sendBuffer(this.buf, DigitalPin.P8);\n            // sendBuffer(this.buf, DigitalPin.P2);\n        }  //Send all the changes to the strip.\n\n        length() { return this._length; }   //Gets the number of pixels declared on the strip\n\n        shift(offset: number = 1): void { this.buf.shift(-offset * 3, this.start * 3, this._length * 3) }   //Shift LEDs forward and clear with zeros.\n\n        rotate(offset: number = 1): void { this.buf.rotate(-offset * 3, this.start * 3, this._length * 3) } //Rotate LEDs forward\n\n        setPin(pin: DigitalPin): void {\n            this.pin = pin;\n            pins.digitalWritePin(this.pin, 0);  // don't yield to avoid races on initialization\n        }\n    }\n\n    function create(thePin: DigitalPin, numleds: number): Strip {\n        let strip = new Strip();\n        strip.buf = pins.createBuffer(numleds * 3);\n        strip.start = 0;\n        strip._length = numleds;\n        strip.setPin(thePin)\n        return strip;\n    }\n\n    //% blockId=NL_PIXEL_CastleSay\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Sock Circle:%sockPin  Wheel Strip/Circle:%wheelPin  Score Circle:%scorePin \"\n    //% weight=100\n    export function castleSayLights(sockPin: DigitalPin, wheelPin: DigitalPin, scorePin: DigitalPin): void {\n        NeoWheel = create(wheelPin, 17)\n        vfx_light_count = 17\n        vfxInit()\n        // vfx_indicate_hue[31] = hues.yellow\n        vfx_indicate_tog[1] = 1\n    }\n\n\n    function vfxInit(): void{\n        vfx_parade_colors = [hues.red, hues.orange, hues.yellow, hues.cyan, hues.blue, hues.purple]\n        vfx_fire_colors = [hues.red, hues.red, hues.red, hues.red, hues.orange, hues.orange, hues.orange, hues.orange, hues.orange, hues.yellow]\n        for (let index = 0; index < 6; index++) {\n            vfx_parade_tog.push(randint(0, 1))\n            vfx_parade_hue.push(vfx_parade_colors[randint(0, vfx_parade_colors.length - 1)])\n            vfx_parade_sat.push(100)\n            vfx_parade_lum.push(randint(10, 65))\n        }\n        for (let index = 0; index < 1; index++) {\n            vfx_mine_tog.push(0)\n            vfx_mine_hue.push(hues.red)\n            vfx_mine_sat.push(100)\n            vfx_mine_lum.push(50)\n            vfx_glow_tog.push(0)\n            vfx_glow_hue.push(50)\n            vfx_glow_sat.push(0)\n            vfx_glow_lum.push(0)\n            vfx_active_tog.push(0)\n            vfx_active_hue.push(50)\n            vfx_active_sat.push(0)\n            vfx_glow_lum.push(0)\n            vfx_off_hue.push(0)\n            vfx_off_sat.push(0)\n            vfx_off_lum.push(0)\n        }\n        for (let index = 0; index < 3; index++) {\n            vfx_fire_tog.push(randint(0, 1))\n            vfx_fire_hue.push(vfx_fire_colors[randint(0, vfx_fire_colors.length - 1)])\n            vfx_fire_sat.push(100)\n            vfx_fire_lum.push(randint(30, 80))\n        }\n        for (let index = 0; index < 2; index++) {\n            vfx_indicate_tog.push(0)\n            vfx_indicate_lum.push(50)\n            vfx_indicate_hue.push(50)\n            vfx_indicate_sat.push(100)\n            vfx_idle_tog.push(1)\n            if (index % 2 == 0) { vfx_idle_tog[index] = 0; }\n            vfx_idle_hue.push(265)\n            if (index % 2 == 0) { vfx_idle_hue[index] = 2; }\n            vfx_idle_sat.push(100)\n            vfx_idle_lum.push(50)\n        }\n        for (let index = 0; index < vfx_light_count; index++) {\n            vfx_master_tog.push(0)\n            vfx_master_hue.push(0)\n            vfx_master_sat.push(100)\n            vfx_master_lum.push(50)\n            vfx_master_effect.push(vfxEffect.off)    //leave this be!\n        }\n    }\n\n    //% blockId=NL_PIXEL_ResetVFX\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Reset VFX %effect\"\n    //% weight=100\n    export function vfxReset(effect:vfxEffect):void{\n        if (effect == vfxEffect.idle){\n            for (let index = 0; index < 2; index++) {\n                vfx_idle_tog[index]=1\n                if (index % 2 == 0) { vfx_idle_tog[index] = 0; }\n                vfx_idle_hue[index]=265\n                if (index % 2 == 0) { vfx_idle_hue[index] = 2; }\n                vfx_idle_sat[index]=100\n                vfx_idle_lum[index]=50\n            }\n        } else if (effect == vfxEffect.glow) {\n            for (let index = 0; index < 1; index++) {\n                vfx_glow_tog[index] = 0\n                vfx_glow_hue[index] = 50\n                // vfx_glow_sat[index] = 100\n                vfx_glow_lum[index] = 0\n            }\n        } else if (effect == vfxEffect.mine) {\n            for (let index = 0; index < 1; index++) {\n                vfx_mine_tog[index] = 0\n                vfx_mine_hue[index] = hues.red\n                vfx_mine_sat[index] = 100\n                vfx_mine_lum[index] = 50\n            }\n        } else if (effect == vfxEffect.indicate) {\n            for (let index = 0; index < 2; index++) {\n                vfx_indicate_tog[index] = 0\n                vfx_indicate_sat[index] = 100\n                vfx_indicate_lum[index] = 50\n            }\n        }\n    }\n\n    //% blockId=NL_PIXEL_CastleSayTick\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Advance Castle Say lights\"\n    //% weight=100\n    export function castleSayTick(): void {\n        paradeTick()\n        fireTick()\n        glowTick()\n        activeTick()\n        castleSayWrite()\n        indicateTick()\n        idleTick()\n        mineTick()\n    }\n\n    function paradeTick(): void{\n        for (let index=0; index < 6; index++){\n            let thisLum = vfx_parade_lum[index]\n            let thisHue = vfx_parade_hue[index]\n            let thisTog = vfx_parade_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0){\n                if (thisLum < 65){\n                    vfx_parade_lum[index] = thisLum + 12\n                } else if (thisLum >= 65){\n                    vfx_parade_tog[index] = 1\n                }\n            } else if (thisTog == 1){\n                if (thisLum>10){\n                    vfx_parade_lum[index] = thisLum - 4\n                } else if (thisLum <= 10){\n                    vfx_parade_tog[index] = 0\n                    while (nextHue == thisHue){\n                        nextHue = vfx_parade_colors[randint(0, vfx_parade_colors.length - 1)]\n                    }\n                    vfx_parade_hue[index] = nextHue\n                    vfx_parade_lum[index] = thisLum - randint(0,10)\n                }\n            }\n        }\n    }\n\n    function mineTick(): void {\n        for (let index = 0; index < 1; index++) {\n            let thisLum = vfx_mine_lum[index]\n            let thisHue = vfx_mine_hue[index]\n            let thisTog = vfx_mine_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 200) {\n                    vfx_mine_lum[index] = thisLum + 30\n                } else if (thisLum >= 200) {\n                    vfx_mine_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 0) {\n                    vfx_mine_lum[index] = thisLum - 30\n                } else if (thisLum <= 0) {\n                    vfx_mine_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function idleTick(): void {\n        for (let index = 0; index < 2; index++) {\n            let thisLum = vfx_idle_lum[index]\n            let thisHue = vfx_idle_hue[index]\n            let thisTog = vfx_idle_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisHue < 265) {\n                    vfx_idle_hue[index] = thisHue + 1\n                } else if (thisHue >= 265) {\n                    vfx_idle_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisHue > 2) {\n                    vfx_idle_hue[index] = thisHue - 1\n                } else if (thisHue <= 2) {\n                    vfx_idle_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function indicateTick(): void {\n        for (let index = 0; index < 2; index++) {\n            let thisLum = vfx_indicate_lum[index]\n            let thisHue = vfx_indicate_hue[index]\n            let thisTog = vfx_indicate_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 80) {\n                    vfx_indicate_lum[index] = thisLum + 12\n                } else if (thisLum >= 80) {\n                    vfx_indicate_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 25) {\n                    vfx_indicate_lum[index] = thisLum - 4\n                } else if (thisLum <= 25) {\n                    vfx_indicate_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function fireTick(): void {\n        for (let index = 0; index < 3; index++) {\n            let thisLum = vfx_fire_lum[index]\n            let thisHue = vfx_fire_hue[index]\n            let thisTog = vfx_fire_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 80) {\n                    vfx_fire_lum[index] = thisLum + 15\n                } else if (thisLum >= 80) {\n                    vfx_fire_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 30) {\n                    vfx_fire_lum[index] = thisLum - 5\n                } else if (thisLum <= 30) {\n                    vfx_fire_tog[index] = 0\n                    while (nextHue == thisHue) {\n                        nextHue = vfx_fire_colors[randint(0, vfx_fire_colors.length - 1)]\n                    }\n                    vfx_fire_hue[index] = nextHue\n                    vfx_fire_lum[index] = thisLum - randint(0, 30)\n                }\n            }\n        }\n    }\n\n    function glowTick(): void {\n        for (let index = 0; index < 1; index++) {\n            let thisLum = vfx_glow_lum[index]\n            if (thisLum < 4){\n                vfx_glow_lum[index] = thisLum+.2\n            } else if (thisLum < 5) {\n                vfx_glow_lum[index] = thisLum+ + .3\n            } else if (thisLum < 10) {\n                vfx_glow_lum[index] = thisLum + .5\n            } else if (thisLum < 15) {\n                vfx_glow_lum[index] = thisLum + 1\n            }else if (thisLum < 30) {\n                vfx_glow_lum[index] = thisLum + 1.5\n            } else if (thisLum < 100) {\n                vfx_glow_lum[index] = thisLum + 4\n            } else{\n                vfx_glow_lum[index] = 0\n            }\n        }\n    }\n\n    function activeTick(): void {\n        for (let index = 0; index < 1; index++) {\n            let thisLum = vfx_active_lum[index]\n            if (thisLum < 4) {\n                vfx_active_lum[index] = thisLum + .2\n            } else if (thisLum < 5) {\n                vfx_active_lum[index] = thisLum + + .3\n            } else if (thisLum < 10) {\n                vfx_active_lum[index] = thisLum + .5\n            } else if (thisLum < 15) {\n                vfx_active_lum[index] = thisLum + 1\n            } else if (thisLum < 30) {\n                vfx_active_lum[index] = thisLum + 1.5\n            } else if (thisLum < 100) {\n                vfx_active_lum[index] = thisLum + 4\n            } else {\n                vfx_active_lum[index] = 0\n            }\n        }\n    }\n\n    function vfxPrepareMaster(): void{\n        vfx_master_hue[0] = vfx_glow_hue[0]\n        vfx_master_sat[0] = vfx_glow_sat[0]\n        vfx_master_lum[0] = Math.min(100, vfx_glow_lum[0])\n        vfx_master_hue[1] = vfx_mine_hue[0]\n        vfx_master_sat[1] = vfx_mine_sat[0]\n        vfx_master_lum[1] = Math.max(0, Math.min(50, vfx_mine_lum[0]))\n        vfx_master_hue[2] = vfx_idle_hue[0]\n        vfx_master_sat[2] = vfx_idle_sat[0]\n        vfx_master_lum[2] = Math.max(0, Math.min(50, vfx_idle_lum[0]))\n        vfx_master_hue[3] = vfx_idle_hue[1]\n        vfx_master_sat[3] = vfx_idle_sat[1]\n        vfx_master_lum[3] = Math.max(0, Math.min(50, vfx_idle_lum[1]))\n        vfx_master_hue[4] = vfx_indicate_hue[0]\n        vfx_master_sat[4] = vfx_indicate_sat[0]\n        vfx_master_lum[4] = Math.max(0, Math.min(50, vfx_indicate_lum[0]))\n        vfx_master_hue[5] = vfx_indicate_hue[1]\n        vfx_master_sat[5] = vfx_indicate_sat[1]\n        vfx_master_lum[5] = Math.max(0, Math.min(50, vfx_indicate_lum[1]))\n        vfx_master_hue[6] = vfx_parade_hue[0]\n        vfx_master_sat[6] = vfx_parade_sat[0]\n        vfx_master_lum[6] = Math.max(0, Math.min(50, vfx_parade_lum[0]))\n        vfx_master_hue[7] = vfx_parade_hue[1]\n        vfx_master_sat[7] = vfx_parade_sat[1]\n        vfx_master_lum[7] = Math.max(0, Math.min(50, vfx_parade_lum[1]))\n        vfx_master_hue[8] = vfx_parade_hue[2]\n        vfx_master_sat[8] = vfx_parade_sat[2]\n        vfx_master_lum[8] = Math.max(0, Math.min(50, vfx_parade_lum[2]))\n        vfx_master_hue[9] = vfx_parade_hue[3]\n        vfx_master_sat[9] = vfx_parade_sat[3]\n        vfx_master_lum[9] = Math.max(0, Math.min(50, vfx_parade_lum[3]))\n        vfx_master_hue[10] = vfx_parade_hue[4]\n        vfx_master_sat[10] = vfx_parade_sat[4]\n        vfx_master_lum[10] = Math.max(0, Math.min(50, vfx_parade_lum[4]))\n        vfx_master_hue[11] = vfx_parade_hue[5]\n        vfx_master_sat[11] = vfx_parade_sat[5]\n        vfx_master_lum[11] = Math.max(0, Math.min(50, vfx_parade_lum[5]))\n        vfx_master_hue[12] = vfx_fire_hue[0]\n        vfx_master_sat[12] = vfx_fire_sat[0]\n        vfx_master_lum[12] = Math.max(0, Math.min(50, vfx_fire_lum[0]))\n        vfx_master_hue[13] = vfx_fire_hue[1]\n        vfx_master_sat[13] = vfx_fire_sat[1]\n        vfx_master_lum[13] = Math.max(0, Math.min(50, vfx_fire_lum[1]))\n        vfx_master_hue[14] = vfx_fire_hue[2]\n        vfx_master_sat[14] = vfx_fire_sat[2]\n        vfx_master_lum[14] = Math.max(0, Math.min(50, vfx_fire_lum[2]))\n        vfx_master_hue[15] = vfx_off_hue[0]\n        vfx_master_sat[15] = vfx_off_sat[0]\n        vfx_master_lum[15] = 0\n        vfx_master_hue[16] = vfx_active_hue[0]\n        vfx_master_sat[16] = vfx_active_sat[0]\n        vfx_master_lum[16] = Math.min(100, vfx_active_lum[0])\n        for (let index=0; index < NeoWheel.length(); index++){\n\n        }\n        // NeoWheel.buf.getNumber(0)\n\n    }\n\n    function castleSayWrite(): void{\n        vfxPrepareMaster()\n        let masterIndex = 0\n        for (let index = 0; index < NeoWheel.length(); index++) {\n            NeoWheel.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        NeoWheel.show()\n    }\n\n    //% blockId=NL_PIXEL_SetEffect\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Set %region VFX to %effect\"\n    //% weight=100\n    export function setEffect(region:vfxRegion, effect:vfxEffect){\n        if (region == vfxRegion.Score1){\n            vfx_master_effect[30] = effect\n        } else if (region == vfxRegion.Score2) {\n            vfx_master_effect[31] = effect\n        } else if (region == vfxRegion.Score3) {\n            vfx_master_effect[32] = effect\n        } else if (region == vfxRegion.Score4) {\n            vfx_master_effect[33] = effect\n        } else if (region == vfxRegion.Score5) {\n            vfx_master_effect[26] = effect\n        } else if (region == vfxRegion.Score6) {\n            vfx_master_effect[27] = effect\n        } else if (region == vfxRegion.Score7) {\n            vfx_master_effect[28] = effect\n        } else if (region == vfxRegion.Score8) {\n            vfx_master_effect[29] = effect\n        } else if (region == vfxRegion.ScoreAll) {\n            for (let i = 26; i <= 33; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SockAll) {\n            for (let i = 0; i <= 7; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelInner) {\n            for (let i = 18; i <= 25; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelOuter) {\n            for (let i = 8; i <= 17; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelAll) {\n            for (let i=8; i <= 25; i++){ vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.CastleSayAll) {\n            for (let i = 0; i <= 33; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotA) {\n            for (let i = 8; i <= 11; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotB) {\n            for (let i = 6; i <= 7; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotC) {\n            for (let i = 12; i <= 13; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotD) {\n            for (let i = 4; i <= 5; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotE) {\n            for (let i = 14; i <= 15; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotF) {\n            for (let i = 2; i <= 3; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotG) {\n            for (let i = 16; i <= 17; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotH) {\n            for (let i = 0; i <= 1; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotI) {\n            for (let i = 18; i <= 19; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotAll) {\n            for (let i = 0; i <= 19; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.BrickWheel) {\n            vfx_master_effect[20] = effect\n            vfx_master_effect[27] = effect\n        } else if (region == vfxRegion.BrickBomb) {\n            vfx_master_effect[25] = effect\n        } else if (region == vfxRegion.BrickShell) {\n            vfx_master_effect[26] = effect\n        } else if (region == vfxRegion.BrickGhost) {\n            vfx_master_effect[24] = effect\n        } else if (region == vfxRegion.BrickDragon) {\n            for (let i = 22; i <= 23; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.BrickCannon) {\n            vfx_master_effect[21] = effect\n        } else if (region == vfxRegion.BrickAll) {\n            for (let i = 20; i <= 27; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongFront) {\n            for (let i = 28; i <= 29; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongBack) {\n            for (let i = 30; i <= 31; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongAll) {\n            for (let i = 28; i <=31; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.CastleDoAll) {\n            for (let i = 0; i < vfx_light_count; i++) { vfx_master_effect[i] = effect };\n        } \n    }\n\n    export enum vfxRegion{\n        Score1, Score2, Score3, Score4, Score5, Score6, Score7, Score8, ScoreAll,\n        SockAll,\n        WheelInner, WheelOuter, WheelAll,\n        KongFront, KongBack, KongAll,\n        BrickWheel, BrickBomb, BrickShell, BrickGhost, BrickDragon, BrickCannon, BrickAll,\n        SpotA, SpotB, SpotC, SpotD, SpotE, SpotF, SpotG, SpotH, SpotI, SpotAll,\n        CastleSayAll,\n        CastleDoAll\n    }\n\n/// END NEOPIXEL ///\n\n\n/// BEGIN SONAR ///\n\n    let sonarPinT = DigitalPin.P0\n    let sonarPinE = DigitalPin.P0\n\n    //% blockId=NL_SENSOR_SonarFirstRead\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"first distance from sonar at %pin1|%pin2\"\n    //% weight=101\n    export function SonarFirstRead(pin1: DigitalPin, pin2: DigitalPin): number {\n        sonarPinT = pin1\n        sonarPinE = pin2\n        pins.setPull(sonarPinT, PinPullMode.PullNone)\n        return SonarNextRead()\n    }\n\n    //% blockId=NL_SENSOR_SonarNextRead\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"next sonar distance\"\n    //% weight=100\n    export function SonarNextRead(): number {\n        pins.digitalWritePin(sonarPinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(sonarPinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(sonarPinT, 0)\n        return Math.floor(pins.pulseIn(sonarPinE, PulseValue.High, 25000) * 34 / 2000)\n    }\n\n/// END SONAR ///\n\n\n/// BEGIN MP3 ///\n\n    export enum playType { Play = 0x0D, Stop = 0x16, PlayNext = 0x01, PlayPrevious = 0x02, Pause = 0x0E }\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    let mp3musicPin: SerialPin\n    let mp3music = false\n    let mp3player = false\n    let mp3sfxPin: SerialPin\n    let mp3sfx = false\n    let mp3musicVol = 0\n    let mp3playerPin: SerialPin\n    let mp3playerVol = 0\n    let mp3sfxVol = 0\n    let isPot = false\n    let potPin = AnalogPin.P0\n    let masterVolume = 25\n\n    //% blockId=NL_SENSOR_TrimpotSet\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"set volume control pot at %aPin\"\n    export function potSet(aPin: AnalogPin): void {\n        potPin = aPin\n        isPot = true\n        masterVolume = potRead()\n    }\n\n    function potRead() {\n        if (isPot) { return Math.round(pins.map(pins.analogReadPin(potPin), 0, 1023, 0, 30)) }\n        else { return 5 }\n    }\n\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) { total += dataArr[i] }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) { myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i]) }\n        serial.writeBuffer(myBuff)\n        basic.pause(20) // Was 100; problematic at 10\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) { myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i]) }\n        serial.writeBuffer(myBuff)\n    }\n\n    //% blockId=NL_MP3_InitiateAs\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Ready MP3bit for %type at %sPin\"\n    //% dPin.fieldEditor=\"gridpicker\"\n    export function mp3setPorts(mp3bit: mp3type, sPin: SerialPin): void {\n        if (mp3bit == mp3type.music) {\n            mp3musicPin = sPin\n            mp3music = true\n            mp3musicVol = 100\n            setVolume(mp3type.music, mp3musicVol)\n        } else if (mp3bit == mp3type.player) {\n            mp3playerPin = sPin\n            mp3player = true\n            mp3playerVol = 100\n            setVolume(mp3type.player, mp3playerVol)\n        } else if (mp3bit == mp3type.sfxvoice) {\n            mp3sfxPin = sPin\n            mp3sfx = true\n            mp3sfxVol = 100\n            setVolume(mp3type.sfxvoice, mp3sfxVol)\n        }   \n    }\n\n    //% blockId=\"nl_playfilefolder\" \n    //% block=\"Play folder %folderNum file %fileNum on %sPin\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3fileFolder(folderNum: string, fileNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        dataArr[5] = parseInt(folderNum)\n        dataArr[6] = parseInt(fileNum)\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"NL_MP3_SendNumbers\" \n    //% block=\"Send numbers for folder %folderNum file %fileNum on %sPin\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3numbers(folderNum: number, fileNum: number, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        dataArr[3] = 15\n        dataArr[5] = folderNum\n        dataArr[6] = fileNum\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=NL_MP3_UpdateVolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Update volume for all\"\n    export function updateVolumeGlobal(): void {\n        let nowVol = potRead()\n        if (masterVolume != nowVol){\n            masterVolume = nowVol\n            setVolume(mp3type.music, mp3musicVol)\n            setVolume(mp3type.player, mp3playerVol)\n            setVolume(mp3type.sfxvoice, mp3sfxVol)\n        }\n    }\n\n    //% blockId=NL_MP3_SetVolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Set %mp3bit volume to %vol\"\n    export function setVolume(mp3bit:mp3type, vol:number): void {\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3musicVol = vol\n        } else if (mp3bit == mp3type.player) {\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3playerVol = vol\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3sfxVol = vol\n        }\n        dataArr[3] = 6\n        dataArr[5] = 0\n        dataArr[6] = Math.round(vol / 100 * masterVolume)\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=NL_MP3_GetVolumes\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Get current volumes\"\n    export function getVolumes() {\n        return \"m\" + mp3musicVol + \" p\" + mp3playerVol + \" s\" + mp3sfxVol + \" g\" + masterVolume\n    }\n\n    //% blockId=\"NL_MP3_StopPlayback\" \n    //% block=\"Stop playback on %mp3bit\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function stopPlayback(mp3bit:mp3type): void {\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        } else if (mp3bit == mp3type.player){\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        }\n        CMD = 0x16\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n/// END MP3 ///\n\n/// BEGIN SOUND BANK ///\n    export enum mp3type { music, player, sfxvoice }\n    export enum musicGenre { intro, tutorial, awaiting, level, won, lost }\n    export enum playerSaying { ready, yay, intro, nay, ouch, success, failure, won, lost, hurry }\n    export enum sfxType { correct, incorrect, ghost, fire, explosion, splash, spark, slash }\n    export enum voiceSaying { name, begin, retry, next, complete, gameover, welcome, intro, howto1, howto2, howto3, howto4, howto5, howto6, howto7, howto8, howto9 }\n    export enum magicianSaysSide { left, right }\n    export enum magicianDifficulty { easy, medium, hard }\n    export enum spotName { A, B, C, D, E, F, G, H, I }\n    export enum playerChar { mario, luigi, peach, daisy, toad, wario }\n\n    let sb_music_tutorial = feedBank(\"1.1.46|1.2.51|1.3.51|1.4.59|1.5.60|1.6.60|1.7.60|1.8.60|1.9.60|1.10.60|1.11.60|1.12.60|1.13.60|1.14.60|1.15.60|1.16.60|1.17.60|1.18.60|1.19.60|1.20.60|1.21.60\")\n    let sb_music_awaiting = feedBank(\"2.1.64|2.2.120|2.3.120|2.4.120|2.5.120|2.6.114|2.7.120|2.8.103|2.9.120|2.10.120|2.11.120|2.12.120|2.13.119|2.14.120|2.15.120|2.16.103|2.17.119|2.18.120|2.19.86|2.20.120\")\n    let sb_music_level = feedBank(\"3.1.120|3.2.120|3.3.120|3.4.120|3.5.120|3.6.120|3.7.120|3.8.120|3.9.120|3.10.92|3.11.120|3.12.120|3.13.111|3.14.116|3.15.98|3.16.120|3.17.120|3.18.82|3.19.120|3.20.120|3.21.120|3.22.120|3.23.120|3.24.120|3.25.120|3.26.120|3.27.91|3.28.120|3.29.120|3.30.41|3.31.120|3.32.120|3.33.120|3.34.94|3.35.120|3.36.120|3.37.120|3.38.120|3.39.120|3.40.120|3.41.78|3.42.120|3.43.120|3.44.120|3.45.120|3.46.120|3.47.120|3.48.120|3.49.120|3.50.120|3.51.120|3.52.113|3.53.120|3.54.120|3.55.42|3.56.120|3.57.120|3.58.120|3.59.114|3.60.120|3.61.120|3.62.118|3.63.120|3.64.120|3.65.120|3.66.120|3.67.120|3.68.59|3.69.120|3.70.120|3.71.118|3.72.120|3.73.120|3.74.70|3.75.120|3.76.120|3.77.120|3.78.120|3.79.120|3.80.120|3.81.120|3.82.120|3.83.80|3.84.120|3.85.120|3.86.120|3.87.120|3.88.107|3.89.120|3.90.120|3.91.120|3.92.120|3.93.36|3.94.120|3.95.120|3.96.120|3.97.120|3.98.120|3.99.120|3.100.63|3.101.120|3.102.120|3.103.112|3.104.105|3.105.120|3.106.110|3.107.120|3.108.120|3.109.120|3.110.120|3.111.120|3.112.120|3.113.120|3.114.120|3.115.120|3.116.119|3.117.120|3.118.120|3.119.120|3.120.120|3.121.120|3.122.120|3.123.120|3.124.120|3.125.120|3.126.104|3.127.120|3.128.87|3.129.120|3.130.118|3.131.120|3.132.120|3.133.50|3.134.109|3.135.120|3.136.120|3.137.120|3.138.91|3.139.120|3.140.120|3.141.120|3.142.120|3.143.120|3.144.120|3.145.104|3.146.112|3.147.120\")\n    let sb_music_won = feedBank(\"4.1.30|4.2.22|4.3.30|4.4.17|4.5.29|4.6.30|4.7.30|4.8.30|4.9.30|4.10.30|4.11.20|4.12.28|4.13.30|4.14.15|4.15.30|4.16.17|4.17.17|4.18.15|4.19.30|4.20.30|4.21.30|4.22.17|4.23.30|4.24.30|4.25.30\")\n    let sb_music_lost = feedBank(\"5.1.30|5.2.30|5.3.30|5.4.30|5.5.30|5.6.30|5.7.30|5.8.30|5.9.30|5.10.30|5.11.30\")\n    let sb_music_intro = feedBank(\"9.1.3|9.2.4|9.3.8|9.4.5|9.5.4|9.6.12|9.7.3|9.8.7|9.9.6|9.10.7|9.11.9|9.12.9|9.13.11|9.14.3|9.15.10|9.16.3|9.17.6|9.18.5|9.19.6|9.20.5|9.21.7|9.22.5|9.23.3|9.24.7|9.25.6|9.26.6|9.27.11|9.28.5|9.29.5|9.30.4|9.31.6|9.32.4|9.33.4|9.34.10|9.35.8|9.36.8|9.37.3|9.38.7|9.39.4|9.40.6|9.41.3|9.42.7|9.43.7|9.44.3|9.45.6|9.46.1|9.47.2|9.48.2|9.49.8|9.50.16|9.51.9|9.52.10|9.53.13|9.54.14|9.55.14|9.56.16|9.57.7|9.58.4|9.59.9|9.60.8|9.61.9|9.62.9|9.63.12|9.64.4|9.65.6|9.66.9|9.67.5|9.68.6|9.69.5|9.70.10|9.71.8|9.72.8|9.73.5|9.74.3\")\n    let sb_sfx_correct = feedBank(\"6.1.5|6.2.8|6.3.6|6.4.7|6.5.6|6.6.14|6.7.7|6.8.8|6.9.12|6.10.7|6.11.9|6.12.7|6.13.10|6.14.8|6.15.8|6.16.4|6.17.7|6.18.4|6.19.2|6.20.10|6.21.7|6.22.7|6.23.6|6.24.4|6.25.7|6.26.12|6.27.4|6.28.6|6.29.6|6.30.6|6.31.4|6.32.5|6.33.3|6.34.6|6.35.6|6.36.6|6.37.6|6.38.4|6.39.8|6.40.6|6.41.3|6.42.3|6.43.7|6.44.8|6.45.6|6.46.2|6.47.5|6.48.7|6.49.8|6.50.7|6.51.6|6.52.7|6.53.6|6.54.8|6.55.5|6.56.5|6.57.7|6.58.6|6.59.8|6.60.5|6.61.6|6.62.8|6.63.3|6.64.3|6.65.6|6.66.3|6.67.6|6.68.2|6.69.3|6.70.3|6.71.2|6.72.3|6.73.6|6.74.7|6.75.5|6.76.3|6.77.5|6.78.3|6.79.2|6.80.3|6.81.3|6.82.1|6.83.1|6.84.1|6.85.1|6.86.1|6.87.1|6.88.3|6.89.1|6.90.1|6.91.4|6.92.4\")\n    let sb_sfx_incorrect = feedBank(\"7.1.6|7.2.5|7.3.3|7.4.5|7.5.7|7.6.6|7.7.4|7.8.1|7.9.3|7.10.4|7.11.3|7.12.3|7.13.6|7.14.3|7.15.1|7.16.1|7.17.1|7.18.1|7.19.5|7.20.4|7.21.3|7.22.7\")\n    let sb_sfx_beep = feedBank(\"8.1.1|8.2.2|8.3.1\")\n    let sb_sfx_smash = feedBank(\"8.4.1|8.5.1|8.6.1|8.7.3\")\n    let sb_sfx_falling = feedBank(\"8.8.6\")\n    let sb_sfx_boom = feedBank(\"8.9.1|8.10.2|8.11.3|8.12.2\")\n    let sb_sfx_cannon = feedBank(\"8.13.2|8.14.1|8.15.1|8.16.2|8.17.2\")\n    let sb_sfx_fire = feedBank(\"8.18.2|8.19.2|8.20.5|8.21.2\")\n    let sb_sfx_ghost = feedBank(\"8.22.5|8.23.4|8.24.5|8.25.5\")\n    let sb_sfx_hit = feedBank(\"8.26.1|8.27.1|8.28.1|8.29.1|8.30.1\")\n    let sb_sfx_slash = feedBank(\"8.31.1|8.32.1|8.33.1|8.34.1|8.35.1|8.36.1|8.37.1|8.38.1|8.39.1|8.40.1|8.41.1|8.42.2\")\n    let sb_sfx_zap = feedBank(\"8.43.1|8.44.1|8.45.2|8.46.1|8.47.2|8.48.1\")\n    let sb_sfx_splash = feedBank(\"8.49.2|8.50.2|8.51.1|8.52.1|8.53.2|8.54.1|8.55.2|8.56.1|8.57.2\")\n    let sb_sfx_voice = feedBank(\"10.1.4|10.2.6|10.3.4|10.4.4|10.5.6|10.6.4|10.7.11|10.8.6|10.9.4|10.10.1\")\n    let sb_magician_left_easy = feedBank(\"11.1.3|11.2.6|11.3.7|11.4.6|11.5.6|11.6.7|11.7.6|11.8.6|11.9.6|11.10.7|11.11.6|11.12.6|11.13.7|11.14.6|11.15.6|11.16.6|11.17.6|11.18.6|11.19.6|11.20.6|11.21.6|11.22.7|11.23.6|11.24.6|11.25.6|11.26.6|11.27.7|11.28.7|11.29.7|11.30.6|11.31.6|11.32.8|11.33.7|11.34.6|11.35.7|11.36.5|11.37.6|11.38.8|11.39.6|11.40.6|11.41.6|11.42.6|11.43.6|11.44.7|11.45.6|11.46.7|11.47.7|11.48.8|11.49.6|11.50.7|11.51.6|11.52.6|11.53.7|11.54.8|11.55.7|11.56.6|11.57.7|11.58.6|11.59.6|11.60.6|11.61.6\")\n    let sb_magician_left_medium = feedBank(\"11.62.7|11.63.6|11.64.6|11.65.8|11.66.7|11.67.8|11.68.8|11.69.8|11.70.7|11.71.7|11.72.6|11.73.6|11.74.6|11.75.6|11.76.6|11.77.7|11.78.6|11.79.7|11.80.6|11.81.6|11.82.6|11.83.7|11.84.6|11.85.6|11.86.6|11.87.7|11.88.6|11.89.6|11.90.7|11.91.6|11.92.6|11.93.6|11.94.6|11.95.6|11.96.7|11.97.6|11.98.6|11.99.7|11.100.6|11.101.6|11.102.6|11.103.7|11.104.6|11.105.8|11.106.6|11.107.6|11.108.6|11.109.7|11.110.6|11.111.7|11.112.7|11.113.6|11.114.6|11.115.7|11.116.6|11.117.7|11.118.7|11.119.6|11.120.6|11.121.6|11.122.7|11.123.7|11.124.6|11.125.6|11.126.6|11.127.8|11.128.7|11.129.6|11.130.8|11.131.7|11.132.6|11.133.7|11.134.6|11.135.6|11.136.7|11.137.7\")\n    let sb_magician_left_hard = feedBank(\"11.219.7|11.220.6|11.221.6|11.222.6|11.223.6|11.224.6|11.225.7|11.226.7|11.227.6|11.228.6|11.229.6|11.230.8|11.231.7|11.232.7|11.233.6|11.234.6|11.235.6|11.236.8|11.237.7|11.238.7|11.239.6|11.240.6|11.241.8|11.242.7|11.243.7|11.244.6|11.245.6|11.246.7|11.247.7|11.248.7|11.249.7|11.250.6|11.251.6|11.252.6|11.253.6|11.254.6|11.255.6|11.256.6|11.257.6|11.258.7|11.259.7|11.260.7|11.261.6|11.262.6|11.263.6|11.264.6|11.265.6|11.266.6|11.267.7|11.268.6|11.269.6|11.270.6|11.271.6|11.272.6|11.273.6|11.274.6|11.275.7|11.276.6|11.277.6|11.278.7|11.279.7|11.280.7|11.281.6|11.282.6|11.283.7|11.284.9|11.285.7|11.286.6|11.287.6|11.288.6|11.289.7|11.290.7|11.291.6|11.292.6|11.293.7|11.294.7|11.295.6|11.296.7|11.297.6|11.298.6|11.299.6|11.300.6|11.301.6|11.302.6|11.303.7|11.304.6|11.305.6|11.306.7|11.307.6|\")\n    let sb_magician_right_easy = feedBank(\"11.159.6|11.160.6|11.161.7|11.162.6|11.163.7|11.164.7|11.165.6|11.166.6|11.167.7|11.168.7|11.169.6|11.170.8|11.171.7|11.172.7|11.173.6|11.174.6|11.175.6|11.176.6|11.177.7|11.178.6|11.179.6|11.180.6|11.181.6|11.182.7|11.183.6|11.184.6|11.185.6|11.186.6|11.187.8|11.188.7|11.189.6|11.190.6|11.191.6|11.192.6|11.193.6|11.194.6|11.195.5|11.196.6|11.197.6|11.198.6|11.199.7|11.200.6|11.201.6|11.202.6|11.203.6|11.204.6|11.205.6|11.206.6|11.207.6|11.208.6|11.209.6|11.210.7|11.211.7|11.212.7|11.213.6|11.214.7|11.215.7|11.216.6|11.217.7|11.218.6\")\n    let sb_magician_right_medium = feedBank(\"11.219.7|11.220.6|11.221.6|11.222.6|11.223.6|11.224.6|11.225.7|11.226.7|11.227.6|11.228.6|11.229.6|11.230.8|11.231.7|11.232.7|11.233.6|11.234.6|11.235.6|11.236.8|11.237.7|11.238.7|11.239.6|11.240.6|11.241.8|11.242.7|11.243.7|11.244.6|11.245.6|11.246.7|11.247.7|11.248.7|11.249.7|11.250.6|11.251.6|11.252.6|11.253.6|11.254.6|11.255.6|11.256.6|11.257.6|11.258.7|11.259.7|11.260.7|11.261.6|11.262.6|11.263.6|11.264.6|11.265.6|11.266.6|11.267.7|11.268.6|11.269.6|11.270.6|11.271.6|11.272.6|11.273.6|11.274.6|11.275.7|11.276.6|11.277.6|11.278.7|11.279.7|11.280.7|11.281.6|11.282.6|11.283.7|11.284.9|11.285.7|11.286.6|11.287.6\")\n    let sb_magician_right_hard = feedBank(\"11.288.6|11.289.7|11.290.7|11.291.6|11.292.6|11.293.7|11.294.7|11.295.6|11.296.7|11.297.6|11.298.6|11.299.6|11.300.6|11.301.6|11.302.6|11.303.7|11.304.6|11.305.6|11.306.7|11.307.6|11.308.7|11.309.6|11.310.6|11.311.6|11.312.7|11.313.7|11.314.6|11.315.7\")\n    let sb_mario_name = feedBank(\"12.1.2|12.2.1|12.4.2|12.5.3\")\n    let sb_mario_intro = feedBank(\"12.3.4|12.6.2|12.7.212.112.1|12.113.1|\")\n    let sb_mario_ready = feedBank(\"12.8.1|12.9.2|12.10.2|12.11.1|12.12.1|12.13.2|12.14.2|12.15.2|12.16.2|12.17.2|12.18.1\")\n    let sb_mario_yay = feedBank(\"12.19.1|12.20.1|12.21.1|12.22.1|12.23.1|12.24.1|12.25.1|12.26.1|12.27.1|12.28.1|12.29.1|12.30.1|12.31.1|12.32.1|12.33.1|12.34.1|12.35.1|12.36.1|12.37.1|12.38.1|12.39.1|12.40.1|12.41.1|12.42.1|12.43.1|12.44.1|12.45.1|12.46.1|12.47.1|12.48.1|12.49.1|12.50.1|12.51.2|12.52.2|12.53.2|12.54.2|12.55.2|12.56.2|12.57.2|12.58.2|12.59.2|12.60.2|12.61.2|12.62.2\")\n    let sb_mario_success = feedBank(\"12.63.1|12.64.2|12.65.2|12.66.2|12.67.2|12.68.3|12.69.3|12.70.3|12.71.3|12.72.3\")\n    let sb_mario_won = feedBank(\"12.73.2|12.74.2|12.75.3|12.76.3|12.77.3\")\n    let sb_mario_ouch = feedBank(\"12.78.1|12.79.1|12.80.1|12.81.1|12.82.1|12.83.1|12.84.1|12.85.1|12.86.1|12.87.1|12.88.1|12.89.1|12.90.1|12.91.1|12.92.1|12.93.1|12.94.1|12.95.1\")\n    let sb_mario_nay = feedBank(\"12.96.1|12.97.1|12.98.1|12.99.1|12.100.1|12.101.1|12.102.2|12.103.1|12.104.1|12.105.1|12.106.1|12.107.1|12.108.1|12.109.1|12.110.2|12.111.2\")\n    let sb_mario_failure = feedBank(\"12.114.2|12.115.2|12.116.2|12.117.1\")\n    let sb_mario_lost = feedBank(\"12.118.3|12.119.3|12.120.4|12.121.1\")\n    let sb_mario_hurry = feedBank(\"12.122.44\")\n    \n    let playlist_tutorial = makePlaylist(sb_music_tutorial)\n    let playlist_awaiting = makePlaylist(sb_music_awaiting)\n    let playlist_level = makePlaylist(sb_music_level)\n    let playlist_won = makePlaylist(sb_music_won)\n    let playlist_lost = makePlaylist(sb_music_lost)\n    let playlist_correct = makePlaylist(sb_sfx_correct)\n    let playlist_incorrect = makePlaylist(sb_sfx_incorrect)\n    let playlist_intro = makePlaylist(sb_music_intro)\n    let playlist_boom = makePlaylist(sb_sfx_boom)\n    let playlist_smash = makePlaylist(sb_sfx_smash)\n    let playlist_falling = makePlaylist(sb_sfx_falling)\n    let playlist_cannon = makePlaylist(sb_sfx_cannon)\n    let playlist_fire = makePlaylist(sb_sfx_fire)\n    let playlist_ghost = makePlaylist(sb_sfx_ghost)\n    let playlist_hit = makePlaylist(sb_sfx_hit)\n    let playlist_slash = makePlaylist(sb_sfx_slash)\n    let playlist_zap = makePlaylist(sb_sfx_zap)\n    let playlist_splash = makePlaylist(sb_sfx_splash)\n    let playlist_magician_left_easy = makePlaylist(sb_magician_left_easy)\n    let playlist_magician_left_medium = makePlaylist(sb_magician_left_medium)\n    let playlist_magician_left_hard = makePlaylist(sb_magician_left_hard)\n    let playlist_magician_right_easy = makePlaylist(sb_magician_right_easy)\n    let playlist_magician_right_medium = makePlaylist(sb_magician_right_medium)\n    let playlist_magician_right_hard = makePlaylist(sb_magician_right_hard)\n    let playlist_mario_name = makePlaylist(sb_mario_name)\n    let playlist_mario_intro = makePlaylist(sb_mario_intro)\n    let playlist_mario_ready = makePlaylist(sb_mario_ready)\n    let playlist_mario_yay = makePlaylist(sb_mario_yay)\n    let playlist_mario_success = makePlaylist(sb_mario_success)\n    let playlist_mario_won = makePlaylist(sb_mario_won)\n    let playlist_mario_ouch = makePlaylist(sb_mario_ouch)\n    let playlist_mario_nay = makePlaylist(sb_mario_nay)\n    let playlist_mario_failure = makePlaylist(sb_mario_failure)\n    let playlist_mario_lost = makePlaylist(sb_mario_lost)\n    let playlist_mario_hurry = makePlaylist(sb_mario_hurry)\n    let playtimeMusic = 0\n    let playtimePlayer = 0\n    let playtimeSfxVoice = 0\n\n    function takeRotate(PlaylistIn: number[]) {\n        let returnTrack = PlaylistIn.shift()\n        PlaylistIn.push(returnTrack)\n        return returnTrack\n    }\n    function feedBank(BankString: string) {\n        let returnBank: number[][] = []\n        let BankSplit = BankString.split(\"|\")\n        for (let soundString of BankSplit) {\n            returnBank.push([parseFloat(soundString.split(\".\")[0]), parseFloat(soundString.split(\".\")[1]), parseFloat(soundString.split(\".\")[2])])\n        }\n        return returnBank\n    }\n    function makePlaylist(SoundBank: any[]) {\n        let returnList: number[] = []\n        let orderedList: number[] = []\n        for (let soundNo = 0; soundNo <= SoundBank.length - 1; soundNo++) {\n            orderedList.push(soundNo)\n        }\n        while (orderedList.length > 0) {\n            let randTrack = randint(0, orderedList.length - 1)\n            returnList.push(orderedList.removeAt(randTrack))\n        }\n        return returnList\n    }\n    function bankPlay(mp3bit:mp3type, SoundBank: number[][], trackIndex: number) {\n        let theSong = SoundBank[trackIndex]\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimeMusic = theSong[2]\n        } else if (mp3bit == mp3type.player) {\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimePlayer = theSong[2]\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimeSfxVoice = theSong[2]\n        }\n        dataArr[3] = 15\n        dataArr[5] = theSong[0]\n        dataArr[6] = theSong[1]\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=NL_MP3_PlaytimeMusic\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of music\"\n    export function mp3durationMusic(): number{\n        return playtimeMusic\n    }\n\n    //% blockId=NL_MP3_PlaytimePlayer\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of player sound\"\n    export function mp3durationPlayer(): number {\n        return playtimePlayer\n    }\n\n    //% blockId=NL_MP3_PlaytimeSFX\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of sfx/voice\"\n    export function mp3durationSfxVoice(): number {\n        return playtimeSfxVoice\n    }\n\n\n\n    //% blockId=NL_MP3_MusicPlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %genre music\"\n    export function mp3musicPlay(genre: musicGenre): void {\n        if (genre == musicGenre.tutorial){\n            bankPlay(mp3type.music, sb_music_tutorial, takeRotate(playlist_tutorial))\n        } else if (genre == musicGenre.awaiting) {\n            bankPlay(mp3type.music, sb_music_awaiting, takeRotate(playlist_awaiting))\n        } else if (genre == musicGenre.intro){\n            bankPlay(mp3type.music, sb_music_intro, takeRotate(playlist_intro))\n        } else if (genre == musicGenre.level) {\n            bankPlay(mp3type.music, sb_music_level, takeRotate(playlist_level))\n        } else if (genre == musicGenre.won) {\n            bankPlay(mp3type.music, sb_music_won, takeRotate(playlist_won))\n        } else if (genre == musicGenre.lost) {\n            bankPlay(mp3type.music, sb_music_lost, takeRotate(playlist_lost))\n        }\n    }\n\n    //% blockId=NL_MP3_PlayerSay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %saying as player\"\n    export function mp3sayPlay(saying: playerSaying): void {\n        if(saying == playerSaying.ready){\n            bankPlay(mp3type.player, sb_mario_ready, takeRotate(playlist_mario_ready))\n        }else if (saying == playerSaying.yay){\n            bankPlay(mp3type.player, sb_mario_yay, takeRotate(playlist_mario_yay))\n        } else if (saying == playerSaying.intro) {\n            bankPlay(mp3type.player, sb_mario_intro, takeRotate(playlist_mario_intro))\n        } else if (saying == playerSaying.nay) {\n            bankPlay(mp3type.player, sb_mario_nay, takeRotate(playlist_mario_nay))\n        } else if (saying == playerSaying.ouch) {\n            bankPlay(mp3type.player, sb_mario_ouch, takeRotate(playlist_mario_ouch))\n        } else if (saying == playerSaying.success) {\n            bankPlay(mp3type.player, sb_mario_success, takeRotate(playlist_mario_success))\n        } else if (saying == playerSaying.failure) {\n            bankPlay(mp3type.player, sb_mario_failure, takeRotate(playlist_mario_failure))\n        } else if (saying == playerSaying.won) {\n            bankPlay(mp3type.player, sb_mario_won, takeRotate(playlist_mario_won))\n        } else if (saying == playerSaying.lost) {\n            bankPlay(mp3type.player, sb_mario_lost, takeRotate(playlist_mario_lost))\n        } else if (saying == playerSaying.hurry) {\n            bankPlay(mp3type.player, sb_mario_hurry, takeRotate(playlist_mario_hurry))\n        }\n    }\n\n    //% blockId=NL_MP3_VoicePlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %voice as voice\"\n    export function mp3voicePlay(voice: voiceSaying): void {\n        if (voice == voiceSaying.name) {\n\n        } else if (voice == voiceSaying.begin) {\n\n        } else if (voice == voiceSaying.retry) {\n\n        } else if (voice == voiceSaying.next) {\n\n        } else if (voice == voiceSaying.complete) {\n\n        } else if (voice == voiceSaying.gameover) {\n\n        } else if (voice == voiceSaying.welcome) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 0)\n        } else if (voice == voiceSaying.intro) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 1)\n        } else if (voice == voiceSaying.howto1) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 2)\n        } else if (voice == voiceSaying.howto2) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 3)\n        } else if (voice == voiceSaying.howto3) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 4)\n        } else if (voice == voiceSaying.howto4) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 5)\n        } else if (voice == voiceSaying.howto5) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 6)\n        } else if (voice == voiceSaying.howto6) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 7)\n        } else if (voice == voiceSaying.howto7) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 8)\n        } else if (voice == voiceSaying.howto8) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 9)\n        } else if (voice == voiceSaying.howto9) {\n\n        }\n    }\n\n    //% blockId=NL_MP3_MagicianSay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Magician says on the %side difficulty %difficulty\"\n    export function mp3magician(side: magicianSaysSide, difficulty: magicianDifficulty): void {\n        if (side == magicianSaysSide.left) {\n            if (difficulty == magicianDifficulty.easy) {\n\n            } else if (difficulty = magicianDifficulty.medium) {\n\n            } else if (difficulty = magicianDifficulty.hard) {\n\n            }\n        } else if (side = magicianSaysSide.right) {\n            if (difficulty == magicianDifficulty.easy) {\n\n            } else if (difficulty = magicianDifficulty.medium) {\n\n            } else if (difficulty = magicianDifficulty.hard) {\n\n            }\n        } \n    }\n\n    //% blockId=NL_MP3_SfxPlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %sfx sound effect\"\n    export function mp3sfxPlay(sfx: sfxType): void {\n        if(sfx == sfxType.correct){\n            bankPlay(mp3type.sfxvoice, sb_sfx_correct, takeRotate(playlist_correct))\n        }else if (sfx == sfxType.incorrect){\n            bankPlay(mp3type.sfxvoice, sb_sfx_incorrect, takeRotate(playlist_incorrect))\n        }else if (sfx == sfxType.ghost){\n            bankPlay(mp3type.sfxvoice, sb_sfx_ghost, takeRotate(playlist_ghost))\n        }else if (sfx == sfxType.fire){\n            bankPlay(mp3type.sfxvoice, sb_sfx_fire, takeRotate(playlist_fire))\n        }else if (sfx == sfxType.explosion){\n            bankPlay(mp3type.sfxvoice, sb_sfx_boom, takeRotate(playlist_boom))\n        }else if (sfx == sfxType.splash){\n            bankPlay(mp3type.sfxvoice, sb_sfx_splash, takeRotate(playlist_splash))\n        } else if (sfx == sfxType.spark) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_zap, takeRotate(playlist_zap))\n        } else if (sfx == sfxType.slash) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_slash, takeRotate(playlist_slash))\n        }\n    }\n/// END SOUND BANK ///\n\n/// BEGIN MOTOR & RELAY ///\n    const kong_address = 0x10\n    export enum MotorList { M1=1, M2=2 }\n    export enum motors{ redrack=16, shark=4, ghost=5, cannon=8, oarrack=7, shell=6, door=3, dragon=9, wheel=1, fan=2 }\n    export enum motorState { min, max, mid, off }\n    export enum fogLevels { none = 0, light = 1, medium = 2, heavy = 3 }\n    export enum sockState { dancing = 1, still = 0 }\n    let motor_wheel_max = 12; let motor_wheel_min = 0\n    let servo_redrack_max = 150; let servo_redrack_min = 100\n    let servo_cannon_min = 135; let servo_cannon_max = 65\n    let servo_shark_min = 20; let servo_shark_max = 85\n    let servo_oarrack_min = 60; let servo_oarrack_max = 110\n    let servo_ghost_min = 110; let servo_ghost_max = 40\n    let servo_shell_min = 170; let servo_shell_max = 100\n    let servo_door_min = 50; let servo_door_max = 140; let servo_door_mid = 100\n    let motor_fan_min = 0; let motor_fan_mid = 50; let motor_fan_max = 100\n    let servo_dragon_min = 90; let servo_dragon_max = 79\n\n    export function servoSet(servo: motors, angle: number): void {\n        let buf = pins.createBuffer(4);\n        buf[0] = servo;\n        buf[1] = angle;\n        buf[2] = 0;\n        buf[3] = 0;\n        pins.i2cWriteBuffer(kong_address, buf);\n    }\n\n    export function motorSpeed(motor: MotorList, speed: number): void {\n        let buf = pins.createBuffer(4);\n        buf[0] = motor\n        buf[1] = 1;\n        if (speed < 0) {\n            buf[1] = 2;\n            speed = speed * -1\n        }\n        buf[2] = speed;\n        buf[3] = 0;\n        pins.i2cWriteBuffer(kong_address, buf);\n    }\n\n    //% blockId=NL_MOTOR_Set \n    //% block=\"Set %motor to %state\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function motorSet(motor:motors, state:motorState):void{\n        if (motor == motors.redrack){\n            if (state == motorState.min){ servoSet(motor, servo_redrack_min) } \n            else if (state == motorState.max){ servoSet(motor, servo_redrack_max) }\n        } if (motor == motors.shark) {\n            if (state == motorState.min) { servoSet(motor, servo_shark_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_shark_max) }\n        } if (motor == motors.ghost) {\n            if (state == motorState.min) { servoSet(motor, servo_ghost_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_ghost_max) }\n        } if (motor == motors.cannon) {\n            if (state == motorState.min) { servoSet(motor, servo_cannon_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_cannon_max) }\n        } if (motor == motors.oarrack) {\n            if (state == motorState.min) { servoSet(motor, servo_oarrack_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_oarrack_max) }\n        } if (motor == motors.shell) {\n            if (state == motorState.min) { servoSet(motor, servo_shell_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_shell_max) }\n        } if (motor == motors.door) {\n            if (state == motorState.min) { servoSet(motor, servo_door_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_door_max) }\n            else if (state == motorState.mid) { servoSet(motor, servo_door_mid) }\n        } if (motor == motors.dragon) {\n            if (state == motorState.min) { servoSet(motor, servo_dragon_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_dragon_max) }\n        } if (motor == motors.wheel) {\n            if (state == motorState.min) { motorSpeed(MotorList.M1, motor_wheel_min) }\n            else if (state == motorState.max) { motorSpeed(MotorList.M1, motor_wheel_max) }\n            else if (state == motorState.off) { motorSpeed(MotorList.M1, 0) }\n        } if (motor == motors.fan) {\n            if (state == motorState.min) { motorSpeed(MotorList.M2, motor_fan_min) }\n            else if (state == motorState.mid) { motorSpeed(MotorList.M2, motor_fan_mid) }\n            else if (state == motorState.max) { motorSpeed(MotorList.M2, motor_fan_max) }\n            else if (state == motorState.off) { motorSpeed(MotorList.M2, 0) }\n        }\n    }\n\n    //% blockId=NL_RELAY_FogSet \n    //% block=\"set fog level to %level\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function setFog(fog:fogLevels):void{\n        if (fog == fogLevels.none){\n            pins.digitalWritePin(DigitalPin.P2, 1)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 1)\n        } else if (fog == fogLevels.light){\n            pins.digitalWritePin(DigitalPin.P2, 1)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        } else if (fog == fogLevels.medium) {\n            pins.digitalWritePin(DigitalPin.P2, 0)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        } else if (fog == fogLevels.heavy) {\n            pins.digitalWritePin(DigitalPin.P2, 0)\n            pins.digitalWritePin(DigitalPin.P8, 0)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        }\n    }\n\n    //% blockId=NL_RELAY_SockSet\n    //% block=\"set dancing sock to %sockState\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function setSock(state: sockState): void {\n        if(state==sockState.dancing){ pins.digitalWritePin(DigitalPin.P12, 0) }\n        else{ pins.digitalWritePin(DigitalPin.P12, 1) }\n    }\n\n/// END MOTOR & RELAY ///\n\n/// BEGIN OLED\n\n    let d1 = [0, 0, 0, 20, 36, 35, 54, 0, 28, 65, 8, 8, 160, 8, 96, 32, 62, 0, 98, 34, 24, 39, 60, 1, 54, 6, 0, 0, 8, 20, 65, 2, 50, 126, 127, 62, 127, 127, 127, 62, 127, 65, 32, 127, 127, 127, 127, 62, 127, 62, 127, 38, 1, 63, 31, 63, 99, 3, 97, 127, 2, 65, 4, 128, 1, 32, 127, 56, 56, 56, 8, 24, 127, 0, 128, 127, 65, 124, 124, 56, 252, 24, 0, 72, 4, 60, 28, 60, 68, 28, 68, 8, 0, 65, 2]\n    let d2 = [0, 95, 7, 127, 42, 19, 73, 5, 34, 34, 42, 8, 96, 8, 96, 16, 81, 66, 81, 65, 20, 69, 74, 113, 73, 73, 54, 172, 20, 20, 34, 1, 73, 9, 73, 65, 65, 73, 9, 65, 8, 127, 64, 8, 64, 2, 4, 65, 9, 65, 9, 73, 1, 64, 32, 64, 20, 4, 81, 65, 4, 65, 2, 128, 2, 84, 72, 68, 68, 84, 126, 164, 8, 125, 132, 16, 127, 4, 8, 68, 36, 36, 124, 84, 127, 64, 32, 64, 40, 160, 100, 54, 127, 54, 1]\n    let d3 = [0, 0, 0, 20, 127, 8, 85, 3, 65, 28, 28, 62, 0, 8, 0, 8, 73, 127, 73, 73, 18, 69, 73, 9, 73, 73, 54, 108, 34, 20, 20, 81, 121, 9, 73, 65, 65, 73, 9, 65, 8, 65, 65, 20, 64, 12, 8, 65, 9, 81, 25, 73, 127, 64, 64, 56, 8, 120, 73, 65, 8, 127, 1, 128, 4, 84, 68, 68, 68, 84, 9, 164, 4, 0, 125, 40, 64, 24, 4, 68, 36, 36, 8, 84, 68, 64, 64, 48, 16, 160, 84, 65, 0, 8, 1]\n    let d4 = [0, 0, 7, 127, 42, 100, 34, 0, 0, 0, 42, 8, 0, 8, 0, 4, 69, 64, 73, 73, 127, 69, 73, 5, 73, 41, 0, 0, 65, 20, 8, 9, 65, 9, 73, 65, 34, 73, 9, 81, 8, 0, 63, 34, 64, 2, 16, 65, 9, 33, 41, 73, 1, 64, 32, 64, 20, 4, 69, 0, 16, 0, 2, 128, 0, 84, 68, 40, 72, 84, 2, 164, 4, 0, 0, 68, 0, 4, 124, 56, 24, 252, 4, 36, 0, 124, 32, 64, 40, 124, 76, 0, 0, 0, 2]\n    let d5 = [0, 0, 0, 20, 18, 98, 80, 0, 0, 0, 8, 8, 0, 8, 0, 2, 62, 0, 70, 54, 16, 57, 48, 3, 54, 30, 0, 0, 0, 20, 0, 6, 62, 126, 54, 34, 28, 65, 1, 114, 127, 0, 1, 65, 64, 127, 127, 62, 6, 94, 70, 50, 1, 63, 31, 63, 99, 3, 67, 0, 32, 0, 4, 128, 0, 120, 56, 0, 127, 24, 0, 124, 120, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 28, 60, 68, 0, 68, 0, 0, 0, 1]\n\n    let display = [\" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\")]\n    let desired = [\" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\")]\n\n    //% blockId=NL_OLED_Update3\n    //% block=\"oled update from buffer\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function changeThree(): void{\n        let updated: string[][] = []\n        let count = 0\n        for (let row=0; row<8; row++){\n            for(let col=0; col<16; col++){\n                let refChar = desired[row][col]\n                if (refChar != display[row][col]){\n                    writeChar(refChar,row,col)\n                    display[row][col] = refChar\n                    count++\n                    if (count >= 3){\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    //% blockId=NL_OLED_PrintLine\n    //% block=\"print %text to oled buffer line %line\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function printLine(text:any, line:number): void{\n        let thisText = text + \"\"\n        for (let i = 0; i < 16; i++){\n            if (i < thisText.length){\n                desired[line][i]=thisText.charAt(i)\n            } else{\n                desired[line][i]=\" \"\n            }\n        }\n    }\n\n    function oledcmd(c: number) {\n        pins.i2cWriteNumber(0x3c, c, NumberFormat.UInt16BE);\n    }\n\n    function setText(row: number, column: number) {\n        oledcmd(0xB0 + row);            //set page address\n        oledcmd(0x00 + (8 * column & 0x0F));  //set column lower address\n        oledcmd(0x10 + ((8 * column >> 4) & 0x0F));   //set column higher address\n    }\n\n    //% blockId=NL_OLED_Init \n    //% block=\"initiate the oled screen\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function oledinit(): void {\n        oledcmd(0xAE);  // Set display OFF\n        oledcmd(0xD5);  // Set Display Clock Divide Ratio / OSC Frequency 0xD4\n        oledcmd(0x80);  // Display Clock Divide Ratio / OSC Frequency \n        oledcmd(0xA8);  // Set Multiplex Ratio\n        oledcmd(0x3F);  // Multiplex Ratio for 128x64 (64-1)\n        oledcmd(0xD3);  // Set Display Offset\n        oledcmd(0x00);  // Display Offset\n        oledcmd(0x40);  // Set Display Start Line\n        oledcmd(0x8D);  // Set Charge Pump\n        oledcmd(0x14);  // Charge Pump (0x10 External, 0x14 Internal DC/DC)\n        oledcmd(0xA1);  // Set Segment Re-Map\n        oledcmd(0xC8);  // Set Com Output Scan Direction\n        oledcmd(0xDA);  // Set COM Hardware Configuration\n        oledcmd(0x12);  // COM Hardware Configuration\n        oledcmd(0x81);  // Set Contrast\n        oledcmd(0xCF);  // Contrast\n        oledcmd(0xD9);  // Set Pre-Charge Period\n        oledcmd(0xF1);  // Set Pre-Charge Period (0x22 External, 0xF1 Internal)\n        oledcmd(0xDB);  // Set VCOMH Deselect Level\n        oledcmd(0x40);  // VCOMH Deselect Level\n        oledcmd(0xA4);  // Set all pixels OFF\n        oledcmd(0xA6);  // Set display not inverted\n        oledcmd(0xAF);  // Set display On\n        for (let j = 0; j < 8; j++) {\n            setText(j, 0);\n            {\n                for (let i = 0; i < 16; i++)  //clear all columns\n                {\n                    writeChar(\" \",j,i)\n                }\n            }\n        }\n    }\n\n    function writeChar(char: string, row: number, column: number) {\n        setText(row, column)\n        let i = char.charCodeAt(0) - 32\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d1[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d2[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d3[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d4[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d5[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n    }\n\n/// END OLED\n\n\n/// BEGIN DIGITS\n\n    let _SEGMENTS = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71];\n\n    //% blockId=nl_digits_create block=\"4-Digit cPin %cPin dPin %dPin\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function tm1637Create(cPin: DigitalPin, dPin: DigitalPin): TM1637LEDs {\n        let display = new TM1637LEDs();\n        display.clk = cPin\n        display.dio = dPin\n        display.brightness = 7;\n        display.init();\n        return display;\n    }\n    export class TM1637LEDs {\n        buf: Buffer;\n        clk: DigitalPin;\n        dio: DigitalPin;\n        _ON: number;\n        brightness: number;\n        init(): void {\n            pins.digitalWritePin(this.clk, 0);\n            pins.digitalWritePin(this.dio, 0);\n            this._ON = 8;\n            this.buf = pins.createBuffer(4);\n            this.clear();\n        }\n        _start() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _stop() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.dio, 1);\n        }\n        _write_data_cmd() {\n            this._start();\n            this._write_byte(0x40);\n            this._stop();\n        }\n        _write_dsp_ctrl() {\n            this._start();\n            this._write_byte(0x80 | this._ON | this.brightness);\n            this._stop();\n        }\n        _write_byte(b: number) {\n            for (let i = 0; i < 8; i++) {\n                pins.digitalWritePin(this.dio, (b >> i) & 1);\n                pins.digitalWritePin(this.clk, 1);\n                pins.digitalWritePin(this.clk, 0);\n            }\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _intensity(val: number = 7) {\n            this._ON = 8;\n            this.brightness = val - 1;\n            this._write_data_cmd();\n            this._write_dsp_ctrl();\n        }\n        _dat(bit: number, dat: number) {\n            this._write_data_cmd();\n            this._start();\n            this._write_byte(0xC0 | (bit % 4))\n            this._write_byte(dat);\n            this._stop();\n            this._write_dsp_ctrl();\n        }\n        \n        //% blockId=nl_digits_digit block=\"%display|show single number|%num|at digit|%bit\"\n        //% subcategory=\"Display\" group=\"Display\"\n        //% bit.defl=1 bit.min=0 bit.max=9\n        showbit(num: number = 5, bit: number = 0) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            this.buf[bit % 4] = _SEGMENTS[num % 16]\n            this._dat(bit, _SEGMENTS[num % 16])\n        }\n\n        //% blockId=nl_digits_number block=\"%display|show number|%num\"\n        //% subcategory=\"Display\" group=\"Display\"\n        showNumber(num: number) {\n            if (num < 0) {\n                num = -num\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n                this._dat(0, 0x40) // '-'\n                // this._dat(0, 0) // blank\n            }\n            else {\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n            }\n        }\n\n        //% blockId=\"nl_digits_clear\" block=\"clear display %display\"\n        //% subcategory=\"Display\" group=\"Display\"\n        clear() {\n            for (let i = 0; i < 4; i++) {\n                this._dat(i, 0)\n                this.buf[i] = 0\n            }\n        }\n    }\n\n/// END DIGITS\n\n}\n\n\n","pxt.json":"{\n    \"name\": \"NotLegosMaster\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"displaySendBuffer.asm\",\n        \"planetxbasic.ts\",\n        \"notlegos.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"7.0.42\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n","test.ts":""}},{"timestamp":1728841138299,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"NFHB?|vd].P(}_Y-C82U\">btToken</variable><variable id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</variable><variable id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</variable><variable id=\"Y|e4lM)*:N0Ca^S5-64i\">lastLaserR</variable><variable id=\"Uk9;F|_3qS]2aZyBH#]%\">lastLaserC</variable><variable id=\"}GOl3M4q[Bn4R~R!?]at\">lastLaserL</variable><variable id=\"JQUQT|8QeX)zSvZ?K@,i\">lastSonarRead</variable><variable id=\"=X]tI5AG]3|WfpT`9Jsr\">lastHue</variable><variable id=\"Bc7kXprAfc3]W%ILxbVV\">lastGesture</variable><variable id=\"#oq[[iBLthN][|]:S!n}\">lastHunt</variable><variable id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</variable><variable id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</variable><variable id=\"8GDUfe;)i@P.Do~T6|{[\">theName</variable><variable id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</variable><variable id=\"=9JavC*{GElF}/FS78a@\">iBegan</variable><variable id=\"e.[{0v-j0Tp(kJ9$~N@:\">isReady</variable></variables><block type=\"function_definition\" x=\"4217\" y=\"-292\"><mutation name=\"buttonPress\" functionid=\"+$9AXp*X:[tcODdtL9m)\"><arg name=\"button\" id=\"mfdvbnfdsij7xy9ejk0nd\" type=\"string\"></arg></mutation><field name=\"function_name\">buttonPress</field><value name=\"mfdvbnfdsij7xy9ejk0nd\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">button</field></block></value><statement name=\"STACK\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">button: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">button</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></statement></block><block type=\"every_interval\" x=\"681\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">2000</field></shadow></value><statement name=\"HANDLER\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value></block></statement></block><block type=\"every_interval\" x=\"1327\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"every_interval\" x=\"1542\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">40</field></shadow></value><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"=9JavC*{GElF}/FS78a@\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time\"></block></value><next><block type=\"NL_PIXEL_CastleSayTick\"><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"e.[{0v-j0Tp(kJ9$~N@:\">isReady</field></block></value><next><block type=\"function_call\"><mutation name=\"ready_oled\" functionid=\"LSuKu]l*}Y2[|u.h3PJ%\"></mutation><next><block type=\"NL_OLED_Update3\"><next><block type=\"variables_set\"><field name=\"VAR\" id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"=9JavC*{GElF}/FS78a@\">iBegan</field></block></value></block></value></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"NL_OLED_Init\"><next><block type=\"NL_PIXEL_CastleSay\"><field name=\"sockPin\">DigitalPin.P3</field><field name=\"wheelPin\">DigitalPin.P0</field><field name=\"scorePin\">DigitalPin.P16</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"=9JavC*{GElF}/FS78a@\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time_micros\"></block></value></block></next></block></next></block></statement></block><block type=\"every_interval\" x=\"2136\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"input_logo_event\" x=\"2351\" y=\"-83\"><field name=\"action\">TouchButtonEvent.Touched</field><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_MP3_PlayerSay\"><field name=\"saying\">notLegos.playerSaying.ready</field><next><block type=\"NL_MP3_SfxPlay\"><field name=\"sfx\">notLegos.sfxType.fire</field><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.intro</field></block></next></block></next></block></statement></block></statement></block><block type=\"radio_on_value_drag\" x=\"2934\" y=\"328\"><value name=\"HANDLER_DRAG_PARAM_name\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">name</field></block></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">value</field></block></value><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_substr\"><value name=\"this\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value><value name=\"start\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"length\"><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_substr\"><value name=\"this\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value><value name=\"start\"><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value><value name=\"length\"><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text_length\"><value name=\"VALUE\"><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value></block></value></block></value><next><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"controls_if\"><mutation elseif=\"3\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wstar</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_start</field></block></value></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value><statement name=\"DO1\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.welcome</field></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.WheelAll</field><field name=\"effect\">notLegos.vfxEffect.fire</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.intro</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_reg</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">check</field></block></value></block></value><statement name=\"DO2\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">ready</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value></block></statement><statement name=\"ELSE\"><block type=\"controls_if\"><mutation elseif=\"3\" else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">ready</field></block></value></block></value><statement name=\"DO0\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">wstar</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.KongFront</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">boot</field></block></value></block></value><statement name=\"DO1\"><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1000</field></shadow></value></block></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">200</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.idle</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotH</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotI</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">0</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.BrickDragon</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotE</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">tutor</field></block></value></block></value><statement name=\"DO2\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotA</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotB</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value></block></statement><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">heard: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">6</field></shadow></value></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"164\" y=\"3601\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><field name=\"function_name\">radioSay</field><value name=\"vt0gv77qprcayj8xalbs\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">text5</field></block></value><value name=\"ok3p1i8gyn97mv69yabw\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">val</field></block></value><statement name=\"STACK\"><block type=\"radio_datagram_send_value\"><value name=\"name\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value></block></value><value name=\"value\"><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">said: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">7</field></shadow></value></block></next></block></statement></block><block type=\"function_definition\" x=\"745\" y=\"3814\"><mutation name=\"fogFlood\" functionid=\"VFMl!%hPr#$dm7#L!/;e\"></mutation><field name=\"function_name\">fogFlood</field><statement name=\"STACK\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</field></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">10000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">para</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.mid</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.off</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.dancing</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.still</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">8000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.min</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"1187\" y=\"3814\"><mutation name=\"runTutorial\" functionid=\"S6D~vG%3KsCIO0/OH*vo\"></mutation><field name=\"function_name\">runTutorial</field><statement name=\"STACK\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">tutor</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">80</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">20</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.tutorial</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto1</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5950</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto2</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto3</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7600</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto4</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6100</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto5</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">13000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto6</field><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"function_definition\" x=\"1543\" y=\"3814\"><mutation name=\"ready_oled\" functionid=\"LSuKu]l*}Y2[|u.h3PJ%\"></mutation><field name=\"function_name\">ready_oled</field><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Say //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"6\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Y|e4lM)*:N0Ca^S5-64i\">lastLaserR</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> C</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Uk9;F|_3qS]2aZyBH#]%\">lastLaserC</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"}GOl3M4q[Bn4R~R!?]at\">lastLaserL</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"8\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">S</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"JQUQT|8QeX)zSvZ?K@,i\">lastSonarRead</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> H</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_js_round\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"=X]tI5AG]3|WfpT`9Jsr\">lastHue</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> G</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Bc7kXprAfc3]W%ILxbVV\">lastGesture</field></block></value><value name=\"ADD6\"><shadow type=\"text\"><field name=\"TEXT\"> N</field></shadow></value><value name=\"ADD7\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"#oq[[iBLthN][|]:S!n}\">lastHunt</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">Mode: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M:</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"NL_MP3_PlaytimeMusic\"></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">4</field></shadow></value></block></next></block></next></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Do //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> T </field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement></block></statement></block></xml>","main.ts":"function radioSay (text5: string, val: number) {\n    radio.sendValue(\"\" + btToken + text5, val)\n    notLegos.printLine(\"said: \" + text5 + \"=\" + val, 7)\n}\nfunction buttonPress (button: string) {\n    notLegos.printLine(\"button: \" + button, 3)\n}\nfunction runTutorial () {\n    radioSay(\"tutor\", 1)\n    notLegos.setVolume(notLegos.mp3type.music, 80)\n    basic.pause(20)\n    notLegos.mp3musicPlay(notLegos.musicGenre.tutorial)\n    fogLevel = 3\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto1)\n    basic.pause(5950)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto2)\n    basic.pause(5000)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto3)\n    basic.pause(7600)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto4)\n    basic.pause(6100)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto5)\n    basic.pause(13000)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto6)\n    notLegos.setVolume(notLegos.mp3type.music, 100)\n    basic.pause(7000)\n    notLegos.mp3musicPlay(notLegos.musicGenre.awaiting)\n}\nfunction ready_oled () {\n    if (isCastleSay) {\n        let lastHunt = 0\n        let lastGesture = 0\n        let lastHue = 0\n        let lastSonarRead = 0\n        let lastLaserL = 0\n        let lastLaserC = 0\n        let lastLaserR = 0\n        notLegos.printLine(\"// Castle Say //\", 0)\n        notLegos.printLine(\"R\" + Math.constrain(lastLaserR, 0, 9) + \" C\" + Math.constrain(lastLaserC, 0, 9) + \" L\" + Math.constrain(lastLaserL, 0, 9), 1)\n        notLegos.printLine(\"S\" + lastSonarRead + \" H\" + Math.round(lastHue / 3) + \" G\" + lastGesture + \" N\" + lastHunt, 2)\n        notLegos.printLine(\"Mode: \" + castleMode, 3)\n        notLegos.printLine(\"M:\" + notLegos.mp3durationMusic(), 4)\n    } else {\n        notLegos.printLine(\"// Castle Do //\", 0)\n        notLegos.printLine(\"M: \" + castleMode + \" T \" + fogToggle, 1)\n    }\n}\nradio.onReceivedValue(function (name, value) {\n    if (name.substr(0, btToken.length) == btToken) {\n        theName = name.substr(btToken.length, name.length - btToken.length)\n        if (isCastleSay) {\n            if (theName == \"wstar\") {\n                castleMode = \"wait_start\"\n            } else if (theName == \"welco\") {\n                if (value == 1) {\n                    notLegos.vfxReset(notLegos.vfxEffect.glow)\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.glow)\n                    notLegos.mp3voicePlay(notLegos.voiceSaying.welcome)\n                } else if (value == 2) {\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                    notLegos.setEffect(notLegos.vfxRegion.WheelAll, notLegos.vfxEffect.fire)\n                    basic.pause(1200)\n                    notLegos.mp3voicePlay(notLegos.voiceSaying.intro)\n                    basic.pause(3000)\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                    basic.pause(4000)\n                    notLegos.mp3musicPlay(notLegos.musicGenre.awaiting)\n                    castleMode = \"wait_reg\"\n                }\n            } else if (theName == \"check\") {\n                notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                radioSay(\"ready\", 1)\n            } else if (false) {\n            \t\n            }\n        } else {\n            if (theName == \"ready\") {\n                radioSay(\"wstar\", 1)\n                notLegos.setEffect(notLegos.vfxRegion.KongFront, notLegos.vfxEffect.indicate)\n            } else if (theName == \"boot\") {\n                fogLevel = 3\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.parade)\n                notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.max)\n                basic.pause(value * 1000)\n                notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.min)\n                basic.pause(1000)\n                radioSay(\"welco\", 1)\n                basic.pause(200)\n                notLegos.vfxReset(notLegos.vfxEffect.glow)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.glow)\n                basic.pause(5000)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.idle)\n                notLegos.setEffect(notLegos.vfxRegion.SpotH, notLegos.vfxEffect.mine)\n                notLegos.setEffect(notLegos.vfxRegion.SpotI, notLegos.vfxEffect.mine)\n                basic.pause(0)\n                radioSay(\"welco\", 2)\n                basic.pause(4500)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.off)\n                basic.pause(500)\n                notLegos.setEffect(notLegos.vfxRegion.BrickDragon, notLegos.vfxEffect.indicate)\n                basic.pause(1200)\n                notLegos.setEffect(notLegos.vfxRegion.SpotC, notLegos.vfxEffect.indicate)\n                notLegos.setEffect(notLegos.vfxRegion.SpotE, notLegos.vfxEffect.indicate)\n                basic.pause(3000)\n                fogLevel = 1\n                notLegos.motorSet(notLegos.motors.door, notLegos.motorState.max)\n            } else if (theName == \"tutor\") {\n                if (value == 1) {\n                    notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.off)\n                    basic.pause(4000)\n                    notLegos.vfxReset(notLegos.vfxEffect.glow)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotA, notLegos.vfxEffect.glow)\n                    basic.pause(6000)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotB, notLegos.vfxEffect.indicate)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotC, notLegos.vfxEffect.indicate)\n                } else if (value == 2) {\n                \t\n                }\n            } else if (theName == \"welco\") {\n            \t\n            } else {\n            \t\n            }\n        }\n        notLegos.printLine(\"heard: \" + theName + \"=\" + value, 6)\n    }\n})\ninput.onLogoEvent(TouchButtonEvent.Touched, function () {\n    if (isCastleSay) {\n        notLegos.mp3sayPlay(notLegos.playerSaying.ready)\n        notLegos.mp3sfxPlay(notLegos.sfxType.fire)\n        notLegos.mp3musicPlay(notLegos.musicGenre.intro)\n    }\n})\nfunction fogFlood () {\n    if (fogToggle) {\n        fogLevel = 3\n        basic.pause(10000)\n        notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.parade)\n        radioSay(\"para\", 1)\n        fogLevel = 0\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.max)\n        notLegos.motorSet(notLegos.motors.door, notLegos.motorState.max)\n        basic.pause(1000)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.mid)\n        basic.pause(6000)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.min)\n        basic.pause(500)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.off)\n        notLegos.motorSet(notLegos.motors.door, notLegos.motorState.min)\n        fogLevel = 1\n        notLegos.setSock(notLegos.sockState.dancing)\n        basic.pause(6000)\n        notLegos.setSock(notLegos.sockState.still)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.max)\n        basic.pause(8000)\n        notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.redrack, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.redrack, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shark, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shark, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.ghost, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.ghost, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.cannon, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.cannon, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.oarrack, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.oarrack, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shell, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shell, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.dragon, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.dragon, notLegos.motorState.min)\n    }\n}\nlet iTook = 0\nlet theName = \"\"\nlet fogToggle = 0\nlet castleMode = \"\"\nlet isCastleSay = 0\nlet fogLevel = 0\nlet btToken = \"\"\nnotLegos.oledinit()\nnotLegos.castleSayLights(DigitalPin.P3, DigitalPin.P0, DigitalPin.P16)\nlet iBegan = input.runningTimeMicros()\nloops.everyInterval(500, function () {\n\t\n})\nloops.everyInterval(500, function () {\n\t\n})\nloops.everyInterval(2000, function () {\n    notLegos.printLine(\"\" + iTook + \"\", 5)\n})\nloops.everyInterval(40, function () {\n    let isReady = 0\n    iBegan = input.runningTime()\n    notLegos.castleSayTick()\n    if (isReady) {\n    \t\n    }\n    ready_oled()\n    notLegos.changeThree()\n    iTook = input.runningTime() - iBegan\n})\n","README.md":"\n> Open this page at [https://notlegos.github.io/castleresay/](https://notlegos.github.io/castleresay/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/castleresay** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/castleresay** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/soundbank/](https://notlegos.github.io/soundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/soundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/soundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/resoundbank/](https://notlegos.github.io/resoundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/resoundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/resoundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosext/](https://notlegos.github.io/notlegosext/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosext** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosext** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosmaster/](https://notlegos.github.io/notlegosmaster/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosmaster** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosmaster** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","displaySendBuffer.asm":"sendBufferAsm:\n\n    push {r4,r5,r6,r7,lr}\n    \n    mov r4, r0 ; save buff\n    mov r6, r1 ; save pin\n    \n    mov r0, r4\n    bl BufferMethods::length\n    mov r5, r0\n    \n    mov r0, r4\n    bl BufferMethods::getBytes\n    mov r4, r0\n    \n    ; setup pin as digital\n    mov r0, r6\n    movs r1, #0\n    bl pins::digitalWritePin\n    \n    ; load pin address\n    mov r0, r6\n    bl pins::getPinAddress\n\n    ldr r0, [r0, #8] ; get mbed DigitalOut from MicroBitPin\n    ldr r1, [r0, #4] ; r1-mask for this pin\n    ldr r2, [r0, #16] ; r2-clraddr\n    ldr r3, [r0, #12] ; r3-setaddr\n    \n    cpsid i ; disable irq\n    \n    b .start\n    \n.nextbit:               ;            C0\n    str r1, [r3, #0]    ; pin := hi  C2\n    tst r6, r0          ;            C3\n    bne .islate         ;            C4\n    str r1, [r2, #0]    ; pin := lo  C6\n.islate:\n    lsrs r6, r6, #1     ; r6 >>= 1   C7\n    bne .justbit        ;            C8\n    \n    ; not just a bit - need new byte\n    adds r4, #1         ; r4++       C9\n    subs r5, #1         ; r5--       C10\n    bcc .stop           ; if (r5<0) goto .stop  C11\n.start:\n    movs r6, #0x80      ; reset mask C12\n    nop                 ;            C13\n\n.common:               ;             C13\n    str r1, [r2, #0]   ; pin := lo   C15\n    ; always re-load byte - it just fits with the cycles better this way\n    ldrb r0, [r4, #0]  ; r0 := *r4   C17\n    b .nextbit         ;             C20\n\n.justbit: ; C10\n    ; no nops, branch taken is already 3 cycles\n    b .common ; C13\n\n.stop:    \n    str r1, [r2, #0]   ; pin := lo\n    cpsie i            ; enable irq\n\n    pop {r4,r5,r6,r7,pc}\n","planetxbasic.ts":"/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#00B1ED  icon=\"\\uf005\" block=\"Connected\" blockId=\"PlanetX_Connected\"\n//% groups='[\"Digital\", \"Analog\", \"IIC Port\"]'\nnamespace Connected {\n    \n    ////////////////////////paj7620//////////////////////\n    let gesture_first_init = true\n    const initRegisterArray: number[] = [\n        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17,\n        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F,\n        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14,\n        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27,\n        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01,\n        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00,\n        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20,\n        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37,\n        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A,\n        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F,\n        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30,\n        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19,\n        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04,\n        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00,\n        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00,\n        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F,\n        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07,\n        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01,\n        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F,\n        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01,\n        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40,\n        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E,\n        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00,\n        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08,\n        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00,\n        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01,\n        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01,\n        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01\n    ];\n    \n    /////////////////////////color/////////////////////////\n    const APDS9960_ADDR = 0x39\n    const APDS9960_ENABLE = 0x80\n    const APDS9960_ATIME = 0x81\n    const APDS9960_CONTROL = 0x8F\n    const APDS9960_STATUS = 0x93\n    const APDS9960_CDATAL = 0x94\n    const APDS9960_CDATAH = 0x95\n    const APDS9960_RDATAL = 0x96\n    const APDS9960_RDATAH = 0x97\n    const APDS9960_GDATAL = 0x98\n    const APDS9960_GDATAH = 0x99\n    const APDS9960_BDATAL = 0x9A\n    const APDS9960_BDATAH = 0x9B\n    const APDS9960_GCONF4 = 0xAB\n    const APDS9960_AICLEAR = 0xE7\n    let color_first_init = false\n\n    function i2cwrite_color(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n    function i2cread_color(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n    function rgb2hsl(color_r: number, color_g: number, color_b: number): number {\n        let Hue = 0\n        let R = color_r * 100 / 255;\n        let G = color_g * 100 / 255;\n        let B = color_b * 100 / 255;\n        let maxVal = Math.max(R, Math.max(G, B))\n        let minVal = Math.min(R, Math.min(G, B))\n        let Delta = maxVal - minVal;\n\n        if (Delta < 0) {\n            Hue = 0;\n        }\n        else if (maxVal == R && G >= B) {\n            Hue = (60 * ((G - B) * 100 / Delta)) / 100;\n        }\n        else if (maxVal == R && G < B) {\n            Hue = (60 * ((G - B) * 100 / Delta) + 360 * 100) / 100;\n        }\n        else if (maxVal == G) {\n            Hue = (60 * ((B - R) * 100 / Delta) + 120 * 100) / 100;\n        }\n        else if (maxVal == B) {\n            Hue = (60 * ((R - G) * 100 / Delta) + 240 * 100) / 100;\n        }\n        return Hue\n    }\n    function initModule(): void {\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ATIME, 252)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_CONTROL, 0x03)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_GCONF4, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_AICLEAR, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x01)\n        color_first_init = true\n    }\n    function colorMode(): void {\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_ENABLE) | 0x2;\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, tmp);\n    }\n\n    ///////////////////////////////////////////////////////MP3\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    /*\n    * Play status selection button list\n    */\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(100)\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,        \n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum Distance_Unit_List {\n        //% block=\"cm\" \n        Distance_Unit_cm,\n\n        //% block=\"foot\"\n        Distance_Unit_foot,\n    }\n    export enum ButtonStateList {\n        //% block=\"C\"\n        C,\n        //% block=\"D\"\n        D,\n        //% block=\"C+D\"\n        CD\n    }\n    export enum GestureType {\n        //% block=\"None\"\n        None = 0,\n        //% block=\"Right\"\n        Right = 1,\n        //% block=\"Left\"\n        Left = 2,\n        //% block=\"Up\"\n        Up = 3,\n        //% block=\"Down\"\n        Down = 4,\n        //% block=\"Forward\"\n        Forward = 5,\n        //% block=\"Backward\"\n        Backward = 6,\n        //% block=\"Clockwise\"\n        Clockwise = 7,\n        //% block=\"Anticlockwise\"\n        Anticlockwise = 8,\n        //% block=\"Wave\"\n        Wave = 9\n    }\n    export enum ColorList {\n        //% block=\"Red\"\n        red,\n        //% block=\"Green\"\n        green,\n        //% block=\"Blue\"\n        blue,\n        //% block=\"Cyan\"\n        cyan,\n        //% block=\"Magenta\"\n        magenta,\n        //% block=\"Yellow\"\n        yellow,\n        //% block=\"White\"\n        white\n    }\n\n    ///////////////////////////////////blocks/////////////////////////////\n\n    //% blockId=\"readwaterLevel\" block=\"Water level sensor %Rjpin value(0~100)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function waterLevel(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        let voltage = 0, waterlevel = 0;\n        voltage = pins.map(\n            pins.analogReadPin(pin),\n            50,\n            600,\n            0,\n            100\n        );\n        if (voltage < 0) {\n            voltage = 0\n        }\n        waterlevel = voltage;\n        return Math.round(waterlevel)\n    }\n\n    let distance_last = 0\n\n    //% blockId=sonarbit block=\"Ultrasonic sensor pinT %tPin pinE %ePin distance %distance_unit\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% distance_unit.fieldEditor=\"gridpicker\"\n    //% distance_unit.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    export function ultrasoundSensor(tPin: DigitalPin, ePin: DigitalPin, distance_unit: Distance_Unit_List): number {\n        let pinT = tPin\n        let pinE = ePin\n        pins.setPull(pinT, PinPullMode.PullNone)\n        pins.digitalWritePin(pinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(pinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(pinT, 0)\n\n        // read pulse\n        let d = pins.pulseIn(pinE, PulseValue.High, 25000)\n        let version = control.hardwareVersion()\n        let distance = d * 34 / 2 / 1000\n        if (version == \"1\") {\n            distance = distance * 3 / 2\n        }\n\n        if (distance > 430) {\n            distance = 0\n        }\n\n        if (distance == 0) {\n            distance = distance_last\n            distance_last = 0\n        }\n        else {\n            distance_last = distance\n        }\n\n        switch (distance_unit) {\n            case Distance_Unit_List.Distance_Unit_cm:\n                return Math.floor(distance)  //cm\n                break\n            case Distance_Unit_List.Distance_Unit_foot:\n                return Math.floor(distance / 30.48)   //foot\n                break\n            default:\n                return 0\n        }\n    }\n\n    export class PAJ7620 {\n        private paj7620WriteReg(addr: number, cmd: number) {\n            let buf: Buffer = pins.createBuffer(2);\n            buf[0] = addr;\n            buf[1] = cmd;\n            pins.i2cWriteBuffer(0x73, buf, false);\n        }\n        private paj7620ReadReg(addr: number): number {\n            let buf: Buffer = pins.createBuffer(1);\n            buf[0] = addr;\n            pins.i2cWriteBuffer(0x73, buf, false);\n            buf = pins.i2cReadBuffer(0x73, 1, false);\n            return buf[0];\n        }\n        private paj7620SelectBank(bank: number) {\n            if (bank == 0) this.paj7620WriteReg(0xEF, 0);\n            else if (bank == 1) this.paj7620WriteReg(0xEF, 1);\n        }\n        private paj7620Init() {\n            let temp = 0;\n            this.paj7620SelectBank(0);\n            temp = this.paj7620ReadReg(0);\n            if (temp == 0x20) {\n                for (let i = 0; i < 438; i += 2) {\n                    this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);\n                }\n            }\n            this.paj7620SelectBank(0);\n        }\n        init() {\n            this.paj7620Init();\n            basic.pause(200);\n        }\n        read(): number {\n            let data = 0, result = 0;\n            data = this.paj7620ReadReg(0x43);\n            switch (data) {\n                case 0x01:\n                    result = GestureType.Right;\n                    break;\n                case 0x02:\n                    result = GestureType.Left;\n                    break;\n                case 0x04:\n                    result = GestureType.Up;\n                    break;\n                case 0x08:\n                    result = GestureType.Down;\n                    break;\n                case 0x10:\n                    result = GestureType.Forward;\n                    break;\n                case 0x20:\n                    result = GestureType.Backward;\n                    break;\n                case 0x40:\n                    result = GestureType.Clockwise;\n                    break;\n                case 0x80:\n                    result = GestureType.Anticlockwise;\n                    break;\n                default:\n                    data = this.paj7620ReadReg(0x44);\n                    if (data == 0x01)\n                        result = GestureType.Wave;\n                    break;\n            }\n            return result;\n        }\n    }\n    const gestureEventId = 3100;\n    let lastGesture = GestureType.None;\n    let paj7620 = new PAJ7620();\n    //% blockId= gesture_create_event block=\"Gesture sensor IIC port is %gesture\"\n    //% gesture.fieldEditor=\"gridpicker\" gesture.fieldOptions.columns=3\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function onGesture(gesture: GestureType, handler: () => void) {\n        control.onEvent(gestureEventId, gesture, handler);\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        control.inBackground(() => {\n            while (true) {\n                const gesture = paj7620.read();\n                if (gesture != lastGesture) {\n                    lastGesture = gesture;\n                    control.raiseEvent(gestureEventId, lastGesture);\n                }\n                basic.pause(200);\n            }\n        })\n    }\n\n    //% blockId= gesture_get_event block=\"Gesture sensor IIC port detects\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function getGesture(): number {\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        const gesture = paj7620.read();\n        return gesture\n    }\n\n\n\n\n    //% blockId=apds9960_readcolor block=\"Color sensor IIC port color HUE(0~360)\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function readColor(): number {\n        if (color_first_init == false) {\n            initModule()\n            colorMode()\n        }\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        while (!tmp) {\n            basic.pause(5);\n            tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        }\n        let c = i2cread_color(APDS9960_ADDR, APDS9960_CDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_CDATAH) * 256;\n        let r = i2cread_color(APDS9960_ADDR, APDS9960_RDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_RDATAH) * 256;\n        let g = i2cread_color(APDS9960_ADDR, APDS9960_GDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_GDATAH) * 256;\n        let b = i2cread_color(APDS9960_ADDR, APDS9960_BDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_BDATAH) * 256;\n        // map to rgb based on clear channel\n        let avg = c / 3;\n        r = r * 255 / avg;\n        g = g * 255 / avg;\n        b = b * 255 / avg;\n        //let hue = rgb2hue(r, g, b);\n        let hue = rgb2hsl(r, g, b)\n        return hue\n    }\n    //% block=\"Color sensor IIC port detects %color\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% color.fieldEditor=\"gridpicker\" color.fieldOptions.columns=3\n    export function checkColor(color: ColorList): boolean {\n        let hue = readColor()\n        switch (color) {\n            case ColorList.red:\n                if (hue > 330 || hue < 20) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.green:\n                if (hue > 120 && 180 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.blue:\n                if (hue > 210 && 270 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.cyan:\n                if (hue > 190 && 210 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.magenta:\n                if (hue > 260 && 330 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.yellow:\n                if (hue > 30 && 120 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.white:\n                if (hue >= 180 && 190 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n        }\n    }\n\n    //% blockId=\"potentiometer\" block=\"Trimpot %Rjpin analog value\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Input color=#E2C438 group=\"Analog\"\n    export function trimpot(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        return pins.analogReadPin(pin)\n    }\n    //% blockId=buttonab block=\"Button %Rjpin %button is pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonCD(Rjpin: DigitalRJPin, button: ButtonStateList): boolean {\n        let pinC = DigitalPin.P1\n        let pinD = DigitalPin.P2\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pinC = DigitalPin.P1\n                pinD = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pinC = DigitalPin.P2\n                pinD = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pinC = DigitalPin.P13\n                pinD = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pinC = DigitalPin.P15\n                pinD = DigitalPin.P16\n                break;\n            case DigitalRJPin.P3:\n                pinC = DigitalPin.P3\n                pinD = DigitalPin.P4\n                break;\n        }\n        pins.setPull(pinC, PinPullMode.PullUp)\n        pins.setPull(pinD, PinPullMode.PullUp)\n        if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 0 && button == ButtonStateList.CD) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinC) == 0 && pins.digitalReadPin(pinD) == 1 && button == ButtonStateList.C) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 1 && button == ButtonStateList.D) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    export enum ButtonState {\n        //% block=\"on\"\n        on = 1,\n        //% block=\"off\"\n        off = 2\n    }\n\n    const buttonEventSource = 5000\n    const buttonEventValue = {\n        CD_pressed: ButtonState.on,\n        CD_unpressed: ButtonState.off\n    }\n\n    //% block=\"on button %Rjpin %button pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=4\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonEvent(Rjpin: DigitalRJPin, button: ButtonStateList, handler: () => void) {\n        let ButtonPin_C = DigitalPin.P1\n        let ButtonPin_D = DigitalPin.P2\n        let pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P0\n        let pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                ButtonPin_C = DigitalPin.P1\n                ButtonPin_D = DigitalPin.P8\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P1\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P8\n                break;\n            case DigitalRJPin.J2:\n                ButtonPin_C = DigitalPin.P2\n                ButtonPin_D = DigitalPin.P12\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P2\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P12\n                break;\n            case DigitalRJPin.J3:\n                ButtonPin_C = DigitalPin.P13\n                ButtonPin_D = DigitalPin.P14\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P13\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P14\n                break;\n            case DigitalRJPin.J4:\n                ButtonPin_C = DigitalPin.P15\n                ButtonPin_D = DigitalPin.P16\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P15\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P16\n                break;\n            case DigitalRJPin.P3:\n                ButtonPin_C = DigitalPin.P3\n                ButtonPin_D = DigitalPin.P4\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P3\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P4\n                break;\n        }\n        if (button == ButtonStateList.C) {\n            pins.setPull(ButtonPin_C, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_C, PinEventType.Edge)\n            control.onEvent(pinEventSource_C, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.D) {\n            pins.setPull(ButtonPin_D, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_D, PinEventType.Edge)\n            control.onEvent(pinEventSource_D, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.CD) {\n            loops.everyInterval(50, function () {\n                if (pins.digitalReadPin(ButtonPin_C) == 0 && pins.digitalReadPin(ButtonPin_D) == 0) {\n                    control.raiseEvent(buttonEventSource, buttonEventValue.CD_pressed)\n                }\n            })\n            control.onEvent(buttonEventSource, buttonEventValue.CD_pressed, handler)\n        }\n    }\n\n    //% blockId=fans block=\"Motor fan %Rjpin toggle to $fanstate || speed %speed \\\\%\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% fanstate.shadow=\"toggleOnOff\"\n    //% subcategory=Excute group=\"Digital\" color=#EA5532\n    //% speed.min=0 speed.max=100\n    //% expandableArgumentMode=\"toggle\"\n    export function motorFan(Rjpin: DigitalRJPin, fanstate: boolean, speed: number = 100): void {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case DigitalRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n            case DigitalRJPin.J3:\n                pin = AnalogPin.P13\n                break;\n            case DigitalRJPin.J4:\n                pin = AnalogPin.P15\n                break;\n        }\n        if (fanstate) {\n            pins.analogSetPeriod(pin, 100)\n            pins.analogWritePin(pin, Math.map(speed, 0, 100, 0, 1023))\n        }\n        else {\n            pins.analogWritePin(pin, 0)\n            speed = 0\n        }\n    }\n\n\n    //% blockId=\"setLoopFolder\" block=\"loop play all the MP3s in the folder:$folderNum\"\n    //% folderNum.defl=\"01\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setLoopFolder(folderNum: string): void {\n        CMD = 0x17\n        para1 = 0\n        para2 = parseInt(folderNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    //% blockId=\"folderPlay\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum || repeatList: $myAns\"\n    //% folderNum.defl=\"01\" fileNum.defl=\"001\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function folderPlay(folderNum: string, fileNum: string, myAns: boolean = false): void {\n        CMD = 0x0F\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        if (myAns)\n            execute(0x19)\n    }\n\n    //% blockId=\"playFolderFilePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFilePort(folderNum: string, fileNum: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFolderFileVolumePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum with volume:$theVolume usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" theVolume.defl=\"10\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFileVolumePort(folderNum: string, fileNum: string, theVolume: string, Rjpin: DigitalRJPin): void {\n        \n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        \n        let volume = parseInt(theVolume)\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(200)\n\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"volumePort\" \n    //% block=\"set MP3 volume:$theVolume usingPin:$Rjpin\"\n    //% theVolume.defl=\"10\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function volumePort(theVolume: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        let volume = parseInt(theVolume)\n        if (volume > 30) {\n            volume = 30\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(300)\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n\n\n    //% blockId=\"setTracking\" \n    //% block=\"play the mp3 in order of:%tracking || repeatList: $myAns\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% tracking.defl=1\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setTracking(tracking: number, myAns: boolean = false): void {\n        CMD = 0x03\n        para1 = 0x00\n        para2 = tracking\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        execute(0x0D)\n        if (myAns)\n            execute(0x19)\n    }\n    //% blockId=MP3execute block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=\"setVolume\" block=\"Set volume(0~25):%volume\"\n    //% volume.min=0 volume.max=25\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setVolume(volume: number): void {\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 0x06\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=MP3setPort block=\"Set the MP3 port to %Rjpin\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function MP3SetPort(Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        setVolume(25)\n    }\n}","notlegos.ts":"// NotLegos Blocks\n//% block=\"Not LEGOs\" color=#0031AF weight=1000 icon=\"\\uf3a5\"\n//% groups='[\"MP3\",\"Sensors\"]'\nnamespace notLegos {\n\n\n/// BEGIN NEOPIXEL ///\n    export enum hues { red = 0, orange = 15, yellow = 40, lime = 85, green = 110, cyan = 170, blue = 240, purple = 260, pink = 310 }\n    export enum vfxEffect { parade = 0, fire = 1, indicate = 2, idle = 3, glow = 4, mine = 5, off = 6 }\n    let NeoSock: Strip = null; let NeoScore: Strip = null; let NeoWheel: Strip = null; let NeoKong: Strip = null; let NeoStrip: Strip = null; let NeoBrick: Strip = null\n    let vfx_mine_tog: number[] = []; let vfx_mine_hue: number[] = []; let vfx_mine_sat: number[] = []; let vfx_mine_lum: number[] = []\n    let vfx_fire_tog: number[] = []; let vfx_fire_hue: number[] = []; let vfx_fire_sat: number[] = []; let vfx_fire_lum: number[] = []; let vfx_fire_colors: number[] = []\n    let vfx_indicate_tog: number[] = []; let vfx_indicate_hue: number[] = []; let vfx_indicate_sat: number[] = []; let vfx_indicate_lum: number[] = [];\n    let vfx_idle_tog: number[] = []; let vfx_idle_hue: number[] = []; let vfx_idle_sat: number[] = []; let vfx_idle_lum: number[] = []\n    let vfx_glow_tog: number[] = []; let vfx_glow_hue: number[] = []; let vfx_glow_sat: number[] = []; let vfx_glow_lum: number[] = []\n    let vfx_active_tog: number[] = []; let vfx_active_hue: number[] = []; let vfx_active_sat: number[] = []; let vfx_active_lum: number[] = []\n    let vfx_off_hue: number[] = []; let vfx_off_sat: number[] = []; let vfx_off_lum: number[] = []\n    let vfx_parade_tog: number[] = []; let vfx_parade_hue: number[] = []; let vfx_parade_sat: number[] = []; let vfx_parade_lum: number[] = []; let vfx_parade_colors: number[] = [];\n    let vfx_last_tog: number[] = []; let vfx_last_hue: number[] = []; let vfx_last_sat: number[] = []; let vfx_last_lum: number[] = []\n    let vfx_master_tog: number[] = []; let vfx_master_hue: number[] = []; let vfx_master_sat: number[] = []; let vfx_master_lum: number[] = []; let vfx_master_effect: number[] = [];\n    let vfx_master_r: number[] = []; let vfx_master_g: number[] = []; let vfx_master_b: number[] = [];\n    let vfx_light_count = 0\n    let bufferKong: Buffer = null; let paletteKong = [0,0,0,0]\n\n\n    //% shim=sendBufferAsm\n    function sendBuffer(buf: Buffer, pin: DigitalPin) { }\n\n    export class Strip {\n        buf: Buffer;\n        pin: DigitalPin;\n        start: number; // start offset in LED strip\n        _length: number; // number of LEDs\n\n        setPixelHSLPrecise(pixeloffset: number, h: number, s: number, l: number): void {\n            if (pixeloffset < 0 || pixeloffset >= this._length)\n                return;\n            pixeloffset = (pixeloffset + this.start) * 3\n            h = Math.clamp(0,1,h/360)\n            s = Math.clamp(0,1,s/100)\n            l = Math.clamp(0,1,l/100)\n            let r, g, b;\n            if (s === 0) {\n                r = g = b = l; // achromatic\n            } else {\n                const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n                const p = 2 * l - q;\n                let t = h + 1/3\n                if (t < 0) { t += 1; }\n                else if (t > 1) {t -= 1; }\n                if (t < 1/6) {r = p + (q - p) * 6 * t;}\n                else if (t < 1/2) {r = q;}\n                else if (t < 2/3) { r = p + (q - p) * (2/3 - t) * 6; }\n                else { r = p; }\n                t = h\n                if (t < 0) { t += 1; }\n                else if (t > 1) { t -= 1; }\n                if (t < 1 / 6) { g = p + (q - p) * 6 * t; }\n                else if (t < 1 / 2) { g = q; }\n                else if (t < 2 / 3) { g = p + (q - p) * (2/3 - t) * 6; }\n                else { g = p; }\n                t = h - 1/3\n                if (t < 0) { t += 1; }\n                else if (t > 1) { t -= 1; }\n                if (t < 1 / 6) { b = p + (q - p) * 6 * t; }\n                else if (t < 1/2) { b = q; }\n                else if (t < 2/3) { b = p + (q - p) * (2/3 - t) * 6; }\n                else { b = p; }\n            }\n            vfx_master_g[pixeloffset/3] = Math.round(g * 255);\n            vfx_master_r[pixeloffset/3] = Math.round(r * 255);\n            vfx_master_b[pixeloffset/3] = Math.round(b * 255);\n            this.buf[pixeloffset + 0] = Math.round(g * 255);\n            this.buf[pixeloffset + 1] = Math.round(r * 255);\n            this.buf[pixeloffset + 2] = Math.round(b * 255);\n        }\n\n\n        // setPixelHSLPrecise(pixeloffset: number, h: number, s: number, l: number): void {\n        //     if (pixeloffset < 0 || pixeloffset >= this._length)\n        //         return;\n        //     pixeloffset = (pixeloffset + this.start) * 3\n        //     h = Math.clamp(0, 1, h / 360)\n        //     s = Math.clamp(0, 1, s / 100)\n        //     l = Math.clamp(0, 1, l / 100)\n        //     let r, g, b;\n        //     if (s === 0) {\n        //         r = g = b = l; // achromatic\n        //     } else {\n        //         const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        //         const p = 2 * l - q;\n        //         let t = h + 1 / 3\n        //         if (t < 0) { t += 1; }\n        //         else if (t > 1) { t -= 1; }\n        //         if (t < 1 / 6) { r = p + (q - p) * 6 * t; }\n        //         else if (t < 1 / 2) { r = q; }\n        //         else if (t < 2 / 3) { r = p + (q - p) * (2 / 3 - t) * 6; }\n        //         else { r = p; }\n        //         t = h\n        //         if (t < 0) { t += 1; }\n        //         else if (t > 1) { t -= 1; }\n        //         if (t < 1 / 6) { g = p + (q - p) * 6 * t; }\n        //         else if (t < 1 / 2) { g = q; }\n        //         else if (t < 2 / 3) { g = p + (q - p) * (2 / 3 - t) * 6; }\n        //         else { g = p; }\n        //         t = h - 1 / 3\n        //         if (t < 0) { t += 1; }\n        //         else if (t > 1) { t -= 1; }\n        //         if (t < 1 / 6) { b = p + (q - p) * 6 * t; }\n        //         else if (t < 1 / 2) { b = q; }\n        //         else if (t < 2 / 3) { b = p + (q - p) * (2 / 3 - t) * 6; }\n        //         else { b = p; }\n        //     }\n        //     this.buf[pixeloffset + 0] = Math.round(g * 255);\n        //     this.buf[pixeloffset + 1] = Math.round(r * 255);\n        //     this.buf[pixeloffset + 2] = Math.round(b * 255);\n        // }\n\n        // show() { sendBuffer(this.buf, this.pin); }  //Send all the changes to the strip.\n\n        show() { \n            // let newBuffer: Buffer;\n            // newBuffer[0] = vfx_master_g[0]\n            // newBuffer[1] = vfx_master_r[0]\n            // newBuffer[2] = vfx_master_b[0]\n            // this.buf[0] = vfx_master_g[3]\n            // this.buf[1] = vfx_master_r[3]\n            // this.buf[2] = vfx_master_b[3]\n            let paletteKong = [1,1,1,1]\n            for (let i=0; i<4; i++) {\n                this.buf[i * 3 + 0] = vfx_master_g[paletteKong[i]]\n                this.buf[i * 3 + 1] = vfx_master_r[paletteKong[i]]\n                this.buf[i * 3 + 2] = vfx_master_b[paletteKong[i]]\n            }\n            sendBuffer(this.buf.slice(0, 4*3), DigitalPin.P16);\n\n            let paletteWheel = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n            for (let i = 0; i < 20; i++) {\n                this.buf[i * 3 + 0] = vfx_master_g[paletteWheel[i]]\n                this.buf[i * 3 + 1] = vfx_master_r[paletteWheel[i]]\n                this.buf[i * 3 + 2] = vfx_master_b[paletteWheel[i]]\n            }\n            sendBuffer(this.buf.slice(0, 20*3), DigitalPin.P15);\n\n            let paletteSock = [0, 0, 0, 0, 0, 0, 0, 0]\n            for (let i = 0; i < 8; i++) {\n                this.buf[i * 3 + 0] = vfx_master_g[paletteSock[i]]\n                this.buf[i * 3 + 1] = vfx_master_r[paletteSock[i]]\n                this.buf[i * 3 + 2] = vfx_master_b[paletteSock[i]]\n            }\n            sendBuffer(this.buf.slice(0, 8 * 3), DigitalPin.P14);\n\n            let paletteScore = [0, 0, 0, 0, 0, 0, 0, 0]\n            for (let i = 0; i < 8; i++) {\n                this.buf[i * 3 + 0] = vfx_master_g[paletteScore[i]]\n                this.buf[i * 3 + 1] = vfx_master_r[paletteScore[i]]\n                this.buf[i * 3 + 2] = vfx_master_b[paletteScore[i]]\n            }\n            sendBuffer(this.buf.slice(0, 8 * 3), DigitalPin.P13);\n\n            let paletteBricks = [0, 0, 0, 0, 0, 0, 0, 0]\n            for (let i = 0; i < 8; i++) {\n                this.buf[i * 3 + 0] = vfx_master_g[paletteBricks[i]]\n                this.buf[i * 3 + 1] = vfx_master_r[paletteBricks[i]]\n                this.buf[i * 3 + 2] = vfx_master_b[paletteBricks[i]]\n            }\n            sendBuffer(this.buf.slice(0, 8 * 3), DigitalPin.P12);\n\n            let paletteStrip = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n            for (let i = 0; i < 20; i++) {\n                this.buf[i * 3 + 0] = vfx_master_g[paletteStrip[i]]\n                this.buf[i * 3 + 1] = vfx_master_r[paletteStrip[i]]\n                this.buf[i * 3 + 2] = vfx_master_b[paletteStrip[i]]\n            }\n            sendBuffer(this.buf.slice(0, 20 * 3), DigitalPin.P8);\n\n\n            let paletteSwing = [0, 0, 0, 0, 0, 0, 0, 0]\n            for (let i = 0; i < 8; i++) {\n                this.buf[i * 3 + 0] = vfx_master_g[paletteSwing[i]]\n                this.buf[i * 3 + 1] = vfx_master_r[paletteSwing[i]]\n                this.buf[i * 3 + 2] = vfx_master_b[paletteSwing[i]]\n            }\n            sendBuffer(this.buf.slice(0, 8 * 3), DigitalPin.P2);\n\n\n            // sendBuffer(newBuffer, DigitalPin.P16);\n            // sendBuffer(this.buf, DigitalPin.P15);\n            // sendBuffer(this.buf, DigitalPin.P14);\n            // sendBuffer(this.buf, DigitalPin.P13);\n            // sendBuffer(this.buf, DigitalPin.P12);\n            // sendBuffer(this.buf, DigitalPin.P8);\n            // sendBuffer(this.buf, DigitalPin.P2);\n        }  //Send all the changes to the strip.\n\n        length() { return this._length; }   //Gets the number of pixels declared on the strip\n\n        shift(offset: number = 1): void { this.buf.shift(-offset * 3, this.start * 3, this._length * 3) }   //Shift LEDs forward and clear with zeros.\n\n        rotate(offset: number = 1): void { this.buf.rotate(-offset * 3, this.start * 3, this._length * 3) } //Rotate LEDs forward\n\n        setPin(pin: DigitalPin): void {\n            this.pin = pin;\n            pins.digitalWritePin(this.pin, 0);  // don't yield to avoid races on initialization\n        }\n    }\n\n    function create(thePin: DigitalPin, numleds: number): Strip {\n        let strip = new Strip();\n        strip.buf = pins.createBuffer(numleds * 3);\n        strip.start = 0;\n        strip._length = numleds;\n        strip.setPin(thePin)\n        return strip;\n    }\n\n    //% blockId=NL_PIXEL_CastleSay\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Sock Circle:%sockPin  Wheel Strip/Circle:%wheelPin  Score Circle:%scorePin \"\n    //% weight=100\n    export function castleSayLights(sockPin: DigitalPin, wheelPin: DigitalPin, scorePin: DigitalPin): void {\n        NeoWheel = create(wheelPin, 20)\n        vfx_light_count = 20\n        vfxInit()\n        // vfx_indicate_hue[31] = hues.yellow\n        vfx_indicate_tog[1] = 1\n    }\n\n\n    function vfxInit(): void{\n        vfx_parade_colors = [hues.red, hues.orange, hues.yellow, hues.cyan, hues.blue, hues.purple]\n        vfx_fire_colors = [hues.red, hues.red, hues.red, hues.red, hues.orange, hues.orange, hues.orange, hues.orange, hues.orange, hues.yellow]\n        for (let index = 0; index < 6; index++) {\n            vfx_parade_tog.push(randint(0, 1))\n            vfx_parade_hue.push(vfx_parade_colors[randint(0, vfx_parade_colors.length - 1)])\n            vfx_parade_sat.push(100)\n            vfx_parade_lum.push(randint(10, 65))\n        }\n        for (let index = 0; index < 1; index++) {\n            vfx_mine_tog.push(0)\n            vfx_mine_hue.push(hues.red)\n            vfx_mine_sat.push(100)\n            vfx_mine_lum.push(50)\n            vfx_glow_tog.push(0)\n            vfx_glow_hue.push(50)\n            vfx_glow_sat.push(0)\n            vfx_glow_lum.push(0)\n            vfx_active_tog.push(0)\n            vfx_active_hue.push(50)\n            vfx_active_sat.push(0)\n            vfx_glow_lum.push(0)\n            vfx_off_hue.push(0)\n            vfx_off_sat.push(0)\n            vfx_off_lum.push(0)\n        }\n        for (let index = 0; index < 3; index++) {\n            vfx_fire_tog.push(randint(0, 1))\n            vfx_fire_hue.push(vfx_fire_colors[randint(0, vfx_fire_colors.length - 1)])\n            vfx_fire_sat.push(100)\n            vfx_fire_lum.push(randint(30, 80))\n        }\n        for (let index = 0; index < 2; index++) {\n            vfx_indicate_tog.push(0)\n            vfx_indicate_lum.push(50)\n            vfx_indicate_hue.push(50)\n            vfx_indicate_sat.push(100)\n            vfx_idle_tog.push(1)\n            if (index % 2 == 0) { vfx_idle_tog[index] = 0; }\n            vfx_idle_hue.push(265)\n            if (index % 2 == 0) { vfx_idle_hue[index] = 2; }\n            vfx_idle_sat.push(100)\n            vfx_idle_lum.push(50)\n        }\n        for (let index = 0; index < vfx_light_count; index++) {\n            vfx_master_tog.push(0)\n            vfx_master_hue.push(0)\n            vfx_master_sat.push(100)\n            vfx_master_lum.push(50)\n            vfx_master_effect.push(vfxEffect.off)    //leave this be!\n        }\n    }\n\n    //% blockId=NL_PIXEL_ResetVFX\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Reset VFX %effect\"\n    //% weight=100\n    export function vfxReset(effect:vfxEffect):void{\n        if (effect == vfxEffect.idle){\n            for (let index = 0; index < 2; index++) {\n                vfx_idle_tog[index]=1\n                if (index % 2 == 0) { vfx_idle_tog[index] = 0; }\n                vfx_idle_hue[index]=265\n                if (index % 2 == 0) { vfx_idle_hue[index] = 2; }\n                vfx_idle_sat[index]=100\n                vfx_idle_lum[index]=50\n            }\n        } else if (effect == vfxEffect.glow) {\n            for (let index = 0; index < 1; index++) {\n                vfx_glow_tog[index] = 0\n                vfx_glow_hue[index] = 50\n                // vfx_glow_sat[index] = 100\n                vfx_glow_lum[index] = 0\n            }\n        } else if (effect == vfxEffect.mine) {\n            for (let index = 0; index < 1; index++) {\n                vfx_mine_tog[index] = 0\n                vfx_mine_hue[index] = hues.red\n                vfx_mine_sat[index] = 100\n                vfx_mine_lum[index] = 50\n            }\n        } else if (effect == vfxEffect.indicate) {\n            for (let index = 0; index < 2; index++) {\n                vfx_indicate_tog[index] = 0\n                vfx_indicate_sat[index] = 100\n                vfx_indicate_lum[index] = 50\n            }\n        }\n    }\n\n    //% blockId=NL_PIXEL_CastleSayTick\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Advance Castle Say lights\"\n    //% weight=100\n    export function castleSayTick(): void {\n        paradeTick()\n        fireTick()\n        glowTick()\n        activeTick()\n        castleSayWrite()\n        indicateTick()\n        idleTick()\n        mineTick()\n    }\n\n    function paradeTick(): void{\n        for (let index=0; index < 6; index++){\n            let thisLum = vfx_parade_lum[index]\n            let thisHue = vfx_parade_hue[index]\n            let thisTog = vfx_parade_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0){\n                if (thisLum < 65){\n                    vfx_parade_lum[index] = thisLum + 12\n                } else if (thisLum >= 65){\n                    vfx_parade_tog[index] = 1\n                }\n            } else if (thisTog == 1){\n                if (thisLum>10){\n                    vfx_parade_lum[index] = thisLum - 4\n                } else if (thisLum <= 10){\n                    vfx_parade_tog[index] = 0\n                    while (nextHue == thisHue){\n                        nextHue = vfx_parade_colors[randint(0, vfx_parade_colors.length - 1)]\n                    }\n                    vfx_parade_hue[index] = nextHue\n                    vfx_parade_lum[index] = thisLum - randint(0,10)\n                }\n            }\n        }\n    }\n\n    function mineTick(): void {\n        for (let index = 0; index < 1; index++) {\n            let thisLum = vfx_mine_lum[index]\n            let thisHue = vfx_mine_hue[index]\n            let thisTog = vfx_mine_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 200) {\n                    vfx_mine_lum[index] = thisLum + 30\n                } else if (thisLum >= 200) {\n                    vfx_mine_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 0) {\n                    vfx_mine_lum[index] = thisLum - 30\n                } else if (thisLum <= 0) {\n                    vfx_mine_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function idleTick(): void {\n        for (let index = 0; index < 2; index++) {\n            let thisLum = vfx_idle_lum[index]\n            let thisHue = vfx_idle_hue[index]\n            let thisTog = vfx_idle_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisHue < 265) {\n                    vfx_idle_hue[index] = thisHue + 1\n                } else if (thisHue >= 265) {\n                    vfx_idle_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisHue > 2) {\n                    vfx_idle_hue[index] = thisHue - 1\n                } else if (thisHue <= 2) {\n                    vfx_idle_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function indicateTick(): void {\n        for (let index = 0; index < 2; index++) {\n            let thisLum = vfx_indicate_lum[index]\n            let thisHue = vfx_indicate_hue[index]\n            let thisTog = vfx_indicate_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 80) {\n                    vfx_indicate_lum[index] = thisLum + 12\n                } else if (thisLum >= 80) {\n                    vfx_indicate_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 25) {\n                    vfx_indicate_lum[index] = thisLum - 4\n                } else if (thisLum <= 25) {\n                    vfx_indicate_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function fireTick(): void {\n        for (let index = 0; index < 3; index++) {\n            let thisLum = vfx_fire_lum[index]\n            let thisHue = vfx_fire_hue[index]\n            let thisTog = vfx_fire_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 80) {\n                    vfx_fire_lum[index] = thisLum + 15\n                } else if (thisLum >= 80) {\n                    vfx_fire_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 30) {\n                    vfx_fire_lum[index] = thisLum - 5\n                } else if (thisLum <= 30) {\n                    vfx_fire_tog[index] = 0\n                    while (nextHue == thisHue) {\n                        nextHue = vfx_fire_colors[randint(0, vfx_fire_colors.length - 1)]\n                    }\n                    vfx_fire_hue[index] = nextHue\n                    vfx_fire_lum[index] = thisLum - randint(0, 30)\n                }\n            }\n        }\n    }\n\n    function glowTick(): void {\n        for (let index = 0; index < 1; index++) {\n            let thisLum = vfx_glow_lum[index]\n            if (thisLum < 4){\n                vfx_glow_lum[index] = thisLum+.2\n            } else if (thisLum < 5) {\n                vfx_glow_lum[index] = thisLum+ + .3\n            } else if (thisLum < 10) {\n                vfx_glow_lum[index] = thisLum + .5\n            } else if (thisLum < 15) {\n                vfx_glow_lum[index] = thisLum + 1\n            }else if (thisLum < 30) {\n                vfx_glow_lum[index] = thisLum + 1.5\n            } else if (thisLum < 100) {\n                vfx_glow_lum[index] = thisLum + 4\n            } else{\n                vfx_glow_lum[index] = 0\n            }\n        }\n    }\n\n    function activeTick(): void {\n        for (let index = 0; index < 1; index++) {\n            let thisLum = vfx_active_lum[index]\n            if (thisLum < 4) {\n                vfx_active_lum[index] = thisLum + .2\n            } else if (thisLum < 5) {\n                vfx_active_lum[index] = thisLum + + .3\n            } else if (thisLum < 10) {\n                vfx_active_lum[index] = thisLum + .5\n            } else if (thisLum < 15) {\n                vfx_active_lum[index] = thisLum + 1\n            } else if (thisLum < 30) {\n                vfx_active_lum[index] = thisLum + 1.5\n            } else if (thisLum < 100) {\n                vfx_active_lum[index] = thisLum + 4\n            } else {\n                vfx_active_lum[index] = 0\n            }\n        }\n    }\n\n    function vfxPrepareMaster(): void{\n        vfx_master_hue[0] = vfx_glow_hue[0]\n        vfx_master_sat[0] = vfx_glow_sat[0]\n        vfx_master_lum[0] = Math.min(100, vfx_glow_lum[0])\n        vfx_master_hue[1] = vfx_mine_hue[0]\n        vfx_master_sat[1] = vfx_mine_sat[0]\n        vfx_master_lum[1] = Math.max(0, Math.min(50, vfx_mine_lum[0]))\n        vfx_master_hue[2] = vfx_idle_hue[0]\n        vfx_master_sat[2] = vfx_idle_sat[0]\n        vfx_master_lum[2] = Math.max(0, Math.min(50, vfx_idle_lum[0]))\n        vfx_master_hue[3] = vfx_idle_hue[1]\n        vfx_master_sat[3] = vfx_idle_sat[1]\n        vfx_master_lum[3] = Math.max(0, Math.min(50, vfx_idle_lum[1]))\n        vfx_master_hue[4] = vfx_indicate_hue[0]\n        vfx_master_sat[4] = vfx_indicate_sat[0]\n        vfx_master_lum[4] = Math.max(0, Math.min(50, vfx_indicate_lum[0]))\n        vfx_master_hue[5] = vfx_indicate_hue[1]\n        vfx_master_sat[5] = vfx_indicate_sat[1]\n        vfx_master_lum[5] = Math.max(0, Math.min(50, vfx_indicate_lum[1]))\n        vfx_master_hue[6] = vfx_parade_hue[0]\n        vfx_master_sat[6] = vfx_parade_sat[0]\n        vfx_master_lum[6] = Math.max(0, Math.min(50, vfx_parade_lum[0]))\n        vfx_master_hue[7] = vfx_parade_hue[1]\n        vfx_master_sat[7] = vfx_parade_sat[1]\n        vfx_master_lum[7] = Math.max(0, Math.min(50, vfx_parade_lum[1]))\n        vfx_master_hue[8] = vfx_parade_hue[2]\n        vfx_master_sat[8] = vfx_parade_sat[2]\n        vfx_master_lum[8] = Math.max(0, Math.min(50, vfx_parade_lum[2]))\n        vfx_master_hue[9] = vfx_parade_hue[3]\n        vfx_master_sat[9] = vfx_parade_sat[3]\n        vfx_master_lum[9] = Math.max(0, Math.min(50, vfx_parade_lum[3]))\n        vfx_master_hue[10] = vfx_parade_hue[4]\n        vfx_master_sat[10] = vfx_parade_sat[4]\n        vfx_master_lum[10] = Math.max(0, Math.min(50, vfx_parade_lum[4]))\n        vfx_master_hue[11] = vfx_parade_hue[5]\n        vfx_master_sat[11] = vfx_parade_sat[5]\n        vfx_master_lum[11] = Math.max(0, Math.min(50, vfx_parade_lum[5]))\n        vfx_master_hue[12] = vfx_fire_hue[0]\n        vfx_master_sat[12] = vfx_fire_sat[0]\n        vfx_master_lum[12] = Math.max(0, Math.min(50, vfx_fire_lum[0]))\n        vfx_master_hue[13] = vfx_fire_hue[1]\n        vfx_master_sat[13] = vfx_fire_sat[1]\n        vfx_master_lum[13] = Math.max(0, Math.min(50, vfx_fire_lum[1]))\n        vfx_master_hue[14] = vfx_fire_hue[2]\n        vfx_master_sat[14] = vfx_fire_sat[2]\n        vfx_master_lum[14] = Math.max(0, Math.min(50, vfx_fire_lum[2]))\n        vfx_master_hue[15] = vfx_off_hue[0]\n        vfx_master_sat[15] = vfx_off_sat[0]\n        vfx_master_lum[15] = 0\n        vfx_master_hue[16] = vfx_active_hue[0]\n        vfx_master_sat[16] = vfx_active_sat[0]\n        vfx_master_lum[16] = Math.min(100, vfx_active_lum[0])\n        for (let index=0; index < NeoWheel.length(); index++){\n\n        }\n        // NeoWheel.buf.getNumber(0)\n\n    }\n\n    function castleSayWrite(): void{\n        vfxPrepareMaster()\n        let masterIndex = 0\n        for (let index = 0; index < NeoWheel.length(); index++) {\n            NeoWheel.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        NeoWheel.show()\n    }\n\n    //% blockId=NL_PIXEL_SetEffect\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Set %region VFX to %effect\"\n    //% weight=100\n    export function setEffect(region:vfxRegion, effect:vfxEffect){\n        if (region == vfxRegion.Score1){\n            vfx_master_effect[30] = effect\n        } else if (region == vfxRegion.Score2) {\n            vfx_master_effect[31] = effect\n        } else if (region == vfxRegion.Score3) {\n            vfx_master_effect[32] = effect\n        } else if (region == vfxRegion.Score4) {\n            vfx_master_effect[33] = effect\n        } else if (region == vfxRegion.Score5) {\n            vfx_master_effect[26] = effect\n        } else if (region == vfxRegion.Score6) {\n            vfx_master_effect[27] = effect\n        } else if (region == vfxRegion.Score7) {\n            vfx_master_effect[28] = effect\n        } else if (region == vfxRegion.Score8) {\n            vfx_master_effect[29] = effect\n        } else if (region == vfxRegion.ScoreAll) {\n            for (let i = 26; i <= 33; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SockAll) {\n            for (let i = 0; i <= 7; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelInner) {\n            for (let i = 18; i <= 25; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelOuter) {\n            for (let i = 8; i <= 17; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelAll) {\n            for (let i=8; i <= 25; i++){ vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.CastleSayAll) {\n            for (let i = 0; i <= 33; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotA) {\n            for (let i = 8; i <= 11; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotB) {\n            for (let i = 6; i <= 7; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotC) {\n            for (let i = 12; i <= 13; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotD) {\n            for (let i = 4; i <= 5; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotE) {\n            for (let i = 14; i <= 15; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotF) {\n            for (let i = 2; i <= 3; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotG) {\n            for (let i = 16; i <= 17; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotH) {\n            for (let i = 0; i <= 1; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotI) {\n            for (let i = 18; i <= 19; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotAll) {\n            for (let i = 0; i <= 19; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.BrickWheel) {\n            vfx_master_effect[20] = effect\n            vfx_master_effect[27] = effect\n        } else if (region == vfxRegion.BrickBomb) {\n            vfx_master_effect[25] = effect\n        } else if (region == vfxRegion.BrickShell) {\n            vfx_master_effect[26] = effect\n        } else if (region == vfxRegion.BrickGhost) {\n            vfx_master_effect[24] = effect\n        } else if (region == vfxRegion.BrickDragon) {\n            for (let i = 22; i <= 23; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.BrickCannon) {\n            vfx_master_effect[21] = effect\n        } else if (region == vfxRegion.BrickAll) {\n            for (let i = 20; i <= 27; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongFront) {\n            for (let i = 28; i <= 29; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongBack) {\n            for (let i = 30; i <= 31; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongAll) {\n            for (let i = 28; i <=31; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.CastleDoAll) {\n            for (let i = 0; i < vfx_light_count; i++) { vfx_master_effect[i] = effect };\n        } \n    }\n\n    export enum vfxRegion{\n        Score1, Score2, Score3, Score4, Score5, Score6, Score7, Score8, ScoreAll,\n        SockAll,\n        WheelInner, WheelOuter, WheelAll,\n        KongFront, KongBack, KongAll,\n        BrickWheel, BrickBomb, BrickShell, BrickGhost, BrickDragon, BrickCannon, BrickAll,\n        SpotA, SpotB, SpotC, SpotD, SpotE, SpotF, SpotG, SpotH, SpotI, SpotAll,\n        CastleSayAll,\n        CastleDoAll\n    }\n\n/// END NEOPIXEL ///\n\n\n/// BEGIN SONAR ///\n\n    let sonarPinT = DigitalPin.P0\n    let sonarPinE = DigitalPin.P0\n\n    //% blockId=NL_SENSOR_SonarFirstRead\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"first distance from sonar at %pin1|%pin2\"\n    //% weight=101\n    export function SonarFirstRead(pin1: DigitalPin, pin2: DigitalPin): number {\n        sonarPinT = pin1\n        sonarPinE = pin2\n        pins.setPull(sonarPinT, PinPullMode.PullNone)\n        return SonarNextRead()\n    }\n\n    //% blockId=NL_SENSOR_SonarNextRead\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"next sonar distance\"\n    //% weight=100\n    export function SonarNextRead(): number {\n        pins.digitalWritePin(sonarPinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(sonarPinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(sonarPinT, 0)\n        return Math.floor(pins.pulseIn(sonarPinE, PulseValue.High, 25000) * 34 / 2000)\n    }\n\n/// END SONAR ///\n\n\n/// BEGIN MP3 ///\n\n    export enum playType { Play = 0x0D, Stop = 0x16, PlayNext = 0x01, PlayPrevious = 0x02, Pause = 0x0E }\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    let mp3musicPin: SerialPin\n    let mp3music = false\n    let mp3player = false\n    let mp3sfxPin: SerialPin\n    let mp3sfx = false\n    let mp3musicVol = 0\n    let mp3playerPin: SerialPin\n    let mp3playerVol = 0\n    let mp3sfxVol = 0\n    let isPot = false\n    let potPin = AnalogPin.P0\n    let masterVolume = 25\n\n    //% blockId=NL_SENSOR_TrimpotSet\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"set volume control pot at %aPin\"\n    export function potSet(aPin: AnalogPin): void {\n        potPin = aPin\n        isPot = true\n        masterVolume = potRead()\n    }\n\n    function potRead() {\n        if (isPot) { return Math.round(pins.map(pins.analogReadPin(potPin), 0, 1023, 0, 30)) }\n        else { return 5 }\n    }\n\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) { total += dataArr[i] }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) { myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i]) }\n        serial.writeBuffer(myBuff)\n        basic.pause(20) // Was 100; problematic at 10\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) { myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i]) }\n        serial.writeBuffer(myBuff)\n    }\n\n    //% blockId=NL_MP3_InitiateAs\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Ready MP3bit for %type at %sPin\"\n    //% dPin.fieldEditor=\"gridpicker\"\n    export function mp3setPorts(mp3bit: mp3type, sPin: SerialPin): void {\n        if (mp3bit == mp3type.music) {\n            mp3musicPin = sPin\n            mp3music = true\n            mp3musicVol = 100\n            setVolume(mp3type.music, mp3musicVol)\n        } else if (mp3bit == mp3type.player) {\n            mp3playerPin = sPin\n            mp3player = true\n            mp3playerVol = 100\n            setVolume(mp3type.player, mp3playerVol)\n        } else if (mp3bit == mp3type.sfxvoice) {\n            mp3sfxPin = sPin\n            mp3sfx = true\n            mp3sfxVol = 100\n            setVolume(mp3type.sfxvoice, mp3sfxVol)\n        }   \n    }\n\n    //% blockId=\"nl_playfilefolder\" \n    //% block=\"Play folder %folderNum file %fileNum on %sPin\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3fileFolder(folderNum: string, fileNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        dataArr[5] = parseInt(folderNum)\n        dataArr[6] = parseInt(fileNum)\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"NL_MP3_SendNumbers\" \n    //% block=\"Send numbers for folder %folderNum file %fileNum on %sPin\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3numbers(folderNum: number, fileNum: number, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        dataArr[3] = 15\n        dataArr[5] = folderNum\n        dataArr[6] = fileNum\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=NL_MP3_UpdateVolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Update volume for all\"\n    export function updateVolumeGlobal(): void {\n        let nowVol = potRead()\n        if (masterVolume != nowVol){\n            masterVolume = nowVol\n            setVolume(mp3type.music, mp3musicVol)\n            setVolume(mp3type.player, mp3playerVol)\n            setVolume(mp3type.sfxvoice, mp3sfxVol)\n        }\n    }\n\n    //% blockId=NL_MP3_SetVolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Set %mp3bit volume to %vol\"\n    export function setVolume(mp3bit:mp3type, vol:number): void {\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3musicVol = vol\n        } else if (mp3bit == mp3type.player) {\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3playerVol = vol\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3sfxVol = vol\n        }\n        dataArr[3] = 6\n        dataArr[5] = 0\n        dataArr[6] = Math.round(vol / 100 * masterVolume)\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=NL_MP3_GetVolumes\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Get current volumes\"\n    export function getVolumes() {\n        return \"m\" + mp3musicVol + \" p\" + mp3playerVol + \" s\" + mp3sfxVol + \" g\" + masterVolume\n    }\n\n    //% blockId=\"NL_MP3_StopPlayback\" \n    //% block=\"Stop playback on %mp3bit\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function stopPlayback(mp3bit:mp3type): void {\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        } else if (mp3bit == mp3type.player){\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        }\n        CMD = 0x16\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n/// END MP3 ///\n\n/// BEGIN SOUND BANK ///\n    export enum mp3type { music, player, sfxvoice }\n    export enum musicGenre { intro, tutorial, awaiting, level, won, lost }\n    export enum playerSaying { ready, yay, intro, nay, ouch, success, failure, won, lost, hurry }\n    export enum sfxType { correct, incorrect, ghost, fire, explosion, splash, spark, slash }\n    export enum voiceSaying { name, begin, retry, next, complete, gameover, welcome, intro, howto1, howto2, howto3, howto4, howto5, howto6, howto7, howto8, howto9 }\n    export enum magicianSaysSide { left, right }\n    export enum magicianDifficulty { easy, medium, hard }\n    export enum spotName { A, B, C, D, E, F, G, H, I }\n    export enum playerChar { mario, luigi, peach, daisy, toad, wario }\n\n    let sb_music_tutorial = feedBank(\"1.1.46|1.2.51|1.3.51|1.4.59|1.5.60|1.6.60|1.7.60|1.8.60|1.9.60|1.10.60|1.11.60|1.12.60|1.13.60|1.14.60|1.15.60|1.16.60|1.17.60|1.18.60|1.19.60|1.20.60|1.21.60\")\n    let sb_music_awaiting = feedBank(\"2.1.64|2.2.120|2.3.120|2.4.120|2.5.120|2.6.114|2.7.120|2.8.103|2.9.120|2.10.120|2.11.120|2.12.120|2.13.119|2.14.120|2.15.120|2.16.103|2.17.119|2.18.120|2.19.86|2.20.120\")\n    let sb_music_level = feedBank(\"3.1.120|3.2.120|3.3.120|3.4.120|3.5.120|3.6.120|3.7.120|3.8.120|3.9.120|3.10.92|3.11.120|3.12.120|3.13.111|3.14.116|3.15.98|3.16.120|3.17.120|3.18.82|3.19.120|3.20.120|3.21.120|3.22.120|3.23.120|3.24.120|3.25.120|3.26.120|3.27.91|3.28.120|3.29.120|3.30.41|3.31.120|3.32.120|3.33.120|3.34.94|3.35.120|3.36.120|3.37.120|3.38.120|3.39.120|3.40.120|3.41.78|3.42.120|3.43.120|3.44.120|3.45.120|3.46.120|3.47.120|3.48.120|3.49.120|3.50.120|3.51.120|3.52.113|3.53.120|3.54.120|3.55.42|3.56.120|3.57.120|3.58.120|3.59.114|3.60.120|3.61.120|3.62.118|3.63.120|3.64.120|3.65.120|3.66.120|3.67.120|3.68.59|3.69.120|3.70.120|3.71.118|3.72.120|3.73.120|3.74.70|3.75.120|3.76.120|3.77.120|3.78.120|3.79.120|3.80.120|3.81.120|3.82.120|3.83.80|3.84.120|3.85.120|3.86.120|3.87.120|3.88.107|3.89.120|3.90.120|3.91.120|3.92.120|3.93.36|3.94.120|3.95.120|3.96.120|3.97.120|3.98.120|3.99.120|3.100.63|3.101.120|3.102.120|3.103.112|3.104.105|3.105.120|3.106.110|3.107.120|3.108.120|3.109.120|3.110.120|3.111.120|3.112.120|3.113.120|3.114.120|3.115.120|3.116.119|3.117.120|3.118.120|3.119.120|3.120.120|3.121.120|3.122.120|3.123.120|3.124.120|3.125.120|3.126.104|3.127.120|3.128.87|3.129.120|3.130.118|3.131.120|3.132.120|3.133.50|3.134.109|3.135.120|3.136.120|3.137.120|3.138.91|3.139.120|3.140.120|3.141.120|3.142.120|3.143.120|3.144.120|3.145.104|3.146.112|3.147.120\")\n    let sb_music_won = feedBank(\"4.1.30|4.2.22|4.3.30|4.4.17|4.5.29|4.6.30|4.7.30|4.8.30|4.9.30|4.10.30|4.11.20|4.12.28|4.13.30|4.14.15|4.15.30|4.16.17|4.17.17|4.18.15|4.19.30|4.20.30|4.21.30|4.22.17|4.23.30|4.24.30|4.25.30\")\n    let sb_music_lost = feedBank(\"5.1.30|5.2.30|5.3.30|5.4.30|5.5.30|5.6.30|5.7.30|5.8.30|5.9.30|5.10.30|5.11.30\")\n    let sb_music_intro = feedBank(\"9.1.3|9.2.4|9.3.8|9.4.5|9.5.4|9.6.12|9.7.3|9.8.7|9.9.6|9.10.7|9.11.9|9.12.9|9.13.11|9.14.3|9.15.10|9.16.3|9.17.6|9.18.5|9.19.6|9.20.5|9.21.7|9.22.5|9.23.3|9.24.7|9.25.6|9.26.6|9.27.11|9.28.5|9.29.5|9.30.4|9.31.6|9.32.4|9.33.4|9.34.10|9.35.8|9.36.8|9.37.3|9.38.7|9.39.4|9.40.6|9.41.3|9.42.7|9.43.7|9.44.3|9.45.6|9.46.1|9.47.2|9.48.2|9.49.8|9.50.16|9.51.9|9.52.10|9.53.13|9.54.14|9.55.14|9.56.16|9.57.7|9.58.4|9.59.9|9.60.8|9.61.9|9.62.9|9.63.12|9.64.4|9.65.6|9.66.9|9.67.5|9.68.6|9.69.5|9.70.10|9.71.8|9.72.8|9.73.5|9.74.3\")\n    let sb_sfx_correct = feedBank(\"6.1.5|6.2.8|6.3.6|6.4.7|6.5.6|6.6.14|6.7.7|6.8.8|6.9.12|6.10.7|6.11.9|6.12.7|6.13.10|6.14.8|6.15.8|6.16.4|6.17.7|6.18.4|6.19.2|6.20.10|6.21.7|6.22.7|6.23.6|6.24.4|6.25.7|6.26.12|6.27.4|6.28.6|6.29.6|6.30.6|6.31.4|6.32.5|6.33.3|6.34.6|6.35.6|6.36.6|6.37.6|6.38.4|6.39.8|6.40.6|6.41.3|6.42.3|6.43.7|6.44.8|6.45.6|6.46.2|6.47.5|6.48.7|6.49.8|6.50.7|6.51.6|6.52.7|6.53.6|6.54.8|6.55.5|6.56.5|6.57.7|6.58.6|6.59.8|6.60.5|6.61.6|6.62.8|6.63.3|6.64.3|6.65.6|6.66.3|6.67.6|6.68.2|6.69.3|6.70.3|6.71.2|6.72.3|6.73.6|6.74.7|6.75.5|6.76.3|6.77.5|6.78.3|6.79.2|6.80.3|6.81.3|6.82.1|6.83.1|6.84.1|6.85.1|6.86.1|6.87.1|6.88.3|6.89.1|6.90.1|6.91.4|6.92.4\")\n    let sb_sfx_incorrect = feedBank(\"7.1.6|7.2.5|7.3.3|7.4.5|7.5.7|7.6.6|7.7.4|7.8.1|7.9.3|7.10.4|7.11.3|7.12.3|7.13.6|7.14.3|7.15.1|7.16.1|7.17.1|7.18.1|7.19.5|7.20.4|7.21.3|7.22.7\")\n    let sb_sfx_beep = feedBank(\"8.1.1|8.2.2|8.3.1\")\n    let sb_sfx_smash = feedBank(\"8.4.1|8.5.1|8.6.1|8.7.3\")\n    let sb_sfx_falling = feedBank(\"8.8.6\")\n    let sb_sfx_boom = feedBank(\"8.9.1|8.10.2|8.11.3|8.12.2\")\n    let sb_sfx_cannon = feedBank(\"8.13.2|8.14.1|8.15.1|8.16.2|8.17.2\")\n    let sb_sfx_fire = feedBank(\"8.18.2|8.19.2|8.20.5|8.21.2\")\n    let sb_sfx_ghost = feedBank(\"8.22.5|8.23.4|8.24.5|8.25.5\")\n    let sb_sfx_hit = feedBank(\"8.26.1|8.27.1|8.28.1|8.29.1|8.30.1\")\n    let sb_sfx_slash = feedBank(\"8.31.1|8.32.1|8.33.1|8.34.1|8.35.1|8.36.1|8.37.1|8.38.1|8.39.1|8.40.1|8.41.1|8.42.2\")\n    let sb_sfx_zap = feedBank(\"8.43.1|8.44.1|8.45.2|8.46.1|8.47.2|8.48.1\")\n    let sb_sfx_splash = feedBank(\"8.49.2|8.50.2|8.51.1|8.52.1|8.53.2|8.54.1|8.55.2|8.56.1|8.57.2\")\n    let sb_sfx_voice = feedBank(\"10.1.4|10.2.6|10.3.4|10.4.4|10.5.6|10.6.4|10.7.11|10.8.6|10.9.4|10.10.1\")\n    let sb_magician_left_easy = feedBank(\"11.1.3|11.2.6|11.3.7|11.4.6|11.5.6|11.6.7|11.7.6|11.8.6|11.9.6|11.10.7|11.11.6|11.12.6|11.13.7|11.14.6|11.15.6|11.16.6|11.17.6|11.18.6|11.19.6|11.20.6|11.21.6|11.22.7|11.23.6|11.24.6|11.25.6|11.26.6|11.27.7|11.28.7|11.29.7|11.30.6|11.31.6|11.32.8|11.33.7|11.34.6|11.35.7|11.36.5|11.37.6|11.38.8|11.39.6|11.40.6|11.41.6|11.42.6|11.43.6|11.44.7|11.45.6|11.46.7|11.47.7|11.48.8|11.49.6|11.50.7|11.51.6|11.52.6|11.53.7|11.54.8|11.55.7|11.56.6|11.57.7|11.58.6|11.59.6|11.60.6|11.61.6\")\n    let sb_magician_left_medium = feedBank(\"11.62.7|11.63.6|11.64.6|11.65.8|11.66.7|11.67.8|11.68.8|11.69.8|11.70.7|11.71.7|11.72.6|11.73.6|11.74.6|11.75.6|11.76.6|11.77.7|11.78.6|11.79.7|11.80.6|11.81.6|11.82.6|11.83.7|11.84.6|11.85.6|11.86.6|11.87.7|11.88.6|11.89.6|11.90.7|11.91.6|11.92.6|11.93.6|11.94.6|11.95.6|11.96.7|11.97.6|11.98.6|11.99.7|11.100.6|11.101.6|11.102.6|11.103.7|11.104.6|11.105.8|11.106.6|11.107.6|11.108.6|11.109.7|11.110.6|11.111.7|11.112.7|11.113.6|11.114.6|11.115.7|11.116.6|11.117.7|11.118.7|11.119.6|11.120.6|11.121.6|11.122.7|11.123.7|11.124.6|11.125.6|11.126.6|11.127.8|11.128.7|11.129.6|11.130.8|11.131.7|11.132.6|11.133.7|11.134.6|11.135.6|11.136.7|11.137.7\")\n    let sb_magician_left_hard = feedBank(\"11.219.7|11.220.6|11.221.6|11.222.6|11.223.6|11.224.6|11.225.7|11.226.7|11.227.6|11.228.6|11.229.6|11.230.8|11.231.7|11.232.7|11.233.6|11.234.6|11.235.6|11.236.8|11.237.7|11.238.7|11.239.6|11.240.6|11.241.8|11.242.7|11.243.7|11.244.6|11.245.6|11.246.7|11.247.7|11.248.7|11.249.7|11.250.6|11.251.6|11.252.6|11.253.6|11.254.6|11.255.6|11.256.6|11.257.6|11.258.7|11.259.7|11.260.7|11.261.6|11.262.6|11.263.6|11.264.6|11.265.6|11.266.6|11.267.7|11.268.6|11.269.6|11.270.6|11.271.6|11.272.6|11.273.6|11.274.6|11.275.7|11.276.6|11.277.6|11.278.7|11.279.7|11.280.7|11.281.6|11.282.6|11.283.7|11.284.9|11.285.7|11.286.6|11.287.6|11.288.6|11.289.7|11.290.7|11.291.6|11.292.6|11.293.7|11.294.7|11.295.6|11.296.7|11.297.6|11.298.6|11.299.6|11.300.6|11.301.6|11.302.6|11.303.7|11.304.6|11.305.6|11.306.7|11.307.6|\")\n    let sb_magician_right_easy = feedBank(\"11.159.6|11.160.6|11.161.7|11.162.6|11.163.7|11.164.7|11.165.6|11.166.6|11.167.7|11.168.7|11.169.6|11.170.8|11.171.7|11.172.7|11.173.6|11.174.6|11.175.6|11.176.6|11.177.7|11.178.6|11.179.6|11.180.6|11.181.6|11.182.7|11.183.6|11.184.6|11.185.6|11.186.6|11.187.8|11.188.7|11.189.6|11.190.6|11.191.6|11.192.6|11.193.6|11.194.6|11.195.5|11.196.6|11.197.6|11.198.6|11.199.7|11.200.6|11.201.6|11.202.6|11.203.6|11.204.6|11.205.6|11.206.6|11.207.6|11.208.6|11.209.6|11.210.7|11.211.7|11.212.7|11.213.6|11.214.7|11.215.7|11.216.6|11.217.7|11.218.6\")\n    let sb_magician_right_medium = feedBank(\"11.219.7|11.220.6|11.221.6|11.222.6|11.223.6|11.224.6|11.225.7|11.226.7|11.227.6|11.228.6|11.229.6|11.230.8|11.231.7|11.232.7|11.233.6|11.234.6|11.235.6|11.236.8|11.237.7|11.238.7|11.239.6|11.240.6|11.241.8|11.242.7|11.243.7|11.244.6|11.245.6|11.246.7|11.247.7|11.248.7|11.249.7|11.250.6|11.251.6|11.252.6|11.253.6|11.254.6|11.255.6|11.256.6|11.257.6|11.258.7|11.259.7|11.260.7|11.261.6|11.262.6|11.263.6|11.264.6|11.265.6|11.266.6|11.267.7|11.268.6|11.269.6|11.270.6|11.271.6|11.272.6|11.273.6|11.274.6|11.275.7|11.276.6|11.277.6|11.278.7|11.279.7|11.280.7|11.281.6|11.282.6|11.283.7|11.284.9|11.285.7|11.286.6|11.287.6\")\n    let sb_magician_right_hard = feedBank(\"11.288.6|11.289.7|11.290.7|11.291.6|11.292.6|11.293.7|11.294.7|11.295.6|11.296.7|11.297.6|11.298.6|11.299.6|11.300.6|11.301.6|11.302.6|11.303.7|11.304.6|11.305.6|11.306.7|11.307.6|11.308.7|11.309.6|11.310.6|11.311.6|11.312.7|11.313.7|11.314.6|11.315.7\")\n    let sb_mario_name = feedBank(\"12.1.2|12.2.1|12.4.2|12.5.3\")\n    let sb_mario_intro = feedBank(\"12.3.4|12.6.2|12.7.212.112.1|12.113.1|\")\n    let sb_mario_ready = feedBank(\"12.8.1|12.9.2|12.10.2|12.11.1|12.12.1|12.13.2|12.14.2|12.15.2|12.16.2|12.17.2|12.18.1\")\n    let sb_mario_yay = feedBank(\"12.19.1|12.20.1|12.21.1|12.22.1|12.23.1|12.24.1|12.25.1|12.26.1|12.27.1|12.28.1|12.29.1|12.30.1|12.31.1|12.32.1|12.33.1|12.34.1|12.35.1|12.36.1|12.37.1|12.38.1|12.39.1|12.40.1|12.41.1|12.42.1|12.43.1|12.44.1|12.45.1|12.46.1|12.47.1|12.48.1|12.49.1|12.50.1|12.51.2|12.52.2|12.53.2|12.54.2|12.55.2|12.56.2|12.57.2|12.58.2|12.59.2|12.60.2|12.61.2|12.62.2\")\n    let sb_mario_success = feedBank(\"12.63.1|12.64.2|12.65.2|12.66.2|12.67.2|12.68.3|12.69.3|12.70.3|12.71.3|12.72.3\")\n    let sb_mario_won = feedBank(\"12.73.2|12.74.2|12.75.3|12.76.3|12.77.3\")\n    let sb_mario_ouch = feedBank(\"12.78.1|12.79.1|12.80.1|12.81.1|12.82.1|12.83.1|12.84.1|12.85.1|12.86.1|12.87.1|12.88.1|12.89.1|12.90.1|12.91.1|12.92.1|12.93.1|12.94.1|12.95.1\")\n    let sb_mario_nay = feedBank(\"12.96.1|12.97.1|12.98.1|12.99.1|12.100.1|12.101.1|12.102.2|12.103.1|12.104.1|12.105.1|12.106.1|12.107.1|12.108.1|12.109.1|12.110.2|12.111.2\")\n    let sb_mario_failure = feedBank(\"12.114.2|12.115.2|12.116.2|12.117.1\")\n    let sb_mario_lost = feedBank(\"12.118.3|12.119.3|12.120.4|12.121.1\")\n    let sb_mario_hurry = feedBank(\"12.122.44\")\n    \n    let playlist_tutorial = makePlaylist(sb_music_tutorial)\n    let playlist_awaiting = makePlaylist(sb_music_awaiting)\n    let playlist_level = makePlaylist(sb_music_level)\n    let playlist_won = makePlaylist(sb_music_won)\n    let playlist_lost = makePlaylist(sb_music_lost)\n    let playlist_correct = makePlaylist(sb_sfx_correct)\n    let playlist_incorrect = makePlaylist(sb_sfx_incorrect)\n    let playlist_intro = makePlaylist(sb_music_intro)\n    let playlist_boom = makePlaylist(sb_sfx_boom)\n    let playlist_smash = makePlaylist(sb_sfx_smash)\n    let playlist_falling = makePlaylist(sb_sfx_falling)\n    let playlist_cannon = makePlaylist(sb_sfx_cannon)\n    let playlist_fire = makePlaylist(sb_sfx_fire)\n    let playlist_ghost = makePlaylist(sb_sfx_ghost)\n    let playlist_hit = makePlaylist(sb_sfx_hit)\n    let playlist_slash = makePlaylist(sb_sfx_slash)\n    let playlist_zap = makePlaylist(sb_sfx_zap)\n    let playlist_splash = makePlaylist(sb_sfx_splash)\n    let playlist_magician_left_easy = makePlaylist(sb_magician_left_easy)\n    let playlist_magician_left_medium = makePlaylist(sb_magician_left_medium)\n    let playlist_magician_left_hard = makePlaylist(sb_magician_left_hard)\n    let playlist_magician_right_easy = makePlaylist(sb_magician_right_easy)\n    let playlist_magician_right_medium = makePlaylist(sb_magician_right_medium)\n    let playlist_magician_right_hard = makePlaylist(sb_magician_right_hard)\n    let playlist_mario_name = makePlaylist(sb_mario_name)\n    let playlist_mario_intro = makePlaylist(sb_mario_intro)\n    let playlist_mario_ready = makePlaylist(sb_mario_ready)\n    let playlist_mario_yay = makePlaylist(sb_mario_yay)\n    let playlist_mario_success = makePlaylist(sb_mario_success)\n    let playlist_mario_won = makePlaylist(sb_mario_won)\n    let playlist_mario_ouch = makePlaylist(sb_mario_ouch)\n    let playlist_mario_nay = makePlaylist(sb_mario_nay)\n    let playlist_mario_failure = makePlaylist(sb_mario_failure)\n    let playlist_mario_lost = makePlaylist(sb_mario_lost)\n    let playlist_mario_hurry = makePlaylist(sb_mario_hurry)\n    let playtimeMusic = 0\n    let playtimePlayer = 0\n    let playtimeSfxVoice = 0\n\n    function takeRotate(PlaylistIn: number[]) {\n        let returnTrack = PlaylistIn.shift()\n        PlaylistIn.push(returnTrack)\n        return returnTrack\n    }\n    function feedBank(BankString: string) {\n        let returnBank: number[][] = []\n        let BankSplit = BankString.split(\"|\")\n        for (let soundString of BankSplit) {\n            returnBank.push([parseFloat(soundString.split(\".\")[0]), parseFloat(soundString.split(\".\")[1]), parseFloat(soundString.split(\".\")[2])])\n        }\n        return returnBank\n    }\n    function makePlaylist(SoundBank: any[]) {\n        let returnList: number[] = []\n        let orderedList: number[] = []\n        for (let soundNo = 0; soundNo <= SoundBank.length - 1; soundNo++) {\n            orderedList.push(soundNo)\n        }\n        while (orderedList.length > 0) {\n            let randTrack = randint(0, orderedList.length - 1)\n            returnList.push(orderedList.removeAt(randTrack))\n        }\n        return returnList\n    }\n    function bankPlay(mp3bit:mp3type, SoundBank: number[][], trackIndex: number) {\n        let theSong = SoundBank[trackIndex]\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimeMusic = theSong[2]\n        } else if (mp3bit == mp3type.player) {\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimePlayer = theSong[2]\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimeSfxVoice = theSong[2]\n        }\n        dataArr[3] = 15\n        dataArr[5] = theSong[0]\n        dataArr[6] = theSong[1]\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=NL_MP3_PlaytimeMusic\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of music\"\n    export function mp3durationMusic(): number{\n        return playtimeMusic\n    }\n\n    //% blockId=NL_MP3_PlaytimePlayer\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of player sound\"\n    export function mp3durationPlayer(): number {\n        return playtimePlayer\n    }\n\n    //% blockId=NL_MP3_PlaytimeSFX\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of sfx/voice\"\n    export function mp3durationSfxVoice(): number {\n        return playtimeSfxVoice\n    }\n\n\n\n    //% blockId=NL_MP3_MusicPlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %genre music\"\n    export function mp3musicPlay(genre: musicGenre): void {\n        if (genre == musicGenre.tutorial){\n            bankPlay(mp3type.music, sb_music_tutorial, takeRotate(playlist_tutorial))\n        } else if (genre == musicGenre.awaiting) {\n            bankPlay(mp3type.music, sb_music_awaiting, takeRotate(playlist_awaiting))\n        } else if (genre == musicGenre.intro){\n            bankPlay(mp3type.music, sb_music_intro, takeRotate(playlist_intro))\n        } else if (genre == musicGenre.level) {\n            bankPlay(mp3type.music, sb_music_level, takeRotate(playlist_level))\n        } else if (genre == musicGenre.won) {\n            bankPlay(mp3type.music, sb_music_won, takeRotate(playlist_won))\n        } else if (genre == musicGenre.lost) {\n            bankPlay(mp3type.music, sb_music_lost, takeRotate(playlist_lost))\n        }\n    }\n\n    //% blockId=NL_MP3_PlayerSay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %saying as player\"\n    export function mp3sayPlay(saying: playerSaying): void {\n        if(saying == playerSaying.ready){\n            bankPlay(mp3type.player, sb_mario_ready, takeRotate(playlist_mario_ready))\n        }else if (saying == playerSaying.yay){\n            bankPlay(mp3type.player, sb_mario_yay, takeRotate(playlist_mario_yay))\n        } else if (saying == playerSaying.intro) {\n            bankPlay(mp3type.player, sb_mario_intro, takeRotate(playlist_mario_intro))\n        } else if (saying == playerSaying.nay) {\n            bankPlay(mp3type.player, sb_mario_nay, takeRotate(playlist_mario_nay))\n        } else if (saying == playerSaying.ouch) {\n            bankPlay(mp3type.player, sb_mario_ouch, takeRotate(playlist_mario_ouch))\n        } else if (saying == playerSaying.success) {\n            bankPlay(mp3type.player, sb_mario_success, takeRotate(playlist_mario_success))\n        } else if (saying == playerSaying.failure) {\n            bankPlay(mp3type.player, sb_mario_failure, takeRotate(playlist_mario_failure))\n        } else if (saying == playerSaying.won) {\n            bankPlay(mp3type.player, sb_mario_won, takeRotate(playlist_mario_won))\n        } else if (saying == playerSaying.lost) {\n            bankPlay(mp3type.player, sb_mario_lost, takeRotate(playlist_mario_lost))\n        } else if (saying == playerSaying.hurry) {\n            bankPlay(mp3type.player, sb_mario_hurry, takeRotate(playlist_mario_hurry))\n        }\n    }\n\n    //% blockId=NL_MP3_VoicePlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %voice as voice\"\n    export function mp3voicePlay(voice: voiceSaying): void {\n        if (voice == voiceSaying.name) {\n\n        } else if (voice == voiceSaying.begin) {\n\n        } else if (voice == voiceSaying.retry) {\n\n        } else if (voice == voiceSaying.next) {\n\n        } else if (voice == voiceSaying.complete) {\n\n        } else if (voice == voiceSaying.gameover) {\n\n        } else if (voice == voiceSaying.welcome) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 0)\n        } else if (voice == voiceSaying.intro) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 1)\n        } else if (voice == voiceSaying.howto1) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 2)\n        } else if (voice == voiceSaying.howto2) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 3)\n        } else if (voice == voiceSaying.howto3) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 4)\n        } else if (voice == voiceSaying.howto4) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 5)\n        } else if (voice == voiceSaying.howto5) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 6)\n        } else if (voice == voiceSaying.howto6) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 7)\n        } else if (voice == voiceSaying.howto7) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 8)\n        } else if (voice == voiceSaying.howto8) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 9)\n        } else if (voice == voiceSaying.howto9) {\n\n        }\n    }\n\n    //% blockId=NL_MP3_MagicianSay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Magician says on the %side difficulty %difficulty\"\n    export function mp3magician(side: magicianSaysSide, difficulty: magicianDifficulty): void {\n        if (side == magicianSaysSide.left) {\n            if (difficulty == magicianDifficulty.easy) {\n\n            } else if (difficulty = magicianDifficulty.medium) {\n\n            } else if (difficulty = magicianDifficulty.hard) {\n\n            }\n        } else if (side = magicianSaysSide.right) {\n            if (difficulty == magicianDifficulty.easy) {\n\n            } else if (difficulty = magicianDifficulty.medium) {\n\n            } else if (difficulty = magicianDifficulty.hard) {\n\n            }\n        } \n    }\n\n    //% blockId=NL_MP3_SfxPlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %sfx sound effect\"\n    export function mp3sfxPlay(sfx: sfxType): void {\n        if(sfx == sfxType.correct){\n            bankPlay(mp3type.sfxvoice, sb_sfx_correct, takeRotate(playlist_correct))\n        }else if (sfx == sfxType.incorrect){\n            bankPlay(mp3type.sfxvoice, sb_sfx_incorrect, takeRotate(playlist_incorrect))\n        }else if (sfx == sfxType.ghost){\n            bankPlay(mp3type.sfxvoice, sb_sfx_ghost, takeRotate(playlist_ghost))\n        }else if (sfx == sfxType.fire){\n            bankPlay(mp3type.sfxvoice, sb_sfx_fire, takeRotate(playlist_fire))\n        }else if (sfx == sfxType.explosion){\n            bankPlay(mp3type.sfxvoice, sb_sfx_boom, takeRotate(playlist_boom))\n        }else if (sfx == sfxType.splash){\n            bankPlay(mp3type.sfxvoice, sb_sfx_splash, takeRotate(playlist_splash))\n        } else if (sfx == sfxType.spark) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_zap, takeRotate(playlist_zap))\n        } else if (sfx == sfxType.slash) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_slash, takeRotate(playlist_slash))\n        }\n    }\n/// END SOUND BANK ///\n\n/// BEGIN MOTOR & RELAY ///\n    const kong_address = 0x10\n    export enum MotorList { M1=1, M2=2 }\n    export enum motors{ redrack=16, shark=4, ghost=5, cannon=8, oarrack=7, shell=6, door=3, dragon=9, wheel=1, fan=2 }\n    export enum motorState { min, max, mid, off }\n    export enum fogLevels { none = 0, light = 1, medium = 2, heavy = 3 }\n    export enum sockState { dancing = 1, still = 0 }\n    let motor_wheel_max = 12; let motor_wheel_min = 0\n    let servo_redrack_max = 150; let servo_redrack_min = 100\n    let servo_cannon_min = 135; let servo_cannon_max = 65\n    let servo_shark_min = 20; let servo_shark_max = 85\n    let servo_oarrack_min = 60; let servo_oarrack_max = 110\n    let servo_ghost_min = 110; let servo_ghost_max = 40\n    let servo_shell_min = 170; let servo_shell_max = 100\n    let servo_door_min = 50; let servo_door_max = 140; let servo_door_mid = 100\n    let motor_fan_min = 0; let motor_fan_mid = 50; let motor_fan_max = 100\n    let servo_dragon_min = 90; let servo_dragon_max = 79\n\n    export function servoSet(servo: motors, angle: number): void {\n        let buf = pins.createBuffer(4);\n        buf[0] = servo;\n        buf[1] = angle;\n        buf[2] = 0;\n        buf[3] = 0;\n        pins.i2cWriteBuffer(kong_address, buf);\n    }\n\n    export function motorSpeed(motor: MotorList, speed: number): void {\n        let buf = pins.createBuffer(4);\n        buf[0] = motor\n        buf[1] = 1;\n        if (speed < 0) {\n            buf[1] = 2;\n            speed = speed * -1\n        }\n        buf[2] = speed;\n        buf[3] = 0;\n        pins.i2cWriteBuffer(kong_address, buf);\n    }\n\n    //% blockId=NL_MOTOR_Set \n    //% block=\"Set %motor to %state\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function motorSet(motor:motors, state:motorState):void{\n        if (motor == motors.redrack){\n            if (state == motorState.min){ servoSet(motor, servo_redrack_min) } \n            else if (state == motorState.max){ servoSet(motor, servo_redrack_max) }\n        } if (motor == motors.shark) {\n            if (state == motorState.min) { servoSet(motor, servo_shark_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_shark_max) }\n        } if (motor == motors.ghost) {\n            if (state == motorState.min) { servoSet(motor, servo_ghost_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_ghost_max) }\n        } if (motor == motors.cannon) {\n            if (state == motorState.min) { servoSet(motor, servo_cannon_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_cannon_max) }\n        } if (motor == motors.oarrack) {\n            if (state == motorState.min) { servoSet(motor, servo_oarrack_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_oarrack_max) }\n        } if (motor == motors.shell) {\n            if (state == motorState.min) { servoSet(motor, servo_shell_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_shell_max) }\n        } if (motor == motors.door) {\n            if (state == motorState.min) { servoSet(motor, servo_door_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_door_max) }\n            else if (state == motorState.mid) { servoSet(motor, servo_door_mid) }\n        } if (motor == motors.dragon) {\n            if (state == motorState.min) { servoSet(motor, servo_dragon_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_dragon_max) }\n        } if (motor == motors.wheel) {\n            if (state == motorState.min) { motorSpeed(MotorList.M1, motor_wheel_min) }\n            else if (state == motorState.max) { motorSpeed(MotorList.M1, motor_wheel_max) }\n            else if (state == motorState.off) { motorSpeed(MotorList.M1, 0) }\n        } if (motor == motors.fan) {\n            if (state == motorState.min) { motorSpeed(MotorList.M2, motor_fan_min) }\n            else if (state == motorState.mid) { motorSpeed(MotorList.M2, motor_fan_mid) }\n            else if (state == motorState.max) { motorSpeed(MotorList.M2, motor_fan_max) }\n            else if (state == motorState.off) { motorSpeed(MotorList.M2, 0) }\n        }\n    }\n\n    //% blockId=NL_RELAY_FogSet \n    //% block=\"set fog level to %level\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function setFog(fog:fogLevels):void{\n        if (fog == fogLevels.none){\n            pins.digitalWritePin(DigitalPin.P2, 1)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 1)\n        } else if (fog == fogLevels.light){\n            pins.digitalWritePin(DigitalPin.P2, 1)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        } else if (fog == fogLevels.medium) {\n            pins.digitalWritePin(DigitalPin.P2, 0)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        } else if (fog == fogLevels.heavy) {\n            pins.digitalWritePin(DigitalPin.P2, 0)\n            pins.digitalWritePin(DigitalPin.P8, 0)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        }\n    }\n\n    //% blockId=NL_RELAY_SockSet\n    //% block=\"set dancing sock to %sockState\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function setSock(state: sockState): void {\n        if(state==sockState.dancing){ pins.digitalWritePin(DigitalPin.P12, 0) }\n        else{ pins.digitalWritePin(DigitalPin.P12, 1) }\n    }\n\n/// END MOTOR & RELAY ///\n\n/// BEGIN OLED\n\n    let d1 = [0, 0, 0, 20, 36, 35, 54, 0, 28, 65, 8, 8, 160, 8, 96, 32, 62, 0, 98, 34, 24, 39, 60, 1, 54, 6, 0, 0, 8, 20, 65, 2, 50, 126, 127, 62, 127, 127, 127, 62, 127, 65, 32, 127, 127, 127, 127, 62, 127, 62, 127, 38, 1, 63, 31, 63, 99, 3, 97, 127, 2, 65, 4, 128, 1, 32, 127, 56, 56, 56, 8, 24, 127, 0, 128, 127, 65, 124, 124, 56, 252, 24, 0, 72, 4, 60, 28, 60, 68, 28, 68, 8, 0, 65, 2]\n    let d2 = [0, 95, 7, 127, 42, 19, 73, 5, 34, 34, 42, 8, 96, 8, 96, 16, 81, 66, 81, 65, 20, 69, 74, 113, 73, 73, 54, 172, 20, 20, 34, 1, 73, 9, 73, 65, 65, 73, 9, 65, 8, 127, 64, 8, 64, 2, 4, 65, 9, 65, 9, 73, 1, 64, 32, 64, 20, 4, 81, 65, 4, 65, 2, 128, 2, 84, 72, 68, 68, 84, 126, 164, 8, 125, 132, 16, 127, 4, 8, 68, 36, 36, 124, 84, 127, 64, 32, 64, 40, 160, 100, 54, 127, 54, 1]\n    let d3 = [0, 0, 0, 20, 127, 8, 85, 3, 65, 28, 28, 62, 0, 8, 0, 8, 73, 127, 73, 73, 18, 69, 73, 9, 73, 73, 54, 108, 34, 20, 20, 81, 121, 9, 73, 65, 65, 73, 9, 65, 8, 65, 65, 20, 64, 12, 8, 65, 9, 81, 25, 73, 127, 64, 64, 56, 8, 120, 73, 65, 8, 127, 1, 128, 4, 84, 68, 68, 68, 84, 9, 164, 4, 0, 125, 40, 64, 24, 4, 68, 36, 36, 8, 84, 68, 64, 64, 48, 16, 160, 84, 65, 0, 8, 1]\n    let d4 = [0, 0, 7, 127, 42, 100, 34, 0, 0, 0, 42, 8, 0, 8, 0, 4, 69, 64, 73, 73, 127, 69, 73, 5, 73, 41, 0, 0, 65, 20, 8, 9, 65, 9, 73, 65, 34, 73, 9, 81, 8, 0, 63, 34, 64, 2, 16, 65, 9, 33, 41, 73, 1, 64, 32, 64, 20, 4, 69, 0, 16, 0, 2, 128, 0, 84, 68, 40, 72, 84, 2, 164, 4, 0, 0, 68, 0, 4, 124, 56, 24, 252, 4, 36, 0, 124, 32, 64, 40, 124, 76, 0, 0, 0, 2]\n    let d5 = [0, 0, 0, 20, 18, 98, 80, 0, 0, 0, 8, 8, 0, 8, 0, 2, 62, 0, 70, 54, 16, 57, 48, 3, 54, 30, 0, 0, 0, 20, 0, 6, 62, 126, 54, 34, 28, 65, 1, 114, 127, 0, 1, 65, 64, 127, 127, 62, 6, 94, 70, 50, 1, 63, 31, 63, 99, 3, 67, 0, 32, 0, 4, 128, 0, 120, 56, 0, 127, 24, 0, 124, 120, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 28, 60, 68, 0, 68, 0, 0, 0, 1]\n\n    let display = [\" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\")]\n    let desired = [\" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\")]\n\n    //% blockId=NL_OLED_Update3\n    //% block=\"oled update from buffer\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function changeThree(): void{\n        let updated: string[][] = []\n        let count = 0\n        for (let row=0; row<8; row++){\n            for(let col=0; col<16; col++){\n                let refChar = desired[row][col]\n                if (refChar != display[row][col]){\n                    writeChar(refChar,row,col)\n                    display[row][col] = refChar\n                    count++\n                    if (count >= 3){\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    //% blockId=NL_OLED_PrintLine\n    //% block=\"print %text to oled buffer line %line\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function printLine(text:any, line:number): void{\n        let thisText = text + \"\"\n        for (let i = 0; i < 16; i++){\n            if (i < thisText.length){\n                desired[line][i]=thisText.charAt(i)\n            } else{\n                desired[line][i]=\" \"\n            }\n        }\n    }\n\n    function oledcmd(c: number) {\n        pins.i2cWriteNumber(0x3c, c, NumberFormat.UInt16BE);\n    }\n\n    function setText(row: number, column: number) {\n        oledcmd(0xB0 + row);            //set page address\n        oledcmd(0x00 + (8 * column & 0x0F));  //set column lower address\n        oledcmd(0x10 + ((8 * column >> 4) & 0x0F));   //set column higher address\n    }\n\n    //% blockId=NL_OLED_Init \n    //% block=\"initiate the oled screen\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function oledinit(): void {\n        oledcmd(0xAE);  // Set display OFF\n        oledcmd(0xD5);  // Set Display Clock Divide Ratio / OSC Frequency 0xD4\n        oledcmd(0x80);  // Display Clock Divide Ratio / OSC Frequency \n        oledcmd(0xA8);  // Set Multiplex Ratio\n        oledcmd(0x3F);  // Multiplex Ratio for 128x64 (64-1)\n        oledcmd(0xD3);  // Set Display Offset\n        oledcmd(0x00);  // Display Offset\n        oledcmd(0x40);  // Set Display Start Line\n        oledcmd(0x8D);  // Set Charge Pump\n        oledcmd(0x14);  // Charge Pump (0x10 External, 0x14 Internal DC/DC)\n        oledcmd(0xA1);  // Set Segment Re-Map\n        oledcmd(0xC8);  // Set Com Output Scan Direction\n        oledcmd(0xDA);  // Set COM Hardware Configuration\n        oledcmd(0x12);  // COM Hardware Configuration\n        oledcmd(0x81);  // Set Contrast\n        oledcmd(0xCF);  // Contrast\n        oledcmd(0xD9);  // Set Pre-Charge Period\n        oledcmd(0xF1);  // Set Pre-Charge Period (0x22 External, 0xF1 Internal)\n        oledcmd(0xDB);  // Set VCOMH Deselect Level\n        oledcmd(0x40);  // VCOMH Deselect Level\n        oledcmd(0xA4);  // Set all pixels OFF\n        oledcmd(0xA6);  // Set display not inverted\n        oledcmd(0xAF);  // Set display On\n        for (let j = 0; j < 8; j++) {\n            setText(j, 0);\n            {\n                for (let i = 0; i < 16; i++)  //clear all columns\n                {\n                    writeChar(\" \",j,i)\n                }\n            }\n        }\n    }\n\n    function writeChar(char: string, row: number, column: number) {\n        setText(row, column)\n        let i = char.charCodeAt(0) - 32\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d1[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d2[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d3[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d4[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d5[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n    }\n\n/// END OLED\n\n\n/// BEGIN DIGITS\n\n    let _SEGMENTS = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71];\n\n    //% blockId=nl_digits_create block=\"4-Digit cPin %cPin dPin %dPin\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function tm1637Create(cPin: DigitalPin, dPin: DigitalPin): TM1637LEDs {\n        let display = new TM1637LEDs();\n        display.clk = cPin\n        display.dio = dPin\n        display.brightness = 7;\n        display.init();\n        return display;\n    }\n    export class TM1637LEDs {\n        buf: Buffer;\n        clk: DigitalPin;\n        dio: DigitalPin;\n        _ON: number;\n        brightness: number;\n        init(): void {\n            pins.digitalWritePin(this.clk, 0);\n            pins.digitalWritePin(this.dio, 0);\n            this._ON = 8;\n            this.buf = pins.createBuffer(4);\n            this.clear();\n        }\n        _start() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _stop() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.dio, 1);\n        }\n        _write_data_cmd() {\n            this._start();\n            this._write_byte(0x40);\n            this._stop();\n        }\n        _write_dsp_ctrl() {\n            this._start();\n            this._write_byte(0x80 | this._ON | this.brightness);\n            this._stop();\n        }\n        _write_byte(b: number) {\n            for (let i = 0; i < 8; i++) {\n                pins.digitalWritePin(this.dio, (b >> i) & 1);\n                pins.digitalWritePin(this.clk, 1);\n                pins.digitalWritePin(this.clk, 0);\n            }\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _intensity(val: number = 7) {\n            this._ON = 8;\n            this.brightness = val - 1;\n            this._write_data_cmd();\n            this._write_dsp_ctrl();\n        }\n        _dat(bit: number, dat: number) {\n            this._write_data_cmd();\n            this._start();\n            this._write_byte(0xC0 | (bit % 4))\n            this._write_byte(dat);\n            this._stop();\n            this._write_dsp_ctrl();\n        }\n        \n        //% blockId=nl_digits_digit block=\"%display|show single number|%num|at digit|%bit\"\n        //% subcategory=\"Display\" group=\"Display\"\n        //% bit.defl=1 bit.min=0 bit.max=9\n        showbit(num: number = 5, bit: number = 0) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            this.buf[bit % 4] = _SEGMENTS[num % 16]\n            this._dat(bit, _SEGMENTS[num % 16])\n        }\n\n        //% blockId=nl_digits_number block=\"%display|show number|%num\"\n        //% subcategory=\"Display\" group=\"Display\"\n        showNumber(num: number) {\n            if (num < 0) {\n                num = -num\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n                this._dat(0, 0x40) // '-'\n                // this._dat(0, 0) // blank\n            }\n            else {\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n            }\n        }\n\n        //% blockId=\"nl_digits_clear\" block=\"clear display %display\"\n        //% subcategory=\"Display\" group=\"Display\"\n        clear() {\n            for (let i = 0; i < 4; i++) {\n                this._dat(i, 0)\n                this.buf[i] = 0\n            }\n        }\n    }\n\n/// END DIGITS\n\n}\n\n\n","pxt.json":"{\n    \"name\": \"NotLegosMaster\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"displaySendBuffer.asm\",\n        \"planetxbasic.ts\",\n        \"notlegos.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"7.0.42\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n","test.ts":""}},{"timestamp":1728844014232,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"NFHB?|vd].P(}_Y-C82U\">btToken</variable><variable id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</variable><variable id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</variable><variable id=\"Y|e4lM)*:N0Ca^S5-64i\">lastLaserR</variable><variable id=\"Uk9;F|_3qS]2aZyBH#]%\">lastLaserC</variable><variable id=\"}GOl3M4q[Bn4R~R!?]at\">lastLaserL</variable><variable id=\"JQUQT|8QeX)zSvZ?K@,i\">lastSonarRead</variable><variable id=\"=X]tI5AG]3|WfpT`9Jsr\">lastHue</variable><variable id=\"Bc7kXprAfc3]W%ILxbVV\">lastGesture</variable><variable id=\"#oq[[iBLthN][|]:S!n}\">lastHunt</variable><variable id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</variable><variable id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</variable><variable id=\"8GDUfe;)i@P.Do~T6|{[\">theName</variable><variable id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</variable><variable id=\"=9JavC*{GElF}/FS78a@\">iBegan</variable><variable id=\"e.[{0v-j0Tp(kJ9$~N@:\">isReady</variable></variables><block type=\"function_definition\" x=\"4217\" y=\"-292\"><mutation name=\"buttonPress\" functionid=\"+$9AXp*X:[tcODdtL9m)\"><arg name=\"button\" id=\"mfdvbnfdsij7xy9ejk0nd\" type=\"string\"></arg></mutation><field name=\"function_name\">buttonPress</field><value name=\"mfdvbnfdsij7xy9ejk0nd\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">button</field></block></value><statement name=\"STACK\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">button: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">button</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></statement></block><block type=\"every_interval\" x=\"681\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">2000</field></shadow></value><statement name=\"HANDLER\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value></block></statement></block><block type=\"every_interval\" x=\"1327\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"every_interval\" x=\"1542\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">40</field></shadow></value><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"=9JavC*{GElF}/FS78a@\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time\"></block></value><next><block type=\"NL_PIXEL_CastleSayTick\"><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"e.[{0v-j0Tp(kJ9$~N@:\">isReady</field></block></value><next><block type=\"function_call\"><mutation name=\"ready_oled\" functionid=\"LSuKu]l*}Y2[|u.h3PJ%\"></mutation><next><block type=\"NL_OLED_Update3\"><next><block type=\"variables_set\"><field name=\"VAR\" id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"=9JavC*{GElF}/FS78a@\">iBegan</field></block></value></block></value></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"NL_OLED_Init\"><next><block type=\"NL_PIXEL_CastleSay\"><field name=\"sockPin\">DigitalPin.P3</field><field name=\"wheelPin\">DigitalPin.P0</field><field name=\"scorePin\">DigitalPin.P16</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"=9JavC*{GElF}/FS78a@\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time_micros\"></block></value></block></next></block></next></block></statement></block><block type=\"every_interval\" x=\"2136\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"input_logo_event\" x=\"2351\" y=\"-83\"><field name=\"action\">TouchButtonEvent.Touched</field><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_MP3_PlayerSay\"><field name=\"saying\">notLegos.playerSaying.ready</field><next><block type=\"NL_MP3_SfxPlay\"><field name=\"sfx\">notLegos.sfxType.fire</field><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.intro</field></block></next></block></next></block></statement></block></statement></block><block type=\"radio_on_value_drag\" x=\"2934\" y=\"328\"><value name=\"HANDLER_DRAG_PARAM_name\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">name</field></block></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">value</field></block></value><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_substr\"><value name=\"this\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value><value name=\"start\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"length\"><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_substr\"><value name=\"this\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value><value name=\"start\"><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value><value name=\"length\"><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text_length\"><value name=\"VALUE\"><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value></block></value></block></value><next><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"controls_if\"><mutation elseif=\"3\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wstar</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_start</field></block></value></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value><statement name=\"DO1\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.welcome</field></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.WheelAll</field><field name=\"effect\">notLegos.vfxEffect.fire</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.intro</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_reg</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">check</field></block></value></block></value><statement name=\"DO2\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">ready</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value></block></statement><statement name=\"ELSE\"><block type=\"controls_if\"><mutation elseif=\"3\" else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">ready</field></block></value></block></value><statement name=\"DO0\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">wstar</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.KongFront</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">boot</field></block></value></block></value><statement name=\"DO1\"><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1000</field></shadow></value></block></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">200</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.idle</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotH</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotI</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">0</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.BrickDragon</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotE</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">tutor</field></block></value></block></value><statement name=\"DO2\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotA</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotB</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value></block></statement><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">heard: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">6</field></shadow></value></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"164\" y=\"3601\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><field name=\"function_name\">radioSay</field><value name=\"vt0gv77qprcayj8xalbs\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">text5</field></block></value><value name=\"ok3p1i8gyn97mv69yabw\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">val</field></block></value><statement name=\"STACK\"><block type=\"radio_datagram_send_value\"><value name=\"name\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value></block></value><value name=\"value\"><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">said: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">7</field></shadow></value></block></next></block></statement></block><block type=\"function_definition\" x=\"745\" y=\"3814\"><mutation name=\"fogFlood\" functionid=\"VFMl!%hPr#$dm7#L!/;e\"></mutation><field name=\"function_name\">fogFlood</field><statement name=\"STACK\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</field></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">10000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">para</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.mid</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.off</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.dancing</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.still</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">8000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.min</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"1187\" y=\"3814\"><mutation name=\"runTutorial\" functionid=\"S6D~vG%3KsCIO0/OH*vo\"></mutation><field name=\"function_name\">runTutorial</field><statement name=\"STACK\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">tutor</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">80</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">20</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.tutorial</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto1</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5950</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto2</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto3</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7600</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto4</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6100</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto5</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">13000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto6</field><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"function_definition\" x=\"1543\" y=\"3814\"><mutation name=\"ready_oled\" functionid=\"LSuKu]l*}Y2[|u.h3PJ%\"></mutation><field name=\"function_name\">ready_oled</field><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Say //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"6\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Y|e4lM)*:N0Ca^S5-64i\">lastLaserR</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> C</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Uk9;F|_3qS]2aZyBH#]%\">lastLaserC</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"}GOl3M4q[Bn4R~R!?]at\">lastLaserL</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"8\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">S</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"JQUQT|8QeX)zSvZ?K@,i\">lastSonarRead</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> H</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_js_round\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"=X]tI5AG]3|WfpT`9Jsr\">lastHue</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> G</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Bc7kXprAfc3]W%ILxbVV\">lastGesture</field></block></value><value name=\"ADD6\"><shadow type=\"text\"><field name=\"TEXT\"> N</field></shadow></value><value name=\"ADD7\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"#oq[[iBLthN][|]:S!n}\">lastHunt</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">Mode: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M:</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"NL_MP3_PlaytimeMusic\"></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">4</field></shadow></value></block></next></block></next></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Do //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> T </field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement></block></statement></block></xml>","main.ts":"function radioSay (text5: string, val: number) {\n    radio.sendValue(\"\" + btToken + text5, val)\n    notLegos.printLine(\"said: \" + text5 + \"=\" + val, 7)\n}\nfunction buttonPress (button: string) {\n    notLegos.printLine(\"button: \" + button, 3)\n}\nfunction runTutorial () {\n    radioSay(\"tutor\", 1)\n    notLegos.setVolume(notLegos.mp3type.music, 80)\n    basic.pause(20)\n    notLegos.mp3musicPlay(notLegos.musicGenre.tutorial)\n    fogLevel = 3\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto1)\n    basic.pause(5950)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto2)\n    basic.pause(5000)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto3)\n    basic.pause(7600)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto4)\n    basic.pause(6100)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto5)\n    basic.pause(13000)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto6)\n    notLegos.setVolume(notLegos.mp3type.music, 100)\n    basic.pause(7000)\n    notLegos.mp3musicPlay(notLegos.musicGenre.awaiting)\n}\nfunction ready_oled () {\n    if (isCastleSay) {\n        let lastHunt = 0\n        let lastGesture = 0\n        let lastHue = 0\n        let lastSonarRead = 0\n        let lastLaserL = 0\n        let lastLaserC = 0\n        let lastLaserR = 0\n        notLegos.printLine(\"// Castle Say //\", 0)\n        notLegos.printLine(\"R\" + Math.constrain(lastLaserR, 0, 9) + \" C\" + Math.constrain(lastLaserC, 0, 9) + \" L\" + Math.constrain(lastLaserL, 0, 9), 1)\n        notLegos.printLine(\"S\" + lastSonarRead + \" H\" + Math.round(lastHue / 3) + \" G\" + lastGesture + \" N\" + lastHunt, 2)\n        notLegos.printLine(\"Mode: \" + castleMode, 3)\n        notLegos.printLine(\"M:\" + notLegos.mp3durationMusic(), 4)\n    } else {\n        notLegos.printLine(\"// Castle Do //\", 0)\n        notLegos.printLine(\"M: \" + castleMode + \" T \" + fogToggle, 1)\n    }\n}\nradio.onReceivedValue(function (name, value) {\n    if (name.substr(0, btToken.length) == btToken) {\n        theName = name.substr(btToken.length, name.length - btToken.length)\n        if (isCastleSay) {\n            if (theName == \"wstar\") {\n                castleMode = \"wait_start\"\n            } else if (theName == \"welco\") {\n                if (value == 1) {\n                    notLegos.vfxReset(notLegos.vfxEffect.glow)\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.glow)\n                    notLegos.mp3voicePlay(notLegos.voiceSaying.welcome)\n                } else if (value == 2) {\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                    notLegos.setEffect(notLegos.vfxRegion.WheelAll, notLegos.vfxEffect.fire)\n                    basic.pause(1200)\n                    notLegos.mp3voicePlay(notLegos.voiceSaying.intro)\n                    basic.pause(3000)\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                    basic.pause(4000)\n                    notLegos.mp3musicPlay(notLegos.musicGenre.awaiting)\n                    castleMode = \"wait_reg\"\n                }\n            } else if (theName == \"check\") {\n                notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                radioSay(\"ready\", 1)\n            } else if (false) {\n            \t\n            }\n        } else {\n            if (theName == \"ready\") {\n                radioSay(\"wstar\", 1)\n                notLegos.setEffect(notLegos.vfxRegion.KongFront, notLegos.vfxEffect.indicate)\n            } else if (theName == \"boot\") {\n                fogLevel = 3\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.parade)\n                notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.max)\n                basic.pause(value * 1000)\n                notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.min)\n                basic.pause(1000)\n                radioSay(\"welco\", 1)\n                basic.pause(200)\n                notLegos.vfxReset(notLegos.vfxEffect.glow)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.glow)\n                basic.pause(5000)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.idle)\n                notLegos.setEffect(notLegos.vfxRegion.SpotH, notLegos.vfxEffect.mine)\n                notLegos.setEffect(notLegos.vfxRegion.SpotI, notLegos.vfxEffect.mine)\n                basic.pause(0)\n                radioSay(\"welco\", 2)\n                basic.pause(4500)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.off)\n                basic.pause(500)\n                notLegos.setEffect(notLegos.vfxRegion.BrickDragon, notLegos.vfxEffect.indicate)\n                basic.pause(1200)\n                notLegos.setEffect(notLegos.vfxRegion.SpotC, notLegos.vfxEffect.indicate)\n                notLegos.setEffect(notLegos.vfxRegion.SpotE, notLegos.vfxEffect.indicate)\n                basic.pause(3000)\n                fogLevel = 1\n                notLegos.motorSet(notLegos.motors.door, notLegos.motorState.max)\n            } else if (theName == \"tutor\") {\n                if (value == 1) {\n                    notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.off)\n                    basic.pause(4000)\n                    notLegos.vfxReset(notLegos.vfxEffect.glow)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotA, notLegos.vfxEffect.glow)\n                    basic.pause(6000)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotB, notLegos.vfxEffect.indicate)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotC, notLegos.vfxEffect.indicate)\n                } else if (value == 2) {\n                \t\n                }\n            } else if (theName == \"welco\") {\n            \t\n            } else {\n            \t\n            }\n        }\n        notLegos.printLine(\"heard: \" + theName + \"=\" + value, 6)\n    }\n})\ninput.onLogoEvent(TouchButtonEvent.Touched, function () {\n    if (isCastleSay) {\n        notLegos.mp3sayPlay(notLegos.playerSaying.ready)\n        notLegos.mp3sfxPlay(notLegos.sfxType.fire)\n        notLegos.mp3musicPlay(notLegos.musicGenre.intro)\n    }\n})\nfunction fogFlood () {\n    if (fogToggle) {\n        fogLevel = 3\n        basic.pause(10000)\n        notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.parade)\n        radioSay(\"para\", 1)\n        fogLevel = 0\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.max)\n        notLegos.motorSet(notLegos.motors.door, notLegos.motorState.max)\n        basic.pause(1000)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.mid)\n        basic.pause(6000)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.min)\n        basic.pause(500)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.off)\n        notLegos.motorSet(notLegos.motors.door, notLegos.motorState.min)\n        fogLevel = 1\n        notLegos.setSock(notLegos.sockState.dancing)\n        basic.pause(6000)\n        notLegos.setSock(notLegos.sockState.still)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.max)\n        basic.pause(8000)\n        notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.redrack, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.redrack, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shark, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shark, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.ghost, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.ghost, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.cannon, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.cannon, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.oarrack, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.oarrack, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shell, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shell, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.dragon, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.dragon, notLegos.motorState.min)\n    }\n}\nlet iTook = 0\nlet theName = \"\"\nlet fogToggle = 0\nlet castleMode = \"\"\nlet isCastleSay = 0\nlet fogLevel = 0\nlet btToken = \"\"\nnotLegos.oledinit()\nnotLegos.castleSayLights(DigitalPin.P3, DigitalPin.P0, DigitalPin.P16)\nlet iBegan = input.runningTimeMicros()\nloops.everyInterval(500, function () {\n\t\n})\nloops.everyInterval(500, function () {\n\t\n})\nloops.everyInterval(2000, function () {\n    notLegos.printLine(\"\" + iTook + \"\", 5)\n})\nloops.everyInterval(40, function () {\n    let isReady = 0\n    iBegan = input.runningTime()\n    notLegos.castleSayTick()\n    if (isReady) {\n    \t\n    }\n    ready_oled()\n    notLegos.changeThree()\n    iTook = input.runningTime() - iBegan\n})\n","README.md":"\n> Open this page at [https://notlegos.github.io/castleresay/](https://notlegos.github.io/castleresay/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/castleresay** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/castleresay** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/soundbank/](https://notlegos.github.io/soundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/soundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/soundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/resoundbank/](https://notlegos.github.io/resoundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/resoundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/resoundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosext/](https://notlegos.github.io/notlegosext/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosext** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosext** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosmaster/](https://notlegos.github.io/notlegosmaster/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosmaster** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosmaster** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","displaySendBuffer.asm":"sendBufferAsm:\n\n    push {r4,r5,r6,r7,lr}\n    \n    mov r4, r0 ; save buff\n    mov r6, r1 ; save pin\n    \n    mov r0, r4\n    bl BufferMethods::length\n    mov r5, r0\n    \n    mov r0, r4\n    bl BufferMethods::getBytes\n    mov r4, r0\n    \n    ; setup pin as digital\n    mov r0, r6\n    movs r1, #0\n    bl pins::digitalWritePin\n    \n    ; load pin address\n    mov r0, r6\n    bl pins::getPinAddress\n\n    ldr r0, [r0, #8] ; get mbed DigitalOut from MicroBitPin\n    ldr r1, [r0, #4] ; r1-mask for this pin\n    ldr r2, [r0, #16] ; r2-clraddr\n    ldr r3, [r0, #12] ; r3-setaddr\n    \n    cpsid i ; disable irq\n    \n    b .start\n    \n.nextbit:               ;            C0\n    str r1, [r3, #0]    ; pin := hi  C2\n    tst r6, r0          ;            C3\n    bne .islate         ;            C4\n    str r1, [r2, #0]    ; pin := lo  C6\n.islate:\n    lsrs r6, r6, #1     ; r6 >>= 1   C7\n    bne .justbit        ;            C8\n    \n    ; not just a bit - need new byte\n    adds r4, #1         ; r4++       C9\n    subs r5, #1         ; r5--       C10\n    bcc .stop           ; if (r5<0) goto .stop  C11\n.start:\n    movs r6, #0x80      ; reset mask C12\n    nop                 ;            C13\n\n.common:               ;             C13\n    str r1, [r2, #0]   ; pin := lo   C15\n    ; always re-load byte - it just fits with the cycles better this way\n    ldrb r0, [r4, #0]  ; r0 := *r4   C17\n    b .nextbit         ;             C20\n\n.justbit: ; C10\n    ; no nops, branch taken is already 3 cycles\n    b .common ; C13\n\n.stop:    \n    str r1, [r2, #0]   ; pin := lo\n    cpsie i            ; enable irq\n\n    pop {r4,r5,r6,r7,pc}\n","planetxbasic.ts":"/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#00B1ED  icon=\"\\uf005\" block=\"Connected\" blockId=\"PlanetX_Connected\"\n//% groups='[\"Digital\", \"Analog\", \"IIC Port\"]'\nnamespace Connected {\n    \n    ////////////////////////paj7620//////////////////////\n    let gesture_first_init = true\n    const initRegisterArray: number[] = [\n        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17,\n        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F,\n        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14,\n        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27,\n        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01,\n        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00,\n        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20,\n        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37,\n        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A,\n        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F,\n        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30,\n        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19,\n        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04,\n        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00,\n        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00,\n        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F,\n        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07,\n        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01,\n        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F,\n        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01,\n        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40,\n        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E,\n        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00,\n        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08,\n        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00,\n        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01,\n        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01,\n        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01\n    ];\n    \n    /////////////////////////color/////////////////////////\n    const APDS9960_ADDR = 0x39\n    const APDS9960_ENABLE = 0x80\n    const APDS9960_ATIME = 0x81\n    const APDS9960_CONTROL = 0x8F\n    const APDS9960_STATUS = 0x93\n    const APDS9960_CDATAL = 0x94\n    const APDS9960_CDATAH = 0x95\n    const APDS9960_RDATAL = 0x96\n    const APDS9960_RDATAH = 0x97\n    const APDS9960_GDATAL = 0x98\n    const APDS9960_GDATAH = 0x99\n    const APDS9960_BDATAL = 0x9A\n    const APDS9960_BDATAH = 0x9B\n    const APDS9960_GCONF4 = 0xAB\n    const APDS9960_AICLEAR = 0xE7\n    let color_first_init = false\n\n    function i2cwrite_color(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n    function i2cread_color(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n    function rgb2hsl(color_r: number, color_g: number, color_b: number): number {\n        let Hue = 0\n        let R = color_r * 100 / 255;\n        let G = color_g * 100 / 255;\n        let B = color_b * 100 / 255;\n        let maxVal = Math.max(R, Math.max(G, B))\n        let minVal = Math.min(R, Math.min(G, B))\n        let Delta = maxVal - minVal;\n\n        if (Delta < 0) {\n            Hue = 0;\n        }\n        else if (maxVal == R && G >= B) {\n            Hue = (60 * ((G - B) * 100 / Delta)) / 100;\n        }\n        else if (maxVal == R && G < B) {\n            Hue = (60 * ((G - B) * 100 / Delta) + 360 * 100) / 100;\n        }\n        else if (maxVal == G) {\n            Hue = (60 * ((B - R) * 100 / Delta) + 120 * 100) / 100;\n        }\n        else if (maxVal == B) {\n            Hue = (60 * ((R - G) * 100 / Delta) + 240 * 100) / 100;\n        }\n        return Hue\n    }\n    function initModule(): void {\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ATIME, 252)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_CONTROL, 0x03)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_GCONF4, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_AICLEAR, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x01)\n        color_first_init = true\n    }\n    function colorMode(): void {\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_ENABLE) | 0x2;\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, tmp);\n    }\n\n    ///////////////////////////////////////////////////////MP3\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    /*\n    * Play status selection button list\n    */\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(100)\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,        \n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum Distance_Unit_List {\n        //% block=\"cm\" \n        Distance_Unit_cm,\n\n        //% block=\"foot\"\n        Distance_Unit_foot,\n    }\n    export enum ButtonStateList {\n        //% block=\"C\"\n        C,\n        //% block=\"D\"\n        D,\n        //% block=\"C+D\"\n        CD\n    }\n    export enum GestureType {\n        //% block=\"None\"\n        None = 0,\n        //% block=\"Right\"\n        Right = 1,\n        //% block=\"Left\"\n        Left = 2,\n        //% block=\"Up\"\n        Up = 3,\n        //% block=\"Down\"\n        Down = 4,\n        //% block=\"Forward\"\n        Forward = 5,\n        //% block=\"Backward\"\n        Backward = 6,\n        //% block=\"Clockwise\"\n        Clockwise = 7,\n        //% block=\"Anticlockwise\"\n        Anticlockwise = 8,\n        //% block=\"Wave\"\n        Wave = 9\n    }\n    export enum ColorList {\n        //% block=\"Red\"\n        red,\n        //% block=\"Green\"\n        green,\n        //% block=\"Blue\"\n        blue,\n        //% block=\"Cyan\"\n        cyan,\n        //% block=\"Magenta\"\n        magenta,\n        //% block=\"Yellow\"\n        yellow,\n        //% block=\"White\"\n        white\n    }\n\n    ///////////////////////////////////blocks/////////////////////////////\n\n    //% blockId=\"readwaterLevel\" block=\"Water level sensor %Rjpin value(0~100)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function waterLevel(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        let voltage = 0, waterlevel = 0;\n        voltage = pins.map(\n            pins.analogReadPin(pin),\n            50,\n            600,\n            0,\n            100\n        );\n        if (voltage < 0) {\n            voltage = 0\n        }\n        waterlevel = voltage;\n        return Math.round(waterlevel)\n    }\n\n    let distance_last = 0\n\n    //% blockId=sonarbit block=\"Ultrasonic sensor pinT %tPin pinE %ePin distance %distance_unit\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% distance_unit.fieldEditor=\"gridpicker\"\n    //% distance_unit.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    export function ultrasoundSensor(tPin: DigitalPin, ePin: DigitalPin, distance_unit: Distance_Unit_List): number {\n        let pinT = tPin\n        let pinE = ePin\n        pins.setPull(pinT, PinPullMode.PullNone)\n        pins.digitalWritePin(pinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(pinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(pinT, 0)\n\n        // read pulse\n        let d = pins.pulseIn(pinE, PulseValue.High, 25000)\n        let version = control.hardwareVersion()\n        let distance = d * 34 / 2 / 1000\n        if (version == \"1\") {\n            distance = distance * 3 / 2\n        }\n\n        if (distance > 430) {\n            distance = 0\n        }\n\n        if (distance == 0) {\n            distance = distance_last\n            distance_last = 0\n        }\n        else {\n            distance_last = distance\n        }\n\n        switch (distance_unit) {\n            case Distance_Unit_List.Distance_Unit_cm:\n                return Math.floor(distance)  //cm\n                break\n            case Distance_Unit_List.Distance_Unit_foot:\n                return Math.floor(distance / 30.48)   //foot\n                break\n            default:\n                return 0\n        }\n    }\n\n    export class PAJ7620 {\n        private paj7620WriteReg(addr: number, cmd: number) {\n            let buf: Buffer = pins.createBuffer(2);\n            buf[0] = addr;\n            buf[1] = cmd;\n            pins.i2cWriteBuffer(0x73, buf, false);\n        }\n        private paj7620ReadReg(addr: number): number {\n            let buf: Buffer = pins.createBuffer(1);\n            buf[0] = addr;\n            pins.i2cWriteBuffer(0x73, buf, false);\n            buf = pins.i2cReadBuffer(0x73, 1, false);\n            return buf[0];\n        }\n        private paj7620SelectBank(bank: number) {\n            if (bank == 0) this.paj7620WriteReg(0xEF, 0);\n            else if (bank == 1) this.paj7620WriteReg(0xEF, 1);\n        }\n        private paj7620Init() {\n            let temp = 0;\n            this.paj7620SelectBank(0);\n            temp = this.paj7620ReadReg(0);\n            if (temp == 0x20) {\n                for (let i = 0; i < 438; i += 2) {\n                    this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);\n                }\n            }\n            this.paj7620SelectBank(0);\n        }\n        init() {\n            this.paj7620Init();\n            basic.pause(200);\n        }\n        read(): number {\n            let data = 0, result = 0;\n            data = this.paj7620ReadReg(0x43);\n            switch (data) {\n                case 0x01:\n                    result = GestureType.Right;\n                    break;\n                case 0x02:\n                    result = GestureType.Left;\n                    break;\n                case 0x04:\n                    result = GestureType.Up;\n                    break;\n                case 0x08:\n                    result = GestureType.Down;\n                    break;\n                case 0x10:\n                    result = GestureType.Forward;\n                    break;\n                case 0x20:\n                    result = GestureType.Backward;\n                    break;\n                case 0x40:\n                    result = GestureType.Clockwise;\n                    break;\n                case 0x80:\n                    result = GestureType.Anticlockwise;\n                    break;\n                default:\n                    data = this.paj7620ReadReg(0x44);\n                    if (data == 0x01)\n                        result = GestureType.Wave;\n                    break;\n            }\n            return result;\n        }\n    }\n    const gestureEventId = 3100;\n    let lastGesture = GestureType.None;\n    let paj7620 = new PAJ7620();\n    //% blockId= gesture_create_event block=\"Gesture sensor IIC port is %gesture\"\n    //% gesture.fieldEditor=\"gridpicker\" gesture.fieldOptions.columns=3\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function onGesture(gesture: GestureType, handler: () => void) {\n        control.onEvent(gestureEventId, gesture, handler);\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        control.inBackground(() => {\n            while (true) {\n                const gesture = paj7620.read();\n                if (gesture != lastGesture) {\n                    lastGesture = gesture;\n                    control.raiseEvent(gestureEventId, lastGesture);\n                }\n                basic.pause(200);\n            }\n        })\n    }\n\n    //% blockId= gesture_get_event block=\"Gesture sensor IIC port detects\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function getGesture(): number {\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        const gesture = paj7620.read();\n        return gesture\n    }\n\n\n\n\n    //% blockId=apds9960_readcolor block=\"Color sensor IIC port color HUE(0~360)\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function readColor(): number {\n        if (color_first_init == false) {\n            initModule()\n            colorMode()\n        }\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        while (!tmp) {\n            basic.pause(5);\n            tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        }\n        let c = i2cread_color(APDS9960_ADDR, APDS9960_CDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_CDATAH) * 256;\n        let r = i2cread_color(APDS9960_ADDR, APDS9960_RDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_RDATAH) * 256;\n        let g = i2cread_color(APDS9960_ADDR, APDS9960_GDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_GDATAH) * 256;\n        let b = i2cread_color(APDS9960_ADDR, APDS9960_BDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_BDATAH) * 256;\n        // map to rgb based on clear channel\n        let avg = c / 3;\n        r = r * 255 / avg;\n        g = g * 255 / avg;\n        b = b * 255 / avg;\n        //let hue = rgb2hue(r, g, b);\n        let hue = rgb2hsl(r, g, b)\n        return hue\n    }\n    //% block=\"Color sensor IIC port detects %color\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% color.fieldEditor=\"gridpicker\" color.fieldOptions.columns=3\n    export function checkColor(color: ColorList): boolean {\n        let hue = readColor()\n        switch (color) {\n            case ColorList.red:\n                if (hue > 330 || hue < 20) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.green:\n                if (hue > 120 && 180 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.blue:\n                if (hue > 210 && 270 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.cyan:\n                if (hue > 190 && 210 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.magenta:\n                if (hue > 260 && 330 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.yellow:\n                if (hue > 30 && 120 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.white:\n                if (hue >= 180 && 190 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n        }\n    }\n\n    //% blockId=\"potentiometer\" block=\"Trimpot %Rjpin analog value\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Input color=#E2C438 group=\"Analog\"\n    export function trimpot(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        return pins.analogReadPin(pin)\n    }\n    //% blockId=buttonab block=\"Button %Rjpin %button is pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonCD(Rjpin: DigitalRJPin, button: ButtonStateList): boolean {\n        let pinC = DigitalPin.P1\n        let pinD = DigitalPin.P2\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pinC = DigitalPin.P1\n                pinD = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pinC = DigitalPin.P2\n                pinD = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pinC = DigitalPin.P13\n                pinD = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pinC = DigitalPin.P15\n                pinD = DigitalPin.P16\n                break;\n            case DigitalRJPin.P3:\n                pinC = DigitalPin.P3\n                pinD = DigitalPin.P4\n                break;\n        }\n        pins.setPull(pinC, PinPullMode.PullUp)\n        pins.setPull(pinD, PinPullMode.PullUp)\n        if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 0 && button == ButtonStateList.CD) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinC) == 0 && pins.digitalReadPin(pinD) == 1 && button == ButtonStateList.C) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 1 && button == ButtonStateList.D) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    export enum ButtonState {\n        //% block=\"on\"\n        on = 1,\n        //% block=\"off\"\n        off = 2\n    }\n\n    const buttonEventSource = 5000\n    const buttonEventValue = {\n        CD_pressed: ButtonState.on,\n        CD_unpressed: ButtonState.off\n    }\n\n    //% block=\"on button %Rjpin %button pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=4\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonEvent(Rjpin: DigitalRJPin, button: ButtonStateList, handler: () => void) {\n        let ButtonPin_C = DigitalPin.P1\n        let ButtonPin_D = DigitalPin.P2\n        let pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P0\n        let pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                ButtonPin_C = DigitalPin.P1\n                ButtonPin_D = DigitalPin.P8\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P1\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P8\n                break;\n            case DigitalRJPin.J2:\n                ButtonPin_C = DigitalPin.P2\n                ButtonPin_D = DigitalPin.P12\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P2\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P12\n                break;\n            case DigitalRJPin.J3:\n                ButtonPin_C = DigitalPin.P13\n                ButtonPin_D = DigitalPin.P14\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P13\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P14\n                break;\n            case DigitalRJPin.J4:\n                ButtonPin_C = DigitalPin.P15\n                ButtonPin_D = DigitalPin.P16\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P15\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P16\n                break;\n            case DigitalRJPin.P3:\n                ButtonPin_C = DigitalPin.P3\n                ButtonPin_D = DigitalPin.P4\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P3\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P4\n                break;\n        }\n        if (button == ButtonStateList.C) {\n            pins.setPull(ButtonPin_C, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_C, PinEventType.Edge)\n            control.onEvent(pinEventSource_C, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.D) {\n            pins.setPull(ButtonPin_D, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_D, PinEventType.Edge)\n            control.onEvent(pinEventSource_D, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.CD) {\n            loops.everyInterval(50, function () {\n                if (pins.digitalReadPin(ButtonPin_C) == 0 && pins.digitalReadPin(ButtonPin_D) == 0) {\n                    control.raiseEvent(buttonEventSource, buttonEventValue.CD_pressed)\n                }\n            })\n            control.onEvent(buttonEventSource, buttonEventValue.CD_pressed, handler)\n        }\n    }\n\n    //% blockId=fans block=\"Motor fan %Rjpin toggle to $fanstate || speed %speed \\\\%\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% fanstate.shadow=\"toggleOnOff\"\n    //% subcategory=Excute group=\"Digital\" color=#EA5532\n    //% speed.min=0 speed.max=100\n    //% expandableArgumentMode=\"toggle\"\n    export function motorFan(Rjpin: DigitalRJPin, fanstate: boolean, speed: number = 100): void {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case DigitalRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n            case DigitalRJPin.J3:\n                pin = AnalogPin.P13\n                break;\n            case DigitalRJPin.J4:\n                pin = AnalogPin.P15\n                break;\n        }\n        if (fanstate) {\n            pins.analogSetPeriod(pin, 100)\n            pins.analogWritePin(pin, Math.map(speed, 0, 100, 0, 1023))\n        }\n        else {\n            pins.analogWritePin(pin, 0)\n            speed = 0\n        }\n    }\n\n\n    //% blockId=\"setLoopFolder\" block=\"loop play all the MP3s in the folder:$folderNum\"\n    //% folderNum.defl=\"01\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setLoopFolder(folderNum: string): void {\n        CMD = 0x17\n        para1 = 0\n        para2 = parseInt(folderNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    //% blockId=\"folderPlay\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum || repeatList: $myAns\"\n    //% folderNum.defl=\"01\" fileNum.defl=\"001\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function folderPlay(folderNum: string, fileNum: string, myAns: boolean = false): void {\n        CMD = 0x0F\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        if (myAns)\n            execute(0x19)\n    }\n\n    //% blockId=\"playFolderFilePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFilePort(folderNum: string, fileNum: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFolderFileVolumePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum with volume:$theVolume usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" theVolume.defl=\"10\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFileVolumePort(folderNum: string, fileNum: string, theVolume: string, Rjpin: DigitalRJPin): void {\n        \n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        \n        let volume = parseInt(theVolume)\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(200)\n\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"volumePort\" \n    //% block=\"set MP3 volume:$theVolume usingPin:$Rjpin\"\n    //% theVolume.defl=\"10\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function volumePort(theVolume: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        let volume = parseInt(theVolume)\n        if (volume > 30) {\n            volume = 30\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(300)\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n\n\n    //% blockId=\"setTracking\" \n    //% block=\"play the mp3 in order of:%tracking || repeatList: $myAns\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% tracking.defl=1\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setTracking(tracking: number, myAns: boolean = false): void {\n        CMD = 0x03\n        para1 = 0x00\n        para2 = tracking\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        execute(0x0D)\n        if (myAns)\n            execute(0x19)\n    }\n    //% blockId=MP3execute block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=\"setVolume\" block=\"Set volume(0~25):%volume\"\n    //% volume.min=0 volume.max=25\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setVolume(volume: number): void {\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 0x06\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=MP3setPort block=\"Set the MP3 port to %Rjpin\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function MP3SetPort(Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        setVolume(25)\n    }\n}","notlegos.ts":"// NotLegos Blocks\n//% block=\"Not LEGOs\" color=#0031AF weight=1000 icon=\"\\uf3a5\"\n//% groups='[\"MP3\",\"Sensors\"]'\nnamespace notLegos {\n\n\n/// BEGIN NEOPIXEL ///\n    export enum hues { red = 0, orange = 15, yellow = 40, lime = 85, green = 110, cyan = 170, blue = 240, purple = 260, pink = 310 }\n    export enum vfxEffect { parade = 0, fire = 1, indicate = 2, idle = 3, glow = 4, mine = 5, off = 6 }\n    let NeoSock: Strip = null; let NeoScore: Strip = null; let NeoWheel: Strip = null; let NeoKong: Strip = null; let NeoStrip: Strip = null; let NeoBrick: Strip = null\n    let vfx_mine_tog: number[] = []; let vfx_mine_hue: number[] = []; let vfx_mine_sat: number[] = []; let vfx_mine_lum: number[] = []\n    let vfx_fire_tog: number[] = []; let vfx_fire_hue: number[] = []; let vfx_fire_sat: number[] = []; let vfx_fire_lum: number[] = []; let vfx_fire_colors: number[] = []\n    let vfx_indicate_tog: number[] = []; let vfx_indicate_hue: number[] = []; let vfx_indicate_sat: number[] = []; let vfx_indicate_lum: number[] = [];\n    let vfx_idle_tog: number[] = []; let vfx_idle_hue: number[] = []; let vfx_idle_sat: number[] = []; let vfx_idle_lum: number[] = []\n    let vfx_glow_tog: number[] = []; let vfx_glow_hue: number[] = []; let vfx_glow_sat: number[] = []; let vfx_glow_lum: number[] = []\n    let vfx_active_tog: number[] = []; let vfx_active_hue: number[] = []; let vfx_active_sat: number[] = []; let vfx_active_lum: number[] = []\n    let vfx_off_hue: number[] = []; let vfx_off_sat: number[] = []; let vfx_off_lum: number[] = []\n    let vfx_parade_tog: number[] = []; let vfx_parade_hue: number[] = []; let vfx_parade_sat: number[] = []; let vfx_parade_lum: number[] = []; let vfx_parade_colors: number[] = [];\n    let vfx_last_tog: number[] = []; let vfx_last_hue: number[] = []; let vfx_last_sat: number[] = []; let vfx_last_lum: number[] = []\n    let vfx_master_tog: number[] = []; let vfx_master_hue: number[] = []; let vfx_master_sat: number[] = []; let vfx_master_lum: number[] = []; let vfx_master_effect: number[] = [];\n    let vfx_master_r: number[] = []; let vfx_master_g: number[] = []; let vfx_master_b: number[] = [];\n    let vfx_light_count = 0\n\n\n\n    //% shim=sendBufferAsm\n    function sendBuffer(buf: Buffer, pin: DigitalPin) { }\n\n    export class Strip {\n        buf: Buffer;\n        pin: DigitalPin;\n        start: number; // start offset in LED strip\n        _length: number; // number of LEDs\n\n        setPixelHSLPrecise(pixeloffset: number, h: number, s: number, l: number): void {\n            if (pixeloffset < 0 || pixeloffset >= this._length)\n                return;\n            pixeloffset = (pixeloffset + this.start) * 3\n            h = Math.clamp(0,1,h/360)\n            s = Math.clamp(0,1,s/100)\n            l = Math.clamp(0,1,l/100)\n            let r, g, b;\n            if (s === 0) {\n                r = g = b = l; // achromatic\n            } else {\n                const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n                const p = 2 * l - q;\n                let t = h + 1/3\n                if (t < 0) { t += 1; }\n                else if (t > 1) {t -= 1; }\n                if (t < 1/6) {r = p + (q - p) * 6 * t;}\n                else if (t < 1/2) {r = q;}\n                else if (t < 2/3) { r = p + (q - p) * (2/3 - t) * 6; }\n                else { r = p; }\n                t = h\n                if (t < 0) { t += 1; }\n                else if (t > 1) { t -= 1; }\n                if (t < 1 / 6) { g = p + (q - p) * 6 * t; }\n                else if (t < 1 / 2) { g = q; }\n                else if (t < 2 / 3) { g = p + (q - p) * (2/3 - t) * 6; }\n                else { g = p; }\n                t = h - 1/3\n                if (t < 0) { t += 1; }\n                else if (t > 1) { t -= 1; }\n                if (t < 1 / 6) { b = p + (q - p) * 6 * t; }\n                else if (t < 1/2) { b = q; }\n                else if (t < 2/3) { b = p + (q - p) * (2/3 - t) * 6; }\n                else { b = p; }\n            }\n            vfx_master_g[pixeloffset/3] = Math.round(g * 255);\n            vfx_master_r[pixeloffset/3] = Math.round(r * 255);\n            vfx_master_b[pixeloffset/3] = Math.round(b * 255);\n            this.buf[pixeloffset + 0] = Math.round(g * 255);\n            this.buf[pixeloffset + 1] = Math.round(r * 255);\n            this.buf[pixeloffset + 2] = Math.round(b * 255);\n        }\n\n\n        // setPixelHSLPrecise(pixeloffset: number, h: number, s: number, l: number): void {\n        //     if (pixeloffset < 0 || pixeloffset >= this._length)\n        //         return;\n        //     pixeloffset = (pixeloffset + this.start) * 3\n        //     h = Math.clamp(0, 1, h / 360)\n        //     s = Math.clamp(0, 1, s / 100)\n        //     l = Math.clamp(0, 1, l / 100)\n        //     let r, g, b;\n        //     if (s === 0) {\n        //         r = g = b = l; // achromatic\n        //     } else {\n        //         const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        //         const p = 2 * l - q;\n        //         let t = h + 1 / 3\n        //         if (t < 0) { t += 1; }\n        //         else if (t > 1) { t -= 1; }\n        //         if (t < 1 / 6) { r = p + (q - p) * 6 * t; }\n        //         else if (t < 1 / 2) { r = q; }\n        //         else if (t < 2 / 3) { r = p + (q - p) * (2 / 3 - t) * 6; }\n        //         else { r = p; }\n        //         t = h\n        //         if (t < 0) { t += 1; }\n        //         else if (t > 1) { t -= 1; }\n        //         if (t < 1 / 6) { g = p + (q - p) * 6 * t; }\n        //         else if (t < 1 / 2) { g = q; }\n        //         else if (t < 2 / 3) { g = p + (q - p) * (2 / 3 - t) * 6; }\n        //         else { g = p; }\n        //         t = h - 1 / 3\n        //         if (t < 0) { t += 1; }\n        //         else if (t > 1) { t -= 1; }\n        //         if (t < 1 / 6) { b = p + (q - p) * 6 * t; }\n        //         else if (t < 1 / 2) { b = q; }\n        //         else if (t < 2 / 3) { b = p + (q - p) * (2 / 3 - t) * 6; }\n        //         else { b = p; }\n        //     }\n        //     this.buf[pixeloffset + 0] = Math.round(g * 255);\n        //     this.buf[pixeloffset + 1] = Math.round(r * 255);\n        //     this.buf[pixeloffset + 2] = Math.round(b * 255);\n        // }\n\n        // show() { sendBuffer(this.buf, this.pin); }  //Send all the changes to the strip.\n\n        show() { \n            let paletteKong = [1, 1, 1, 1]\n            for (let i = 0; i < 4; i++) {\n                this.buf[i * 3 + 0] = vfx_master_g[paletteKong[i]]\n                this.buf[i * 3 + 1] = vfx_master_r[paletteKong[i]]\n                this.buf[i * 3 + 2] = vfx_master_b[paletteKong[i]]\n            }\n            sendBuffer(this.buf.slice(0, 4 * 3), DigitalPin.P16);\n\n            let paletteWheel = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n            for (let i = 0; i < 20; i++) {\n                this.buf[i * 3 + 0] = vfx_master_g[paletteWheel[i]]\n                this.buf[i * 3 + 1] = vfx_master_r[paletteWheel[i]]\n                this.buf[i * 3 + 2] = vfx_master_b[paletteWheel[i]]\n            }\n            sendBuffer(this.buf.slice(0, 20*3), DigitalPin.P15);\n\n            let paletteSock = [2, 3, 2, 3, 2, 3, 2, 3]\n            for (let i = 0; i < 8; i++) {\n                this.buf[i * 3 + 0] = vfx_master_g[paletteSock[i]]\n                this.buf[i * 3 + 1] = vfx_master_r[paletteSock[i]]\n                this.buf[i * 3 + 2] = vfx_master_b[paletteSock[i]]\n            }\n            sendBuffer(this.buf.slice(0, 8 * 3), DigitalPin.P14);\n\n            let paletteScore = [2, 3, 2, 3, 2, 3, 2, 3]\n            for (let i = 0; i < 8; i++) {\n                this.buf[i * 3 + 0] = vfx_master_g[paletteScore[i]]\n                this.buf[i * 3 + 1] = vfx_master_r[paletteScore[i]]\n                this.buf[i * 3 + 2] = vfx_master_b[paletteScore[i]]\n            }\n            sendBuffer(this.buf.slice(0, 8 * 3), DigitalPin.P13);\n\n            let paletteBricks = [2, 3, 2, 3, 2, 3, 2, 3]\n            for (let i = 0; i < 8; i++) {\n                this.buf[i * 3 + 0] = vfx_master_g[paletteBricks[i]]\n                this.buf[i * 3 + 1] = vfx_master_r[paletteBricks[i]]\n                this.buf[i * 3 + 2] = vfx_master_b[paletteBricks[i]]\n            }\n            sendBuffer(this.buf.slice(0, 8 * 3), DigitalPin.P12);\n\n            let paletteStrip = [6, 7, 8, 9, 10, 11, 6, 7, 8, 9, 10, 11, 6, 7, 8, 9, 10, 11, 6, 7]\n            for (let i = 0; i < 20; i++) {\n                this.buf[i * 3 + 0] = vfx_master_g[paletteStrip[i]]\n                this.buf[i * 3 + 1] = vfx_master_r[paletteStrip[i]]\n                this.buf[i * 3 + 2] = vfx_master_b[paletteStrip[i]]\n            }\n            sendBuffer(this.buf.slice(0, 20 * 3), DigitalPin.P8);\n\n\n            let paletteSwing = [2, 3, 2, 3, 2, 3, 2, 3]\n            for (let i = 0; i < 8; i++) {\n                this.buf[i * 3 + 0] = vfx_master_g[paletteSwing[i]]\n                this.buf[i * 3 + 1] = vfx_master_r[paletteSwing[i]]\n                this.buf[i * 3 + 2] = vfx_master_b[paletteSwing[i]]\n            }\n            sendBuffer(this.buf.slice(0, 8 * 3), DigitalPin.P2);\n\n\n            // sendBuffer(newBuffer, DigitalPin.P16);\n            // sendBuffer(this.buf, DigitalPin.P15);\n            // sendBuffer(this.buf, DigitalPin.P14);\n            // sendBuffer(this.buf, DigitalPin.P13);\n            // sendBuffer(this.buf, DigitalPin.P12);\n            // sendBuffer(this.buf, DigitalPin.P8);\n            // sendBuffer(this.buf, DigitalPin.P2);\n        }  //Send all the changes to the strip.\n\n        length() { return this._length; }   //Gets the number of pixels declared on the strip\n\n        shift(offset: number = 1): void { this.buf.shift(-offset * 3, this.start * 3, this._length * 3) }   //Shift LEDs forward and clear with zeros.\n\n        rotate(offset: number = 1): void { this.buf.rotate(-offset * 3, this.start * 3, this._length * 3) } //Rotate LEDs forward\n\n        setPin(pin: DigitalPin): void {\n            this.pin = pin;\n            pins.digitalWritePin(this.pin, 0);  // don't yield to avoid races on initialization\n        }\n    }\n\n    function create(thePin: DigitalPin, numleds: number): Strip {\n        let strip = new Strip();\n        strip.buf = pins.createBuffer(numleds * 3);\n        strip.start = 0;\n        strip._length = numleds;\n        strip.setPin(thePin)\n        return strip;\n    }\n\n    //% blockId=NL_PIXEL_CastleSay\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Sock Circle:%sockPin  Wheel Strip/Circle:%wheelPin  Score Circle:%scorePin \"\n    //% weight=100\n    export function castleSayLights(sockPin: DigitalPin, wheelPin: DigitalPin, scorePin: DigitalPin): void {\n        NeoWheel = create(wheelPin, 20)\n        vfx_light_count = 20\n        vfxInit()\n        // vfx_indicate_hue[31] = hues.yellow\n        vfx_indicate_tog[1] = 1\n    }\n\n\n    function vfxInit(): void{\n        vfx_parade_colors = [hues.red, hues.orange, hues.yellow, hues.cyan, hues.blue, hues.purple]\n        vfx_fire_colors = [hues.red, hues.red, hues.red, hues.red, hues.orange, hues.orange, hues.orange, hues.orange, hues.orange, hues.yellow]\n        for (let index = 0; index < 6; index++) {\n            vfx_parade_tog.push(randint(0, 1))\n            vfx_parade_hue.push(vfx_parade_colors[randint(0, vfx_parade_colors.length - 1)])\n            vfx_parade_sat.push(100)\n            vfx_parade_lum.push(randint(10, 65))\n        }\n        for (let index = 0; index < 1; index++) {\n            vfx_mine_tog.push(0)\n            vfx_mine_hue.push(hues.red)\n            vfx_mine_sat.push(100)\n            vfx_mine_lum.push(50)\n            vfx_glow_tog.push(0)\n            vfx_glow_hue.push(50)\n            vfx_glow_sat.push(0)\n            vfx_glow_lum.push(0)\n            vfx_active_tog.push(0)\n            vfx_active_hue.push(50)\n            vfx_active_sat.push(0)\n            vfx_glow_lum.push(0)\n            vfx_off_hue.push(0)\n            vfx_off_sat.push(0)\n            vfx_off_lum.push(0)\n        }\n        for (let index = 0; index < 3; index++) {\n            vfx_fire_tog.push(randint(0, 1))\n            vfx_fire_hue.push(vfx_fire_colors[randint(0, vfx_fire_colors.length - 1)])\n            vfx_fire_sat.push(100)\n            vfx_fire_lum.push(randint(30, 80))\n        }\n        for (let index = 0; index < 2; index++) {\n            vfx_indicate_tog.push(0)\n            vfx_indicate_lum.push(50)\n            vfx_indicate_hue.push(50)\n            vfx_indicate_sat.push(100)\n            vfx_idle_tog.push(1)\n            if (index % 2 == 0) { vfx_idle_tog[index] = 0; }\n            vfx_idle_hue.push(265)\n            if (index % 2 == 0) { vfx_idle_hue[index] = 2; }\n            vfx_idle_sat.push(100)\n            vfx_idle_lum.push(50)\n        }\n        for (let index = 0; index < vfx_light_count; index++) {\n            vfx_master_tog.push(0)\n            vfx_master_hue.push(0)\n            vfx_master_sat.push(100)\n            vfx_master_lum.push(50)\n            vfx_master_effect.push(vfxEffect.off)    //leave this be!\n        }\n    }\n\n    //% blockId=NL_PIXEL_ResetVFX\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Reset VFX %effect\"\n    //% weight=100\n    export function vfxReset(effect:vfxEffect):void{\n        if (effect == vfxEffect.idle){\n            for (let index = 0; index < 2; index++) {\n                vfx_idle_tog[index]=1\n                if (index % 2 == 0) { vfx_idle_tog[index] = 0; }\n                vfx_idle_hue[index]=265\n                if (index % 2 == 0) { vfx_idle_hue[index] = 2; }\n                vfx_idle_sat[index]=100\n                vfx_idle_lum[index]=50\n            }\n        } else if (effect == vfxEffect.glow) {\n            for (let index = 0; index < 1; index++) {\n                vfx_glow_tog[index] = 0\n                vfx_glow_hue[index] = 50\n                // vfx_glow_sat[index] = 100\n                vfx_glow_lum[index] = 0\n            }\n        } else if (effect == vfxEffect.mine) {\n            for (let index = 0; index < 1; index++) {\n                vfx_mine_tog[index] = 0\n                vfx_mine_hue[index] = hues.red\n                vfx_mine_sat[index] = 100\n                vfx_mine_lum[index] = 50\n            }\n        } else if (effect == vfxEffect.indicate) {\n            for (let index = 0; index < 2; index++) {\n                vfx_indicate_tog[index] = 0\n                vfx_indicate_sat[index] = 100\n                vfx_indicate_lum[index] = 50\n            }\n        }\n    }\n\n    //% blockId=NL_PIXEL_CastleSayTick\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Advance Castle Say lights\"\n    //% weight=100\n    export function castleSayTick(): void {\n        paradeTick()\n        fireTick()\n        glowTick()\n        activeTick()\n        castleSayWrite()\n        indicateTick()\n        idleTick()\n        mineTick()\n    }\n\n    function paradeTick(): void{\n        for (let index=0; index < 6; index++){\n            let thisLum = vfx_parade_lum[index]\n            let thisHue = vfx_parade_hue[index]\n            let thisTog = vfx_parade_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0){\n                if (thisLum < 65){\n                    vfx_parade_lum[index] = thisLum + 12\n                } else if (thisLum >= 65){\n                    vfx_parade_tog[index] = 1\n                }\n            } else if (thisTog == 1){\n                if (thisLum>10){\n                    vfx_parade_lum[index] = thisLum - 4\n                } else if (thisLum <= 10){\n                    vfx_parade_tog[index] = 0\n                    while (nextHue == thisHue){\n                        nextHue = vfx_parade_colors[randint(0, vfx_parade_colors.length - 1)]\n                    }\n                    vfx_parade_hue[index] = nextHue\n                    vfx_parade_lum[index] = thisLum - randint(0,10)\n                }\n            }\n        }\n    }\n\n    function mineTick(): void {\n        for (let index = 0; index < 1; index++) {\n            let thisLum = vfx_mine_lum[index]\n            let thisHue = vfx_mine_hue[index]\n            let thisTog = vfx_mine_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 200) {\n                    vfx_mine_lum[index] = thisLum + 30\n                } else if (thisLum >= 200) {\n                    vfx_mine_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 0) {\n                    vfx_mine_lum[index] = thisLum - 30\n                } else if (thisLum <= 0) {\n                    vfx_mine_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function idleTick(): void {\n        for (let index = 0; index < 2; index++) {\n            let thisLum = vfx_idle_lum[index]\n            let thisHue = vfx_idle_hue[index]\n            let thisTog = vfx_idle_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisHue < 265) {\n                    vfx_idle_hue[index] = thisHue + 1\n                } else if (thisHue >= 265) {\n                    vfx_idle_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisHue > 2) {\n                    vfx_idle_hue[index] = thisHue - 1\n                } else if (thisHue <= 2) {\n                    vfx_idle_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function indicateTick(): void {\n        for (let index = 0; index < 2; index++) {\n            let thisLum = vfx_indicate_lum[index]\n            let thisHue = vfx_indicate_hue[index]\n            let thisTog = vfx_indicate_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 80) {\n                    vfx_indicate_lum[index] = thisLum + 12\n                } else if (thisLum >= 80) {\n                    vfx_indicate_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 25) {\n                    vfx_indicate_lum[index] = thisLum - 4\n                } else if (thisLum <= 25) {\n                    vfx_indicate_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function fireTick(): void {\n        for (let index = 0; index < 3; index++) {\n            let thisLum = vfx_fire_lum[index]\n            let thisHue = vfx_fire_hue[index]\n            let thisTog = vfx_fire_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 80) {\n                    vfx_fire_lum[index] = thisLum + 15\n                } else if (thisLum >= 80) {\n                    vfx_fire_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 30) {\n                    vfx_fire_lum[index] = thisLum - 5\n                } else if (thisLum <= 30) {\n                    vfx_fire_tog[index] = 0\n                    while (nextHue == thisHue) {\n                        nextHue = vfx_fire_colors[randint(0, vfx_fire_colors.length - 1)]\n                    }\n                    vfx_fire_hue[index] = nextHue\n                    vfx_fire_lum[index] = thisLum - randint(0, 30)\n                }\n            }\n        }\n    }\n\n    function glowTick(): void {\n        for (let index = 0; index < 1; index++) {\n            let thisLum = vfx_glow_lum[index]\n            if (thisLum < 4){\n                vfx_glow_lum[index] = thisLum+.2\n            } else if (thisLum < 5) {\n                vfx_glow_lum[index] = thisLum+ + .3\n            } else if (thisLum < 10) {\n                vfx_glow_lum[index] = thisLum + .5\n            } else if (thisLum < 15) {\n                vfx_glow_lum[index] = thisLum + 1\n            }else if (thisLum < 30) {\n                vfx_glow_lum[index] = thisLum + 1.5\n            } else if (thisLum < 100) {\n                vfx_glow_lum[index] = thisLum + 4\n            } else{\n                vfx_glow_lum[index] = 0\n            }\n        }\n    }\n\n    function activeTick(): void {\n        for (let index = 0; index < 1; index++) {\n            let thisLum = vfx_active_lum[index]\n            if (thisLum < 4) {\n                vfx_active_lum[index] = thisLum + .2\n            } else if (thisLum < 5) {\n                vfx_active_lum[index] = thisLum + + .3\n            } else if (thisLum < 10) {\n                vfx_active_lum[index] = thisLum + .5\n            } else if (thisLum < 15) {\n                vfx_active_lum[index] = thisLum + 1\n            } else if (thisLum < 30) {\n                vfx_active_lum[index] = thisLum + 1.5\n            } else if (thisLum < 100) {\n                vfx_active_lum[index] = thisLum + 4\n            } else {\n                vfx_active_lum[index] = 0\n            }\n        }\n    }\n\n    function vfxPrepareMaster(): void{\n        vfx_master_hue[0] = vfx_glow_hue[0]\n        vfx_master_sat[0] = vfx_glow_sat[0]\n        vfx_master_lum[0] = Math.min(100, vfx_glow_lum[0])\n        vfx_master_hue[1] = vfx_mine_hue[0]\n        vfx_master_sat[1] = vfx_mine_sat[0]\n        vfx_master_lum[1] = Math.max(0, Math.min(50, vfx_mine_lum[0]))\n        vfx_master_hue[2] = vfx_idle_hue[0]\n        vfx_master_sat[2] = vfx_idle_sat[0]\n        vfx_master_lum[2] = Math.max(0, Math.min(50, vfx_idle_lum[0]))\n        vfx_master_hue[3] = vfx_idle_hue[1]\n        vfx_master_sat[3] = vfx_idle_sat[1]\n        vfx_master_lum[3] = Math.max(0, Math.min(50, vfx_idle_lum[1]))\n        vfx_master_hue[4] = vfx_indicate_hue[0]\n        vfx_master_sat[4] = vfx_indicate_sat[0]\n        vfx_master_lum[4] = Math.max(0, Math.min(50, vfx_indicate_lum[0]))\n        vfx_master_hue[5] = vfx_indicate_hue[1]\n        vfx_master_sat[5] = vfx_indicate_sat[1]\n        vfx_master_lum[5] = Math.max(0, Math.min(50, vfx_indicate_lum[1]))\n        vfx_master_hue[6] = vfx_parade_hue[0]\n        vfx_master_sat[6] = vfx_parade_sat[0]\n        vfx_master_lum[6] = Math.max(0, Math.min(50, vfx_parade_lum[0]))\n        vfx_master_hue[7] = vfx_parade_hue[1]\n        vfx_master_sat[7] = vfx_parade_sat[1]\n        vfx_master_lum[7] = Math.max(0, Math.min(50, vfx_parade_lum[1]))\n        vfx_master_hue[8] = vfx_parade_hue[2]\n        vfx_master_sat[8] = vfx_parade_sat[2]\n        vfx_master_lum[8] = Math.max(0, Math.min(50, vfx_parade_lum[2]))\n        vfx_master_hue[9] = vfx_parade_hue[3]\n        vfx_master_sat[9] = vfx_parade_sat[3]\n        vfx_master_lum[9] = Math.max(0, Math.min(50, vfx_parade_lum[3]))\n        vfx_master_hue[10] = vfx_parade_hue[4]\n        vfx_master_sat[10] = vfx_parade_sat[4]\n        vfx_master_lum[10] = Math.max(0, Math.min(50, vfx_parade_lum[4]))\n        vfx_master_hue[11] = vfx_parade_hue[5]\n        vfx_master_sat[11] = vfx_parade_sat[5]\n        vfx_master_lum[11] = Math.max(0, Math.min(50, vfx_parade_lum[5]))\n        vfx_master_hue[12] = vfx_fire_hue[0]\n        vfx_master_sat[12] = vfx_fire_sat[0]\n        vfx_master_lum[12] = Math.max(0, Math.min(50, vfx_fire_lum[0]))\n        vfx_master_hue[13] = vfx_fire_hue[1]\n        vfx_master_sat[13] = vfx_fire_sat[1]\n        vfx_master_lum[13] = Math.max(0, Math.min(50, vfx_fire_lum[1]))\n        vfx_master_hue[14] = vfx_fire_hue[2]\n        vfx_master_sat[14] = vfx_fire_sat[2]\n        vfx_master_lum[14] = Math.max(0, Math.min(50, vfx_fire_lum[2]))\n        vfx_master_hue[15] = vfx_off_hue[0]\n        vfx_master_sat[15] = vfx_off_sat[0]\n        vfx_master_lum[15] = 0\n        vfx_master_hue[16] = vfx_active_hue[0]\n        vfx_master_sat[16] = vfx_active_sat[0]\n        vfx_master_lum[16] = Math.min(100, vfx_active_lum[0])\n        for (let index=0; index < NeoWheel.length(); index++){\n\n        }\n        // NeoWheel.buf.getNumber(0)\n\n    }\n\n    function castleSayWrite(): void{\n        vfxPrepareMaster()\n        let masterIndex = 0\n        for (let index = 0; index < NeoWheel.length(); index++) {\n            NeoWheel.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        NeoWheel.show()\n    }\n\n    //% blockId=NL_PIXEL_SetEffect\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Set %region VFX to %effect\"\n    //% weight=100\n    export function setEffect(region:vfxRegion, effect:vfxEffect){\n        if (region == vfxRegion.Score1){\n            vfx_master_effect[30] = effect\n        } else if (region == vfxRegion.Score2) {\n            vfx_master_effect[31] = effect\n        } else if (region == vfxRegion.Score3) {\n            vfx_master_effect[32] = effect\n        } else if (region == vfxRegion.Score4) {\n            vfx_master_effect[33] = effect\n        } else if (region == vfxRegion.Score5) {\n            vfx_master_effect[26] = effect\n        } else if (region == vfxRegion.Score6) {\n            vfx_master_effect[27] = effect\n        } else if (region == vfxRegion.Score7) {\n            vfx_master_effect[28] = effect\n        } else if (region == vfxRegion.Score8) {\n            vfx_master_effect[29] = effect\n        } else if (region == vfxRegion.ScoreAll) {\n            for (let i = 26; i <= 33; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SockAll) {\n            for (let i = 0; i <= 7; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelInner) {\n            for (let i = 18; i <= 25; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelOuter) {\n            for (let i = 8; i <= 17; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelAll) {\n            for (let i=8; i <= 25; i++){ vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.CastleSayAll) {\n            for (let i = 0; i <= 33; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotA) {\n            for (let i = 8; i <= 11; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotB) {\n            for (let i = 6; i <= 7; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotC) {\n            for (let i = 12; i <= 13; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotD) {\n            for (let i = 4; i <= 5; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotE) {\n            for (let i = 14; i <= 15; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotF) {\n            for (let i = 2; i <= 3; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotG) {\n            for (let i = 16; i <= 17; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotH) {\n            for (let i = 0; i <= 1; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotI) {\n            for (let i = 18; i <= 19; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotAll) {\n            for (let i = 0; i <= 19; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.BrickWheel) {\n            vfx_master_effect[20] = effect\n            vfx_master_effect[27] = effect\n        } else if (region == vfxRegion.BrickBomb) {\n            vfx_master_effect[25] = effect\n        } else if (region == vfxRegion.BrickShell) {\n            vfx_master_effect[26] = effect\n        } else if (region == vfxRegion.BrickGhost) {\n            vfx_master_effect[24] = effect\n        } else if (region == vfxRegion.BrickDragon) {\n            for (let i = 22; i <= 23; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.BrickCannon) {\n            vfx_master_effect[21] = effect\n        } else if (region == vfxRegion.BrickAll) {\n            for (let i = 20; i <= 27; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongFront) {\n            for (let i = 28; i <= 29; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongBack) {\n            for (let i = 30; i <= 31; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongAll) {\n            for (let i = 28; i <=31; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.CastleDoAll) {\n            for (let i = 0; i < vfx_light_count; i++) { vfx_master_effect[i] = effect };\n        } \n    }\n\n    export enum vfxRegion{\n        Score1, Score2, Score3, Score4, Score5, Score6, Score7, Score8, ScoreAll,\n        SockAll,\n        WheelInner, WheelOuter, WheelAll,\n        KongFront, KongBack, KongAll,\n        BrickWheel, BrickBomb, BrickShell, BrickGhost, BrickDragon, BrickCannon, BrickAll,\n        SpotA, SpotB, SpotC, SpotD, SpotE, SpotF, SpotG, SpotH, SpotI, SpotAll,\n        CastleSayAll,\n        CastleDoAll\n    }\n\n/// END NEOPIXEL ///\n\n\n/// BEGIN SONAR ///\n\n    let sonarPinT = DigitalPin.P0\n    let sonarPinE = DigitalPin.P0\n\n    //% blockId=NL_SENSOR_SonarFirstRead\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"first distance from sonar at %pin1|%pin2\"\n    //% weight=101\n    export function SonarFirstRead(pin1: DigitalPin, pin2: DigitalPin): number {\n        sonarPinT = pin1\n        sonarPinE = pin2\n        pins.setPull(sonarPinT, PinPullMode.PullNone)\n        return SonarNextRead()\n    }\n\n    //% blockId=NL_SENSOR_SonarNextRead\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"next sonar distance\"\n    //% weight=100\n    export function SonarNextRead(): number {\n        pins.digitalWritePin(sonarPinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(sonarPinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(sonarPinT, 0)\n        return Math.floor(pins.pulseIn(sonarPinE, PulseValue.High, 25000) * 34 / 2000)\n    }\n\n/// END SONAR ///\n\n\n/// BEGIN MP3 ///\n\n    export enum playType { Play = 0x0D, Stop = 0x16, PlayNext = 0x01, PlayPrevious = 0x02, Pause = 0x0E }\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    let mp3musicPin: SerialPin\n    let mp3music = false\n    let mp3player = false\n    let mp3sfxPin: SerialPin\n    let mp3sfx = false\n    let mp3musicVol = 0\n    let mp3playerPin: SerialPin\n    let mp3playerVol = 0\n    let mp3sfxVol = 0\n    let isPot = false\n    let potPin = AnalogPin.P0\n    let masterVolume = 25\n\n    //% blockId=NL_SENSOR_TrimpotSet\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"set volume control pot at %aPin\"\n    export function potSet(aPin: AnalogPin): void {\n        potPin = aPin\n        isPot = true\n        masterVolume = potRead()\n    }\n\n    function potRead() {\n        if (isPot) { return Math.round(pins.map(pins.analogReadPin(potPin), 0, 1023, 0, 30)) }\n        else { return 5 }\n    }\n\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) { total += dataArr[i] }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) { myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i]) }\n        serial.writeBuffer(myBuff)\n        basic.pause(20) // Was 100; problematic at 10\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) { myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i]) }\n        serial.writeBuffer(myBuff)\n    }\n\n    //% blockId=NL_MP3_InitiateAs\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Ready MP3bit for %type at %sPin\"\n    //% dPin.fieldEditor=\"gridpicker\"\n    export function mp3setPorts(mp3bit: mp3type, sPin: SerialPin): void {\n        if (mp3bit == mp3type.music) {\n            mp3musicPin = sPin\n            mp3music = true\n            mp3musicVol = 100\n            setVolume(mp3type.music, mp3musicVol)\n        } else if (mp3bit == mp3type.player) {\n            mp3playerPin = sPin\n            mp3player = true\n            mp3playerVol = 100\n            setVolume(mp3type.player, mp3playerVol)\n        } else if (mp3bit == mp3type.sfxvoice) {\n            mp3sfxPin = sPin\n            mp3sfx = true\n            mp3sfxVol = 100\n            setVolume(mp3type.sfxvoice, mp3sfxVol)\n        }   \n    }\n\n    //% blockId=\"nl_playfilefolder\" \n    //% block=\"Play folder %folderNum file %fileNum on %sPin\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3fileFolder(folderNum: string, fileNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        dataArr[5] = parseInt(folderNum)\n        dataArr[6] = parseInt(fileNum)\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"NL_MP3_SendNumbers\" \n    //% block=\"Send numbers for folder %folderNum file %fileNum on %sPin\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3numbers(folderNum: number, fileNum: number, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        dataArr[3] = 15\n        dataArr[5] = folderNum\n        dataArr[6] = fileNum\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=NL_MP3_UpdateVolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Update volume for all\"\n    export function updateVolumeGlobal(): void {\n        let nowVol = potRead()\n        if (masterVolume != nowVol){\n            masterVolume = nowVol\n            setVolume(mp3type.music, mp3musicVol)\n            setVolume(mp3type.player, mp3playerVol)\n            setVolume(mp3type.sfxvoice, mp3sfxVol)\n        }\n    }\n\n    //% blockId=NL_MP3_SetVolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Set %mp3bit volume to %vol\"\n    export function setVolume(mp3bit:mp3type, vol:number): void {\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3musicVol = vol\n        } else if (mp3bit == mp3type.player) {\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3playerVol = vol\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3sfxVol = vol\n        }\n        dataArr[3] = 6\n        dataArr[5] = 0\n        dataArr[6] = Math.round(vol / 100 * masterVolume)\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=NL_MP3_GetVolumes\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Get current volumes\"\n    export function getVolumes() {\n        return \"m\" + mp3musicVol + \" p\" + mp3playerVol + \" s\" + mp3sfxVol + \" g\" + masterVolume\n    }\n\n    //% blockId=\"NL_MP3_StopPlayback\" \n    //% block=\"Stop playback on %mp3bit\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function stopPlayback(mp3bit:mp3type): void {\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        } else if (mp3bit == mp3type.player){\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        }\n        CMD = 0x16\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n/// END MP3 ///\n\n/// BEGIN SOUND BANK ///\n    export enum mp3type { music, player, sfxvoice }\n    export enum musicGenre { intro, tutorial, awaiting, level, won, lost }\n    export enum playerSaying { ready, yay, intro, nay, ouch, success, failure, won, lost, hurry }\n    export enum sfxType { correct, incorrect, ghost, fire, explosion, splash, spark, slash }\n    export enum voiceSaying { name, begin, retry, next, complete, gameover, welcome, intro, howto1, howto2, howto3, howto4, howto5, howto6, howto7, howto8, howto9 }\n    export enum magicianSaysSide { left, right }\n    export enum magicianDifficulty { easy, medium, hard }\n    export enum spotName { A, B, C, D, E, F, G, H, I }\n    export enum playerChar { mario, luigi, peach, daisy, toad, wario }\n\n    let sb_music_tutorial = feedBank(\"1.1.46|1.2.51|1.3.51|1.4.59|1.5.60|1.6.60|1.7.60|1.8.60|1.9.60|1.10.60|1.11.60|1.12.60|1.13.60|1.14.60|1.15.60|1.16.60|1.17.60|1.18.60|1.19.60|1.20.60|1.21.60\")\n    let sb_music_awaiting = feedBank(\"2.1.64|2.2.120|2.3.120|2.4.120|2.5.120|2.6.114|2.7.120|2.8.103|2.9.120|2.10.120|2.11.120|2.12.120|2.13.119|2.14.120|2.15.120|2.16.103|2.17.119|2.18.120|2.19.86|2.20.120\")\n    let sb_music_level = feedBank(\"3.1.120|3.2.120|3.3.120|3.4.120|3.5.120|3.6.120|3.7.120|3.8.120|3.9.120|3.10.92|3.11.120|3.12.120|3.13.111|3.14.116|3.15.98|3.16.120|3.17.120|3.18.82|3.19.120|3.20.120|3.21.120|3.22.120|3.23.120|3.24.120|3.25.120|3.26.120|3.27.91|3.28.120|3.29.120|3.30.41|3.31.120|3.32.120|3.33.120|3.34.94|3.35.120|3.36.120|3.37.120|3.38.120|3.39.120|3.40.120|3.41.78|3.42.120|3.43.120|3.44.120|3.45.120|3.46.120|3.47.120|3.48.120|3.49.120|3.50.120|3.51.120|3.52.113|3.53.120|3.54.120|3.55.42|3.56.120|3.57.120|3.58.120|3.59.114|3.60.120|3.61.120|3.62.118|3.63.120|3.64.120|3.65.120|3.66.120|3.67.120|3.68.59|3.69.120|3.70.120|3.71.118|3.72.120|3.73.120|3.74.70|3.75.120|3.76.120|3.77.120|3.78.120|3.79.120|3.80.120|3.81.120|3.82.120|3.83.80|3.84.120|3.85.120|3.86.120|3.87.120|3.88.107|3.89.120|3.90.120|3.91.120|3.92.120|3.93.36|3.94.120|3.95.120|3.96.120|3.97.120|3.98.120|3.99.120|3.100.63|3.101.120|3.102.120|3.103.112|3.104.105|3.105.120|3.106.110|3.107.120|3.108.120|3.109.120|3.110.120|3.111.120|3.112.120|3.113.120|3.114.120|3.115.120|3.116.119|3.117.120|3.118.120|3.119.120|3.120.120|3.121.120|3.122.120|3.123.120|3.124.120|3.125.120|3.126.104|3.127.120|3.128.87|3.129.120|3.130.118|3.131.120|3.132.120|3.133.50|3.134.109|3.135.120|3.136.120|3.137.120|3.138.91|3.139.120|3.140.120|3.141.120|3.142.120|3.143.120|3.144.120|3.145.104|3.146.112|3.147.120\")\n    let sb_music_won = feedBank(\"4.1.30|4.2.22|4.3.30|4.4.17|4.5.29|4.6.30|4.7.30|4.8.30|4.9.30|4.10.30|4.11.20|4.12.28|4.13.30|4.14.15|4.15.30|4.16.17|4.17.17|4.18.15|4.19.30|4.20.30|4.21.30|4.22.17|4.23.30|4.24.30|4.25.30\")\n    let sb_music_lost = feedBank(\"5.1.30|5.2.30|5.3.30|5.4.30|5.5.30|5.6.30|5.7.30|5.8.30|5.9.30|5.10.30|5.11.30\")\n    let sb_music_intro = feedBank(\"9.1.3|9.2.4|9.3.8|9.4.5|9.5.4|9.6.12|9.7.3|9.8.7|9.9.6|9.10.7|9.11.9|9.12.9|9.13.11|9.14.3|9.15.10|9.16.3|9.17.6|9.18.5|9.19.6|9.20.5|9.21.7|9.22.5|9.23.3|9.24.7|9.25.6|9.26.6|9.27.11|9.28.5|9.29.5|9.30.4|9.31.6|9.32.4|9.33.4|9.34.10|9.35.8|9.36.8|9.37.3|9.38.7|9.39.4|9.40.6|9.41.3|9.42.7|9.43.7|9.44.3|9.45.6|9.46.1|9.47.2|9.48.2|9.49.8|9.50.16|9.51.9|9.52.10|9.53.13|9.54.14|9.55.14|9.56.16|9.57.7|9.58.4|9.59.9|9.60.8|9.61.9|9.62.9|9.63.12|9.64.4|9.65.6|9.66.9|9.67.5|9.68.6|9.69.5|9.70.10|9.71.8|9.72.8|9.73.5|9.74.3\")\n    let sb_sfx_correct = feedBank(\"6.1.5|6.2.8|6.3.6|6.4.7|6.5.6|6.6.14|6.7.7|6.8.8|6.9.12|6.10.7|6.11.9|6.12.7|6.13.10|6.14.8|6.15.8|6.16.4|6.17.7|6.18.4|6.19.2|6.20.10|6.21.7|6.22.7|6.23.6|6.24.4|6.25.7|6.26.12|6.27.4|6.28.6|6.29.6|6.30.6|6.31.4|6.32.5|6.33.3|6.34.6|6.35.6|6.36.6|6.37.6|6.38.4|6.39.8|6.40.6|6.41.3|6.42.3|6.43.7|6.44.8|6.45.6|6.46.2|6.47.5|6.48.7|6.49.8|6.50.7|6.51.6|6.52.7|6.53.6|6.54.8|6.55.5|6.56.5|6.57.7|6.58.6|6.59.8|6.60.5|6.61.6|6.62.8|6.63.3|6.64.3|6.65.6|6.66.3|6.67.6|6.68.2|6.69.3|6.70.3|6.71.2|6.72.3|6.73.6|6.74.7|6.75.5|6.76.3|6.77.5|6.78.3|6.79.2|6.80.3|6.81.3|6.82.1|6.83.1|6.84.1|6.85.1|6.86.1|6.87.1|6.88.3|6.89.1|6.90.1|6.91.4|6.92.4\")\n    let sb_sfx_incorrect = feedBank(\"7.1.6|7.2.5|7.3.3|7.4.5|7.5.7|7.6.6|7.7.4|7.8.1|7.9.3|7.10.4|7.11.3|7.12.3|7.13.6|7.14.3|7.15.1|7.16.1|7.17.1|7.18.1|7.19.5|7.20.4|7.21.3|7.22.7\")\n    let sb_sfx_beep = feedBank(\"8.1.1|8.2.2|8.3.1\")\n    let sb_sfx_smash = feedBank(\"8.4.1|8.5.1|8.6.1|8.7.3\")\n    let sb_sfx_falling = feedBank(\"8.8.6\")\n    let sb_sfx_boom = feedBank(\"8.9.1|8.10.2|8.11.3|8.12.2\")\n    let sb_sfx_cannon = feedBank(\"8.13.2|8.14.1|8.15.1|8.16.2|8.17.2\")\n    let sb_sfx_fire = feedBank(\"8.18.2|8.19.2|8.20.5|8.21.2\")\n    let sb_sfx_ghost = feedBank(\"8.22.5|8.23.4|8.24.5|8.25.5\")\n    let sb_sfx_hit = feedBank(\"8.26.1|8.27.1|8.28.1|8.29.1|8.30.1\")\n    let sb_sfx_slash = feedBank(\"8.31.1|8.32.1|8.33.1|8.34.1|8.35.1|8.36.1|8.37.1|8.38.1|8.39.1|8.40.1|8.41.1|8.42.2\")\n    let sb_sfx_zap = feedBank(\"8.43.1|8.44.1|8.45.2|8.46.1|8.47.2|8.48.1\")\n    let sb_sfx_splash = feedBank(\"8.49.2|8.50.2|8.51.1|8.52.1|8.53.2|8.54.1|8.55.2|8.56.1|8.57.2\")\n    let sb_sfx_voice = feedBank(\"10.1.4|10.2.6|10.3.4|10.4.4|10.5.6|10.6.4|10.7.11|10.8.6|10.9.4|10.10.1\")\n    let sb_magician_left_easy = feedBank(\"11.1.3|11.2.6|11.3.7|11.4.6|11.5.6|11.6.7|11.7.6|11.8.6|11.9.6|11.10.7|11.11.6|11.12.6|11.13.7|11.14.6|11.15.6|11.16.6|11.17.6|11.18.6|11.19.6|11.20.6|11.21.6|11.22.7|11.23.6|11.24.6|11.25.6|11.26.6|11.27.7|11.28.7|11.29.7|11.30.6|11.31.6|11.32.8|11.33.7|11.34.6|11.35.7|11.36.5|11.37.6|11.38.8|11.39.6|11.40.6|11.41.6|11.42.6|11.43.6|11.44.7|11.45.6|11.46.7|11.47.7|11.48.8|11.49.6|11.50.7|11.51.6|11.52.6|11.53.7|11.54.8|11.55.7|11.56.6|11.57.7|11.58.6|11.59.6|11.60.6|11.61.6\")\n    let sb_magician_left_medium = feedBank(\"11.62.7|11.63.6|11.64.6|11.65.8|11.66.7|11.67.8|11.68.8|11.69.8|11.70.7|11.71.7|11.72.6|11.73.6|11.74.6|11.75.6|11.76.6|11.77.7|11.78.6|11.79.7|11.80.6|11.81.6|11.82.6|11.83.7|11.84.6|11.85.6|11.86.6|11.87.7|11.88.6|11.89.6|11.90.7|11.91.6|11.92.6|11.93.6|11.94.6|11.95.6|11.96.7|11.97.6|11.98.6|11.99.7|11.100.6|11.101.6|11.102.6|11.103.7|11.104.6|11.105.8|11.106.6|11.107.6|11.108.6|11.109.7|11.110.6|11.111.7|11.112.7|11.113.6|11.114.6|11.115.7|11.116.6|11.117.7|11.118.7|11.119.6|11.120.6|11.121.6|11.122.7|11.123.7|11.124.6|11.125.6|11.126.6|11.127.8|11.128.7|11.129.6|11.130.8|11.131.7|11.132.6|11.133.7|11.134.6|11.135.6|11.136.7|11.137.7\")\n    let sb_magician_left_hard = feedBank(\"11.219.7|11.220.6|11.221.6|11.222.6|11.223.6|11.224.6|11.225.7|11.226.7|11.227.6|11.228.6|11.229.6|11.230.8|11.231.7|11.232.7|11.233.6|11.234.6|11.235.6|11.236.8|11.237.7|11.238.7|11.239.6|11.240.6|11.241.8|11.242.7|11.243.7|11.244.6|11.245.6|11.246.7|11.247.7|11.248.7|11.249.7|11.250.6|11.251.6|11.252.6|11.253.6|11.254.6|11.255.6|11.256.6|11.257.6|11.258.7|11.259.7|11.260.7|11.261.6|11.262.6|11.263.6|11.264.6|11.265.6|11.266.6|11.267.7|11.268.6|11.269.6|11.270.6|11.271.6|11.272.6|11.273.6|11.274.6|11.275.7|11.276.6|11.277.6|11.278.7|11.279.7|11.280.7|11.281.6|11.282.6|11.283.7|11.284.9|11.285.7|11.286.6|11.287.6|11.288.6|11.289.7|11.290.7|11.291.6|11.292.6|11.293.7|11.294.7|11.295.6|11.296.7|11.297.6|11.298.6|11.299.6|11.300.6|11.301.6|11.302.6|11.303.7|11.304.6|11.305.6|11.306.7|11.307.6|\")\n    let sb_magician_right_easy = feedBank(\"11.159.6|11.160.6|11.161.7|11.162.6|11.163.7|11.164.7|11.165.6|11.166.6|11.167.7|11.168.7|11.169.6|11.170.8|11.171.7|11.172.7|11.173.6|11.174.6|11.175.6|11.176.6|11.177.7|11.178.6|11.179.6|11.180.6|11.181.6|11.182.7|11.183.6|11.184.6|11.185.6|11.186.6|11.187.8|11.188.7|11.189.6|11.190.6|11.191.6|11.192.6|11.193.6|11.194.6|11.195.5|11.196.6|11.197.6|11.198.6|11.199.7|11.200.6|11.201.6|11.202.6|11.203.6|11.204.6|11.205.6|11.206.6|11.207.6|11.208.6|11.209.6|11.210.7|11.211.7|11.212.7|11.213.6|11.214.7|11.215.7|11.216.6|11.217.7|11.218.6\")\n    let sb_magician_right_medium = feedBank(\"11.219.7|11.220.6|11.221.6|11.222.6|11.223.6|11.224.6|11.225.7|11.226.7|11.227.6|11.228.6|11.229.6|11.230.8|11.231.7|11.232.7|11.233.6|11.234.6|11.235.6|11.236.8|11.237.7|11.238.7|11.239.6|11.240.6|11.241.8|11.242.7|11.243.7|11.244.6|11.245.6|11.246.7|11.247.7|11.248.7|11.249.7|11.250.6|11.251.6|11.252.6|11.253.6|11.254.6|11.255.6|11.256.6|11.257.6|11.258.7|11.259.7|11.260.7|11.261.6|11.262.6|11.263.6|11.264.6|11.265.6|11.266.6|11.267.7|11.268.6|11.269.6|11.270.6|11.271.6|11.272.6|11.273.6|11.274.6|11.275.7|11.276.6|11.277.6|11.278.7|11.279.7|11.280.7|11.281.6|11.282.6|11.283.7|11.284.9|11.285.7|11.286.6|11.287.6\")\n    let sb_magician_right_hard = feedBank(\"11.288.6|11.289.7|11.290.7|11.291.6|11.292.6|11.293.7|11.294.7|11.295.6|11.296.7|11.297.6|11.298.6|11.299.6|11.300.6|11.301.6|11.302.6|11.303.7|11.304.6|11.305.6|11.306.7|11.307.6|11.308.7|11.309.6|11.310.6|11.311.6|11.312.7|11.313.7|11.314.6|11.315.7\")\n    let sb_mario_name = feedBank(\"12.1.2|12.2.1|12.4.2|12.5.3\")\n    let sb_mario_intro = feedBank(\"12.3.4|12.6.2|12.7.212.112.1|12.113.1|\")\n    let sb_mario_ready = feedBank(\"12.8.1|12.9.2|12.10.2|12.11.1|12.12.1|12.13.2|12.14.2|12.15.2|12.16.2|12.17.2|12.18.1\")\n    let sb_mario_yay = feedBank(\"12.19.1|12.20.1|12.21.1|12.22.1|12.23.1|12.24.1|12.25.1|12.26.1|12.27.1|12.28.1|12.29.1|12.30.1|12.31.1|12.32.1|12.33.1|12.34.1|12.35.1|12.36.1|12.37.1|12.38.1|12.39.1|12.40.1|12.41.1|12.42.1|12.43.1|12.44.1|12.45.1|12.46.1|12.47.1|12.48.1|12.49.1|12.50.1|12.51.2|12.52.2|12.53.2|12.54.2|12.55.2|12.56.2|12.57.2|12.58.2|12.59.2|12.60.2|12.61.2|12.62.2\")\n    let sb_mario_success = feedBank(\"12.63.1|12.64.2|12.65.2|12.66.2|12.67.2|12.68.3|12.69.3|12.70.3|12.71.3|12.72.3\")\n    let sb_mario_won = feedBank(\"12.73.2|12.74.2|12.75.3|12.76.3|12.77.3\")\n    let sb_mario_ouch = feedBank(\"12.78.1|12.79.1|12.80.1|12.81.1|12.82.1|12.83.1|12.84.1|12.85.1|12.86.1|12.87.1|12.88.1|12.89.1|12.90.1|12.91.1|12.92.1|12.93.1|12.94.1|12.95.1\")\n    let sb_mario_nay = feedBank(\"12.96.1|12.97.1|12.98.1|12.99.1|12.100.1|12.101.1|12.102.2|12.103.1|12.104.1|12.105.1|12.106.1|12.107.1|12.108.1|12.109.1|12.110.2|12.111.2\")\n    let sb_mario_failure = feedBank(\"12.114.2|12.115.2|12.116.2|12.117.1\")\n    let sb_mario_lost = feedBank(\"12.118.3|12.119.3|12.120.4|12.121.1\")\n    let sb_mario_hurry = feedBank(\"12.122.44\")\n    \n    let playlist_tutorial = makePlaylist(sb_music_tutorial)\n    let playlist_awaiting = makePlaylist(sb_music_awaiting)\n    let playlist_level = makePlaylist(sb_music_level)\n    let playlist_won = makePlaylist(sb_music_won)\n    let playlist_lost = makePlaylist(sb_music_lost)\n    let playlist_correct = makePlaylist(sb_sfx_correct)\n    let playlist_incorrect = makePlaylist(sb_sfx_incorrect)\n    let playlist_intro = makePlaylist(sb_music_intro)\n    let playlist_boom = makePlaylist(sb_sfx_boom)\n    let playlist_smash = makePlaylist(sb_sfx_smash)\n    let playlist_falling = makePlaylist(sb_sfx_falling)\n    let playlist_cannon = makePlaylist(sb_sfx_cannon)\n    let playlist_fire = makePlaylist(sb_sfx_fire)\n    let playlist_ghost = makePlaylist(sb_sfx_ghost)\n    let playlist_hit = makePlaylist(sb_sfx_hit)\n    let playlist_slash = makePlaylist(sb_sfx_slash)\n    let playlist_zap = makePlaylist(sb_sfx_zap)\n    let playlist_splash = makePlaylist(sb_sfx_splash)\n    let playlist_magician_left_easy = makePlaylist(sb_magician_left_easy)\n    let playlist_magician_left_medium = makePlaylist(sb_magician_left_medium)\n    let playlist_magician_left_hard = makePlaylist(sb_magician_left_hard)\n    let playlist_magician_right_easy = makePlaylist(sb_magician_right_easy)\n    let playlist_magician_right_medium = makePlaylist(sb_magician_right_medium)\n    let playlist_magician_right_hard = makePlaylist(sb_magician_right_hard)\n    let playlist_mario_name = makePlaylist(sb_mario_name)\n    let playlist_mario_intro = makePlaylist(sb_mario_intro)\n    let playlist_mario_ready = makePlaylist(sb_mario_ready)\n    let playlist_mario_yay = makePlaylist(sb_mario_yay)\n    let playlist_mario_success = makePlaylist(sb_mario_success)\n    let playlist_mario_won = makePlaylist(sb_mario_won)\n    let playlist_mario_ouch = makePlaylist(sb_mario_ouch)\n    let playlist_mario_nay = makePlaylist(sb_mario_nay)\n    let playlist_mario_failure = makePlaylist(sb_mario_failure)\n    let playlist_mario_lost = makePlaylist(sb_mario_lost)\n    let playlist_mario_hurry = makePlaylist(sb_mario_hurry)\n    let playtimeMusic = 0\n    let playtimePlayer = 0\n    let playtimeSfxVoice = 0\n\n    function takeRotate(PlaylistIn: number[]) {\n        let returnTrack = PlaylistIn.shift()\n        PlaylistIn.push(returnTrack)\n        return returnTrack\n    }\n    function feedBank(BankString: string) {\n        let returnBank: number[][] = []\n        let BankSplit = BankString.split(\"|\")\n        for (let soundString of BankSplit) {\n            returnBank.push([parseFloat(soundString.split(\".\")[0]), parseFloat(soundString.split(\".\")[1]), parseFloat(soundString.split(\".\")[2])])\n        }\n        return returnBank\n    }\n    function makePlaylist(SoundBank: any[]) {\n        let returnList: number[] = []\n        let orderedList: number[] = []\n        for (let soundNo = 0; soundNo <= SoundBank.length - 1; soundNo++) {\n            orderedList.push(soundNo)\n        }\n        while (orderedList.length > 0) {\n            let randTrack = randint(0, orderedList.length - 1)\n            returnList.push(orderedList.removeAt(randTrack))\n        }\n        return returnList\n    }\n    function bankPlay(mp3bit:mp3type, SoundBank: number[][], trackIndex: number) {\n        let theSong = SoundBank[trackIndex]\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimeMusic = theSong[2]\n        } else if (mp3bit == mp3type.player) {\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimePlayer = theSong[2]\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimeSfxVoice = theSong[2]\n        }\n        dataArr[3] = 15\n        dataArr[5] = theSong[0]\n        dataArr[6] = theSong[1]\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=NL_MP3_PlaytimeMusic\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of music\"\n    export function mp3durationMusic(): number{\n        return playtimeMusic\n    }\n\n    //% blockId=NL_MP3_PlaytimePlayer\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of player sound\"\n    export function mp3durationPlayer(): number {\n        return playtimePlayer\n    }\n\n    //% blockId=NL_MP3_PlaytimeSFX\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of sfx/voice\"\n    export function mp3durationSfxVoice(): number {\n        return playtimeSfxVoice\n    }\n\n\n\n    //% blockId=NL_MP3_MusicPlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %genre music\"\n    export function mp3musicPlay(genre: musicGenre): void {\n        if (genre == musicGenre.tutorial){\n            bankPlay(mp3type.music, sb_music_tutorial, takeRotate(playlist_tutorial))\n        } else if (genre == musicGenre.awaiting) {\n            bankPlay(mp3type.music, sb_music_awaiting, takeRotate(playlist_awaiting))\n        } else if (genre == musicGenre.intro){\n            bankPlay(mp3type.music, sb_music_intro, takeRotate(playlist_intro))\n        } else if (genre == musicGenre.level) {\n            bankPlay(mp3type.music, sb_music_level, takeRotate(playlist_level))\n        } else if (genre == musicGenre.won) {\n            bankPlay(mp3type.music, sb_music_won, takeRotate(playlist_won))\n        } else if (genre == musicGenre.lost) {\n            bankPlay(mp3type.music, sb_music_lost, takeRotate(playlist_lost))\n        }\n    }\n\n    //% blockId=NL_MP3_PlayerSay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %saying as player\"\n    export function mp3sayPlay(saying: playerSaying): void {\n        if(saying == playerSaying.ready){\n            bankPlay(mp3type.player, sb_mario_ready, takeRotate(playlist_mario_ready))\n        }else if (saying == playerSaying.yay){\n            bankPlay(mp3type.player, sb_mario_yay, takeRotate(playlist_mario_yay))\n        } else if (saying == playerSaying.intro) {\n            bankPlay(mp3type.player, sb_mario_intro, takeRotate(playlist_mario_intro))\n        } else if (saying == playerSaying.nay) {\n            bankPlay(mp3type.player, sb_mario_nay, takeRotate(playlist_mario_nay))\n        } else if (saying == playerSaying.ouch) {\n            bankPlay(mp3type.player, sb_mario_ouch, takeRotate(playlist_mario_ouch))\n        } else if (saying == playerSaying.success) {\n            bankPlay(mp3type.player, sb_mario_success, takeRotate(playlist_mario_success))\n        } else if (saying == playerSaying.failure) {\n            bankPlay(mp3type.player, sb_mario_failure, takeRotate(playlist_mario_failure))\n        } else if (saying == playerSaying.won) {\n            bankPlay(mp3type.player, sb_mario_won, takeRotate(playlist_mario_won))\n        } else if (saying == playerSaying.lost) {\n            bankPlay(mp3type.player, sb_mario_lost, takeRotate(playlist_mario_lost))\n        } else if (saying == playerSaying.hurry) {\n            bankPlay(mp3type.player, sb_mario_hurry, takeRotate(playlist_mario_hurry))\n        }\n    }\n\n    //% blockId=NL_MP3_VoicePlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %voice as voice\"\n    export function mp3voicePlay(voice: voiceSaying): void {\n        if (voice == voiceSaying.name) {\n\n        } else if (voice == voiceSaying.begin) {\n\n        } else if (voice == voiceSaying.retry) {\n\n        } else if (voice == voiceSaying.next) {\n\n        } else if (voice == voiceSaying.complete) {\n\n        } else if (voice == voiceSaying.gameover) {\n\n        } else if (voice == voiceSaying.welcome) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 0)\n        } else if (voice == voiceSaying.intro) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 1)\n        } else if (voice == voiceSaying.howto1) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 2)\n        } else if (voice == voiceSaying.howto2) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 3)\n        } else if (voice == voiceSaying.howto3) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 4)\n        } else if (voice == voiceSaying.howto4) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 5)\n        } else if (voice == voiceSaying.howto5) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 6)\n        } else if (voice == voiceSaying.howto6) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 7)\n        } else if (voice == voiceSaying.howto7) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 8)\n        } else if (voice == voiceSaying.howto8) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 9)\n        } else if (voice == voiceSaying.howto9) {\n\n        }\n    }\n\n    //% blockId=NL_MP3_MagicianSay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Magician says on the %side difficulty %difficulty\"\n    export function mp3magician(side: magicianSaysSide, difficulty: magicianDifficulty): void {\n        if (side == magicianSaysSide.left) {\n            if (difficulty == magicianDifficulty.easy) {\n\n            } else if (difficulty = magicianDifficulty.medium) {\n\n            } else if (difficulty = magicianDifficulty.hard) {\n\n            }\n        } else if (side = magicianSaysSide.right) {\n            if (difficulty == magicianDifficulty.easy) {\n\n            } else if (difficulty = magicianDifficulty.medium) {\n\n            } else if (difficulty = magicianDifficulty.hard) {\n\n            }\n        } \n    }\n\n    //% blockId=NL_MP3_SfxPlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %sfx sound effect\"\n    export function mp3sfxPlay(sfx: sfxType): void {\n        if(sfx == sfxType.correct){\n            bankPlay(mp3type.sfxvoice, sb_sfx_correct, takeRotate(playlist_correct))\n        }else if (sfx == sfxType.incorrect){\n            bankPlay(mp3type.sfxvoice, sb_sfx_incorrect, takeRotate(playlist_incorrect))\n        }else if (sfx == sfxType.ghost){\n            bankPlay(mp3type.sfxvoice, sb_sfx_ghost, takeRotate(playlist_ghost))\n        }else if (sfx == sfxType.fire){\n            bankPlay(mp3type.sfxvoice, sb_sfx_fire, takeRotate(playlist_fire))\n        }else if (sfx == sfxType.explosion){\n            bankPlay(mp3type.sfxvoice, sb_sfx_boom, takeRotate(playlist_boom))\n        }else if (sfx == sfxType.splash){\n            bankPlay(mp3type.sfxvoice, sb_sfx_splash, takeRotate(playlist_splash))\n        } else if (sfx == sfxType.spark) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_zap, takeRotate(playlist_zap))\n        } else if (sfx == sfxType.slash) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_slash, takeRotate(playlist_slash))\n        }\n    }\n/// END SOUND BANK ///\n\n/// BEGIN MOTOR & RELAY ///\n    const kong_address = 0x10\n    export enum MotorList { M1=1, M2=2 }\n    export enum motors{ redrack=16, shark=4, ghost=5, cannon=8, oarrack=7, shell=6, door=3, dragon=9, wheel=1, fan=2 }\n    export enum motorState { min, max, mid, off }\n    export enum fogLevels { none = 0, light = 1, medium = 2, heavy = 3 }\n    export enum sockState { dancing = 1, still = 0 }\n    let motor_wheel_max = 12; let motor_wheel_min = 0\n    let servo_redrack_max = 150; let servo_redrack_min = 100\n    let servo_cannon_min = 135; let servo_cannon_max = 65\n    let servo_shark_min = 20; let servo_shark_max = 85\n    let servo_oarrack_min = 60; let servo_oarrack_max = 110\n    let servo_ghost_min = 110; let servo_ghost_max = 40\n    let servo_shell_min = 170; let servo_shell_max = 100\n    let servo_door_min = 50; let servo_door_max = 140; let servo_door_mid = 100\n    let motor_fan_min = 0; let motor_fan_mid = 50; let motor_fan_max = 100\n    let servo_dragon_min = 90; let servo_dragon_max = 79\n\n    export function servoSet(servo: motors, angle: number): void {\n        let buf = pins.createBuffer(4);\n        buf[0] = servo;\n        buf[1] = angle;\n        buf[2] = 0;\n        buf[3] = 0;\n        pins.i2cWriteBuffer(kong_address, buf);\n    }\n\n    export function motorSpeed(motor: MotorList, speed: number): void {\n        let buf = pins.createBuffer(4);\n        buf[0] = motor\n        buf[1] = 1;\n        if (speed < 0) {\n            buf[1] = 2;\n            speed = speed * -1\n        }\n        buf[2] = speed;\n        buf[3] = 0;\n        pins.i2cWriteBuffer(kong_address, buf);\n    }\n\n    //% blockId=NL_MOTOR_Set \n    //% block=\"Set %motor to %state\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function motorSet(motor:motors, state:motorState):void{\n        if (motor == motors.redrack){\n            if (state == motorState.min){ servoSet(motor, servo_redrack_min) } \n            else if (state == motorState.max){ servoSet(motor, servo_redrack_max) }\n        } if (motor == motors.shark) {\n            if (state == motorState.min) { servoSet(motor, servo_shark_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_shark_max) }\n        } if (motor == motors.ghost) {\n            if (state == motorState.min) { servoSet(motor, servo_ghost_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_ghost_max) }\n        } if (motor == motors.cannon) {\n            if (state == motorState.min) { servoSet(motor, servo_cannon_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_cannon_max) }\n        } if (motor == motors.oarrack) {\n            if (state == motorState.min) { servoSet(motor, servo_oarrack_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_oarrack_max) }\n        } if (motor == motors.shell) {\n            if (state == motorState.min) { servoSet(motor, servo_shell_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_shell_max) }\n        } if (motor == motors.door) {\n            if (state == motorState.min) { servoSet(motor, servo_door_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_door_max) }\n            else if (state == motorState.mid) { servoSet(motor, servo_door_mid) }\n        } if (motor == motors.dragon) {\n            if (state == motorState.min) { servoSet(motor, servo_dragon_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_dragon_max) }\n        } if (motor == motors.wheel) {\n            if (state == motorState.min) { motorSpeed(MotorList.M1, motor_wheel_min) }\n            else if (state == motorState.max) { motorSpeed(MotorList.M1, motor_wheel_max) }\n            else if (state == motorState.off) { motorSpeed(MotorList.M1, 0) }\n        } if (motor == motors.fan) {\n            if (state == motorState.min) { motorSpeed(MotorList.M2, motor_fan_min) }\n            else if (state == motorState.mid) { motorSpeed(MotorList.M2, motor_fan_mid) }\n            else if (state == motorState.max) { motorSpeed(MotorList.M2, motor_fan_max) }\n            else if (state == motorState.off) { motorSpeed(MotorList.M2, 0) }\n        }\n    }\n\n    //% blockId=NL_RELAY_FogSet \n    //% block=\"set fog level to %level\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function setFog(fog:fogLevels):void{\n        if (fog == fogLevels.none){\n            pins.digitalWritePin(DigitalPin.P2, 1)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 1)\n        } else if (fog == fogLevels.light){\n            pins.digitalWritePin(DigitalPin.P2, 1)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        } else if (fog == fogLevels.medium) {\n            pins.digitalWritePin(DigitalPin.P2, 0)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        } else if (fog == fogLevels.heavy) {\n            pins.digitalWritePin(DigitalPin.P2, 0)\n            pins.digitalWritePin(DigitalPin.P8, 0)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        }\n    }\n\n    //% blockId=NL_RELAY_SockSet\n    //% block=\"set dancing sock to %sockState\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function setSock(state: sockState): void {\n        if(state==sockState.dancing){ pins.digitalWritePin(DigitalPin.P12, 0) }\n        else{ pins.digitalWritePin(DigitalPin.P12, 1) }\n    }\n\n/// END MOTOR & RELAY ///\n\n/// BEGIN OLED\n\n    let d1 = [0, 0, 0, 20, 36, 35, 54, 0, 28, 65, 8, 8, 160, 8, 96, 32, 62, 0, 98, 34, 24, 39, 60, 1, 54, 6, 0, 0, 8, 20, 65, 2, 50, 126, 127, 62, 127, 127, 127, 62, 127, 65, 32, 127, 127, 127, 127, 62, 127, 62, 127, 38, 1, 63, 31, 63, 99, 3, 97, 127, 2, 65, 4, 128, 1, 32, 127, 56, 56, 56, 8, 24, 127, 0, 128, 127, 65, 124, 124, 56, 252, 24, 0, 72, 4, 60, 28, 60, 68, 28, 68, 8, 0, 65, 2]\n    let d2 = [0, 95, 7, 127, 42, 19, 73, 5, 34, 34, 42, 8, 96, 8, 96, 16, 81, 66, 81, 65, 20, 69, 74, 113, 73, 73, 54, 172, 20, 20, 34, 1, 73, 9, 73, 65, 65, 73, 9, 65, 8, 127, 64, 8, 64, 2, 4, 65, 9, 65, 9, 73, 1, 64, 32, 64, 20, 4, 81, 65, 4, 65, 2, 128, 2, 84, 72, 68, 68, 84, 126, 164, 8, 125, 132, 16, 127, 4, 8, 68, 36, 36, 124, 84, 127, 64, 32, 64, 40, 160, 100, 54, 127, 54, 1]\n    let d3 = [0, 0, 0, 20, 127, 8, 85, 3, 65, 28, 28, 62, 0, 8, 0, 8, 73, 127, 73, 73, 18, 69, 73, 9, 73, 73, 54, 108, 34, 20, 20, 81, 121, 9, 73, 65, 65, 73, 9, 65, 8, 65, 65, 20, 64, 12, 8, 65, 9, 81, 25, 73, 127, 64, 64, 56, 8, 120, 73, 65, 8, 127, 1, 128, 4, 84, 68, 68, 68, 84, 9, 164, 4, 0, 125, 40, 64, 24, 4, 68, 36, 36, 8, 84, 68, 64, 64, 48, 16, 160, 84, 65, 0, 8, 1]\n    let d4 = [0, 0, 7, 127, 42, 100, 34, 0, 0, 0, 42, 8, 0, 8, 0, 4, 69, 64, 73, 73, 127, 69, 73, 5, 73, 41, 0, 0, 65, 20, 8, 9, 65, 9, 73, 65, 34, 73, 9, 81, 8, 0, 63, 34, 64, 2, 16, 65, 9, 33, 41, 73, 1, 64, 32, 64, 20, 4, 69, 0, 16, 0, 2, 128, 0, 84, 68, 40, 72, 84, 2, 164, 4, 0, 0, 68, 0, 4, 124, 56, 24, 252, 4, 36, 0, 124, 32, 64, 40, 124, 76, 0, 0, 0, 2]\n    let d5 = [0, 0, 0, 20, 18, 98, 80, 0, 0, 0, 8, 8, 0, 8, 0, 2, 62, 0, 70, 54, 16, 57, 48, 3, 54, 30, 0, 0, 0, 20, 0, 6, 62, 126, 54, 34, 28, 65, 1, 114, 127, 0, 1, 65, 64, 127, 127, 62, 6, 94, 70, 50, 1, 63, 31, 63, 99, 3, 67, 0, 32, 0, 4, 128, 0, 120, 56, 0, 127, 24, 0, 124, 120, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 28, 60, 68, 0, 68, 0, 0, 0, 1]\n\n    let display = [\" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\")]\n    let desired = [\" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\")]\n\n    //% blockId=NL_OLED_Update3\n    //% block=\"oled update from buffer\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function changeThree(): void{\n        let updated: string[][] = []\n        let count = 0\n        for (let row=0; row<8; row++){\n            for(let col=0; col<16; col++){\n                let refChar = desired[row][col]\n                if (refChar != display[row][col]){\n                    writeChar(refChar,row,col)\n                    display[row][col] = refChar\n                    count++\n                    if (count >= 3){\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    //% blockId=NL_OLED_PrintLine\n    //% block=\"print %text to oled buffer line %line\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function printLine(text:any, line:number): void{\n        let thisText = text + \"\"\n        for (let i = 0; i < 16; i++){\n            if (i < thisText.length){\n                desired[line][i]=thisText.charAt(i)\n            } else{\n                desired[line][i]=\" \"\n            }\n        }\n    }\n\n    function oledcmd(c: number) {\n        pins.i2cWriteNumber(0x3c, c, NumberFormat.UInt16BE);\n    }\n\n    function setText(row: number, column: number) {\n        oledcmd(0xB0 + row);            //set page address\n        oledcmd(0x00 + (8 * column & 0x0F));  //set column lower address\n        oledcmd(0x10 + ((8 * column >> 4) & 0x0F));   //set column higher address\n    }\n\n    //% blockId=NL_OLED_Init \n    //% block=\"initiate the oled screen\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function oledinit(): void {\n        oledcmd(0xAE);  // Set display OFF\n        oledcmd(0xD5);  // Set Display Clock Divide Ratio / OSC Frequency 0xD4\n        oledcmd(0x80);  // Display Clock Divide Ratio / OSC Frequency \n        oledcmd(0xA8);  // Set Multiplex Ratio\n        oledcmd(0x3F);  // Multiplex Ratio for 128x64 (64-1)\n        oledcmd(0xD3);  // Set Display Offset\n        oledcmd(0x00);  // Display Offset\n        oledcmd(0x40);  // Set Display Start Line\n        oledcmd(0x8D);  // Set Charge Pump\n        oledcmd(0x14);  // Charge Pump (0x10 External, 0x14 Internal DC/DC)\n        oledcmd(0xA1);  // Set Segment Re-Map\n        oledcmd(0xC8);  // Set Com Output Scan Direction\n        oledcmd(0xDA);  // Set COM Hardware Configuration\n        oledcmd(0x12);  // COM Hardware Configuration\n        oledcmd(0x81);  // Set Contrast\n        oledcmd(0xCF);  // Contrast\n        oledcmd(0xD9);  // Set Pre-Charge Period\n        oledcmd(0xF1);  // Set Pre-Charge Period (0x22 External, 0xF1 Internal)\n        oledcmd(0xDB);  // Set VCOMH Deselect Level\n        oledcmd(0x40);  // VCOMH Deselect Level\n        oledcmd(0xA4);  // Set all pixels OFF\n        oledcmd(0xA6);  // Set display not inverted\n        oledcmd(0xAF);  // Set display On\n        for (let j = 0; j < 8; j++) {\n            setText(j, 0);\n            {\n                for (let i = 0; i < 16; i++)  //clear all columns\n                {\n                    writeChar(\" \",j,i)\n                }\n            }\n        }\n    }\n\n    function writeChar(char: string, row: number, column: number) {\n        setText(row, column)\n        let i = char.charCodeAt(0) - 32\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d1[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d2[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d3[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d4[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d5[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n    }\n\n/// END OLED\n\n\n/// BEGIN DIGITS\n\n    let _SEGMENTS = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71];\n\n    //% blockId=nl_digits_create block=\"4-Digit cPin %cPin dPin %dPin\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function tm1637Create(cPin: DigitalPin, dPin: DigitalPin): TM1637LEDs {\n        let display = new TM1637LEDs();\n        display.clk = cPin\n        display.dio = dPin\n        display.brightness = 7;\n        display.init();\n        return display;\n    }\n    export class TM1637LEDs {\n        buf: Buffer;\n        clk: DigitalPin;\n        dio: DigitalPin;\n        _ON: number;\n        brightness: number;\n        init(): void {\n            pins.digitalWritePin(this.clk, 0);\n            pins.digitalWritePin(this.dio, 0);\n            this._ON = 8;\n            this.buf = pins.createBuffer(4);\n            this.clear();\n        }\n        _start() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _stop() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.dio, 1);\n        }\n        _write_data_cmd() {\n            this._start();\n            this._write_byte(0x40);\n            this._stop();\n        }\n        _write_dsp_ctrl() {\n            this._start();\n            this._write_byte(0x80 | this._ON | this.brightness);\n            this._stop();\n        }\n        _write_byte(b: number) {\n            for (let i = 0; i < 8; i++) {\n                pins.digitalWritePin(this.dio, (b >> i) & 1);\n                pins.digitalWritePin(this.clk, 1);\n                pins.digitalWritePin(this.clk, 0);\n            }\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _intensity(val: number = 7) {\n            this._ON = 8;\n            this.brightness = val - 1;\n            this._write_data_cmd();\n            this._write_dsp_ctrl();\n        }\n        _dat(bit: number, dat: number) {\n            this._write_data_cmd();\n            this._start();\n            this._write_byte(0xC0 | (bit % 4))\n            this._write_byte(dat);\n            this._stop();\n            this._write_dsp_ctrl();\n        }\n        \n        //% blockId=nl_digits_digit block=\"%display|show single number|%num|at digit|%bit\"\n        //% subcategory=\"Display\" group=\"Display\"\n        //% bit.defl=1 bit.min=0 bit.max=9\n        showbit(num: number = 5, bit: number = 0) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            this.buf[bit % 4] = _SEGMENTS[num % 16]\n            this._dat(bit, _SEGMENTS[num % 16])\n        }\n\n        //% blockId=nl_digits_number block=\"%display|show number|%num\"\n        //% subcategory=\"Display\" group=\"Display\"\n        showNumber(num: number) {\n            if (num < 0) {\n                num = -num\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n                this._dat(0, 0x40) // '-'\n                // this._dat(0, 0) // blank\n            }\n            else {\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n            }\n        }\n\n        //% blockId=\"nl_digits_clear\" block=\"clear display %display\"\n        //% subcategory=\"Display\" group=\"Display\"\n        clear() {\n            for (let i = 0; i < 4; i++) {\n                this._dat(i, 0)\n                this.buf[i] = 0\n            }\n        }\n    }\n\n/// END DIGITS\n\n}\n\n\n","pxt.json":"{\n    \"name\": \"NotLegosMaster\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"displaySendBuffer.asm\",\n        \"planetxbasic.ts\",\n        \"notlegos.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"7.0.42\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n","test.ts":""}},{"timestamp":1728849781448,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"NFHB?|vd].P(}_Y-C82U\">btToken</variable><variable id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</variable><variable id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</variable><variable id=\"Y|e4lM)*:N0Ca^S5-64i\">lastLaserR</variable><variable id=\"Uk9;F|_3qS]2aZyBH#]%\">lastLaserC</variable><variable id=\"}GOl3M4q[Bn4R~R!?]at\">lastLaserL</variable><variable id=\"JQUQT|8QeX)zSvZ?K@,i\">lastSonarRead</variable><variable id=\"=X]tI5AG]3|WfpT`9Jsr\">lastHue</variable><variable id=\"Bc7kXprAfc3]W%ILxbVV\">lastGesture</variable><variable id=\"#oq[[iBLthN][|]:S!n}\">lastHunt</variable><variable id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</variable><variable id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</variable><variable id=\"8GDUfe;)i@P.Do~T6|{[\">theName</variable><variable id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</variable><variable id=\"=9JavC*{GElF}/FS78a@\">iBegan</variable><variable id=\"e.[{0v-j0Tp(kJ9$~N@:\">isReady</variable></variables><block type=\"function_definition\" x=\"4217\" y=\"-292\"><mutation name=\"buttonPress\" functionid=\"+$9AXp*X:[tcODdtL9m)\"><arg name=\"button\" id=\"mfdvbnfdsij7xy9ejk0nd\" type=\"string\"></arg></mutation><field name=\"function_name\">buttonPress</field><value name=\"mfdvbnfdsij7xy9ejk0nd\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">button</field></block></value><statement name=\"STACK\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">button: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">button</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></statement></block><block type=\"every_interval\" x=\"681\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">2000</field></shadow></value><statement name=\"HANDLER\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">5</field></shadow></value></block></statement></block><block type=\"every_interval\" x=\"1327\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"every_interval\" x=\"1542\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">40</field></shadow></value><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"=9JavC*{GElF}/FS78a@\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time\"></block></value><next><block type=\"NL_PIXEL_CastleSayTick\"><next><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"e.[{0v-j0Tp(kJ9$~N@:\">isReady</field></block></value><next><block type=\"function_call\"><mutation name=\"ready_oled\" functionid=\"LSuKu]l*}Y2[|u.h3PJ%\"></mutation><next><block type=\"NL_OLED_Update3\"><next><block type=\"variables_set\"><field name=\"VAR\" id=\"R#Q/)[5s9kI]$=XpsJ8V\">iTook</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time\"></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"=9JavC*{GElF}/FS78a@\">iBegan</field></block></value></block></value></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"NL_OLED_Init\"><next><block type=\"NL_PIXEL_CastleSay\"><field name=\"sockPin\">DigitalPin.P3</field><field name=\"wheelPin\">DigitalPin.P0</field><field name=\"scorePin\">DigitalPin.P16</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"=9JavC*{GElF}/FS78a@\">iBegan</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"device_get_running_time_micros\"></block></value></block></next></block></next></block></statement></block><block type=\"every_interval\" x=\"2136\" y=\"-83\"><value name=\"interval\"><shadow type=\"longTimePicker\"><field name=\"ms\">500</field></shadow></value></block><block type=\"input_logo_event\" x=\"2351\" y=\"-83\"><field name=\"action\">TouchButtonEvent.Touched</field><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_MP3_PlayerSay\"><field name=\"saying\">notLegos.playerSaying.ready</field><next><block type=\"NL_MP3_SfxPlay\"><field name=\"sfx\">notLegos.sfxType.fire</field><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.intro</field></block></next></block></next></block></statement></block></statement></block><block type=\"radio_on_value_drag\" x=\"2934\" y=\"328\"><value name=\"HANDLER_DRAG_PARAM_name\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">name</field></block></value><value name=\"HANDLER_DRAG_PARAM_value\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">value</field></block></value><statement name=\"HANDLER\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_substr\"><value name=\"this\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value><value name=\"start\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"length\"><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"string_substr\"><value name=\"this\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value><value name=\"start\"><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value><value name=\"length\"><block type=\"math_arithmetic\"><field name=\"OP\">MINUS</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text_length\"><value name=\"VALUE\"><block type=\"argument_reporter_string\"><field name=\"VALUE\">name</field></block></value></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text_length\"><value name=\"VALUE\"><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value></block></value></block></value></block></value><next><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"controls_if\"><mutation elseif=\"3\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wstar</field></block></value></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_start</field></block></value></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value><statement name=\"DO1\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.welcome</field></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value><statement name=\"DO1\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.WheelAll</field><field name=\"effect\">notLegos.vfxEffect.fire</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.intro</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">wait_reg</field></block></value></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">check</field></block></value></block></value><statement name=\"DO2\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleSayAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">ready</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></shadow></value></block></statement><statement name=\"ELSE\"><block type=\"controls_if\"><mutation elseif=\"3\" else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">ready</field></block></value></block></value><statement name=\"DO0\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">wstar</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.KongFront</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">boot</field></block></value></block></value><statement name=\"DO1\"><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">NaN</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">MULTIPLY</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1000</field></shadow></value></block></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">200</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.idle</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotH</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotI</field><field name=\"effect\">notLegos.vfxEffect.mine</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">0</field></shadow></value><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">welco</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.BrickDragon</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1200</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotE</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">3000</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF2\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">tutor</field></block></value></block></value><statement name=\"DO2\"><block type=\"controls_if\"><mutation elseif=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></value><statement name=\"DO0\"><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.off</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">4000</field></shadow></value><next><block type=\"NL_PIXEL_ResetVFX\"><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotA</field><field name=\"effect\">notLegos.vfxEffect.glow</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotB</field><field name=\"effect\">notLegos.vfxEffect.indicate</field><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.SpotC</field><field name=\"effect\">notLegos.vfxEffect.indicate</field></block></next></block></next></block></next></block></next></block></next></block></next></block></statement><value name=\"IF1\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value></block></value></block></statement><value name=\"IF3\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"logic_compare\"><field name=\"OP\">EQ</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"text\"><field name=\"TEXT\">welco</field></block></value></block></value></block></statement><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">heard: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"8GDUfe;)i@P.Do~T6|{[\">theName</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">value</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">6</field></shadow></value></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"164\" y=\"3601\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><field name=\"function_name\">radioSay</field><value name=\"vt0gv77qprcayj8xalbs\"><block type=\"argument_reporter_string\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">text5</field></block></value><value name=\"ok3p1i8gyn97mv69yabw\"><block type=\"argument_reporter_number\"><mutation duplicateondrag=\"true\"></mutation><field name=\"VALUE\">val</field></block></value><statement name=\"STACK\"><block type=\"radio_datagram_send_value\"><value name=\"name\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"NFHB?|vd].P(}_Y-C82U\">btToken</field></block></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value></block></value><value name=\"value\"><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">said: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_string\"><field name=\"VALUE\">text5</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\">=</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"argument_reporter_number\"><field name=\"VALUE\">val</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">7</field></shadow></value></block></next></block></statement></block><block type=\"function_definition\" x=\"745\" y=\"3814\"><mutation name=\"fogFlood\" functionid=\"VFMl!%hPr#$dm7#L!/;e\"></mutation><field name=\"function_name\">fogFlood</field><statement name=\"STACK\"><block type=\"controls_if\"><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</field></block></value><statement name=\"DO0\"><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">10000</field></shadow></value><next><block type=\"NL_PIXEL_SetEffect\"><field name=\"region\">notLegos.vfxRegion.CastleDoAll</field><field name=\"effect\">notLegos.vfxEffect.parade</field><next><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">para</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">1000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.mid</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">500</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.fan</field><field name=\"state\">notLegos.motorState.off</field><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.door</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.dancing</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6000</field></shadow></value><next><block type=\"NL_RELAY_SockSet\"><field name=\"sockState\">notLegos.sockState.still</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">8000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.wheel</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.redrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shark</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.ghost</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.cannon</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.oarrack</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.shell</field><field name=\"state\">notLegos.motorState.min</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.max</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">2000</field></shadow></value><next><block type=\"NL_MOTOR_Set\"><field name=\"motor\">notLegos.motors.dragon</field><field name=\"state\">notLegos.motorState.min</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block></statement></block><block type=\"function_definition\" x=\"1187\" y=\"3814\"><mutation name=\"runTutorial\" functionid=\"S6D~vG%3KsCIO0/OH*vo\"></mutation><field name=\"function_name\">runTutorial</field><statement name=\"STACK\"><block type=\"function_call\"><mutation name=\"radioSay\" functionid=\"#$(p_OejN-ufn80nNz-G\"><arg name=\"text5\" id=\"vt0gv77qprcayj8xalbs\" type=\"string\"></arg><arg name=\"val\" id=\"ok3p1i8gyn97mv69yabw\" type=\"number\"></arg></mutation><value name=\"vt0gv77qprcayj8xalbs\"><shadow type=\"text\"><field name=\"TEXT\">tutor</field></shadow></value><value name=\"ok3p1i8gyn97mv69yabw\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">80</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">20</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.tutorial</field><next><block type=\"variables_set\"><field name=\"VAR\" id=\"XHHk31=#~9@*pCouO[}A\">fogLevel</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto1</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5950</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto2</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">5000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto3</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7600</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto4</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">6100</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto5</field><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">13000</field></shadow></value><next><block type=\"NL_MP3_VoicePlay\"><field name=\"voice\">notLegos.voiceSaying.howto6</field><next><block type=\"NL_MP3_SetVolume\"><field name=\"mp3bit\">notLegos.mp3type.music</field><value name=\"vol\"><shadow type=\"math_number\"><field name=\"NUM\">100</field></shadow></value><next><block type=\"device_pause\"><value name=\"pause\"><shadow type=\"timePicker\"><field name=\"ms\">7000</field></shadow></value><next><block type=\"NL_MP3_MusicPlay\"><field name=\"genre\">notLegos.musicGenre.awaiting</field></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></next></block></statement></block><block type=\"function_definition\" x=\"1543\" y=\"3814\"><mutation name=\"ready_oled\" functionid=\"LSuKu]l*}Y2[|u.h3PJ%\"></mutation><field name=\"function_name\">ready_oled</field><statement name=\"STACK\"><block type=\"controls_if\"><mutation else=\"1\"></mutation><value name=\"IF0\"><shadow type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"l-Rn+t5$/Xx6bz2K#y}q\">isCastleSay</field></block></value><statement name=\"DO0\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Say //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"6\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">R</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Y|e4lM)*:N0Ca^S5-64i\">lastLaserR</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> C</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"Uk9;F|_3qS]2aZyBH#]%\">lastLaserC</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> L</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_constrain_value\"><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"}GOl3M4q[Bn4R~R!?]at\">lastLaserL</field></block></value><value name=\"low\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><value name=\"high\"><shadow type=\"math_number\"><field name=\"NUM\">9</field></shadow></value></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\" inline=\"false\"><mutation items=\"8\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">S</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"JQUQT|8QeX)zSvZ?K@,i\">lastSonarRead</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> H</field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"math_js_round\"><field name=\"OP\">round</field><value name=\"ARG0\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"math_arithmetic\"><field name=\"OP\">DIVIDE</field><value name=\"A\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"=X]tI5AG]3|WfpT`9Jsr\">lastHue</field></block></value><value name=\"B\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value></block></value></block></value><value name=\"ADD4\"><shadow type=\"text\"><field name=\"TEXT\"> G</field></shadow></value><value name=\"ADD5\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"Bc7kXprAfc3]W%ILxbVV\">lastGesture</field></block></value><value name=\"ADD6\"><shadow type=\"text\"><field name=\"TEXT\"> N</field></shadow></value><value name=\"ADD7\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"#oq[[iBLthN][|]:S!n}\">lastHunt</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">2</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">Mode: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">3</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"2\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M:</field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"NL_MP3_PlaytimeMusic\"></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">4</field></shadow></value></block></next></block></next></block></next></block></next></block></statement><statement name=\"ELSE\"><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\">// Castle Do //</field></shadow></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"NL_OLED_PrintLine\"><value name=\"text\"><block type=\"text_join\"><mutation items=\"4\"></mutation><value name=\"ADD0\"><shadow type=\"text\"><field name=\"TEXT\">M: </field></shadow></value><value name=\"ADD1\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"|DJ$X(Z_3`pG3]7Vz-hm\">castleMode</field></block></value><value name=\"ADD2\"><shadow type=\"text\"><field name=\"TEXT\"> T </field></shadow></value><value name=\"ADD3\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"j|Ef@7)TPMWnE|!`y$SM\">fogToggle</field></block></value></block></value><value name=\"line\"><shadow type=\"math_number\"><field name=\"NUM\">1</field></shadow></value></block></next></block></statement></block></statement></block></xml>","main.ts":"function radioSay (text5: string, val: number) {\n    radio.sendValue(\"\" + btToken + text5, val)\n    notLegos.printLine(\"said: \" + text5 + \"=\" + val, 7)\n}\nfunction buttonPress (button: string) {\n    notLegos.printLine(\"button: \" + button, 3)\n}\nfunction runTutorial () {\n    radioSay(\"tutor\", 1)\n    notLegos.setVolume(notLegos.mp3type.music, 80)\n    basic.pause(20)\n    notLegos.mp3musicPlay(notLegos.musicGenre.tutorial)\n    fogLevel = 3\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto1)\n    basic.pause(5950)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto2)\n    basic.pause(5000)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto3)\n    basic.pause(7600)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto4)\n    basic.pause(6100)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto5)\n    basic.pause(13000)\n    notLegos.mp3voicePlay(notLegos.voiceSaying.howto6)\n    notLegos.setVolume(notLegos.mp3type.music, 100)\n    basic.pause(7000)\n    notLegos.mp3musicPlay(notLegos.musicGenre.awaiting)\n}\nfunction ready_oled () {\n    if (isCastleSay) {\n        let lastHunt = 0\n        let lastGesture = 0\n        let lastHue = 0\n        let lastSonarRead = 0\n        let lastLaserL = 0\n        let lastLaserC = 0\n        let lastLaserR = 0\n        notLegos.printLine(\"// Castle Say //\", 0)\n        notLegos.printLine(\"R\" + Math.constrain(lastLaserR, 0, 9) + \" C\" + Math.constrain(lastLaserC, 0, 9) + \" L\" + Math.constrain(lastLaserL, 0, 9), 1)\n        notLegos.printLine(\"S\" + lastSonarRead + \" H\" + Math.round(lastHue / 3) + \" G\" + lastGesture + \" N\" + lastHunt, 2)\n        notLegos.printLine(\"Mode: \" + castleMode, 3)\n        notLegos.printLine(\"M:\" + notLegos.mp3durationMusic(), 4)\n    } else {\n        notLegos.printLine(\"// Castle Do //\", 0)\n        notLegos.printLine(\"M: \" + castleMode + \" T \" + fogToggle, 1)\n    }\n}\nradio.onReceivedValue(function (name, value) {\n    if (name.substr(0, btToken.length) == btToken) {\n        theName = name.substr(btToken.length, name.length - btToken.length)\n        if (isCastleSay) {\n            if (theName == \"wstar\") {\n                castleMode = \"wait_start\"\n            } else if (theName == \"welco\") {\n                if (value == 1) {\n                    notLegos.vfxReset(notLegos.vfxEffect.glow)\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.glow)\n                    notLegos.mp3voicePlay(notLegos.voiceSaying.welcome)\n                } else if (value == 2) {\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                    notLegos.setEffect(notLegos.vfxRegion.WheelAll, notLegos.vfxEffect.fire)\n                    basic.pause(1200)\n                    notLegos.mp3voicePlay(notLegos.voiceSaying.intro)\n                    basic.pause(3000)\n                    notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                    basic.pause(4000)\n                    notLegos.mp3musicPlay(notLegos.musicGenre.awaiting)\n                    castleMode = \"wait_reg\"\n                }\n            } else if (theName == \"check\") {\n                notLegos.setEffect(notLegos.vfxRegion.CastleSayAll, notLegos.vfxEffect.off)\n                radioSay(\"ready\", 1)\n            } else if (false) {\n            \t\n            }\n        } else {\n            if (theName == \"ready\") {\n                radioSay(\"wstar\", 1)\n                notLegos.setEffect(notLegos.vfxRegion.KongFront, notLegos.vfxEffect.indicate)\n            } else if (theName == \"boot\") {\n                fogLevel = 3\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.parade)\n                notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.max)\n                basic.pause(value * 1000)\n                notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.min)\n                basic.pause(1000)\n                radioSay(\"welco\", 1)\n                basic.pause(200)\n                notLegos.vfxReset(notLegos.vfxEffect.glow)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.glow)\n                basic.pause(5000)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.idle)\n                notLegos.setEffect(notLegos.vfxRegion.SpotH, notLegos.vfxEffect.mine)\n                notLegos.setEffect(notLegos.vfxRegion.SpotI, notLegos.vfxEffect.mine)\n                basic.pause(0)\n                radioSay(\"welco\", 2)\n                basic.pause(4500)\n                notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.off)\n                basic.pause(500)\n                notLegos.setEffect(notLegos.vfxRegion.BrickDragon, notLegos.vfxEffect.indicate)\n                basic.pause(1200)\n                notLegos.setEffect(notLegos.vfxRegion.SpotC, notLegos.vfxEffect.indicate)\n                notLegos.setEffect(notLegos.vfxRegion.SpotE, notLegos.vfxEffect.indicate)\n                basic.pause(3000)\n                fogLevel = 1\n                notLegos.motorSet(notLegos.motors.door, notLegos.motorState.max)\n            } else if (theName == \"tutor\") {\n                if (value == 1) {\n                    notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.off)\n                    basic.pause(4000)\n                    notLegos.vfxReset(notLegos.vfxEffect.glow)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotA, notLegos.vfxEffect.glow)\n                    basic.pause(6000)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotB, notLegos.vfxEffect.indicate)\n                    notLegos.setEffect(notLegos.vfxRegion.SpotC, notLegos.vfxEffect.indicate)\n                } else if (value == 2) {\n                \t\n                }\n            } else if (theName == \"welco\") {\n            \t\n            } else {\n            \t\n            }\n        }\n        notLegos.printLine(\"heard: \" + theName + \"=\" + value, 6)\n    }\n})\ninput.onLogoEvent(TouchButtonEvent.Touched, function () {\n    if (isCastleSay) {\n        notLegos.mp3sayPlay(notLegos.playerSaying.ready)\n        notLegos.mp3sfxPlay(notLegos.sfxType.fire)\n        notLegos.mp3musicPlay(notLegos.musicGenre.intro)\n    }\n})\nfunction fogFlood () {\n    if (fogToggle) {\n        fogLevel = 3\n        basic.pause(10000)\n        notLegos.setEffect(notLegos.vfxRegion.CastleDoAll, notLegos.vfxEffect.parade)\n        radioSay(\"para\", 1)\n        fogLevel = 0\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.max)\n        notLegos.motorSet(notLegos.motors.door, notLegos.motorState.max)\n        basic.pause(1000)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.mid)\n        basic.pause(6000)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.min)\n        basic.pause(500)\n        notLegos.motorSet(notLegos.motors.fan, notLegos.motorState.off)\n        notLegos.motorSet(notLegos.motors.door, notLegos.motorState.min)\n        fogLevel = 1\n        notLegos.setSock(notLegos.sockState.dancing)\n        basic.pause(6000)\n        notLegos.setSock(notLegos.sockState.still)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.max)\n        basic.pause(8000)\n        notLegos.motorSet(notLegos.motors.wheel, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.redrack, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.redrack, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shark, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shark, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.ghost, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.ghost, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.cannon, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.cannon, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.oarrack, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.oarrack, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shell, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.shell, notLegos.motorState.min)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.dragon, notLegos.motorState.max)\n        basic.pause(2000)\n        notLegos.motorSet(notLegos.motors.dragon, notLegos.motorState.min)\n    }\n}\nlet iTook = 0\nlet theName = \"\"\nlet fogToggle = 0\nlet castleMode = \"\"\nlet isCastleSay = 0\nlet fogLevel = 0\nlet btToken = \"\"\nnotLegos.oledinit()\nnotLegos.castleSayLights(DigitalPin.P3, DigitalPin.P0, DigitalPin.P16)\nlet iBegan = input.runningTimeMicros()\nloops.everyInterval(500, function () {\n\t\n})\nloops.everyInterval(500, function () {\n\t\n})\nloops.everyInterval(2000, function () {\n    notLegos.printLine(\"\" + iTook + \"\", 5)\n})\nloops.everyInterval(40, function () {\n    let isReady = 0\n    iBegan = input.runningTime()\n    notLegos.castleSayTick()\n    if (isReady) {\n    \t\n    }\n    ready_oled()\n    notLegos.changeThree()\n    iTook = input.runningTime() - iBegan\n})\n","README.md":"\n> Open this page at [https://notlegos.github.io/castleresay/](https://notlegos.github.io/castleresay/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/castleresay** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/castleresay** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/soundbank/](https://notlegos.github.io/soundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/soundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/soundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/resoundbank/](https://notlegos.github.io/resoundbank/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/resoundbank** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/resoundbank** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosext/](https://notlegos.github.io/notlegosext/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosext** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosext** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n\n\n\n> Open this page at [https://notlegos.github.io/notlegosmaster/](https://notlegos.github.io/notlegosmaster/)\n\n## Use as Extension\n\nThis repository can be added as an **extension** in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **New Project**\n* click on **Extensions** under the gearwheel menu\n* search for **https://github.com/notlegos/notlegosmaster** and import\n\n## Edit this project\n\nTo edit this repository in MakeCode.\n\n* open [https://makecode.microbit.org/](https://makecode.microbit.org/)\n* click on **Import** then click on **Import URL**\n* paste **https://github.com/notlegos/notlegosmaster** and click import\n\n#### Metadata (used for search, rendering)\n\n* for PXT/microbit\n<script src=\"https://makecode.com/gh-pages-embed.js\"></script><script>makeCodeRender(\"{{ site.makecode.home_url }}\", \"{{ site.github.owner_name }}/{{ site.github.repository_name }}\");</script>\n","displaySendBuffer.asm":"sendBufferAsm:\n\n    push {r4,r5,r6,r7,lr}\n    \n    mov r4, r0 ; save buff\n    mov r6, r1 ; save pin\n    \n    mov r0, r4\n    bl BufferMethods::length\n    mov r5, r0\n    \n    mov r0, r4\n    bl BufferMethods::getBytes\n    mov r4, r0\n    \n    ; setup pin as digital\n    mov r0, r6\n    movs r1, #0\n    bl pins::digitalWritePin\n    \n    ; load pin address\n    mov r0, r6\n    bl pins::getPinAddress\n\n    ldr r0, [r0, #8] ; get mbed DigitalOut from MicroBitPin\n    ldr r1, [r0, #4] ; r1-mask for this pin\n    ldr r2, [r0, #16] ; r2-clraddr\n    ldr r3, [r0, #12] ; r3-setaddr\n    \n    cpsid i ; disable irq\n    \n    b .start\n    \n.nextbit:               ;            C0\n    str r1, [r3, #0]    ; pin := hi  C2\n    tst r6, r0          ;            C3\n    bne .islate         ;            C4\n    str r1, [r2, #0]    ; pin := lo  C6\n.islate:\n    lsrs r6, r6, #1     ; r6 >>= 1   C7\n    bne .justbit        ;            C8\n    \n    ; not just a bit - need new byte\n    adds r4, #1         ; r4++       C9\n    subs r5, #1         ; r5--       C10\n    bcc .stop           ; if (r5<0) goto .stop  C11\n.start:\n    movs r6, #0x80      ; reset mask C12\n    nop                 ;            C13\n\n.common:               ;             C13\n    str r1, [r2, #0]   ; pin := lo   C15\n    ; always re-load byte - it just fits with the cycles better this way\n    ldrb r0, [r4, #0]  ; r0 := *r4   C17\n    b .nextbit         ;             C20\n\n.justbit: ; C10\n    ; no nops, branch taken is already 3 cycles\n    b .common ; C13\n\n.stop:    \n    str r1, [r2, #0]   ; pin := lo\n    cpsie i            ; enable irq\n\n    pop {r4,r5,r6,r7,pc}\n","planetxbasic.ts":"/**\n* Functions to PlanetX sensor by ELECFREAKS Co.,Ltd.\n*/\n//% color=#00B1ED  icon=\"\\uf005\" block=\"Connected\" blockId=\"PlanetX_Connected\"\n//% groups='[\"Digital\", \"Analog\", \"IIC Port\"]'\nnamespace Connected {\n    \n    ////////////////////////paj7620//////////////////////\n    let gesture_first_init = true\n    const initRegisterArray: number[] = [\n        0xEF, 0x00, 0x32, 0x29, 0x33, 0x01, 0x34, 0x00, 0x35, 0x01, 0x36, 0x00, 0x37, 0x07, 0x38, 0x17,\n        0x39, 0x06, 0x3A, 0x12, 0x3F, 0x00, 0x40, 0x02, 0x41, 0xFF, 0x42, 0x01, 0x46, 0x2D, 0x47, 0x0F,\n        0x48, 0x3C, 0x49, 0x00, 0x4A, 0x1E, 0x4B, 0x00, 0x4C, 0x20, 0x4D, 0x00, 0x4E, 0x1A, 0x4F, 0x14,\n        0x50, 0x00, 0x51, 0x10, 0x52, 0x00, 0x5C, 0x02, 0x5D, 0x00, 0x5E, 0x10, 0x5F, 0x3F, 0x60, 0x27,\n        0x61, 0x28, 0x62, 0x00, 0x63, 0x03, 0x64, 0xF7, 0x65, 0x03, 0x66, 0xD9, 0x67, 0x03, 0x68, 0x01,\n        0x69, 0xC8, 0x6A, 0x40, 0x6D, 0x04, 0x6E, 0x00, 0x6F, 0x00, 0x70, 0x80, 0x71, 0x00, 0x72, 0x00,\n        0x73, 0x00, 0x74, 0xF0, 0x75, 0x00, 0x80, 0x42, 0x81, 0x44, 0x82, 0x04, 0x83, 0x20, 0x84, 0x20,\n        0x85, 0x00, 0x86, 0x10, 0x87, 0x00, 0x88, 0x05, 0x89, 0x18, 0x8A, 0x10, 0x8B, 0x01, 0x8C, 0x37,\n        0x8D, 0x00, 0x8E, 0xF0, 0x8F, 0x81, 0x90, 0x06, 0x91, 0x06, 0x92, 0x1E, 0x93, 0x0D, 0x94, 0x0A,\n        0x95, 0x0A, 0x96, 0x0C, 0x97, 0x05, 0x98, 0x0A, 0x99, 0x41, 0x9A, 0x14, 0x9B, 0x0A, 0x9C, 0x3F,\n        0x9D, 0x33, 0x9E, 0xAE, 0x9F, 0xF9, 0xA0, 0x48, 0xA1, 0x13, 0xA2, 0x10, 0xA3, 0x08, 0xA4, 0x30,\n        0xA5, 0x19, 0xA6, 0x10, 0xA7, 0x08, 0xA8, 0x24, 0xA9, 0x04, 0xAA, 0x1E, 0xAB, 0x1E, 0xCC, 0x19,\n        0xCD, 0x0B, 0xCE, 0x13, 0xCF, 0x64, 0xD0, 0x21, 0xD1, 0x0F, 0xD2, 0x88, 0xE0, 0x01, 0xE1, 0x04,\n        0xE2, 0x41, 0xE3, 0xD6, 0xE4, 0x00, 0xE5, 0x0C, 0xE6, 0x0A, 0xE7, 0x00, 0xE8, 0x00, 0xE9, 0x00,\n        0xEE, 0x07, 0xEF, 0x01, 0x00, 0x1E, 0x01, 0x1E, 0x02, 0x0F, 0x03, 0x10, 0x04, 0x02, 0x05, 0x00,\n        0x06, 0xB0, 0x07, 0x04, 0x08, 0x0D, 0x09, 0x0E, 0x0A, 0x9C, 0x0B, 0x04, 0x0C, 0x05, 0x0D, 0x0F,\n        0x0E, 0x02, 0x0F, 0x12, 0x10, 0x02, 0x11, 0x02, 0x12, 0x00, 0x13, 0x01, 0x14, 0x05, 0x15, 0x07,\n        0x16, 0x05, 0x17, 0x07, 0x18, 0x01, 0x19, 0x04, 0x1A, 0x05, 0x1B, 0x0C, 0x1C, 0x2A, 0x1D, 0x01,\n        0x1E, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x25, 0x01, 0x26, 0x00, 0x27, 0x39, 0x28, 0x7F,\n        0x29, 0x08, 0x30, 0x03, 0x31, 0x00, 0x32, 0x1A, 0x33, 0x1A, 0x34, 0x07, 0x35, 0x07, 0x36, 0x01,\n        0x37, 0xFF, 0x38, 0x36, 0x39, 0x07, 0x3A, 0x00, 0x3E, 0xFF, 0x3F, 0x00, 0x40, 0x77, 0x41, 0x40,\n        0x42, 0x00, 0x43, 0x30, 0x44, 0xA0, 0x45, 0x5C, 0x46, 0x00, 0x47, 0x00, 0x48, 0x58, 0x4A, 0x1E,\n        0x4B, 0x1E, 0x4C, 0x00, 0x4D, 0x00, 0x4E, 0xA0, 0x4F, 0x80, 0x50, 0x00, 0x51, 0x00, 0x52, 0x00,\n        0x53, 0x00, 0x54, 0x00, 0x57, 0x80, 0x59, 0x10, 0x5A, 0x08, 0x5B, 0x94, 0x5C, 0xE8, 0x5D, 0x08,\n        0x5E, 0x3D, 0x5F, 0x99, 0x60, 0x45, 0x61, 0x40, 0x63, 0x2D, 0x64, 0x02, 0x65, 0x96, 0x66, 0x00,\n        0x67, 0x97, 0x68, 0x01, 0x69, 0xCD, 0x6A, 0x01, 0x6B, 0xB0, 0x6C, 0x04, 0x6D, 0x2C, 0x6E, 0x01,\n        0x6F, 0x32, 0x71, 0x00, 0x72, 0x01, 0x73, 0x35, 0x74, 0x00, 0x75, 0x33, 0x76, 0x31, 0x77, 0x01,\n        0x7C, 0x84, 0x7D, 0x03, 0x7E, 0x01\n    ];\n    \n    /////////////////////////color/////////////////////////\n    const APDS9960_ADDR = 0x39\n    const APDS9960_ENABLE = 0x80\n    const APDS9960_ATIME = 0x81\n    const APDS9960_CONTROL = 0x8F\n    const APDS9960_STATUS = 0x93\n    const APDS9960_CDATAL = 0x94\n    const APDS9960_CDATAH = 0x95\n    const APDS9960_RDATAL = 0x96\n    const APDS9960_RDATAH = 0x97\n    const APDS9960_GDATAL = 0x98\n    const APDS9960_GDATAH = 0x99\n    const APDS9960_BDATAL = 0x9A\n    const APDS9960_BDATAH = 0x9B\n    const APDS9960_GCONF4 = 0xAB\n    const APDS9960_AICLEAR = 0xE7\n    let color_first_init = false\n\n    function i2cwrite_color(addr: number, reg: number, value: number) {\n        let buf = pins.createBuffer(2)\n        buf[0] = reg\n        buf[1] = value\n        pins.i2cWriteBuffer(addr, buf)\n    }\n    function i2cread_color(addr: number, reg: number) {\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\n        return val;\n    }\n    function rgb2hsl(color_r: number, color_g: number, color_b: number): number {\n        let Hue = 0\n        let R = color_r * 100 / 255;\n        let G = color_g * 100 / 255;\n        let B = color_b * 100 / 255;\n        let maxVal = Math.max(R, Math.max(G, B))\n        let minVal = Math.min(R, Math.min(G, B))\n        let Delta = maxVal - minVal;\n\n        if (Delta < 0) {\n            Hue = 0;\n        }\n        else if (maxVal == R && G >= B) {\n            Hue = (60 * ((G - B) * 100 / Delta)) / 100;\n        }\n        else if (maxVal == R && G < B) {\n            Hue = (60 * ((G - B) * 100 / Delta) + 360 * 100) / 100;\n        }\n        else if (maxVal == G) {\n            Hue = (60 * ((B - R) * 100 / Delta) + 120 * 100) / 100;\n        }\n        else if (maxVal == B) {\n            Hue = (60 * ((R - G) * 100 / Delta) + 240 * 100) / 100;\n        }\n        return Hue\n    }\n    function initModule(): void {\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ATIME, 252)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_CONTROL, 0x03)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_GCONF4, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_AICLEAR, 0x00)\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, 0x01)\n        color_first_init = true\n    }\n    function colorMode(): void {\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_ENABLE) | 0x2;\n        i2cwrite_color(APDS9960_ADDR, APDS9960_ENABLE, tmp);\n    }\n\n    ///////////////////////////////////////////////////////MP3\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    /*\n    * Play status selection button list\n    */\n    export enum playType {\n        //% block=\"Play\"\n        Play = 0x0D,\n        //% block=\"Stop\"\n        Stop = 0x16,\n        //% block=\"PlayNext\"\n        PlayNext = 0x01,\n        //% block=\"PlayPrevious\"\n        PlayPrevious = 0x02,\n        //% block=\"Pause\"\n        Pause = 0x0E\n    }\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n        basic.pause(100)\n    }\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) {\n            total += dataArr[i]\n        }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    ///////////////////////////////////////////////////////RJpin_to_pin\n    function RJpin_to_analog(Rjpin: AnalogRJPin): any {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case AnalogRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case AnalogRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n        }\n        return pin\n    }\n    function RJpin_to_digital(Rjpin: DigitalRJPin): any {\n        let pin = DigitalPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = DigitalPin.P16\n                break;\n            case DigitalRJPin.J5:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P0:\n                pin = DigitalPin.P0\n                break;\n            case DigitalRJPin.P1:\n                pin = DigitalPin.P1\n                break;\n            case DigitalRJPin.P2:\n                pin = DigitalPin.P2\n                break;\n            case DigitalRJPin.P3:\n                pin = DigitalPin.P3\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P4:\n                pin = DigitalPin.P4\n                break;\n            case DigitalRJPin.P5:\n                pin = DigitalPin.P5\n                break;\n            case DigitalRJPin.P6:\n                pin = DigitalPin.P6\n                break;\n            case DigitalRJPin.P7:\n                pin = DigitalPin.P7\n                break;\n            case DigitalRJPin.P8:\n                pin = DigitalPin.P8\n                break;\n            case DigitalRJPin.P9:\n                pin = DigitalPin.P9\n                break;\n            case DigitalRJPin.P10:\n                pin = DigitalPin.P10\n                break;\n            case DigitalRJPin.P11:\n                pin = DigitalPin.P11\n                break;\n            case DigitalRJPin.P12:\n                pin = DigitalPin.P12\n                break;\n            case DigitalRJPin.P13:\n                pin = DigitalPin.P13\n                break;\n            case DigitalRJPin.P14:\n                pin = DigitalPin.P14\n                break;\n            case DigitalRJPin.P15:\n                pin = DigitalPin.P15\n                break;\n            case DigitalRJPin.P16:\n                pin = DigitalPin.P16\n                break;\n        }\n        return pin\n    }\n\n\n    ///////////////////////////////enum\n    export enum DigitalRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2,\n        //% block=\"J3\"\n        J3,\n        //% block=\"J4\"\n        J4,\n        //% block=\"J5\"\n        J5,\n        //% block=\"P0\"\n        P0,        \n        //% block=\"P1\"\n        P1,\n        //% block=\"P2\"\n        P2,\n        //% block=\"P3\"\n        P3,\n        //% block=\"P4\"\n        P4,\n        //% block=\"P5\"\n        P5,\n        //% block=\"P6\"\n        P6,\n        //% block=\"P7\"\n        P7,\n        //% block=\"P8\"\n        P8,\n        //% block=\"P9\"\n        P9,\n        //% block=\"P10\"\n        P10,\n        //% block=\"P11\"\n        P11,\n        //% block=\"P12\"\n        P12,\n        //% block=\"P13\"\n        P13,\n        //% block=\"P14\"\n        P14,\n        //% block=\"P15\"\n        P15,\n        //% block=\"P16\"\n        P16,\n    }\n    export enum AnalogRJPin {\n        //% block=\"J1\"\n        J1,\n        //% block=\"J2\"\n        J2\n    }\n    export enum Distance_Unit_List {\n        //% block=\"cm\" \n        Distance_Unit_cm,\n\n        //% block=\"foot\"\n        Distance_Unit_foot,\n    }\n    export enum ButtonStateList {\n        //% block=\"C\"\n        C,\n        //% block=\"D\"\n        D,\n        //% block=\"C+D\"\n        CD\n    }\n    export enum GestureType {\n        //% block=\"None\"\n        None = 0,\n        //% block=\"Right\"\n        Right = 1,\n        //% block=\"Left\"\n        Left = 2,\n        //% block=\"Up\"\n        Up = 3,\n        //% block=\"Down\"\n        Down = 4,\n        //% block=\"Forward\"\n        Forward = 5,\n        //% block=\"Backward\"\n        Backward = 6,\n        //% block=\"Clockwise\"\n        Clockwise = 7,\n        //% block=\"Anticlockwise\"\n        Anticlockwise = 8,\n        //% block=\"Wave\"\n        Wave = 9\n    }\n    export enum ColorList {\n        //% block=\"Red\"\n        red,\n        //% block=\"Green\"\n        green,\n        //% block=\"Blue\"\n        blue,\n        //% block=\"Cyan\"\n        cyan,\n        //% block=\"Magenta\"\n        magenta,\n        //% block=\"Yellow\"\n        yellow,\n        //% block=\"White\"\n        white\n    }\n\n    ///////////////////////////////////blocks/////////////////////////////\n\n    //% blockId=\"readwaterLevel\" block=\"Water level sensor %Rjpin value(0~100)\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Sensor color=#E2C438 group=\"Analog\"\n    export function waterLevel(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        let voltage = 0, waterlevel = 0;\n        voltage = pins.map(\n            pins.analogReadPin(pin),\n            50,\n            600,\n            0,\n            100\n        );\n        if (voltage < 0) {\n            voltage = 0\n        }\n        waterlevel = voltage;\n        return Math.round(waterlevel)\n    }\n\n    let distance_last = 0\n\n    //% blockId=sonarbit block=\"Ultrasonic sensor pinT %tPin pinE %ePin distance %distance_unit\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% distance_unit.fieldEditor=\"gridpicker\"\n    //% distance_unit.fieldOptions.columns=2\n    //% subcategory=Sensor group=\"Digital\" color=#EA5532\n    export function ultrasoundSensor(tPin: DigitalPin, ePin: DigitalPin, distance_unit: Distance_Unit_List): number {\n        let pinT = tPin\n        let pinE = ePin\n        pins.setPull(pinT, PinPullMode.PullNone)\n        pins.digitalWritePin(pinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(pinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(pinT, 0)\n\n        // read pulse\n        let d = pins.pulseIn(pinE, PulseValue.High, 25000)\n        let version = control.hardwareVersion()\n        let distance = d * 34 / 2 / 1000\n        if (version == \"1\") {\n            distance = distance * 3 / 2\n        }\n\n        if (distance > 430) {\n            distance = 0\n        }\n\n        if (distance == 0) {\n            distance = distance_last\n            distance_last = 0\n        }\n        else {\n            distance_last = distance\n        }\n\n        switch (distance_unit) {\n            case Distance_Unit_List.Distance_Unit_cm:\n                return Math.floor(distance)  //cm\n                break\n            case Distance_Unit_List.Distance_Unit_foot:\n                return Math.floor(distance / 30.48)   //foot\n                break\n            default:\n                return 0\n        }\n    }\n\n    export class PAJ7620 {\n        private paj7620WriteReg(addr: number, cmd: number) {\n            let buf: Buffer = pins.createBuffer(2);\n            buf[0] = addr;\n            buf[1] = cmd;\n            pins.i2cWriteBuffer(0x73, buf, false);\n        }\n        private paj7620ReadReg(addr: number): number {\n            let buf: Buffer = pins.createBuffer(1);\n            buf[0] = addr;\n            pins.i2cWriteBuffer(0x73, buf, false);\n            buf = pins.i2cReadBuffer(0x73, 1, false);\n            return buf[0];\n        }\n        private paj7620SelectBank(bank: number) {\n            if (bank == 0) this.paj7620WriteReg(0xEF, 0);\n            else if (bank == 1) this.paj7620WriteReg(0xEF, 1);\n        }\n        private paj7620Init() {\n            let temp = 0;\n            this.paj7620SelectBank(0);\n            temp = this.paj7620ReadReg(0);\n            if (temp == 0x20) {\n                for (let i = 0; i < 438; i += 2) {\n                    this.paj7620WriteReg(initRegisterArray[i], initRegisterArray[i + 1]);\n                }\n            }\n            this.paj7620SelectBank(0);\n        }\n        init() {\n            this.paj7620Init();\n            basic.pause(200);\n        }\n        read(): number {\n            let data = 0, result = 0;\n            data = this.paj7620ReadReg(0x43);\n            switch (data) {\n                case 0x01:\n                    result = GestureType.Right;\n                    break;\n                case 0x02:\n                    result = GestureType.Left;\n                    break;\n                case 0x04:\n                    result = GestureType.Up;\n                    break;\n                case 0x08:\n                    result = GestureType.Down;\n                    break;\n                case 0x10:\n                    result = GestureType.Forward;\n                    break;\n                case 0x20:\n                    result = GestureType.Backward;\n                    break;\n                case 0x40:\n                    result = GestureType.Clockwise;\n                    break;\n                case 0x80:\n                    result = GestureType.Anticlockwise;\n                    break;\n                default:\n                    data = this.paj7620ReadReg(0x44);\n                    if (data == 0x01)\n                        result = GestureType.Wave;\n                    break;\n            }\n            return result;\n        }\n    }\n    const gestureEventId = 3100;\n    let lastGesture = GestureType.None;\n    let paj7620 = new PAJ7620();\n    //% blockId= gesture_create_event block=\"Gesture sensor IIC port is %gesture\"\n    //% gesture.fieldEditor=\"gridpicker\" gesture.fieldOptions.columns=3\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function onGesture(gesture: GestureType, handler: () => void) {\n        control.onEvent(gestureEventId, gesture, handler);\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        control.inBackground(() => {\n            while (true) {\n                const gesture = paj7620.read();\n                if (gesture != lastGesture) {\n                    lastGesture = gesture;\n                    control.raiseEvent(gestureEventId, lastGesture);\n                }\n                basic.pause(200);\n            }\n        })\n    }\n\n    //% blockId= gesture_get_event block=\"Gesture sensor IIC port detects\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function getGesture(): number {\n        if (gesture_first_init) {\n            paj7620.init();\n            gesture_first_init = false\n        }\n        const gesture = paj7620.read();\n        return gesture\n    }\n\n\n\n\n    //% blockId=apds9960_readcolor block=\"Color sensor IIC port color HUE(0~360)\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    export function readColor(): number {\n        if (color_first_init == false) {\n            initModule()\n            colorMode()\n        }\n        let tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        while (!tmp) {\n            basic.pause(5);\n            tmp = i2cread_color(APDS9960_ADDR, APDS9960_STATUS) & 0x1;\n        }\n        let c = i2cread_color(APDS9960_ADDR, APDS9960_CDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_CDATAH) * 256;\n        let r = i2cread_color(APDS9960_ADDR, APDS9960_RDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_RDATAH) * 256;\n        let g = i2cread_color(APDS9960_ADDR, APDS9960_GDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_GDATAH) * 256;\n        let b = i2cread_color(APDS9960_ADDR, APDS9960_BDATAL) + i2cread_color(APDS9960_ADDR, APDS9960_BDATAH) * 256;\n        // map to rgb based on clear channel\n        let avg = c / 3;\n        r = r * 255 / avg;\n        g = g * 255 / avg;\n        b = b * 255 / avg;\n        //let hue = rgb2hue(r, g, b);\n        let hue = rgb2hsl(r, g, b)\n        return hue\n    }\n    //% block=\"Color sensor IIC port detects %color\"\n    //% subcategory=Sensor group=\"IIC Port\"\n    //% color.fieldEditor=\"gridpicker\" color.fieldOptions.columns=3\n    export function checkColor(color: ColorList): boolean {\n        let hue = readColor()\n        switch (color) {\n            case ColorList.red:\n                if (hue > 330 || hue < 20) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.green:\n                if (hue > 120 && 180 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.blue:\n                if (hue > 210 && 270 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.cyan:\n                if (hue > 190 && 210 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.magenta:\n                if (hue > 260 && 330 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.yellow:\n                if (hue > 30 && 120 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n            case ColorList.white:\n                if (hue >= 180 && 190 > hue) {\n                    return true\n                }\n                else {\n                    return false\n                }\n                break\n        }\n    }\n\n    //% blockId=\"potentiometer\" block=\"Trimpot %Rjpin analog value\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Input color=#E2C438 group=\"Analog\"\n    export function trimpot(Rjpin: AnalogRJPin): number {\n        let pin = AnalogPin.P1\n        pin = RJpin_to_analog(Rjpin)\n        return pins.analogReadPin(pin)\n    }\n    //% blockId=buttonab block=\"Button %Rjpin %button is pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonCD(Rjpin: DigitalRJPin, button: ButtonStateList): boolean {\n        let pinC = DigitalPin.P1\n        let pinD = DigitalPin.P2\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pinC = DigitalPin.P1\n                pinD = DigitalPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pinC = DigitalPin.P2\n                pinD = DigitalPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pinC = DigitalPin.P13\n                pinD = DigitalPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pinC = DigitalPin.P15\n                pinD = DigitalPin.P16\n                break;\n            case DigitalRJPin.P3:\n                pinC = DigitalPin.P3\n                pinD = DigitalPin.P4\n                break;\n        }\n        pins.setPull(pinC, PinPullMode.PullUp)\n        pins.setPull(pinD, PinPullMode.PullUp)\n        if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 0 && button == ButtonStateList.CD) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinC) == 0 && pins.digitalReadPin(pinD) == 1 && button == ButtonStateList.C) {\n            return true\n        }\n        else if (pins.digitalReadPin(pinD) == 0 && pins.digitalReadPin(pinC) == 1 && button == ButtonStateList.D) {\n            return true\n        }\n        else {\n            return false\n        }\n    }\n\n    export enum ButtonState {\n        //% block=\"on\"\n        on = 1,\n        //% block=\"off\"\n        off = 2\n    }\n\n    const buttonEventSource = 5000\n    const buttonEventValue = {\n        CD_pressed: ButtonState.on,\n        CD_unpressed: ButtonState.off\n    }\n\n    //% block=\"on button %Rjpin %button pressed\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=4\n    //% button.fieldEditor=\"gridpicker\"\n    //% button.fieldOptions.columns=1\n    //% subcategory=Input group=\"Digital\" color=#EA5532\n    export function buttonEvent(Rjpin: DigitalRJPin, button: ButtonStateList, handler: () => void) {\n        let ButtonPin_C = DigitalPin.P1\n        let ButtonPin_D = DigitalPin.P2\n        let pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P0\n        let pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                ButtonPin_C = DigitalPin.P1\n                ButtonPin_D = DigitalPin.P8\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P1\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P8\n                break;\n            case DigitalRJPin.J2:\n                ButtonPin_C = DigitalPin.P2\n                ButtonPin_D = DigitalPin.P12\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P2\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P12\n                break;\n            case DigitalRJPin.J3:\n                ButtonPin_C = DigitalPin.P13\n                ButtonPin_D = DigitalPin.P14\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P13\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P14\n                break;\n            case DigitalRJPin.J4:\n                ButtonPin_C = DigitalPin.P15\n                ButtonPin_D = DigitalPin.P16\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P15\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P16\n                break;\n            case DigitalRJPin.P3:\n                ButtonPin_C = DigitalPin.P3\n                ButtonPin_D = DigitalPin.P4\n                pinEventSource_C = EventBusSource.MICROBIT_ID_IO_P3\n                pinEventSource_D = EventBusSource.MICROBIT_ID_IO_P4\n                break;\n        }\n        if (button == ButtonStateList.C) {\n            pins.setPull(ButtonPin_C, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_C, PinEventType.Edge)\n            control.onEvent(pinEventSource_C, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.D) {\n            pins.setPull(ButtonPin_D, PinPullMode.PullUp)\n            pins.setEvents(ButtonPin_D, PinEventType.Edge)\n            control.onEvent(pinEventSource_D, EventBusValue.MICROBIT_PIN_EVT_RISE, handler)\n        }\n        else if (button == ButtonStateList.CD) {\n            loops.everyInterval(50, function () {\n                if (pins.digitalReadPin(ButtonPin_C) == 0 && pins.digitalReadPin(ButtonPin_D) == 0) {\n                    control.raiseEvent(buttonEventSource, buttonEventValue.CD_pressed)\n                }\n            })\n            control.onEvent(buttonEventSource, buttonEventValue.CD_pressed, handler)\n        }\n    }\n\n    //% blockId=fans block=\"Motor fan %Rjpin toggle to $fanstate || speed %speed \\\\%\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% fanstate.shadow=\"toggleOnOff\"\n    //% subcategory=Excute group=\"Digital\" color=#EA5532\n    //% speed.min=0 speed.max=100\n    //% expandableArgumentMode=\"toggle\"\n    export function motorFan(Rjpin: DigitalRJPin, fanstate: boolean, speed: number = 100): void {\n        let pin = AnalogPin.P1\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = AnalogPin.P1\n                break;\n            case DigitalRJPin.J2:\n                pin = AnalogPin.P2\n                break;\n            case DigitalRJPin.J3:\n                pin = AnalogPin.P13\n                break;\n            case DigitalRJPin.J4:\n                pin = AnalogPin.P15\n                break;\n        }\n        if (fanstate) {\n            pins.analogSetPeriod(pin, 100)\n            pins.analogWritePin(pin, Math.map(speed, 0, 100, 0, 1023))\n        }\n        else {\n            pins.analogWritePin(pin, 0)\n            speed = 0\n        }\n    }\n\n\n    //% blockId=\"setLoopFolder\" block=\"loop play all the MP3s in the folder:$folderNum\"\n    //% folderNum.defl=\"01\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setLoopFolder(folderNum: string): void {\n        CMD = 0x17\n        para1 = 0\n        para2 = parseInt(folderNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n    //% blockId=\"folderPlay\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum || repeatList: $myAns\"\n    //% folderNum.defl=\"01\" fileNum.defl=\"001\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function folderPlay(folderNum: string, fileNum: string, myAns: boolean = false): void {\n        CMD = 0x0F\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        if (myAns)\n            execute(0x19)\n    }\n\n    //% blockId=\"playFolderFilePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFilePort(folderNum: string, fileNum: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"playFolderFileVolumePort\" \n    //% block=\"play the mp3 in the folder:$folderNum filename:$fileNum with volume:$theVolume usingPin:$Rjpin\"\n    //% fileNum.defl=\"01\" theVolume.defl=\"10\" folderNum.defl=\"01\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function playFolderFileVolumePort(folderNum: string, fileNum: string, theVolume: string, Rjpin: DigitalRJPin): void {\n        \n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        \n        let volume = parseInt(theVolume)\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(200)\n\n        CMD = 15\n        para1 = parseInt(folderNum)\n        para2 = parseInt(fileNum)\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"volumePort\" \n    //% block=\"set MP3 volume:$theVolume usingPin:$Rjpin\"\n    //% theVolume.defl=\"10\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function volumePort(theVolume: string, Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        let volume = parseInt(theVolume)\n        if (volume > 30) {\n            volume = 30\n        }\n        CMD = 6\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendDataFast()\n        basic.pause(300)\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) {\n            myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i])\n        }\n        serial.writeBuffer(myBuff)\n    }\n\n\n    //% blockId=\"setTracking\" \n    //% block=\"play the mp3 in order of:%tracking || repeatList: $myAns\"\n    //% myAns.shadow=\"toggleYesNo\"\n    //% tracking.defl=1\n    //% expandableArgumentMode=\"toggle\"\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setTracking(tracking: number, myAns: boolean = false): void {\n        CMD = 0x03\n        para1 = 0x00\n        para2 = tracking\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n        execute(0x0D)\n        if (myAns)\n            execute(0x19)\n    }\n    //% blockId=MP3execute block=\"Set MP3 execute procedure:%myType\"\n    //% myType.fieldEditor=\"gridpicker\"\n    //% myType.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function execute(myType: playType): void {\n        CMD = myType\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=\"setVolume\" block=\"Set volume(0~25):%volume\"\n    //% volume.min=0 volume.max=25\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function setVolume(volume: number): void {\n        if (volume > 25) {\n            volume = 25\n        }\n        CMD = 0x06\n        para1 = 0\n        para2 = volume\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n    //% blockId=MP3setPort block=\"Set the MP3 port to %Rjpin\"\n    //% Rjpin.fieldEditor=\"gridpicker\"\n    //% Rjpin.fieldOptions.columns=2\n    //% subcategory=Excute group=\"MP3\" color=#EA5532\n    export function MP3SetPort(Rjpin: DigitalRJPin): void {\n        let pin = SerialPin.USB_TX\n        switch (Rjpin) {\n            case DigitalRJPin.J1:\n                pin = SerialPin.P8\n                break;\n            case DigitalRJPin.J2:\n                pin = SerialPin.P12\n                break;\n            case DigitalRJPin.J3:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.J4:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P0:\n                pin = SerialPin.P0\n                break;\n            case DigitalRJPin.P16:\n                pin = SerialPin.P16\n                break;\n            case DigitalRJPin.P14:\n                pin = SerialPin.P14\n                break;\n            case DigitalRJPin.P8:\n                pin = SerialPin.P8\n                break;\n        }\n        serial.redirect(\n            pin,\n            SerialPin.USB_RX,\n            BaudRate.BaudRate9600\n        )\n        setVolume(25)\n    }\n}","notlegos.ts":"// NotLegos Blocks\n//% block=\"Not LEGOs\" color=#0031AF weight=1000 icon=\"\\uf3a5\"\n//% groups='[\"MP3\",\"Sensors\"]'\nnamespace notLegos {\n\n\n/// BEGIN NEOPIXEL ///\n    export enum hues { red = 0, orange = 15, yellow = 40, lime = 85, green = 110, cyan = 170, blue = 240, purple = 260, pink = 310 }\n    export enum vfxEffect { parade = 0, fire = 1, indicate = 2, idle = 3, glow = 4, mine = 5, off = 6 }\n    let NeoSock: Strip = null; let NeoScore: Strip = null; let NeoWheel: Strip = null; let NeoKong: Strip = null; let NeoStrip: Strip = null; let NeoBrick: Strip = null\n    let vfx_mine_tog: number[] = []; let vfx_mine_hue: number[] = []; let vfx_mine_sat: number[] = []; let vfx_mine_lum: number[] = []\n    let vfx_fire_tog: number[] = []; let vfx_fire_hue: number[] = []; let vfx_fire_sat: number[] = []; let vfx_fire_lum: number[] = []; let vfx_fire_colors: number[] = []\n    let vfx_indicate_tog: number[] = []; let vfx_indicate_hue: number[] = []; let vfx_indicate_sat: number[] = []; let vfx_indicate_lum: number[] = [];\n    let vfx_idle_tog: number[] = []; let vfx_idle_hue: number[] = []; let vfx_idle_sat: number[] = []; let vfx_idle_lum: number[] = []\n    let vfx_glow_tog: number[] = []; let vfx_glow_hue: number[] = []; let vfx_glow_sat: number[] = []; let vfx_glow_lum: number[] = []\n    let vfx_active_tog: number[] = []; let vfx_active_hue: number[] = []; let vfx_active_sat: number[] = []; let vfx_active_lum: number[] = []\n    let vfx_off_hue: number[] = []; let vfx_off_sat: number[] = []; let vfx_off_lum: number[] = []\n    let vfx_parade_tog: number[] = []; let vfx_parade_hue: number[] = []; let vfx_parade_sat: number[] = []; let vfx_parade_lum: number[] = []; let vfx_parade_colors: number[] = [];\n    let vfx_last_tog: number[] = []; let vfx_last_hue: number[] = []; let vfx_last_sat: number[] = []; let vfx_last_lum: number[] = []\n    let vfx_master_tog: number[] = []; let vfx_master_hue: number[] = []; let vfx_master_sat: number[] = []; let vfx_master_lum: number[] = []; let vfx_master_effect: number[] = [];\n    let vfx_master_r: number[] = []; let vfx_master_g: number[] = []; let vfx_master_b: number[] = [];\n    let vfx_light_count = 0\n\n    let paletteKong = [1, 1, 1, 1]\n    let paletteWheel = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    let paletteSock = [2, 3, 2, 3, 2, 3, 2, 3]\n    let paletteScore = [2, 3, 2, 3, 2, 3, 2, 3]\n    let paletteBricks = [2, 3, 2, 3, 2, 3, 2, 3]\n    let paletteStrip = [6, 7, 8, 9, 10, 11, 6, 7, 8, 9, 10, 11, 6, 7, 8, 9, 10, 11, 6, 7]\n    let paletteSwing = [2, 3, 2, 3, 2, 3, 2, 3]\n\n    //% shim=sendBufferAsm\n    function sendBuffer(buf: Buffer, pin: DigitalPin) { }\n\n    export class Strip {\n        buf: Buffer;\n        pin: DigitalPin;\n        start: number; // start offset in LED strip\n        _length: number; // number of LEDs\n\n        setPixelHSLPrecise(pixeloffset: number, h: number, s: number, l: number): void {\n            if (pixeloffset < 0 || pixeloffset >= this._length)\n                return;\n            pixeloffset = (pixeloffset + this.start) * 3\n            h = Math.clamp(0,1,h/360)\n            s = Math.clamp(0,1,s/100)\n            l = Math.clamp(0,1,l/100)\n            let r, g, b;\n            if (s === 0) {\n                r = g = b = l; // achromatic\n            } else {\n                const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n                const p = 2 * l - q;\n                let t = h + 1/3\n                if (t < 0) { t += 1; }\n                else if (t > 1) {t -= 1; }\n                if (t < 1/6) {r = p + (q - p) * 6 * t;}\n                else if (t < 1/2) {r = q;}\n                else if (t < 2/3) { r = p + (q - p) * (2/3 - t) * 6; }\n                else { r = p; }\n                t = h\n                if (t < 0) { t += 1; }\n                else if (t > 1) { t -= 1; }\n                if (t < 1 / 6) { g = p + (q - p) * 6 * t; }\n                else if (t < 1 / 2) { g = q; }\n                else if (t < 2 / 3) { g = p + (q - p) * (2/3 - t) * 6; }\n                else { g = p; }\n                t = h - 1/3\n                if (t < 0) { t += 1; }\n                else if (t > 1) { t -= 1; }\n                if (t < 1 / 6) { b = p + (q - p) * 6 * t; }\n                else if (t < 1/2) { b = q; }\n                else if (t < 2/3) { b = p + (q - p) * (2/3 - t) * 6; }\n                else { b = p; }\n            }\n            vfx_master_g[pixeloffset/3] = Math.round(g * 255);\n            vfx_master_r[pixeloffset/3] = Math.round(r * 255);\n            vfx_master_b[pixeloffset/3] = Math.round(b * 255);\n            this.buf[pixeloffset + 0] = Math.round(g * 255);\n            this.buf[pixeloffset + 1] = Math.round(r * 255);\n            this.buf[pixeloffset + 2] = Math.round(b * 255);\n        }\n\n\n        // setPixelHSLPrecise(pixeloffset: number, h: number, s: number, l: number): void {\n        //     if (pixeloffset < 0 || pixeloffset >= this._length)\n        //         return;\n        //     pixeloffset = (pixeloffset + this.start) * 3\n        //     h = Math.clamp(0, 1, h / 360)\n        //     s = Math.clamp(0, 1, s / 100)\n        //     l = Math.clamp(0, 1, l / 100)\n        //     let r, g, b;\n        //     if (s === 0) {\n        //         r = g = b = l; // achromatic\n        //     } else {\n        //         const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        //         const p = 2 * l - q;\n        //         let t = h + 1 / 3\n        //         if (t < 0) { t += 1; }\n        //         else if (t > 1) { t -= 1; }\n        //         if (t < 1 / 6) { r = p + (q - p) * 6 * t; }\n        //         else if (t < 1 / 2) { r = q; }\n        //         else if (t < 2 / 3) { r = p + (q - p) * (2 / 3 - t) * 6; }\n        //         else { r = p; }\n        //         t = h\n        //         if (t < 0) { t += 1; }\n        //         else if (t > 1) { t -= 1; }\n        //         if (t < 1 / 6) { g = p + (q - p) * 6 * t; }\n        //         else if (t < 1 / 2) { g = q; }\n        //         else if (t < 2 / 3) { g = p + (q - p) * (2 / 3 - t) * 6; }\n        //         else { g = p; }\n        //         t = h - 1 / 3\n        //         if (t < 0) { t += 1; }\n        //         else if (t > 1) { t -= 1; }\n        //         if (t < 1 / 6) { b = p + (q - p) * 6 * t; }\n        //         else if (t < 1 / 2) { b = q; }\n        //         else if (t < 2 / 3) { b = p + (q - p) * (2 / 3 - t) * 6; }\n        //         else { b = p; }\n        //     }\n        //     this.buf[pixeloffset + 0] = Math.round(g * 255);\n        //     this.buf[pixeloffset + 1] = Math.round(r * 255);\n        //     this.buf[pixeloffset + 2] = Math.round(b * 255);\n        // }\n\n        // show() { sendBuffer(this.buf, this.pin); }  //Send all the changes to the strip.\n\n        show() { \n\n            for (let i = 0; i < 4; i++) {\n                this.buf[i * 3 + 0] = vfx_master_g[paletteKong[i]]\n                this.buf[i * 3 + 1] = vfx_master_r[paletteKong[i]]\n                this.buf[i * 3 + 2] = vfx_master_b[paletteKong[i]]\n            }\n            sendBuffer(this.buf.slice(0, 4 * 3), DigitalPin.P16);\n\n\n            for (let i = 0; i < 20; i++) {\n                this.buf[i * 3 + 0] = vfx_master_g[paletteWheel[i]]\n                this.buf[i * 3 + 1] = vfx_master_r[paletteWheel[i]]\n                this.buf[i * 3 + 2] = vfx_master_b[paletteWheel[i]]\n            }\n            sendBuffer(this.buf.slice(0, 20*3), DigitalPin.P15);\n\n            for (let i = 0; i < 8; i++) {\n                this.buf[i * 3 + 0] = vfx_master_g[paletteSock[i]]\n                this.buf[i * 3 + 1] = vfx_master_r[paletteSock[i]]\n                this.buf[i * 3 + 2] = vfx_master_b[paletteSock[i]]\n            }\n            sendBuffer(this.buf.slice(0, 8 * 3), DigitalPin.P14);\n\n            for (let i = 0; i < 8; i++) {\n                this.buf[i * 3 + 0] = vfx_master_g[paletteScore[i]]\n                this.buf[i * 3 + 1] = vfx_master_r[paletteScore[i]]\n                this.buf[i * 3 + 2] = vfx_master_b[paletteScore[i]]\n            }\n            sendBuffer(this.buf.slice(0, 8 * 3), DigitalPin.P13);\n\n\n            for (let i = 0; i < 8; i++) {\n                this.buf[i * 3 + 0] = vfx_master_g[paletteBricks[i]]\n                this.buf[i * 3 + 1] = vfx_master_r[paletteBricks[i]]\n                this.buf[i * 3 + 2] = vfx_master_b[paletteBricks[i]]\n            }\n            sendBuffer(this.buf.slice(0, 8 * 3), DigitalPin.P12);\n\n\n            for (let i = 0; i < 20; i++) {\n                this.buf[i * 3 + 0] = vfx_master_g[paletteStrip[i]]\n                this.buf[i * 3 + 1] = vfx_master_r[paletteStrip[i]]\n                this.buf[i * 3 + 2] = vfx_master_b[paletteStrip[i]]\n            }\n            sendBuffer(this.buf.slice(0, 20 * 3), DigitalPin.P8);\n\n\n        }  //Send all the changes to the strip.\n\n        length() { return this._length; }   //Gets the number of pixels declared on the strip\n\n        shift(offset: number = 1): void { this.buf.shift(-offset * 3, this.start * 3, this._length * 3) }   //Shift LEDs forward and clear with zeros.\n\n        rotate(offset: number = 1): void { this.buf.rotate(-offset * 3, this.start * 3, this._length * 3) } //Rotate LEDs forward\n\n        setPin(pin: DigitalPin): void {\n            this.pin = pin;\n            pins.digitalWritePin(this.pin, 0);  // don't yield to avoid races on initialization\n        }\n    }\n\n    function create(thePin: DigitalPin, numleds: number): Strip {\n        let strip = new Strip();\n        strip.buf = pins.createBuffer(numleds * 3);\n        strip.start = 0;\n        strip._length = numleds;\n        strip.setPin(thePin)\n        return strip;\n    }\n\n    //% blockId=NL_PIXEL_CastleSay\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Sock Circle:%sockPin  Wheel Strip/Circle:%wheelPin  Score Circle:%scorePin \"\n    //% weight=100\n    export function castleSayLights(sockPin: DigitalPin, wheelPin: DigitalPin, scorePin: DigitalPin): void {\n        NeoWheel = create(wheelPin, 20)\n        vfx_light_count = 20\n        vfxInit()\n        // vfx_indicate_hue[31] = hues.yellow\n        vfx_indicate_tog[1] = 1\n    }\n\n\n    function vfxInit(): void{\n        vfx_parade_colors = [hues.red, hues.orange, hues.yellow, hues.cyan, hues.blue, hues.purple]\n        vfx_fire_colors = [hues.red, hues.red, hues.red, hues.red, hues.orange, hues.orange, hues.orange, hues.orange, hues.orange, hues.yellow]\n        for (let index = 0; index < 6; index++) {\n            vfx_parade_tog.push(randint(0, 1))\n            vfx_parade_hue.push(vfx_parade_colors[randint(0, vfx_parade_colors.length - 1)])\n            vfx_parade_sat.push(100)\n            vfx_parade_lum.push(randint(10, 65))\n        }\n        for (let index = 0; index < 1; index++) {\n            vfx_mine_tog.push(0)\n            vfx_mine_hue.push(hues.red)\n            vfx_mine_sat.push(100)\n            vfx_mine_lum.push(50)\n            vfx_glow_tog.push(0)\n            vfx_glow_hue.push(50)\n            vfx_glow_sat.push(0)\n            vfx_glow_lum.push(0)\n            vfx_active_tog.push(0)\n            vfx_active_hue.push(50)\n            vfx_active_sat.push(0)\n            vfx_glow_lum.push(0)\n            vfx_off_hue.push(0)\n            vfx_off_sat.push(0)\n            vfx_off_lum.push(0)\n        }\n        for (let index = 0; index < 3; index++) {\n            vfx_fire_tog.push(randint(0, 1))\n            vfx_fire_hue.push(vfx_fire_colors[randint(0, vfx_fire_colors.length - 1)])\n            vfx_fire_sat.push(100)\n            vfx_fire_lum.push(randint(30, 80))\n        }\n        for (let index = 0; index < 2; index++) {\n            vfx_indicate_tog.push(0)\n            vfx_indicate_lum.push(50)\n            vfx_indicate_hue.push(50)\n            vfx_indicate_sat.push(100)\n            vfx_idle_tog.push(1)\n            if (index % 2 == 0) { vfx_idle_tog[index] = 0; }\n            vfx_idle_hue.push(265)\n            if (index % 2 == 0) { vfx_idle_hue[index] = 2; }\n            vfx_idle_sat.push(100)\n            vfx_idle_lum.push(50)\n        }\n        for (let index = 0; index < vfx_light_count; index++) {\n            vfx_master_tog.push(0)\n            vfx_master_hue.push(0)\n            vfx_master_sat.push(100)\n            vfx_master_lum.push(50)\n            vfx_master_effect.push(vfxEffect.off)    //leave this be!\n        }\n    }\n\n    //% blockId=NL_PIXEL_ResetVFX\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Reset VFX %effect\"\n    //% weight=100\n    export function vfxReset(effect:vfxEffect):void{\n        if (effect == vfxEffect.idle){\n            for (let index = 0; index < 2; index++) {\n                vfx_idle_tog[index]=1\n                if (index % 2 == 0) { vfx_idle_tog[index] = 0; }\n                vfx_idle_hue[index]=265\n                if (index % 2 == 0) { vfx_idle_hue[index] = 2; }\n                vfx_idle_sat[index]=100\n                vfx_idle_lum[index]=50\n            }\n        } else if (effect == vfxEffect.glow) {\n            for (let index = 0; index < 1; index++) {\n                vfx_glow_tog[index] = 0\n                vfx_glow_hue[index] = 50\n                // vfx_glow_sat[index] = 100\n                vfx_glow_lum[index] = 0\n            }\n        } else if (effect == vfxEffect.mine) {\n            for (let index = 0; index < 1; index++) {\n                vfx_mine_tog[index] = 0\n                vfx_mine_hue[index] = hues.red\n                vfx_mine_sat[index] = 100\n                vfx_mine_lum[index] = 50\n            }\n        } else if (effect == vfxEffect.indicate) {\n            for (let index = 0; index < 2; index++) {\n                vfx_indicate_tog[index] = 0\n                vfx_indicate_sat[index] = 100\n                vfx_indicate_lum[index] = 50\n            }\n        }\n    }\n\n    //% blockId=NL_PIXEL_CastleSayTick\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Advance Castle Say lights\"\n    //% weight=100\n    export function castleSayTick(): void {\n        paradeTick()\n        fireTick()\n        glowTick()\n        activeTick()\n        castleSayWrite()\n        indicateTick()\n        idleTick()\n        mineTick()\n    }\n\n    function paradeTick(): void{\n        for (let index=0; index < 6; index++){\n            let thisLum = vfx_parade_lum[index]\n            let thisHue = vfx_parade_hue[index]\n            let thisTog = vfx_parade_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0){\n                if (thisLum < 65){\n                    vfx_parade_lum[index] = thisLum + 12\n                } else if (thisLum >= 65){\n                    vfx_parade_tog[index] = 1\n                }\n            } else if (thisTog == 1){\n                if (thisLum>10){\n                    vfx_parade_lum[index] = thisLum - 4\n                } else if (thisLum <= 10){\n                    vfx_parade_tog[index] = 0\n                    while (nextHue == thisHue){\n                        nextHue = vfx_parade_colors[randint(0, vfx_parade_colors.length - 1)]\n                    }\n                    vfx_parade_hue[index] = nextHue\n                    vfx_parade_lum[index] = thisLum - randint(0,10)\n                }\n            }\n        }\n    }\n\n    function mineTick(): void {\n        for (let index = 0; index < 1; index++) {\n            let thisLum = vfx_mine_lum[index]\n            let thisHue = vfx_mine_hue[index]\n            let thisTog = vfx_mine_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 200) {\n                    vfx_mine_lum[index] = thisLum + 30\n                } else if (thisLum >= 200) {\n                    vfx_mine_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 0) {\n                    vfx_mine_lum[index] = thisLum - 30\n                } else if (thisLum <= 0) {\n                    vfx_mine_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function idleTick(): void {\n        for (let index = 0; index < 2; index++) {\n            let thisLum = vfx_idle_lum[index]\n            let thisHue = vfx_idle_hue[index]\n            let thisTog = vfx_idle_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisHue < 265) {\n                    vfx_idle_hue[index] = thisHue + 1\n                } else if (thisHue >= 265) {\n                    vfx_idle_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisHue > 2) {\n                    vfx_idle_hue[index] = thisHue - 1\n                } else if (thisHue <= 2) {\n                    vfx_idle_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function indicateTick(): void {\n        for (let index = 0; index < 2; index++) {\n            let thisLum = vfx_indicate_lum[index]\n            let thisHue = vfx_indicate_hue[index]\n            let thisTog = vfx_indicate_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 80) {\n                    vfx_indicate_lum[index] = thisLum + 12\n                } else if (thisLum >= 80) {\n                    vfx_indicate_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 25) {\n                    vfx_indicate_lum[index] = thisLum - 4\n                } else if (thisLum <= 25) {\n                    vfx_indicate_tog[index] = 0\n                }\n            }\n        }\n    }\n\n    function fireTick(): void {\n        for (let index = 0; index < 3; index++) {\n            let thisLum = vfx_fire_lum[index]\n            let thisHue = vfx_fire_hue[index]\n            let thisTog = vfx_fire_tog[index]\n            let nextHue = thisHue\n            if (thisTog == 0) {\n                if (thisLum < 80) {\n                    vfx_fire_lum[index] = thisLum + 15\n                } else if (thisLum >= 80) {\n                    vfx_fire_tog[index] = 1\n                }\n            } else if (thisTog == 1) {\n                if (thisLum > 30) {\n                    vfx_fire_lum[index] = thisLum - 5\n                } else if (thisLum <= 30) {\n                    vfx_fire_tog[index] = 0\n                    while (nextHue == thisHue) {\n                        nextHue = vfx_fire_colors[randint(0, vfx_fire_colors.length - 1)]\n                    }\n                    vfx_fire_hue[index] = nextHue\n                    vfx_fire_lum[index] = thisLum - randint(0, 30)\n                }\n            }\n        }\n    }\n\n    function glowTick(): void {\n        for (let index = 0; index < 1; index++) {\n            let thisLum = vfx_glow_lum[index]\n            if (thisLum < 4){\n                vfx_glow_lum[index] = thisLum+.2\n            } else if (thisLum < 5) {\n                vfx_glow_lum[index] = thisLum+ + .3\n            } else if (thisLum < 10) {\n                vfx_glow_lum[index] = thisLum + .5\n            } else if (thisLum < 15) {\n                vfx_glow_lum[index] = thisLum + 1\n            }else if (thisLum < 30) {\n                vfx_glow_lum[index] = thisLum + 1.5\n            } else if (thisLum < 100) {\n                vfx_glow_lum[index] = thisLum + 4\n            } else{\n                vfx_glow_lum[index] = 0\n            }\n        }\n    }\n\n    function activeTick(): void {\n        for (let index = 0; index < 1; index++) {\n            let thisLum = vfx_active_lum[index]\n            if (thisLum < 4) {\n                vfx_active_lum[index] = thisLum + .2\n            } else if (thisLum < 5) {\n                vfx_active_lum[index] = thisLum + + .3\n            } else if (thisLum < 10) {\n                vfx_active_lum[index] = thisLum + .5\n            } else if (thisLum < 15) {\n                vfx_active_lum[index] = thisLum + 1\n            } else if (thisLum < 30) {\n                vfx_active_lum[index] = thisLum + 1.5\n            } else if (thisLum < 100) {\n                vfx_active_lum[index] = thisLum + 4\n            } else {\n                vfx_active_lum[index] = 0\n            }\n        }\n    }\n\n    function vfxPrepareMaster(): void{\n        vfx_master_hue[0] = vfx_glow_hue[0]\n        vfx_master_sat[0] = vfx_glow_sat[0]\n        vfx_master_lum[0] = Math.min(100, vfx_glow_lum[0])\n        vfx_master_hue[1] = vfx_mine_hue[0]\n        vfx_master_sat[1] = vfx_mine_sat[0]\n        vfx_master_lum[1] = Math.max(0, Math.min(50, vfx_mine_lum[0]))\n        vfx_master_hue[2] = vfx_idle_hue[0]\n        vfx_master_sat[2] = vfx_idle_sat[0]\n        vfx_master_lum[2] = Math.max(0, Math.min(50, vfx_idle_lum[0]))\n        vfx_master_hue[3] = vfx_idle_hue[1]\n        vfx_master_sat[3] = vfx_idle_sat[1]\n        vfx_master_lum[3] = Math.max(0, Math.min(50, vfx_idle_lum[1]))\n        vfx_master_hue[4] = vfx_indicate_hue[0]\n        vfx_master_sat[4] = vfx_indicate_sat[0]\n        vfx_master_lum[4] = Math.max(0, Math.min(50, vfx_indicate_lum[0]))\n        vfx_master_hue[5] = vfx_indicate_hue[1]\n        vfx_master_sat[5] = vfx_indicate_sat[1]\n        vfx_master_lum[5] = Math.max(0, Math.min(50, vfx_indicate_lum[1]))\n        vfx_master_hue[6] = vfx_parade_hue[0]\n        vfx_master_sat[6] = vfx_parade_sat[0]\n        vfx_master_lum[6] = Math.max(0, Math.min(50, vfx_parade_lum[0]))\n        vfx_master_hue[7] = vfx_parade_hue[1]\n        vfx_master_sat[7] = vfx_parade_sat[1]\n        vfx_master_lum[7] = Math.max(0, Math.min(50, vfx_parade_lum[1]))\n        vfx_master_hue[8] = vfx_parade_hue[2]\n        vfx_master_sat[8] = vfx_parade_sat[2]\n        vfx_master_lum[8] = Math.max(0, Math.min(50, vfx_parade_lum[2]))\n        vfx_master_hue[9] = vfx_parade_hue[3]\n        vfx_master_sat[9] = vfx_parade_sat[3]\n        vfx_master_lum[9] = Math.max(0, Math.min(50, vfx_parade_lum[3]))\n        vfx_master_hue[10] = vfx_parade_hue[4]\n        vfx_master_sat[10] = vfx_parade_sat[4]\n        vfx_master_lum[10] = Math.max(0, Math.min(50, vfx_parade_lum[4]))\n        vfx_master_hue[11] = vfx_parade_hue[5]\n        vfx_master_sat[11] = vfx_parade_sat[5]\n        vfx_master_lum[11] = Math.max(0, Math.min(50, vfx_parade_lum[5]))\n        vfx_master_hue[12] = vfx_fire_hue[0]\n        vfx_master_sat[12] = vfx_fire_sat[0]\n        vfx_master_lum[12] = Math.max(0, Math.min(50, vfx_fire_lum[0]))\n        vfx_master_hue[13] = vfx_fire_hue[1]\n        vfx_master_sat[13] = vfx_fire_sat[1]\n        vfx_master_lum[13] = Math.max(0, Math.min(50, vfx_fire_lum[1]))\n        vfx_master_hue[14] = vfx_fire_hue[2]\n        vfx_master_sat[14] = vfx_fire_sat[2]\n        vfx_master_lum[14] = Math.max(0, Math.min(50, vfx_fire_lum[2]))\n        vfx_master_hue[15] = vfx_off_hue[0]\n        vfx_master_sat[15] = vfx_off_sat[0]\n        vfx_master_lum[15] = 0\n        vfx_master_hue[16] = vfx_active_hue[0]\n        vfx_master_sat[16] = vfx_active_sat[0]\n        vfx_master_lum[16] = Math.min(100, vfx_active_lum[0])\n        for (let index=0; index < NeoWheel.length(); index++){\n\n        }\n        // NeoWheel.buf.getNumber(0)\n\n    }\n\n    function castleSayWrite(): void{\n        vfxPrepareMaster()\n        let masterIndex = 0\n        for (let index = 0; index < NeoWheel.length(); index++) {\n            NeoWheel.setPixelHSLPrecise(index, vfx_master_hue[masterIndex], vfx_master_sat[masterIndex], vfx_master_lum[masterIndex])\n            masterIndex++\n        }\n        NeoWheel.show()\n    }\n\n    //% blockId=NL_PIXEL_SetEffect\n    //% subcategory=\"Neopixel\" Group=\"Neopixel\"\n    //% block=\"Set %region VFX to %effect\"\n    //% weight=100\n    export function setEffect(region:vfxRegion, effect:vfxEffect){\n        if (region == vfxRegion.Score1){\n            vfx_master_effect[30] = effect\n        } else if (region == vfxRegion.Score2) {\n            vfx_master_effect[31] = effect\n        } else if (region == vfxRegion.Score3) {\n            vfx_master_effect[32] = effect\n        } else if (region == vfxRegion.Score4) {\n            vfx_master_effect[33] = effect\n        } else if (region == vfxRegion.Score5) {\n            vfx_master_effect[26] = effect\n        } else if (region == vfxRegion.Score6) {\n            vfx_master_effect[27] = effect\n        } else if (region == vfxRegion.Score7) {\n            vfx_master_effect[28] = effect\n        } else if (region == vfxRegion.Score8) {\n            vfx_master_effect[29] = effect\n        } else if (region == vfxRegion.ScoreAll) {\n            for (let i = 26; i <= 33; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SockAll) {\n            for (let i = 0; i <= 7; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelInner) {\n            for (let i = 18; i <= 25; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelOuter) {\n            for (let i = 8; i <= 17; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.WheelAll) {\n            for (let i=8; i <= 25; i++){ vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.CastleSayAll) {\n            for (let i = 0; i <= 33; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotA) {\n            for (let i = 8; i <= 11; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotB) {\n            for (let i = 6; i <= 7; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotC) {\n            for (let i = 12; i <= 13; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotD) {\n            for (let i = 4; i <= 5; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotE) {\n            for (let i = 14; i <= 15; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotF) {\n            for (let i = 2; i <= 3; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotG) {\n            for (let i = 16; i <= 17; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotH) {\n            for (let i = 0; i <= 1; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotI) {\n            for (let i = 18; i <= 19; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.SpotAll) {\n            for (let i = 0; i <= 19; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.BrickWheel) {\n            vfx_master_effect[20] = effect\n            vfx_master_effect[27] = effect\n        } else if (region == vfxRegion.BrickBomb) {\n            vfx_master_effect[25] = effect\n        } else if (region == vfxRegion.BrickShell) {\n            vfx_master_effect[26] = effect\n        } else if (region == vfxRegion.BrickGhost) {\n            vfx_master_effect[24] = effect\n        } else if (region == vfxRegion.BrickDragon) {\n            for (let i = 22; i <= 23; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.BrickCannon) {\n            vfx_master_effect[21] = effect\n        } else if (region == vfxRegion.BrickAll) {\n            for (let i = 20; i <= 27; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongFront) {\n            for (let i = 28; i <= 29; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongBack) {\n            for (let i = 30; i <= 31; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.KongAll) {\n            for (let i = 28; i <=31; i++) { vfx_master_effect[i] = effect };\n        } else if (region == vfxRegion.CastleDoAll) {\n            for (let i = 0; i < vfx_light_count; i++) { vfx_master_effect[i] = effect };\n        } \n    }\n\n    export enum vfxRegion{\n        Score1, Score2, Score3, Score4, Score5, Score6, Score7, Score8, ScoreAll,\n        SockAll,\n        WheelInner, WheelOuter, WheelAll,\n        KongFront, KongBack, KongAll,\n        BrickWheel, BrickBomb, BrickShell, BrickGhost, BrickDragon, BrickCannon, BrickAll,\n        SpotA, SpotB, SpotC, SpotD, SpotE, SpotF, SpotG, SpotH, SpotI, SpotAll,\n        CastleSayAll,\n        CastleDoAll\n    }\n\n/// END NEOPIXEL ///\n\n\n/// BEGIN SONAR ///\n\n    let sonarPinT = DigitalPin.P0\n    let sonarPinE = DigitalPin.P0\n\n    //% blockId=NL_SENSOR_SonarFirstRead\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"first distance from sonar at %pin1|%pin2\"\n    //% weight=101\n    export function SonarFirstRead(pin1: DigitalPin, pin2: DigitalPin): number {\n        sonarPinT = pin1\n        sonarPinE = pin2\n        pins.setPull(sonarPinT, PinPullMode.PullNone)\n        return SonarNextRead()\n    }\n\n    //% blockId=NL_SENSOR_SonarNextRead\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"next sonar distance\"\n    //% weight=100\n    export function SonarNextRead(): number {\n        pins.digitalWritePin(sonarPinT, 0)\n        control.waitMicros(2)\n        pins.digitalWritePin(sonarPinT, 1)\n        control.waitMicros(10)\n        pins.digitalWritePin(sonarPinT, 0)\n        return Math.floor(pins.pulseIn(sonarPinE, PulseValue.High, 25000) * 34 / 2000)\n    }\n\n/// END SONAR ///\n\n\n/// BEGIN MP3 ///\n\n    export enum playType { Play = 0x0D, Stop = 0x16, PlayNext = 0x01, PlayPrevious = 0x02, Pause = 0x0E }\n    let Start_Byte = 0x7E\n    let Version_Byte = 0xFF\n    let Command_Length = 0x06\n    let End_Byte = 0xEF\n    let Acknowledge = 0x00\n    let CMD = 0x00\n    let para1 = 0x00\n    let para2 = 0x00\n    let highByte = 0x00\n    let lowByte = 0x00\n    let dataArr: number[] = [Start_Byte, Version_Byte, Command_Length, CMD, Acknowledge, para1, para2, highByte, lowByte, End_Byte]\n    let mp3musicPin: SerialPin\n    let mp3music = false\n    let mp3player = false\n    let mp3sfxPin: SerialPin\n    let mp3sfx = false\n    let mp3musicVol = 0\n    let mp3playerPin: SerialPin\n    let mp3playerVol = 0\n    let mp3sfxVol = 0\n    let isPot = false\n    let potPin = AnalogPin.P0\n    let masterVolume = 25\n\n    //% blockId=NL_SENSOR_TrimpotSet\n    //% subcategory=\"Sensors\" Group=\"Sensors\"\n    //% block=\"set volume control pot at %aPin\"\n    export function potSet(aPin: AnalogPin): void {\n        potPin = aPin\n        isPot = true\n        masterVolume = potRead()\n    }\n\n    function potRead() {\n        if (isPot) { return Math.round(pins.map(pins.analogReadPin(potPin), 0, 1023, 0, 30)) }\n        else { return 5 }\n    }\n\n    function mp3_checkSum(): void {\n        let total = 0;\n        for (let i = 1; i < 7; i++) { total += dataArr[i] }\n        total = 65536 - total\n        lowByte = total & 0xFF;\n        highByte = total >> 8;\n        dataArr[7] = highByte\n        dataArr[8] = lowByte\n    }\n\n    function mp3_sendData(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) { myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i]) }\n        serial.writeBuffer(myBuff)\n        basic.pause(20) // Was 100; problematic at 10\n    }\n\n    function mp3_sendDataFast(): void {\n        let myBuff = pins.createBuffer(10);\n        for (let i = 0; i < 10; i++) { myBuff.setNumber(NumberFormat.UInt8BE, i, dataArr[i]) }\n        serial.writeBuffer(myBuff)\n    }\n\n    //% blockId=NL_MP3_InitiateAs\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Ready MP3bit for %type at %sPin\"\n    //% dPin.fieldEditor=\"gridpicker\"\n    export function mp3setPorts(mp3bit: mp3type, sPin: SerialPin): void {\n        if (mp3bit == mp3type.music) {\n            mp3musicPin = sPin\n            mp3music = true\n            mp3musicVol = 100\n            setVolume(mp3type.music, mp3musicVol)\n        } else if (mp3bit == mp3type.player) {\n            mp3playerPin = sPin\n            mp3player = true\n            mp3playerVol = 100\n            setVolume(mp3type.player, mp3playerVol)\n        } else if (mp3bit == mp3type.sfxvoice) {\n            mp3sfxPin = sPin\n            mp3sfx = true\n            mp3sfxVol = 100\n            setVolume(mp3type.sfxvoice, mp3sfxVol)\n        }   \n    }\n\n    //% blockId=\"nl_playfilefolder\" \n    //% block=\"Play folder %folderNum file %fileNum on %sPin\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3fileFolder(folderNum: string, fileNum: string, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        dataArr[5] = parseInt(folderNum)\n        dataArr[6] = parseInt(fileNum)\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=\"NL_MP3_SendNumbers\" \n    //% block=\"Send numbers for folder %folderNum file %fileNum on %sPin\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function sendMP3numbers(folderNum: number, fileNum: number, sPin: SerialPin): void {\n        serial.redirect(sPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        dataArr[3] = 15\n        dataArr[5] = folderNum\n        dataArr[6] = fileNum\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=NL_MP3_UpdateVolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Update volume for all\"\n    export function updateVolumeGlobal(): void {\n        let nowVol = potRead()\n        if (masterVolume != nowVol){\n            masterVolume = nowVol\n            setVolume(mp3type.music, mp3musicVol)\n            setVolume(mp3type.player, mp3playerVol)\n            setVolume(mp3type.sfxvoice, mp3sfxVol)\n        }\n    }\n\n    //% blockId=NL_MP3_SetVolume\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Set %mp3bit volume to %vol\"\n    export function setVolume(mp3bit:mp3type, vol:number): void {\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3musicVol = vol\n        } else if (mp3bit == mp3type.player) {\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3playerVol = vol\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            mp3sfxVol = vol\n        }\n        dataArr[3] = 6\n        dataArr[5] = 0\n        dataArr[6] = Math.round(vol / 100 * masterVolume)\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n    //% blockId=NL_MP3_GetVolumes\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Get current volumes\"\n    export function getVolumes() {\n        return \"m\" + mp3musicVol + \" p\" + mp3playerVol + \" s\" + mp3sfxVol + \" g\" + masterVolume\n    }\n\n    //% blockId=\"NL_MP3_StopPlayback\" \n    //% block=\"Stop playback on %mp3bit\"\n    //% subcategory=MP3 group=\"MP3\"\n    export function stopPlayback(mp3bit:mp3type): void {\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        } else if (mp3bit == mp3type.player){\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n        }\n        CMD = 0x16\n        para1 = 0x00\n        para2 = 0x00\n        dataArr[3] = CMD\n        dataArr[5] = para1\n        dataArr[6] = para2\n        mp3_checkSum()\n        mp3_sendData()\n    }\n\n/// END MP3 ///\n\n/// BEGIN SOUND BANK ///\n    export enum mp3type { music, player, sfxvoice }\n    export enum musicGenre { intro, tutorial, awaiting, level, won, lost }\n    export enum playerSaying { ready, yay, intro, nay, ouch, success, failure, won, lost, hurry }\n    export enum sfxType { correct, incorrect, ghost, fire, explosion, splash, spark, slash }\n    export enum voiceSaying { name, begin, retry, next, complete, gameover, welcome, intro, howto1, howto2, howto3, howto4, howto5, howto6, howto7, howto8, howto9 }\n    export enum magicianSaysSide { left, right }\n    export enum magicianDifficulty { easy, medium, hard }\n    export enum spotName { A, B, C, D, E, F, G, H, I }\n    export enum playerChar { mario, luigi, peach, daisy, toad, wario }\n\n    let sb_music_tutorial = feedBank(\"1.1.46|1.2.51|1.3.51|1.4.59|1.5.60|1.6.60|1.7.60|1.8.60|1.9.60|1.10.60|1.11.60|1.12.60|1.13.60|1.14.60|1.15.60|1.16.60|1.17.60|1.18.60|1.19.60|1.20.60|1.21.60\")\n    let sb_music_awaiting = feedBank(\"2.1.64|2.2.120|2.3.120|2.4.120|2.5.120|2.6.114|2.7.120|2.8.103|2.9.120|2.10.120|2.11.120|2.12.120|2.13.119|2.14.120|2.15.120|2.16.103|2.17.119|2.18.120|2.19.86|2.20.120\")\n    let sb_music_level = feedBank(\"3.1.120|3.2.120|3.3.120|3.4.120|3.5.120|3.6.120|3.7.120|3.8.120|3.9.120|3.10.92|3.11.120|3.12.120|3.13.111|3.14.116|3.15.98|3.16.120|3.17.120|3.18.82|3.19.120|3.20.120|3.21.120|3.22.120|3.23.120|3.24.120|3.25.120|3.26.120|3.27.91|3.28.120|3.29.120|3.30.41|3.31.120|3.32.120|3.33.120|3.34.94|3.35.120|3.36.120|3.37.120|3.38.120|3.39.120|3.40.120|3.41.78|3.42.120|3.43.120|3.44.120|3.45.120|3.46.120|3.47.120|3.48.120|3.49.120|3.50.120|3.51.120|3.52.113|3.53.120|3.54.120|3.55.42|3.56.120|3.57.120|3.58.120|3.59.114|3.60.120|3.61.120|3.62.118|3.63.120|3.64.120|3.65.120|3.66.120|3.67.120|3.68.59|3.69.120|3.70.120|3.71.118|3.72.120|3.73.120|3.74.70|3.75.120|3.76.120|3.77.120|3.78.120|3.79.120|3.80.120|3.81.120|3.82.120|3.83.80|3.84.120|3.85.120|3.86.120|3.87.120|3.88.107|3.89.120|3.90.120|3.91.120|3.92.120|3.93.36|3.94.120|3.95.120|3.96.120|3.97.120|3.98.120|3.99.120|3.100.63|3.101.120|3.102.120|3.103.112|3.104.105|3.105.120|3.106.110|3.107.120|3.108.120|3.109.120|3.110.120|3.111.120|3.112.120|3.113.120|3.114.120|3.115.120|3.116.119|3.117.120|3.118.120|3.119.120|3.120.120|3.121.120|3.122.120|3.123.120|3.124.120|3.125.120|3.126.104|3.127.120|3.128.87|3.129.120|3.130.118|3.131.120|3.132.120|3.133.50|3.134.109|3.135.120|3.136.120|3.137.120|3.138.91|3.139.120|3.140.120|3.141.120|3.142.120|3.143.120|3.144.120|3.145.104|3.146.112|3.147.120\")\n    let sb_music_won = feedBank(\"4.1.30|4.2.22|4.3.30|4.4.17|4.5.29|4.6.30|4.7.30|4.8.30|4.9.30|4.10.30|4.11.20|4.12.28|4.13.30|4.14.15|4.15.30|4.16.17|4.17.17|4.18.15|4.19.30|4.20.30|4.21.30|4.22.17|4.23.30|4.24.30|4.25.30\")\n    let sb_music_lost = feedBank(\"5.1.30|5.2.30|5.3.30|5.4.30|5.5.30|5.6.30|5.7.30|5.8.30|5.9.30|5.10.30|5.11.30\")\n    let sb_music_intro = feedBank(\"9.1.3|9.2.4|9.3.8|9.4.5|9.5.4|9.6.12|9.7.3|9.8.7|9.9.6|9.10.7|9.11.9|9.12.9|9.13.11|9.14.3|9.15.10|9.16.3|9.17.6|9.18.5|9.19.6|9.20.5|9.21.7|9.22.5|9.23.3|9.24.7|9.25.6|9.26.6|9.27.11|9.28.5|9.29.5|9.30.4|9.31.6|9.32.4|9.33.4|9.34.10|9.35.8|9.36.8|9.37.3|9.38.7|9.39.4|9.40.6|9.41.3|9.42.7|9.43.7|9.44.3|9.45.6|9.46.1|9.47.2|9.48.2|9.49.8|9.50.16|9.51.9|9.52.10|9.53.13|9.54.14|9.55.14|9.56.16|9.57.7|9.58.4|9.59.9|9.60.8|9.61.9|9.62.9|9.63.12|9.64.4|9.65.6|9.66.9|9.67.5|9.68.6|9.69.5|9.70.10|9.71.8|9.72.8|9.73.5|9.74.3\")\n    let sb_sfx_correct = feedBank(\"6.1.5|6.2.8|6.3.6|6.4.7|6.5.6|6.6.14|6.7.7|6.8.8|6.9.12|6.10.7|6.11.9|6.12.7|6.13.10|6.14.8|6.15.8|6.16.4|6.17.7|6.18.4|6.19.2|6.20.10|6.21.7|6.22.7|6.23.6|6.24.4|6.25.7|6.26.12|6.27.4|6.28.6|6.29.6|6.30.6|6.31.4|6.32.5|6.33.3|6.34.6|6.35.6|6.36.6|6.37.6|6.38.4|6.39.8|6.40.6|6.41.3|6.42.3|6.43.7|6.44.8|6.45.6|6.46.2|6.47.5|6.48.7|6.49.8|6.50.7|6.51.6|6.52.7|6.53.6|6.54.8|6.55.5|6.56.5|6.57.7|6.58.6|6.59.8|6.60.5|6.61.6|6.62.8|6.63.3|6.64.3|6.65.6|6.66.3|6.67.6|6.68.2|6.69.3|6.70.3|6.71.2|6.72.3|6.73.6|6.74.7|6.75.5|6.76.3|6.77.5|6.78.3|6.79.2|6.80.3|6.81.3|6.82.1|6.83.1|6.84.1|6.85.1|6.86.1|6.87.1|6.88.3|6.89.1|6.90.1|6.91.4|6.92.4\")\n    let sb_sfx_incorrect = feedBank(\"7.1.6|7.2.5|7.3.3|7.4.5|7.5.7|7.6.6|7.7.4|7.8.1|7.9.3|7.10.4|7.11.3|7.12.3|7.13.6|7.14.3|7.15.1|7.16.1|7.17.1|7.18.1|7.19.5|7.20.4|7.21.3|7.22.7\")\n    let sb_sfx_beep = feedBank(\"8.1.1|8.2.2|8.3.1\")\n    let sb_sfx_smash = feedBank(\"8.4.1|8.5.1|8.6.1|8.7.3\")\n    let sb_sfx_falling = feedBank(\"8.8.6\")\n    let sb_sfx_boom = feedBank(\"8.9.1|8.10.2|8.11.3|8.12.2\")\n    let sb_sfx_cannon = feedBank(\"8.13.2|8.14.1|8.15.1|8.16.2|8.17.2\")\n    let sb_sfx_fire = feedBank(\"8.18.2|8.19.2|8.20.5|8.21.2\")\n    let sb_sfx_ghost = feedBank(\"8.22.5|8.23.4|8.24.5|8.25.5\")\n    let sb_sfx_hit = feedBank(\"8.26.1|8.27.1|8.28.1|8.29.1|8.30.1\")\n    let sb_sfx_slash = feedBank(\"8.31.1|8.32.1|8.33.1|8.34.1|8.35.1|8.36.1|8.37.1|8.38.1|8.39.1|8.40.1|8.41.1|8.42.2\")\n    let sb_sfx_zap = feedBank(\"8.43.1|8.44.1|8.45.2|8.46.1|8.47.2|8.48.1\")\n    let sb_sfx_splash = feedBank(\"8.49.2|8.50.2|8.51.1|8.52.1|8.53.2|8.54.1|8.55.2|8.56.1|8.57.2\")\n    let sb_sfx_voice = feedBank(\"10.1.4|10.2.6|10.3.4|10.4.4|10.5.6|10.6.4|10.7.11|10.8.6|10.9.4|10.10.1\")\n    let sb_magician_left_easy = feedBank(\"11.1.3|11.2.6|11.3.7|11.4.6|11.5.6|11.6.7|11.7.6|11.8.6|11.9.6|11.10.7|11.11.6|11.12.6|11.13.7|11.14.6|11.15.6|11.16.6|11.17.6|11.18.6|11.19.6|11.20.6|11.21.6|11.22.7|11.23.6|11.24.6|11.25.6|11.26.6|11.27.7|11.28.7|11.29.7|11.30.6|11.31.6|11.32.8|11.33.7|11.34.6|11.35.7|11.36.5|11.37.6|11.38.8|11.39.6|11.40.6|11.41.6|11.42.6|11.43.6|11.44.7|11.45.6|11.46.7|11.47.7|11.48.8|11.49.6|11.50.7|11.51.6|11.52.6|11.53.7|11.54.8|11.55.7|11.56.6|11.57.7|11.58.6|11.59.6|11.60.6|11.61.6\")\n    let sb_magician_left_medium = feedBank(\"11.62.7|11.63.6|11.64.6|11.65.8|11.66.7|11.67.8|11.68.8|11.69.8|11.70.7|11.71.7|11.72.6|11.73.6|11.74.6|11.75.6|11.76.6|11.77.7|11.78.6|11.79.7|11.80.6|11.81.6|11.82.6|11.83.7|11.84.6|11.85.6|11.86.6|11.87.7|11.88.6|11.89.6|11.90.7|11.91.6|11.92.6|11.93.6|11.94.6|11.95.6|11.96.7|11.97.6|11.98.6|11.99.7|11.100.6|11.101.6|11.102.6|11.103.7|11.104.6|11.105.8|11.106.6|11.107.6|11.108.6|11.109.7|11.110.6|11.111.7|11.112.7|11.113.6|11.114.6|11.115.7|11.116.6|11.117.7|11.118.7|11.119.6|11.120.6|11.121.6|11.122.7|11.123.7|11.124.6|11.125.6|11.126.6|11.127.8|11.128.7|11.129.6|11.130.8|11.131.7|11.132.6|11.133.7|11.134.6|11.135.6|11.136.7|11.137.7\")\n    let sb_magician_left_hard = feedBank(\"11.219.7|11.220.6|11.221.6|11.222.6|11.223.6|11.224.6|11.225.7|11.226.7|11.227.6|11.228.6|11.229.6|11.230.8|11.231.7|11.232.7|11.233.6|11.234.6|11.235.6|11.236.8|11.237.7|11.238.7|11.239.6|11.240.6|11.241.8|11.242.7|11.243.7|11.244.6|11.245.6|11.246.7|11.247.7|11.248.7|11.249.7|11.250.6|11.251.6|11.252.6|11.253.6|11.254.6|11.255.6|11.256.6|11.257.6|11.258.7|11.259.7|11.260.7|11.261.6|11.262.6|11.263.6|11.264.6|11.265.6|11.266.6|11.267.7|11.268.6|11.269.6|11.270.6|11.271.6|11.272.6|11.273.6|11.274.6|11.275.7|11.276.6|11.277.6|11.278.7|11.279.7|11.280.7|11.281.6|11.282.6|11.283.7|11.284.9|11.285.7|11.286.6|11.287.6|11.288.6|11.289.7|11.290.7|11.291.6|11.292.6|11.293.7|11.294.7|11.295.6|11.296.7|11.297.6|11.298.6|11.299.6|11.300.6|11.301.6|11.302.6|11.303.7|11.304.6|11.305.6|11.306.7|11.307.6|\")\n    let sb_magician_right_easy = feedBank(\"11.159.6|11.160.6|11.161.7|11.162.6|11.163.7|11.164.7|11.165.6|11.166.6|11.167.7|11.168.7|11.169.6|11.170.8|11.171.7|11.172.7|11.173.6|11.174.6|11.175.6|11.176.6|11.177.7|11.178.6|11.179.6|11.180.6|11.181.6|11.182.7|11.183.6|11.184.6|11.185.6|11.186.6|11.187.8|11.188.7|11.189.6|11.190.6|11.191.6|11.192.6|11.193.6|11.194.6|11.195.5|11.196.6|11.197.6|11.198.6|11.199.7|11.200.6|11.201.6|11.202.6|11.203.6|11.204.6|11.205.6|11.206.6|11.207.6|11.208.6|11.209.6|11.210.7|11.211.7|11.212.7|11.213.6|11.214.7|11.215.7|11.216.6|11.217.7|11.218.6\")\n    let sb_magician_right_medium = feedBank(\"11.219.7|11.220.6|11.221.6|11.222.6|11.223.6|11.224.6|11.225.7|11.226.7|11.227.6|11.228.6|11.229.6|11.230.8|11.231.7|11.232.7|11.233.6|11.234.6|11.235.6|11.236.8|11.237.7|11.238.7|11.239.6|11.240.6|11.241.8|11.242.7|11.243.7|11.244.6|11.245.6|11.246.7|11.247.7|11.248.7|11.249.7|11.250.6|11.251.6|11.252.6|11.253.6|11.254.6|11.255.6|11.256.6|11.257.6|11.258.7|11.259.7|11.260.7|11.261.6|11.262.6|11.263.6|11.264.6|11.265.6|11.266.6|11.267.7|11.268.6|11.269.6|11.270.6|11.271.6|11.272.6|11.273.6|11.274.6|11.275.7|11.276.6|11.277.6|11.278.7|11.279.7|11.280.7|11.281.6|11.282.6|11.283.7|11.284.9|11.285.7|11.286.6|11.287.6\")\n    let sb_magician_right_hard = feedBank(\"11.288.6|11.289.7|11.290.7|11.291.6|11.292.6|11.293.7|11.294.7|11.295.6|11.296.7|11.297.6|11.298.6|11.299.6|11.300.6|11.301.6|11.302.6|11.303.7|11.304.6|11.305.6|11.306.7|11.307.6|11.308.7|11.309.6|11.310.6|11.311.6|11.312.7|11.313.7|11.314.6|11.315.7\")\n    let sb_mario_name = feedBank(\"12.1.2|12.2.1|12.4.2|12.5.3\")\n    let sb_mario_intro = feedBank(\"12.3.4|12.6.2|12.7.212.112.1|12.113.1|\")\n    let sb_mario_ready = feedBank(\"12.8.1|12.9.2|12.10.2|12.11.1|12.12.1|12.13.2|12.14.2|12.15.2|12.16.2|12.17.2|12.18.1\")\n    let sb_mario_yay = feedBank(\"12.19.1|12.20.1|12.21.1|12.22.1|12.23.1|12.24.1|12.25.1|12.26.1|12.27.1|12.28.1|12.29.1|12.30.1|12.31.1|12.32.1|12.33.1|12.34.1|12.35.1|12.36.1|12.37.1|12.38.1|12.39.1|12.40.1|12.41.1|12.42.1|12.43.1|12.44.1|12.45.1|12.46.1|12.47.1|12.48.1|12.49.1|12.50.1|12.51.2|12.52.2|12.53.2|12.54.2|12.55.2|12.56.2|12.57.2|12.58.2|12.59.2|12.60.2|12.61.2|12.62.2\")\n    let sb_mario_success = feedBank(\"12.63.1|12.64.2|12.65.2|12.66.2|12.67.2|12.68.3|12.69.3|12.70.3|12.71.3|12.72.3\")\n    let sb_mario_won = feedBank(\"12.73.2|12.74.2|12.75.3|12.76.3|12.77.3\")\n    let sb_mario_ouch = feedBank(\"12.78.1|12.79.1|12.80.1|12.81.1|12.82.1|12.83.1|12.84.1|12.85.1|12.86.1|12.87.1|12.88.1|12.89.1|12.90.1|12.91.1|12.92.1|12.93.1|12.94.1|12.95.1\")\n    let sb_mario_nay = feedBank(\"12.96.1|12.97.1|12.98.1|12.99.1|12.100.1|12.101.1|12.102.2|12.103.1|12.104.1|12.105.1|12.106.1|12.107.1|12.108.1|12.109.1|12.110.2|12.111.2\")\n    let sb_mario_failure = feedBank(\"12.114.2|12.115.2|12.116.2|12.117.1\")\n    let sb_mario_lost = feedBank(\"12.118.3|12.119.3|12.120.4|12.121.1\")\n    let sb_mario_hurry = feedBank(\"12.122.44\")\n    \n    let playlist_tutorial = makePlaylist(sb_music_tutorial)\n    let playlist_awaiting = makePlaylist(sb_music_awaiting)\n    let playlist_level = makePlaylist(sb_music_level)\n    let playlist_won = makePlaylist(sb_music_won)\n    let playlist_lost = makePlaylist(sb_music_lost)\n    let playlist_correct = makePlaylist(sb_sfx_correct)\n    let playlist_incorrect = makePlaylist(sb_sfx_incorrect)\n    let playlist_intro = makePlaylist(sb_music_intro)\n    let playlist_boom = makePlaylist(sb_sfx_boom)\n    let playlist_smash = makePlaylist(sb_sfx_smash)\n    let playlist_falling = makePlaylist(sb_sfx_falling)\n    let playlist_cannon = makePlaylist(sb_sfx_cannon)\n    let playlist_fire = makePlaylist(sb_sfx_fire)\n    let playlist_ghost = makePlaylist(sb_sfx_ghost)\n    let playlist_hit = makePlaylist(sb_sfx_hit)\n    let playlist_slash = makePlaylist(sb_sfx_slash)\n    let playlist_zap = makePlaylist(sb_sfx_zap)\n    let playlist_splash = makePlaylist(sb_sfx_splash)\n    let playlist_magician_left_easy = makePlaylist(sb_magician_left_easy)\n    let playlist_magician_left_medium = makePlaylist(sb_magician_left_medium)\n    let playlist_magician_left_hard = makePlaylist(sb_magician_left_hard)\n    let playlist_magician_right_easy = makePlaylist(sb_magician_right_easy)\n    let playlist_magician_right_medium = makePlaylist(sb_magician_right_medium)\n    let playlist_magician_right_hard = makePlaylist(sb_magician_right_hard)\n    let playlist_mario_name = makePlaylist(sb_mario_name)\n    let playlist_mario_intro = makePlaylist(sb_mario_intro)\n    let playlist_mario_ready = makePlaylist(sb_mario_ready)\n    let playlist_mario_yay = makePlaylist(sb_mario_yay)\n    let playlist_mario_success = makePlaylist(sb_mario_success)\n    let playlist_mario_won = makePlaylist(sb_mario_won)\n    let playlist_mario_ouch = makePlaylist(sb_mario_ouch)\n    let playlist_mario_nay = makePlaylist(sb_mario_nay)\n    let playlist_mario_failure = makePlaylist(sb_mario_failure)\n    let playlist_mario_lost = makePlaylist(sb_mario_lost)\n    let playlist_mario_hurry = makePlaylist(sb_mario_hurry)\n    let playtimeMusic = 0\n    let playtimePlayer = 0\n    let playtimeSfxVoice = 0\n\n    function takeRotate(PlaylistIn: number[]) {\n        let returnTrack = PlaylistIn.shift()\n        PlaylistIn.push(returnTrack)\n        return returnTrack\n    }\n    function feedBank(BankString: string) {\n        let returnBank: number[][] = []\n        let BankSplit = BankString.split(\"|\")\n        for (let soundString of BankSplit) {\n            returnBank.push([parseFloat(soundString.split(\".\")[0]), parseFloat(soundString.split(\".\")[1]), parseFloat(soundString.split(\".\")[2])])\n        }\n        return returnBank\n    }\n    function makePlaylist(SoundBank: any[]) {\n        let returnList: number[] = []\n        let orderedList: number[] = []\n        for (let soundNo = 0; soundNo <= SoundBank.length - 1; soundNo++) {\n            orderedList.push(soundNo)\n        }\n        while (orderedList.length > 0) {\n            let randTrack = randint(0, orderedList.length - 1)\n            returnList.push(orderedList.removeAt(randTrack))\n        }\n        return returnList\n    }\n    function bankPlay(mp3bit:mp3type, SoundBank: number[][], trackIndex: number) {\n        let theSong = SoundBank[trackIndex]\n        if (mp3bit == mp3type.music) {\n            serial.redirect(mp3musicPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimeMusic = theSong[2]\n        } else if (mp3bit == mp3type.player) {\n            serial.redirect(mp3playerPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimePlayer = theSong[2]\n        } else if (mp3bit == mp3type.sfxvoice) {\n            serial.redirect(mp3sfxPin, SerialPin.USB_RX, BaudRate.BaudRate9600)\n            playtimeSfxVoice = theSong[2]\n        }\n        dataArr[3] = 15\n        dataArr[5] = theSong[0]\n        dataArr[6] = theSong[1]\n        mp3_checkSum()\n        mp3_sendDataFast()\n    }\n\n\n    //% blockId=NL_MP3_PlaytimeMusic\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of music\"\n    export function mp3durationMusic(): number{\n        return playtimeMusic\n    }\n\n    //% blockId=NL_MP3_PlaytimePlayer\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of player sound\"\n    export function mp3durationPlayer(): number {\n        return playtimePlayer\n    }\n\n    //% blockId=NL_MP3_PlaytimeSFX\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"duration of sfx/voice\"\n    export function mp3durationSfxVoice(): number {\n        return playtimeSfxVoice\n    }\n\n\n\n    //% blockId=NL_MP3_MusicPlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %genre music\"\n    export function mp3musicPlay(genre: musicGenre): void {\n        if (genre == musicGenre.tutorial){\n            bankPlay(mp3type.music, sb_music_tutorial, takeRotate(playlist_tutorial))\n        } else if (genre == musicGenre.awaiting) {\n            bankPlay(mp3type.music, sb_music_awaiting, takeRotate(playlist_awaiting))\n        } else if (genre == musicGenre.intro){\n            bankPlay(mp3type.music, sb_music_intro, takeRotate(playlist_intro))\n        } else if (genre == musicGenre.level) {\n            bankPlay(mp3type.music, sb_music_level, takeRotate(playlist_level))\n        } else if (genre == musicGenre.won) {\n            bankPlay(mp3type.music, sb_music_won, takeRotate(playlist_won))\n        } else if (genre == musicGenre.lost) {\n            bankPlay(mp3type.music, sb_music_lost, takeRotate(playlist_lost))\n        }\n    }\n\n    //% blockId=NL_MP3_PlayerSay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %saying as player\"\n    export function mp3sayPlay(saying: playerSaying): void {\n        if(saying == playerSaying.ready){\n            bankPlay(mp3type.player, sb_mario_ready, takeRotate(playlist_mario_ready))\n        }else if (saying == playerSaying.yay){\n            bankPlay(mp3type.player, sb_mario_yay, takeRotate(playlist_mario_yay))\n        } else if (saying == playerSaying.intro) {\n            bankPlay(mp3type.player, sb_mario_intro, takeRotate(playlist_mario_intro))\n        } else if (saying == playerSaying.nay) {\n            bankPlay(mp3type.player, sb_mario_nay, takeRotate(playlist_mario_nay))\n        } else if (saying == playerSaying.ouch) {\n            bankPlay(mp3type.player, sb_mario_ouch, takeRotate(playlist_mario_ouch))\n        } else if (saying == playerSaying.success) {\n            bankPlay(mp3type.player, sb_mario_success, takeRotate(playlist_mario_success))\n        } else if (saying == playerSaying.failure) {\n            bankPlay(mp3type.player, sb_mario_failure, takeRotate(playlist_mario_failure))\n        } else if (saying == playerSaying.won) {\n            bankPlay(mp3type.player, sb_mario_won, takeRotate(playlist_mario_won))\n        } else if (saying == playerSaying.lost) {\n            bankPlay(mp3type.player, sb_mario_lost, takeRotate(playlist_mario_lost))\n        } else if (saying == playerSaying.hurry) {\n            bankPlay(mp3type.player, sb_mario_hurry, takeRotate(playlist_mario_hurry))\n        }\n    }\n\n    //% blockId=NL_MP3_VoicePlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Say %voice as voice\"\n    export function mp3voicePlay(voice: voiceSaying): void {\n        if (voice == voiceSaying.name) {\n\n        } else if (voice == voiceSaying.begin) {\n\n        } else if (voice == voiceSaying.retry) {\n\n        } else if (voice == voiceSaying.next) {\n\n        } else if (voice == voiceSaying.complete) {\n\n        } else if (voice == voiceSaying.gameover) {\n\n        } else if (voice == voiceSaying.welcome) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 0)\n        } else if (voice == voiceSaying.intro) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 1)\n        } else if (voice == voiceSaying.howto1) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 2)\n        } else if (voice == voiceSaying.howto2) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 3)\n        } else if (voice == voiceSaying.howto3) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 4)\n        } else if (voice == voiceSaying.howto4) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 5)\n        } else if (voice == voiceSaying.howto5) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 6)\n        } else if (voice == voiceSaying.howto6) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 7)\n        } else if (voice == voiceSaying.howto7) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 8)\n        } else if (voice == voiceSaying.howto8) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_voice, 9)\n        } else if (voice == voiceSaying.howto9) {\n\n        }\n    }\n\n    //% blockId=NL_MP3_MagicianSay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Magician says on the %side difficulty %difficulty\"\n    export function mp3magician(side: magicianSaysSide, difficulty: magicianDifficulty): void {\n        if (side == magicianSaysSide.left) {\n            if (difficulty == magicianDifficulty.easy) {\n\n            } else if (difficulty = magicianDifficulty.medium) {\n\n            } else if (difficulty = magicianDifficulty.hard) {\n\n            }\n        } else if (side = magicianSaysSide.right) {\n            if (difficulty == magicianDifficulty.easy) {\n\n            } else if (difficulty = magicianDifficulty.medium) {\n\n            } else if (difficulty = magicianDifficulty.hard) {\n\n            }\n        } \n    }\n\n    //% blockId=NL_MP3_SfxPlay\n    //% subcategory=\"MP3\" group=\"MP3\"\n    //% block=\"Play %sfx sound effect\"\n    export function mp3sfxPlay(sfx: sfxType): void {\n        if(sfx == sfxType.correct){\n            bankPlay(mp3type.sfxvoice, sb_sfx_correct, takeRotate(playlist_correct))\n        }else if (sfx == sfxType.incorrect){\n            bankPlay(mp3type.sfxvoice, sb_sfx_incorrect, takeRotate(playlist_incorrect))\n        }else if (sfx == sfxType.ghost){\n            bankPlay(mp3type.sfxvoice, sb_sfx_ghost, takeRotate(playlist_ghost))\n        }else if (sfx == sfxType.fire){\n            bankPlay(mp3type.sfxvoice, sb_sfx_fire, takeRotate(playlist_fire))\n        }else if (sfx == sfxType.explosion){\n            bankPlay(mp3type.sfxvoice, sb_sfx_boom, takeRotate(playlist_boom))\n        }else if (sfx == sfxType.splash){\n            bankPlay(mp3type.sfxvoice, sb_sfx_splash, takeRotate(playlist_splash))\n        } else if (sfx == sfxType.spark) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_zap, takeRotate(playlist_zap))\n        } else if (sfx == sfxType.slash) {\n            bankPlay(mp3type.sfxvoice, sb_sfx_slash, takeRotate(playlist_slash))\n        }\n    }\n/// END SOUND BANK ///\n\n/// BEGIN MOTOR & RELAY ///\n    const kong_address = 0x10\n    export enum MotorList { M1=1, M2=2 }\n    export enum motors{ redrack=16, shark=4, ghost=5, cannon=8, oarrack=7, shell=6, door=3, dragon=9, wheel=1, fan=2 }\n    export enum motorState { min, max, mid, off }\n    export enum fogLevels { none = 0, light = 1, medium = 2, heavy = 3 }\n    export enum sockState { dancing = 1, still = 0 }\n    let motor_wheel_max = 12; let motor_wheel_min = 0\n    let servo_redrack_max = 150; let servo_redrack_min = 100\n    let servo_cannon_min = 135; let servo_cannon_max = 65\n    let servo_shark_min = 20; let servo_shark_max = 85\n    let servo_oarrack_min = 60; let servo_oarrack_max = 110\n    let servo_ghost_min = 110; let servo_ghost_max = 40\n    let servo_shell_min = 170; let servo_shell_max = 100\n    let servo_door_min = 50; let servo_door_max = 140; let servo_door_mid = 100\n    let motor_fan_min = 0; let motor_fan_mid = 50; let motor_fan_max = 100\n    let servo_dragon_min = 90; let servo_dragon_max = 79\n\n    export function servoSet(servo: motors, angle: number): void {\n        let buf = pins.createBuffer(4);\n        buf[0] = servo;\n        buf[1] = angle;\n        buf[2] = 0;\n        buf[3] = 0;\n        pins.i2cWriteBuffer(kong_address, buf);\n    }\n\n    export function motorSpeed(motor: MotorList, speed: number): void {\n        let buf = pins.createBuffer(4);\n        buf[0] = motor\n        buf[1] = 1;\n        if (speed < 0) {\n            buf[1] = 2;\n            speed = speed * -1\n        }\n        buf[2] = speed;\n        buf[3] = 0;\n        pins.i2cWriteBuffer(kong_address, buf);\n    }\n\n    //% blockId=NL_MOTOR_Set \n    //% block=\"Set %motor to %state\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function motorSet(motor:motors, state:motorState):void{\n        if (motor == motors.redrack){\n            if (state == motorState.min){ servoSet(motor, servo_redrack_min) } \n            else if (state == motorState.max){ servoSet(motor, servo_redrack_max) }\n        } if (motor == motors.shark) {\n            if (state == motorState.min) { servoSet(motor, servo_shark_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_shark_max) }\n        } if (motor == motors.ghost) {\n            if (state == motorState.min) { servoSet(motor, servo_ghost_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_ghost_max) }\n        } if (motor == motors.cannon) {\n            if (state == motorState.min) { servoSet(motor, servo_cannon_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_cannon_max) }\n        } if (motor == motors.oarrack) {\n            if (state == motorState.min) { servoSet(motor, servo_oarrack_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_oarrack_max) }\n        } if (motor == motors.shell) {\n            if (state == motorState.min) { servoSet(motor, servo_shell_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_shell_max) }\n        } if (motor == motors.door) {\n            if (state == motorState.min) { servoSet(motor, servo_door_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_door_max) }\n            else if (state == motorState.mid) { servoSet(motor, servo_door_mid) }\n        } if (motor == motors.dragon) {\n            if (state == motorState.min) { servoSet(motor, servo_dragon_min) }\n            else if (state == motorState.max) { servoSet(motor, servo_dragon_max) }\n        } if (motor == motors.wheel) {\n            if (state == motorState.min) { motorSpeed(MotorList.M1, motor_wheel_min) }\n            else if (state == motorState.max) { motorSpeed(MotorList.M1, motor_wheel_max) }\n            else if (state == motorState.off) { motorSpeed(MotorList.M1, 0) }\n        } if (motor == motors.fan) {\n            if (state == motorState.min) { motorSpeed(MotorList.M2, motor_fan_min) }\n            else if (state == motorState.mid) { motorSpeed(MotorList.M2, motor_fan_mid) }\n            else if (state == motorState.max) { motorSpeed(MotorList.M2, motor_fan_max) }\n            else if (state == motorState.off) { motorSpeed(MotorList.M2, 0) }\n        }\n    }\n\n    //% blockId=NL_RELAY_FogSet \n    //% block=\"set fog level to %level\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function setFog(fog:fogLevels):void{\n        if (fog == fogLevels.none){\n            pins.digitalWritePin(DigitalPin.P2, 1)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 1)\n        } else if (fog == fogLevels.light){\n            pins.digitalWritePin(DigitalPin.P2, 1)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        } else if (fog == fogLevels.medium) {\n            pins.digitalWritePin(DigitalPin.P2, 0)\n            pins.digitalWritePin(DigitalPin.P8, 1)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        } else if (fog == fogLevels.heavy) {\n            pins.digitalWritePin(DigitalPin.P2, 0)\n            pins.digitalWritePin(DigitalPin.P8, 0)\n            pins.digitalWritePin(DigitalPin.P13, 0)\n        }\n    }\n\n    //% blockId=NL_RELAY_SockSet\n    //% block=\"set dancing sock to %sockState\"\n    //% subcategory=\"Motor\" group=\"Motor\"\n    export function setSock(state: sockState): void {\n        if(state==sockState.dancing){ pins.digitalWritePin(DigitalPin.P12, 0) }\n        else{ pins.digitalWritePin(DigitalPin.P12, 1) }\n    }\n\n/// END MOTOR & RELAY ///\n\n/// BEGIN OLED\n\n    let d1 = [0, 0, 0, 20, 36, 35, 54, 0, 28, 65, 8, 8, 160, 8, 96, 32, 62, 0, 98, 34, 24, 39, 60, 1, 54, 6, 0, 0, 8, 20, 65, 2, 50, 126, 127, 62, 127, 127, 127, 62, 127, 65, 32, 127, 127, 127, 127, 62, 127, 62, 127, 38, 1, 63, 31, 63, 99, 3, 97, 127, 2, 65, 4, 128, 1, 32, 127, 56, 56, 56, 8, 24, 127, 0, 128, 127, 65, 124, 124, 56, 252, 24, 0, 72, 4, 60, 28, 60, 68, 28, 68, 8, 0, 65, 2]\n    let d2 = [0, 95, 7, 127, 42, 19, 73, 5, 34, 34, 42, 8, 96, 8, 96, 16, 81, 66, 81, 65, 20, 69, 74, 113, 73, 73, 54, 172, 20, 20, 34, 1, 73, 9, 73, 65, 65, 73, 9, 65, 8, 127, 64, 8, 64, 2, 4, 65, 9, 65, 9, 73, 1, 64, 32, 64, 20, 4, 81, 65, 4, 65, 2, 128, 2, 84, 72, 68, 68, 84, 126, 164, 8, 125, 132, 16, 127, 4, 8, 68, 36, 36, 124, 84, 127, 64, 32, 64, 40, 160, 100, 54, 127, 54, 1]\n    let d3 = [0, 0, 0, 20, 127, 8, 85, 3, 65, 28, 28, 62, 0, 8, 0, 8, 73, 127, 73, 73, 18, 69, 73, 9, 73, 73, 54, 108, 34, 20, 20, 81, 121, 9, 73, 65, 65, 73, 9, 65, 8, 65, 65, 20, 64, 12, 8, 65, 9, 81, 25, 73, 127, 64, 64, 56, 8, 120, 73, 65, 8, 127, 1, 128, 4, 84, 68, 68, 68, 84, 9, 164, 4, 0, 125, 40, 64, 24, 4, 68, 36, 36, 8, 84, 68, 64, 64, 48, 16, 160, 84, 65, 0, 8, 1]\n    let d4 = [0, 0, 7, 127, 42, 100, 34, 0, 0, 0, 42, 8, 0, 8, 0, 4, 69, 64, 73, 73, 127, 69, 73, 5, 73, 41, 0, 0, 65, 20, 8, 9, 65, 9, 73, 65, 34, 73, 9, 81, 8, 0, 63, 34, 64, 2, 16, 65, 9, 33, 41, 73, 1, 64, 32, 64, 20, 4, 69, 0, 16, 0, 2, 128, 0, 84, 68, 40, 72, 84, 2, 164, 4, 0, 0, 68, 0, 4, 124, 56, 24, 252, 4, 36, 0, 124, 32, 64, 40, 124, 76, 0, 0, 0, 2]\n    let d5 = [0, 0, 0, 20, 18, 98, 80, 0, 0, 0, 8, 8, 0, 8, 0, 2, 62, 0, 70, 54, 16, 57, 48, 3, 54, 30, 0, 0, 0, 20, 0, 6, 62, 126, 54, 34, 28, 65, 1, 114, 127, 0, 1, 65, 64, 127, 127, 62, 6, 94, 70, 50, 1, 63, 31, 63, 99, 3, 67, 0, 32, 0, 4, 128, 0, 120, 56, 0, 127, 24, 0, 124, 120, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, 0, 28, 60, 68, 0, 68, 0, 0, 0, 1]\n\n    let display = [\" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\")]\n    let desired = [\" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\"), \" . . . . . . . . . . . . . . . \".split(\".\")]\n\n    //% blockId=NL_OLED_Update3\n    //% block=\"oled update from buffer\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function changeThree(): void{\n        let updated: string[][] = []\n        let count = 0\n        for (let row=0; row<8; row++){\n            for(let col=0; col<16; col++){\n                let refChar = desired[row][col]\n                if (refChar != display[row][col]){\n                    writeChar(refChar,row,col)\n                    display[row][col] = refChar\n                    count++\n                    if (count >= 3){\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    //% blockId=NL_OLED_PrintLine\n    //% block=\"print %text to oled buffer line %line\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function printLine(text:any, line:number): void{\n        let thisText = text + \"\"\n        for (let i = 0; i < 16; i++){\n            if (i < thisText.length){\n                desired[line][i]=thisText.charAt(i)\n            } else{\n                desired[line][i]=\" \"\n            }\n        }\n    }\n\n    function oledcmd(c: number) {\n        pins.i2cWriteNumber(0x3c, c, NumberFormat.UInt16BE);\n    }\n\n    function setText(row: number, column: number) {\n        oledcmd(0xB0 + row);            //set page address\n        oledcmd(0x00 + (8 * column & 0x0F));  //set column lower address\n        oledcmd(0x10 + ((8 * column >> 4) & 0x0F));   //set column higher address\n    }\n\n    //% blockId=NL_OLED_Init \n    //% block=\"initiate the oled screen\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function oledinit(): void {\n        oledcmd(0xAE);  // Set display OFF\n        oledcmd(0xD5);  // Set Display Clock Divide Ratio / OSC Frequency 0xD4\n        oledcmd(0x80);  // Display Clock Divide Ratio / OSC Frequency \n        oledcmd(0xA8);  // Set Multiplex Ratio\n        oledcmd(0x3F);  // Multiplex Ratio for 128x64 (64-1)\n        oledcmd(0xD3);  // Set Display Offset\n        oledcmd(0x00);  // Display Offset\n        oledcmd(0x40);  // Set Display Start Line\n        oledcmd(0x8D);  // Set Charge Pump\n        oledcmd(0x14);  // Charge Pump (0x10 External, 0x14 Internal DC/DC)\n        oledcmd(0xA1);  // Set Segment Re-Map\n        oledcmd(0xC8);  // Set Com Output Scan Direction\n        oledcmd(0xDA);  // Set COM Hardware Configuration\n        oledcmd(0x12);  // COM Hardware Configuration\n        oledcmd(0x81);  // Set Contrast\n        oledcmd(0xCF);  // Contrast\n        oledcmd(0xD9);  // Set Pre-Charge Period\n        oledcmd(0xF1);  // Set Pre-Charge Period (0x22 External, 0xF1 Internal)\n        oledcmd(0xDB);  // Set VCOMH Deselect Level\n        oledcmd(0x40);  // VCOMH Deselect Level\n        oledcmd(0xA4);  // Set all pixels OFF\n        oledcmd(0xA6);  // Set display not inverted\n        oledcmd(0xAF);  // Set display On\n        for (let j = 0; j < 8; j++) {\n            setText(j, 0);\n            {\n                for (let i = 0; i < 16; i++)  //clear all columns\n                {\n                    writeChar(\" \",j,i)\n                }\n            }\n        }\n    }\n\n    function writeChar(char: string, row: number, column: number) {\n        setText(row, column)\n        let i = char.charCodeAt(0) - 32\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d1[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d2[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d3[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d4[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000 + d5[i], NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n        pins.i2cWriteNumber(0x3c, 0x4000, NumberFormat.UInt16BE)\n    }\n\n/// END OLED\n\n\n/// BEGIN DIGITS\n\n    let _SEGMENTS = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71];\n\n    //% blockId=nl_digits_create block=\"4-Digit cPin %cPin dPin %dPin\"\n    //% subcategory=\"Display\" group=\"Display\"\n    export function tm1637Create(cPin: DigitalPin, dPin: DigitalPin): TM1637LEDs {\n        let display = new TM1637LEDs();\n        display.clk = cPin\n        display.dio = dPin\n        display.brightness = 7;\n        display.init();\n        return display;\n    }\n    export class TM1637LEDs {\n        buf: Buffer;\n        clk: DigitalPin;\n        dio: DigitalPin;\n        _ON: number;\n        brightness: number;\n        init(): void {\n            pins.digitalWritePin(this.clk, 0);\n            pins.digitalWritePin(this.dio, 0);\n            this._ON = 8;\n            this.buf = pins.createBuffer(4);\n            this.clear();\n        }\n        _start() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _stop() {\n            pins.digitalWritePin(this.dio, 0);\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.dio, 1);\n        }\n        _write_data_cmd() {\n            this._start();\n            this._write_byte(0x40);\n            this._stop();\n        }\n        _write_dsp_ctrl() {\n            this._start();\n            this._write_byte(0x80 | this._ON | this.brightness);\n            this._stop();\n        }\n        _write_byte(b: number) {\n            for (let i = 0; i < 8; i++) {\n                pins.digitalWritePin(this.dio, (b >> i) & 1);\n                pins.digitalWritePin(this.clk, 1);\n                pins.digitalWritePin(this.clk, 0);\n            }\n            pins.digitalWritePin(this.clk, 1);\n            pins.digitalWritePin(this.clk, 0);\n        }\n        _intensity(val: number = 7) {\n            this._ON = 8;\n            this.brightness = val - 1;\n            this._write_data_cmd();\n            this._write_dsp_ctrl();\n        }\n        _dat(bit: number, dat: number) {\n            this._write_data_cmd();\n            this._start();\n            this._write_byte(0xC0 | (bit % 4))\n            this._write_byte(dat);\n            this._stop();\n            this._write_dsp_ctrl();\n        }\n        \n        //% blockId=nl_digits_digit block=\"%display|show single number|%num|at digit|%bit\"\n        //% subcategory=\"Display\" group=\"Display\"\n        //% bit.defl=1 bit.min=0 bit.max=9\n        showbit(num: number = 5, bit: number = 0) {\n            bit = Math.map(bit, 4, 1, 0, 3)\n            this.buf[bit % 4] = _SEGMENTS[num % 16]\n            this._dat(bit, _SEGMENTS[num % 16])\n        }\n\n        //% blockId=nl_digits_number block=\"%display|show number|%num\"\n        //% subcategory=\"Display\" group=\"Display\"\n        showNumber(num: number) {\n            if (num < 0) {\n                num = -num\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n                this._dat(0, 0x40) // '-'\n                // this._dat(0, 0) // blank\n            }\n            else {\n                this.showbit(Math.idiv(num, 1000) % 10)\n                this.showbit(num % 10, 1)\n                this.showbit(Math.idiv(num, 10) % 10, 2)\n                this.showbit(Math.idiv(num, 100) % 10, 3)\n            }\n        }\n\n        //% blockId=\"nl_digits_clear\" block=\"clear display %display\"\n        //% subcategory=\"Display\" group=\"Display\"\n        clear() {\n            for (let i = 0; i < 4; i++) {\n                this._dat(i, 0)\n                this.buf[i] = 0\n            }\n        }\n    }\n\n/// END DIGITS\n\n}\n\n\n","pxt.json":"{\n    \"name\": \"NotLegosMaster\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"displaySendBuffer.asm\",\n        \"planetxbasic.ts\",\n        \"notlegos.ts\"\n    ],\n    \"testFiles\": [\n        \"test.ts\"\n    ],\n    \"targetVersions\": {\n        \"target\": \"7.0.42\",\n        \"targetId\": \"microbit\"\n    },\n    \"supportedTargets\": [\n        \"microbit\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n","test.ts":""}}],"shares":[],"lastSaveTime":1728849789203}